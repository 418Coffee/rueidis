// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rueian/rueidis/internal/cache (interfaces: Cache)

// Package cachemock is a generated GoMock package.
package cachemock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/rueian/rueidis/internal/proto"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(arg0 []proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), arg0)
}

// DeleteAll mocks base method.
func (m *MockCache) DeleteAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAll")
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockCacheMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockCache)(nil).DeleteAll))
}

// GetOrPrepare mocks base method.
func (m *MockCache) GetOrPrepare(arg0 string, arg1 time.Duration) (proto.Message, chan struct{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrPrepare", arg0, arg1)
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(chan struct{})
	return ret0, ret1
}

// GetOrPrepare indicates an expected call of GetOrPrepare.
func (mr *MockCacheMockRecorder) GetOrPrepare(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrPrepare", reflect.TypeOf((*MockCache)(nil).GetOrPrepare), arg0, arg1)
}

// Update mocks base method.
func (m *MockCache) Update(arg0 string, arg1 proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update.
func (mr *MockCacheMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCache)(nil).Update), arg0, arg1)
}
