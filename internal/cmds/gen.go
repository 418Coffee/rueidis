// Code generated DO NOT EDIT

package cmds

import "strconv"

type AclCat Completed

type SAclCat SCompleted

func (b *Builder) AclCat() AclCat {
	return AclCat{cs: append(b.get(), "ACL", "CAT"), ks: InitSlot}
}

func (b *SBuilder) AclCat() SAclCat {
	return SAclCat{cs: append(b.get(), "ACL", "CAT"), ks: InitSlot}
}

func (c AclCat) Categoryname(categoryname string) AclCatCategoryname {
	c.cs = append(c.cs, categoryname)
	return (AclCatCategoryname)(c)
}

func (c SAclCat) Categoryname(categoryname string) SAclCatCategoryname {
	c.cs = append(c.cs, categoryname)
	return (SAclCatCategoryname)(c)
}

func (c AclCat) Build() Completed {
	return Completed(c)
}

func (c SAclCat) Build() SCompleted {
	return SCompleted(c)
}

type AclCatCategoryname Completed

type SAclCatCategoryname SCompleted

func (c AclCatCategoryname) Build() Completed {
	return Completed(c)
}

func (c SAclCatCategoryname) Build() SCompleted {
	return SCompleted(c)
}

type AclDeluser Completed

type SAclDeluser SCompleted

func (b *Builder) AclDeluser() AclDeluser {
	return AclDeluser{cs: append(b.get(), "ACL", "DELUSER"), ks: InitSlot}
}

func (b *SBuilder) AclDeluser() SAclDeluser {
	return SAclDeluser{cs: append(b.get(), "ACL", "DELUSER"), ks: InitSlot}
}

func (c AclDeluser) Username(username ...string) AclDeluserUsername {
	c.cs = append(c.cs, username...)
	return (AclDeluserUsername)(c)
}

func (c SAclDeluser) Username(username ...string) SAclDeluserUsername {
	c.cs = append(c.cs, username...)
	return (SAclDeluserUsername)(c)
}

type AclDeluserUsername Completed

type SAclDeluserUsername SCompleted

func (c AclDeluserUsername) Username(username ...string) AclDeluserUsername {
	c.cs = append(c.cs, username...)
	return c
}

func (c SAclDeluserUsername) Username(username ...string) SAclDeluserUsername {
	c.cs = append(c.cs, username...)
	return c
}

func (c AclDeluserUsername) Build() Completed {
	return Completed(c)
}

func (c SAclDeluserUsername) Build() SCompleted {
	return SCompleted(c)
}

type AclGenpass Completed

type SAclGenpass SCompleted

func (b *Builder) AclGenpass() AclGenpass {
	return AclGenpass{cs: append(b.get(), "ACL", "GENPASS"), ks: InitSlot}
}

func (b *SBuilder) AclGenpass() SAclGenpass {
	return SAclGenpass{cs: append(b.get(), "ACL", "GENPASS"), ks: InitSlot}
}

func (c AclGenpass) Bits(bits int64) AclGenpassBits {
	c.cs = append(c.cs, strconv.FormatInt(bits, 10))
	return (AclGenpassBits)(c)
}

func (c SAclGenpass) Bits(bits int64) SAclGenpassBits {
	c.cs = append(c.cs, strconv.FormatInt(bits, 10))
	return (SAclGenpassBits)(c)
}

func (c AclGenpass) Build() Completed {
	return Completed(c)
}

func (c SAclGenpass) Build() SCompleted {
	return SCompleted(c)
}

type AclGenpassBits Completed

type SAclGenpassBits SCompleted

func (c AclGenpassBits) Build() Completed {
	return Completed(c)
}

func (c SAclGenpassBits) Build() SCompleted {
	return SCompleted(c)
}

type AclGetuser Completed

type SAclGetuser SCompleted

func (b *Builder) AclGetuser() AclGetuser {
	return AclGetuser{cs: append(b.get(), "ACL", "GETUSER"), ks: InitSlot}
}

func (b *SBuilder) AclGetuser() SAclGetuser {
	return SAclGetuser{cs: append(b.get(), "ACL", "GETUSER"), ks: InitSlot}
}

func (c AclGetuser) Username(username string) AclGetuserUsername {
	c.cs = append(c.cs, username)
	return (AclGetuserUsername)(c)
}

func (c SAclGetuser) Username(username string) SAclGetuserUsername {
	c.cs = append(c.cs, username)
	return (SAclGetuserUsername)(c)
}

type AclGetuserUsername Completed

type SAclGetuserUsername SCompleted

func (c AclGetuserUsername) Build() Completed {
	return Completed(c)
}

func (c SAclGetuserUsername) Build() SCompleted {
	return SCompleted(c)
}

type AclHelp Completed

type SAclHelp SCompleted

func (b *Builder) AclHelp() AclHelp {
	return AclHelp{cs: append(b.get(), "ACL", "HELP"), ks: InitSlot}
}

func (b *SBuilder) AclHelp() SAclHelp {
	return SAclHelp{cs: append(b.get(), "ACL", "HELP"), ks: InitSlot}
}

func (c AclHelp) Build() Completed {
	return Completed(c)
}

func (c SAclHelp) Build() SCompleted {
	return SCompleted(c)
}

type AclList Completed

type SAclList SCompleted

func (b *Builder) AclList() AclList {
	return AclList{cs: append(b.get(), "ACL", "LIST"), ks: InitSlot}
}

func (b *SBuilder) AclList() SAclList {
	return SAclList{cs: append(b.get(), "ACL", "LIST"), ks: InitSlot}
}

func (c AclList) Build() Completed {
	return Completed(c)
}

func (c SAclList) Build() SCompleted {
	return SCompleted(c)
}

type AclLoad Completed

type SAclLoad SCompleted

func (b *Builder) AclLoad() AclLoad {
	return AclLoad{cs: append(b.get(), "ACL", "LOAD"), ks: InitSlot}
}

func (b *SBuilder) AclLoad() SAclLoad {
	return SAclLoad{cs: append(b.get(), "ACL", "LOAD"), ks: InitSlot}
}

func (c AclLoad) Build() Completed {
	return Completed(c)
}

func (c SAclLoad) Build() SCompleted {
	return SCompleted(c)
}

type AclLog Completed

type SAclLog SCompleted

func (b *Builder) AclLog() AclLog {
	return AclLog{cs: append(b.get(), "ACL", "LOG"), ks: InitSlot}
}

func (b *SBuilder) AclLog() SAclLog {
	return SAclLog{cs: append(b.get(), "ACL", "LOG"), ks: InitSlot}
}

func (c AclLog) CountOrReset(countOrReset string) AclLogCountOrReset {
	c.cs = append(c.cs, countOrReset)
	return (AclLogCountOrReset)(c)
}

func (c SAclLog) CountOrReset(countOrReset string) SAclLogCountOrReset {
	c.cs = append(c.cs, countOrReset)
	return (SAclLogCountOrReset)(c)
}

func (c AclLog) Build() Completed {
	return Completed(c)
}

func (c SAclLog) Build() SCompleted {
	return SCompleted(c)
}

type AclLogCountOrReset Completed

type SAclLogCountOrReset SCompleted

func (c AclLogCountOrReset) Build() Completed {
	return Completed(c)
}

func (c SAclLogCountOrReset) Build() SCompleted {
	return SCompleted(c)
}

type AclSave Completed

type SAclSave SCompleted

func (b *Builder) AclSave() AclSave {
	return AclSave{cs: append(b.get(), "ACL", "SAVE"), ks: InitSlot}
}

func (b *SBuilder) AclSave() SAclSave {
	return SAclSave{cs: append(b.get(), "ACL", "SAVE"), ks: InitSlot}
}

func (c AclSave) Build() Completed {
	return Completed(c)
}

func (c SAclSave) Build() SCompleted {
	return SCompleted(c)
}

type AclSetuser Completed

type SAclSetuser SCompleted

func (b *Builder) AclSetuser() AclSetuser {
	return AclSetuser{cs: append(b.get(), "ACL", "SETUSER"), ks: InitSlot}
}

func (b *SBuilder) AclSetuser() SAclSetuser {
	return SAclSetuser{cs: append(b.get(), "ACL", "SETUSER"), ks: InitSlot}
}

func (c AclSetuser) Username(username string) AclSetuserUsername {
	c.cs = append(c.cs, username)
	return (AclSetuserUsername)(c)
}

func (c SAclSetuser) Username(username string) SAclSetuserUsername {
	c.cs = append(c.cs, username)
	return (SAclSetuserUsername)(c)
}

type AclSetuserRule Completed

type SAclSetuserRule SCompleted

func (c AclSetuserRule) Rule(rule ...string) AclSetuserRule {
	c.cs = append(c.cs, rule...)
	return c
}

func (c SAclSetuserRule) Rule(rule ...string) SAclSetuserRule {
	c.cs = append(c.cs, rule...)
	return c
}

func (c AclSetuserRule) Build() Completed {
	return Completed(c)
}

func (c SAclSetuserRule) Build() SCompleted {
	return SCompleted(c)
}

type AclSetuserUsername Completed

type SAclSetuserUsername SCompleted

func (c AclSetuserUsername) Rule(rule ...string) AclSetuserRule {
	c.cs = append(c.cs, rule...)
	return (AclSetuserRule)(c)
}

func (c SAclSetuserUsername) Rule(rule ...string) SAclSetuserRule {
	c.cs = append(c.cs, rule...)
	return (SAclSetuserRule)(c)
}

func (c AclSetuserUsername) Build() Completed {
	return Completed(c)
}

func (c SAclSetuserUsername) Build() SCompleted {
	return SCompleted(c)
}

type AclUsers Completed

type SAclUsers SCompleted

func (b *Builder) AclUsers() AclUsers {
	return AclUsers{cs: append(b.get(), "ACL", "USERS"), ks: InitSlot}
}

func (b *SBuilder) AclUsers() SAclUsers {
	return SAclUsers{cs: append(b.get(), "ACL", "USERS"), ks: InitSlot}
}

func (c AclUsers) Build() Completed {
	return Completed(c)
}

func (c SAclUsers) Build() SCompleted {
	return SCompleted(c)
}

type AclWhoami Completed

type SAclWhoami SCompleted

func (b *Builder) AclWhoami() AclWhoami {
	return AclWhoami{cs: append(b.get(), "ACL", "WHOAMI"), ks: InitSlot}
}

func (b *SBuilder) AclWhoami() SAclWhoami {
	return SAclWhoami{cs: append(b.get(), "ACL", "WHOAMI"), ks: InitSlot}
}

func (c AclWhoami) Build() Completed {
	return Completed(c)
}

func (c SAclWhoami) Build() SCompleted {
	return SCompleted(c)
}

type Append Completed

type SAppend SCompleted

func (b *Builder) Append() Append {
	return Append{cs: append(b.get(), "APPEND"), ks: InitSlot}
}

func (b *SBuilder) Append() SAppend {
	return SAppend{cs: append(b.get(), "APPEND"), ks: InitSlot}
}

func (c Append) Key(key string) AppendKey {
	c.cs = append(c.cs, key)
	return (AppendKey)(c)
}

func (c SAppend) Key(key string) SAppendKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SAppendKey)(c)
}

type AppendKey Completed

type SAppendKey SCompleted

func (c AppendKey) Value(value string) AppendValue {
	c.cs = append(c.cs, value)
	return (AppendValue)(c)
}

func (c SAppendKey) Value(value string) SAppendValue {
	c.cs = append(c.cs, value)
	return (SAppendValue)(c)
}

type AppendValue Completed

type SAppendValue SCompleted

func (c AppendValue) Build() Completed {
	return Completed(c)
}

func (c SAppendValue) Build() SCompleted {
	return SCompleted(c)
}

type Asking Completed

type SAsking SCompleted

func (b *Builder) Asking() Asking {
	return Asking{cs: append(b.get(), "ASKING"), ks: InitSlot}
}

func (b *SBuilder) Asking() SAsking {
	return SAsking{cs: append(b.get(), "ASKING"), ks: InitSlot}
}

func (c Asking) Build() Completed {
	return Completed(c)
}

func (c SAsking) Build() SCompleted {
	return SCompleted(c)
}

type Auth Completed

type SAuth SCompleted

func (b *Builder) Auth() Auth {
	return Auth{cs: append(b.get(), "AUTH"), ks: InitSlot}
}

func (b *SBuilder) Auth() SAuth {
	return SAuth{cs: append(b.get(), "AUTH"), ks: InitSlot}
}

func (c Auth) Username(username string) AuthUsername {
	c.cs = append(c.cs, username)
	return (AuthUsername)(c)
}

func (c SAuth) Username(username string) SAuthUsername {
	c.cs = append(c.cs, username)
	return (SAuthUsername)(c)
}

func (c Auth) Password(password string) AuthPassword {
	c.cs = append(c.cs, password)
	return (AuthPassword)(c)
}

func (c SAuth) Password(password string) SAuthPassword {
	c.cs = append(c.cs, password)
	return (SAuthPassword)(c)
}

type AuthPassword Completed

type SAuthPassword SCompleted

func (c AuthPassword) Build() Completed {
	return Completed(c)
}

func (c SAuthPassword) Build() SCompleted {
	return SCompleted(c)
}

type AuthUsername Completed

type SAuthUsername SCompleted

func (c AuthUsername) Password(password string) AuthPassword {
	c.cs = append(c.cs, password)
	return (AuthPassword)(c)
}

func (c SAuthUsername) Password(password string) SAuthPassword {
	c.cs = append(c.cs, password)
	return (SAuthPassword)(c)
}

type BfAdd Completed

type SBfAdd SCompleted

func (b *Builder) BfAdd() BfAdd {
	return BfAdd{cs: append(b.get(), "BF.ADD"), ks: InitSlot}
}

func (b *SBuilder) BfAdd() SBfAdd {
	return SBfAdd{cs: append(b.get(), "BF.ADD"), ks: InitSlot}
}

func (c BfAdd) Key(key string) BfAddKey {
	c.cs = append(c.cs, key)
	return (BfAddKey)(c)
}

func (c SBfAdd) Key(key string) SBfAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfAddKey)(c)
}

type BfAddItem Completed

type SBfAddItem SCompleted

func (c BfAddItem) Build() Completed {
	return Completed(c)
}

func (c SBfAddItem) Build() SCompleted {
	return SCompleted(c)
}

type BfAddKey Completed

type SBfAddKey SCompleted

func (c BfAddKey) Item(item string) BfAddItem {
	c.cs = append(c.cs, item)
	return (BfAddItem)(c)
}

func (c SBfAddKey) Item(item string) SBfAddItem {
	c.cs = append(c.cs, item)
	return (SBfAddItem)(c)
}

type BfExists Completed

type SBfExists SCompleted

func (b *Builder) BfExists() BfExists {
	return BfExists{cs: append(b.get(), "BF.EXISTS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) BfExists() SBfExists {
	return SBfExists{cs: append(b.get(), "BF.EXISTS"), ks: InitSlot, cf: readonly}
}

func (c BfExists) Key(key string) BfExistsKey {
	c.cs = append(c.cs, key)
	return (BfExistsKey)(c)
}

func (c SBfExists) Key(key string) SBfExistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfExistsKey)(c)
}

type BfExistsItem Completed

type SBfExistsItem SCompleted

func (c BfExistsItem) Build() Completed {
	return Completed(c)
}

func (c SBfExistsItem) Build() SCompleted {
	return SCompleted(c)
}

func (c BfExistsItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBfExistsItem) Cache() SCacheable {
	return SCacheable(c)
}

type BfExistsKey Completed

type SBfExistsKey SCompleted

func (c BfExistsKey) Item(item string) BfExistsItem {
	c.cs = append(c.cs, item)
	return (BfExistsItem)(c)
}

func (c SBfExistsKey) Item(item string) SBfExistsItem {
	c.cs = append(c.cs, item)
	return (SBfExistsItem)(c)
}

type BfInfo Completed

type SBfInfo SCompleted

func (b *Builder) BfInfo() BfInfo {
	return BfInfo{cs: append(b.get(), "BF.INFO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) BfInfo() SBfInfo {
	return SBfInfo{cs: append(b.get(), "BF.INFO"), ks: InitSlot, cf: readonly}
}

func (c BfInfo) Key(key string) BfInfoKey {
	c.cs = append(c.cs, key)
	return (BfInfoKey)(c)
}

func (c SBfInfo) Key(key string) SBfInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfInfoKey)(c)
}

type BfInfoKey Completed

type SBfInfoKey SCompleted

func (c BfInfoKey) Build() Completed {
	return Completed(c)
}

func (c SBfInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c BfInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBfInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type BfInsert Completed

type SBfInsert SCompleted

func (b *Builder) BfInsert() BfInsert {
	return BfInsert{cs: append(b.get(), "BF.INSERT"), ks: InitSlot}
}

func (b *SBuilder) BfInsert() SBfInsert {
	return SBfInsert{cs: append(b.get(), "BF.INSERT"), ks: InitSlot}
}

func (c BfInsert) Key(key string) BfInsertKey {
	c.cs = append(c.cs, key)
	return (BfInsertKey)(c)
}

func (c SBfInsert) Key(key string) SBfInsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfInsertKey)(c)
}

type BfInsertCapacity Completed

type SBfInsertCapacity SCompleted

func (c BfInsertCapacity) Error(error float64) BfInsertError {
	c.cs = append(c.cs, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (BfInsertError)(c)
}

func (c SBfInsertCapacity) Error(error float64) SBfInsertError {
	c.cs = append(c.cs, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (SBfInsertError)(c)
}

func (c BfInsertCapacity) Expansion(expansion int64) BfInsertExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfInsertExpansion)(c)
}

func (c SBfInsertCapacity) Expansion(expansion int64) SBfInsertExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfInsertExpansion)(c)
}

func (c BfInsertCapacity) Nocreate() BfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertCapacity) Nocreate() SBfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertCapacity) Nonscaling() BfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertCapacity) Nonscaling() SBfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertCapacity) Items() BfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertCapacity) Items() SBfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertError Completed

type SBfInsertError SCompleted

func (c BfInsertError) Expansion(expansion int64) BfInsertExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfInsertExpansion)(c)
}

func (c SBfInsertError) Expansion(expansion int64) SBfInsertExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfInsertExpansion)(c)
}

func (c BfInsertError) Nocreate() BfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertError) Nocreate() SBfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertError) Nonscaling() BfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertError) Nonscaling() SBfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertError) Items() BfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertError) Items() SBfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertExpansion Completed

type SBfInsertExpansion SCompleted

func (c BfInsertExpansion) Nocreate() BfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertExpansion) Nocreate() SBfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertExpansion) Nonscaling() BfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertExpansion) Nonscaling() SBfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertExpansion) Items() BfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertExpansion) Items() SBfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertItem Completed

type SBfInsertItem SCompleted

func (c BfInsertItem) Item(item ...string) BfInsertItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SBfInsertItem) Item(item ...string) SBfInsertItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c BfInsertItem) Build() Completed {
	return Completed(c)
}

func (c SBfInsertItem) Build() SCompleted {
	return SCompleted(c)
}

type BfInsertItems Completed

type SBfInsertItems SCompleted

func (c BfInsertItems) Item(item ...string) BfInsertItem {
	c.cs = append(c.cs, item...)
	return (BfInsertItem)(c)
}

func (c SBfInsertItems) Item(item ...string) SBfInsertItem {
	c.cs = append(c.cs, item...)
	return (SBfInsertItem)(c)
}

type BfInsertKey Completed

type SBfInsertKey SCompleted

func (c BfInsertKey) Capacity(capacity int64) BfInsertCapacity {
	c.cs = append(c.cs, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (BfInsertCapacity)(c)
}

func (c SBfInsertKey) Capacity(capacity int64) SBfInsertCapacity {
	c.cs = append(c.cs, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (SBfInsertCapacity)(c)
}

func (c BfInsertKey) Error(error float64) BfInsertError {
	c.cs = append(c.cs, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (BfInsertError)(c)
}

func (c SBfInsertKey) Error(error float64) SBfInsertError {
	c.cs = append(c.cs, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (SBfInsertError)(c)
}

func (c BfInsertKey) Expansion(expansion int64) BfInsertExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfInsertExpansion)(c)
}

func (c SBfInsertKey) Expansion(expansion int64) SBfInsertExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfInsertExpansion)(c)
}

func (c BfInsertKey) Nocreate() BfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertKey) Nocreate() SBfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertKey) Nonscaling() BfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertKey) Nonscaling() SBfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertKey) Items() BfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertKey) Items() SBfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertNocreate Completed

type SBfInsertNocreate SCompleted

func (c BfInsertNocreate) Nonscaling() BfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertNocreate) Nonscaling() SBfInsertNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertNocreate) Items() BfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertNocreate) Items() SBfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertNonscaling Completed

type SBfInsertNonscaling SCompleted

func (c BfInsertNonscaling) Items() BfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertNonscaling) Items() SBfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfLoadchunk Completed

type SBfLoadchunk SCompleted

func (b *Builder) BfLoadchunk() BfLoadchunk {
	return BfLoadchunk{cs: append(b.get(), "BF.LOADCHUNK"), ks: InitSlot}
}

func (b *SBuilder) BfLoadchunk() SBfLoadchunk {
	return SBfLoadchunk{cs: append(b.get(), "BF.LOADCHUNK"), ks: InitSlot}
}

func (c BfLoadchunk) Key(key string) BfLoadchunkKey {
	c.cs = append(c.cs, key)
	return (BfLoadchunkKey)(c)
}

func (c SBfLoadchunk) Key(key string) SBfLoadchunkKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfLoadchunkKey)(c)
}

type BfLoadchunkData Completed

type SBfLoadchunkData SCompleted

func (c BfLoadchunkData) Build() Completed {
	return Completed(c)
}

func (c SBfLoadchunkData) Build() SCompleted {
	return SCompleted(c)
}

type BfLoadchunkIterator Completed

type SBfLoadchunkIterator SCompleted

func (c BfLoadchunkIterator) Data(data string) BfLoadchunkData {
	c.cs = append(c.cs, data)
	return (BfLoadchunkData)(c)
}

func (c SBfLoadchunkIterator) Data(data string) SBfLoadchunkData {
	c.cs = append(c.cs, data)
	return (SBfLoadchunkData)(c)
}

type BfLoadchunkKey Completed

type SBfLoadchunkKey SCompleted

func (c BfLoadchunkKey) Iterator(iterator int64) BfLoadchunkIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (BfLoadchunkIterator)(c)
}

func (c SBfLoadchunkKey) Iterator(iterator int64) SBfLoadchunkIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (SBfLoadchunkIterator)(c)
}

type BfMadd Completed

type SBfMadd SCompleted

func (b *Builder) BfMadd() BfMadd {
	return BfMadd{cs: append(b.get(), "BF.MADD"), ks: InitSlot}
}

func (b *SBuilder) BfMadd() SBfMadd {
	return SBfMadd{cs: append(b.get(), "BF.MADD"), ks: InitSlot}
}

func (c BfMadd) Key(key string) BfMaddKey {
	c.cs = append(c.cs, key)
	return (BfMaddKey)(c)
}

func (c SBfMadd) Key(key string) SBfMaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfMaddKey)(c)
}

type BfMaddItem Completed

type SBfMaddItem SCompleted

func (c BfMaddItem) Item(item ...string) BfMaddItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SBfMaddItem) Item(item ...string) SBfMaddItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c BfMaddItem) Build() Completed {
	return Completed(c)
}

func (c SBfMaddItem) Build() SCompleted {
	return SCompleted(c)
}

type BfMaddKey Completed

type SBfMaddKey SCompleted

func (c BfMaddKey) Item(item ...string) BfMaddItem {
	c.cs = append(c.cs, item...)
	return (BfMaddItem)(c)
}

func (c SBfMaddKey) Item(item ...string) SBfMaddItem {
	c.cs = append(c.cs, item...)
	return (SBfMaddItem)(c)
}

type BfMexists Completed

type SBfMexists SCompleted

func (b *Builder) BfMexists() BfMexists {
	return BfMexists{cs: append(b.get(), "BF.MEXISTS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) BfMexists() SBfMexists {
	return SBfMexists{cs: append(b.get(), "BF.MEXISTS"), ks: InitSlot, cf: readonly}
}

func (c BfMexists) Key(key string) BfMexistsKey {
	c.cs = append(c.cs, key)
	return (BfMexistsKey)(c)
}

func (c SBfMexists) Key(key string) SBfMexistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfMexistsKey)(c)
}

type BfMexistsItem Completed

type SBfMexistsItem SCompleted

func (c BfMexistsItem) Item(item ...string) BfMexistsItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SBfMexistsItem) Item(item ...string) SBfMexistsItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c BfMexistsItem) Build() Completed {
	return Completed(c)
}

func (c SBfMexistsItem) Build() SCompleted {
	return SCompleted(c)
}

type BfMexistsKey Completed

type SBfMexistsKey SCompleted

func (c BfMexistsKey) Item(item ...string) BfMexistsItem {
	c.cs = append(c.cs, item...)
	return (BfMexistsItem)(c)
}

func (c SBfMexistsKey) Item(item ...string) SBfMexistsItem {
	c.cs = append(c.cs, item...)
	return (SBfMexistsItem)(c)
}

type BfReserve Completed

type SBfReserve SCompleted

func (b *Builder) BfReserve() BfReserve {
	return BfReserve{cs: append(b.get(), "BF.RESERVE"), ks: InitSlot}
}

func (b *SBuilder) BfReserve() SBfReserve {
	return SBfReserve{cs: append(b.get(), "BF.RESERVE"), ks: InitSlot}
}

func (c BfReserve) Key(key string) BfReserveKey {
	c.cs = append(c.cs, key)
	return (BfReserveKey)(c)
}

func (c SBfReserve) Key(key string) SBfReserveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfReserveKey)(c)
}

type BfReserveCapacity Completed

type SBfReserveCapacity SCompleted

func (c BfReserveCapacity) Expansion(expansion int64) BfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfReserveExpansion)(c)
}

func (c SBfReserveCapacity) Expansion(expansion int64) SBfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfReserveExpansion)(c)
}

func (c BfReserveCapacity) Nonscaling() BfReserveNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfReserveNonscaling)(c)
}

func (c SBfReserveCapacity) Nonscaling() SBfReserveNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfReserveNonscaling)(c)
}

func (c BfReserveCapacity) Build() Completed {
	return Completed(c)
}

func (c SBfReserveCapacity) Build() SCompleted {
	return SCompleted(c)
}

type BfReserveErrorRate Completed

type SBfReserveErrorRate SCompleted

func (c BfReserveErrorRate) Capacity(capacity int64) BfReserveCapacity {
	c.cs = append(c.cs, strconv.FormatInt(capacity, 10))
	return (BfReserveCapacity)(c)
}

func (c SBfReserveErrorRate) Capacity(capacity int64) SBfReserveCapacity {
	c.cs = append(c.cs, strconv.FormatInt(capacity, 10))
	return (SBfReserveCapacity)(c)
}

type BfReserveExpansion Completed

type SBfReserveExpansion SCompleted

func (c BfReserveExpansion) Nonscaling() BfReserveNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (BfReserveNonscaling)(c)
}

func (c SBfReserveExpansion) Nonscaling() SBfReserveNonscaling {
	c.cs = append(c.cs, "NONSCALING")
	return (SBfReserveNonscaling)(c)
}

func (c BfReserveExpansion) Build() Completed {
	return Completed(c)
}

func (c SBfReserveExpansion) Build() SCompleted {
	return SCompleted(c)
}

type BfReserveKey Completed

type SBfReserveKey SCompleted

func (c BfReserveKey) ErrorRate(errorRate float64) BfReserveErrorRate {
	c.cs = append(c.cs, strconv.FormatFloat(errorRate, 'f', -1, 64))
	return (BfReserveErrorRate)(c)
}

func (c SBfReserveKey) ErrorRate(errorRate float64) SBfReserveErrorRate {
	c.cs = append(c.cs, strconv.FormatFloat(errorRate, 'f', -1, 64))
	return (SBfReserveErrorRate)(c)
}

type BfReserveNonscaling Completed

type SBfReserveNonscaling SCompleted

func (c BfReserveNonscaling) Build() Completed {
	return Completed(c)
}

func (c SBfReserveNonscaling) Build() SCompleted {
	return SCompleted(c)
}

type BfScandump Completed

type SBfScandump SCompleted

func (b *Builder) BfScandump() BfScandump {
	return BfScandump{cs: append(b.get(), "BF.SCANDUMP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) BfScandump() SBfScandump {
	return SBfScandump{cs: append(b.get(), "BF.SCANDUMP"), ks: InitSlot, cf: readonly}
}

func (c BfScandump) Key(key string) BfScandumpKey {
	c.cs = append(c.cs, key)
	return (BfScandumpKey)(c)
}

func (c SBfScandump) Key(key string) SBfScandumpKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBfScandumpKey)(c)
}

type BfScandumpIterator Completed

type SBfScandumpIterator SCompleted

func (c BfScandumpIterator) Build() Completed {
	return Completed(c)
}

func (c SBfScandumpIterator) Build() SCompleted {
	return SCompleted(c)
}

type BfScandumpKey Completed

type SBfScandumpKey SCompleted

func (c BfScandumpKey) Iterator(iterator int64) BfScandumpIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (BfScandumpIterator)(c)
}

func (c SBfScandumpKey) Iterator(iterator int64) SBfScandumpIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (SBfScandumpIterator)(c)
}

type Bgrewriteaof Completed

type SBgrewriteaof SCompleted

func (b *Builder) Bgrewriteaof() Bgrewriteaof {
	return Bgrewriteaof{cs: append(b.get(), "BGREWRITEAOF"), ks: InitSlot}
}

func (b *SBuilder) Bgrewriteaof() SBgrewriteaof {
	return SBgrewriteaof{cs: append(b.get(), "BGREWRITEAOF"), ks: InitSlot}
}

func (c Bgrewriteaof) Build() Completed {
	return Completed(c)
}

func (c SBgrewriteaof) Build() SCompleted {
	return SCompleted(c)
}

type Bgsave Completed

type SBgsave SCompleted

func (b *Builder) Bgsave() Bgsave {
	return Bgsave{cs: append(b.get(), "BGSAVE"), ks: InitSlot}
}

func (b *SBuilder) Bgsave() SBgsave {
	return SBgsave{cs: append(b.get(), "BGSAVE"), ks: InitSlot}
}

func (c Bgsave) Schedule() BgsaveSchedule {
	c.cs = append(c.cs, "SCHEDULE")
	return (BgsaveSchedule)(c)
}

func (c SBgsave) Schedule() SBgsaveSchedule {
	c.cs = append(c.cs, "SCHEDULE")
	return (SBgsaveSchedule)(c)
}

func (c Bgsave) Build() Completed {
	return Completed(c)
}

func (c SBgsave) Build() SCompleted {
	return SCompleted(c)
}

type BgsaveSchedule Completed

type SBgsaveSchedule SCompleted

func (c BgsaveSchedule) Build() Completed {
	return Completed(c)
}

func (c SBgsaveSchedule) Build() SCompleted {
	return SCompleted(c)
}

type Bitcount Completed

type SBitcount SCompleted

func (b *Builder) Bitcount() Bitcount {
	return Bitcount{cs: append(b.get(), "BITCOUNT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Bitcount() SBitcount {
	return SBitcount{cs: append(b.get(), "BITCOUNT"), ks: InitSlot, cf: readonly}
}

func (c Bitcount) Key(key string) BitcountKey {
	c.cs = append(c.cs, key)
	return (BitcountKey)(c)
}

func (c SBitcount) Key(key string) SBitcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBitcountKey)(c)
}

type BitcountIndexEnd Completed

type SBitcountIndexEnd SCompleted

func (c BitcountIndexEnd) Byte() BitcountIndexIndexUnitByte {
	c.cs = append(c.cs, "BYTE")
	return (BitcountIndexIndexUnitByte)(c)
}

func (c SBitcountIndexEnd) Byte() SBitcountIndexIndexUnitByte {
	c.cs = append(c.cs, "BYTE")
	return (SBitcountIndexIndexUnitByte)(c)
}

func (c BitcountIndexEnd) Bit() BitcountIndexIndexUnitBit {
	c.cs = append(c.cs, "BIT")
	return (BitcountIndexIndexUnitBit)(c)
}

func (c SBitcountIndexEnd) Bit() SBitcountIndexIndexUnitBit {
	c.cs = append(c.cs, "BIT")
	return (SBitcountIndexIndexUnitBit)(c)
}

func (c BitcountIndexEnd) Build() Completed {
	return Completed(c)
}

func (c SBitcountIndexEnd) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountIndexEnd) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountIndexEnd) Cache() SCacheable {
	return SCacheable(c)
}

type BitcountIndexIndexUnitBit Completed

type SBitcountIndexIndexUnitBit SCompleted

func (c BitcountIndexIndexUnitBit) Build() Completed {
	return Completed(c)
}

func (c SBitcountIndexIndexUnitBit) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountIndexIndexUnitBit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountIndexIndexUnitBit) Cache() SCacheable {
	return SCacheable(c)
}

type BitcountIndexIndexUnitByte Completed

type SBitcountIndexIndexUnitByte SCompleted

func (c BitcountIndexIndexUnitByte) Build() Completed {
	return Completed(c)
}

func (c SBitcountIndexIndexUnitByte) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountIndexIndexUnitByte) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountIndexIndexUnitByte) Cache() SCacheable {
	return SCacheable(c)
}

type BitcountIndexStart Completed

type SBitcountIndexStart SCompleted

func (c BitcountIndexStart) End(end int64) BitcountIndexEnd {
	c.cs = append(c.cs, strconv.FormatInt(end, 10))
	return (BitcountIndexEnd)(c)
}

func (c SBitcountIndexStart) End(end int64) SBitcountIndexEnd {
	c.cs = append(c.cs, strconv.FormatInt(end, 10))
	return (SBitcountIndexEnd)(c)
}

type BitcountKey Completed

type SBitcountKey SCompleted

func (c BitcountKey) Start(start int64) BitcountIndexStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (BitcountIndexStart)(c)
}

func (c SBitcountKey) Start(start int64) SBitcountIndexStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SBitcountIndexStart)(c)
}

func (c BitcountKey) Build() Completed {
	return Completed(c)
}

func (c SBitcountKey) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountKey) Cache() SCacheable {
	return SCacheable(c)
}

type Bitfield Completed

type SBitfield SCompleted

func (b *Builder) Bitfield() Bitfield {
	return Bitfield{cs: append(b.get(), "BITFIELD"), ks: InitSlot}
}

func (b *SBuilder) Bitfield() SBitfield {
	return SBitfield{cs: append(b.get(), "BITFIELD"), ks: InitSlot}
}

func (c Bitfield) Key(key string) BitfieldKey {
	c.cs = append(c.cs, key)
	return (BitfieldKey)(c)
}

func (c SBitfield) Key(key string) SBitfieldKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBitfieldKey)(c)
}

type BitfieldGet Completed

type SBitfieldGet SCompleted

func (c BitfieldGet) Set(encoding string, offset int64, value int64) BitfieldSet {
	c.cs = append(c.cs, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (BitfieldSet)(c)
}

func (c SBitfieldGet) Set(encoding string, offset int64, value int64) SBitfieldSet {
	c.cs = append(c.cs, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (SBitfieldSet)(c)
}

func (c BitfieldGet) Incrby(encoding string, offset int64, increment int64) BitfieldIncrby {
	c.cs = append(c.cs, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (BitfieldIncrby)(c)
}

func (c SBitfieldGet) Incrby(encoding string, offset int64, increment int64) SBitfieldIncrby {
	c.cs = append(c.cs, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (SBitfieldIncrby)(c)
}

func (c BitfieldGet) OverflowWrap() BitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldGet) OverflowWrap() SBitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldGet) OverflowSat() BitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldGet) OverflowSat() SBitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldGet) OverflowFail() BitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldGet) OverflowFail() SBitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldGet) Build() Completed {
	return Completed(c)
}

func (c SBitfieldGet) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldIncrby Completed

type SBitfieldIncrby SCompleted

func (c BitfieldIncrby) OverflowWrap() BitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldIncrby) OverflowWrap() SBitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldIncrby) OverflowSat() BitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldIncrby) OverflowSat() SBitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldIncrby) OverflowFail() BitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldIncrby) OverflowFail() SBitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldIncrby) Build() Completed {
	return Completed(c)
}

func (c SBitfieldIncrby) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldKey Completed

type SBitfieldKey SCompleted

func (c BitfieldKey) Get(encoding string, offset int64) BitfieldGet {
	c.cs = append(c.cs, "GET", encoding, strconv.FormatInt(offset, 10))
	return (BitfieldGet)(c)
}

func (c SBitfieldKey) Get(encoding string, offset int64) SBitfieldGet {
	c.cs = append(c.cs, "GET", encoding, strconv.FormatInt(offset, 10))
	return (SBitfieldGet)(c)
}

func (c BitfieldKey) Set(encoding string, offset int64, value int64) BitfieldSet {
	c.cs = append(c.cs, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (BitfieldSet)(c)
}

func (c SBitfieldKey) Set(encoding string, offset int64, value int64) SBitfieldSet {
	c.cs = append(c.cs, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (SBitfieldSet)(c)
}

func (c BitfieldKey) Incrby(encoding string, offset int64, increment int64) BitfieldIncrby {
	c.cs = append(c.cs, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (BitfieldIncrby)(c)
}

func (c SBitfieldKey) Incrby(encoding string, offset int64, increment int64) SBitfieldIncrby {
	c.cs = append(c.cs, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (SBitfieldIncrby)(c)
}

func (c BitfieldKey) OverflowWrap() BitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldKey) OverflowWrap() SBitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldKey) OverflowSat() BitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldKey) OverflowSat() SBitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldKey) OverflowFail() BitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldKey) OverflowFail() SBitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldKey) Build() Completed {
	return Completed(c)
}

func (c SBitfieldKey) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldOverflowFail Completed

type SBitfieldOverflowFail SCompleted

func (c BitfieldOverflowFail) Build() Completed {
	return Completed(c)
}

func (c SBitfieldOverflowFail) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldOverflowSat Completed

type SBitfieldOverflowSat SCompleted

func (c BitfieldOverflowSat) Build() Completed {
	return Completed(c)
}

func (c SBitfieldOverflowSat) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldOverflowWrap Completed

type SBitfieldOverflowWrap SCompleted

func (c BitfieldOverflowWrap) Build() Completed {
	return Completed(c)
}

func (c SBitfieldOverflowWrap) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldRo Completed

type SBitfieldRo SCompleted

func (b *Builder) BitfieldRo() BitfieldRo {
	return BitfieldRo{cs: append(b.get(), "BITFIELD_RO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) BitfieldRo() SBitfieldRo {
	return SBitfieldRo{cs: append(b.get(), "BITFIELD_RO"), ks: InitSlot, cf: readonly}
}

func (c BitfieldRo) Key(key string) BitfieldRoKey {
	c.cs = append(c.cs, key)
	return (BitfieldRoKey)(c)
}

func (c SBitfieldRo) Key(key string) SBitfieldRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBitfieldRoKey)(c)
}

type BitfieldRoGet Completed

type SBitfieldRoGet SCompleted

func (c BitfieldRoGet) Build() Completed {
	return Completed(c)
}

func (c SBitfieldRoGet) Build() SCompleted {
	return SCompleted(c)
}

func (c BitfieldRoGet) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitfieldRoGet) Cache() SCacheable {
	return SCacheable(c)
}

type BitfieldRoKey Completed

type SBitfieldRoKey SCompleted

func (c BitfieldRoKey) Get(encoding string, offset int64) BitfieldRoGet {
	c.cs = append(c.cs, "GET", encoding, strconv.FormatInt(offset, 10))
	return (BitfieldRoGet)(c)
}

func (c SBitfieldRoKey) Get(encoding string, offset int64) SBitfieldRoGet {
	c.cs = append(c.cs, "GET", encoding, strconv.FormatInt(offset, 10))
	return (SBitfieldRoGet)(c)
}

type BitfieldSet Completed

type SBitfieldSet SCompleted

func (c BitfieldSet) Incrby(encoding string, offset int64, increment int64) BitfieldIncrby {
	c.cs = append(c.cs, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (BitfieldIncrby)(c)
}

func (c SBitfieldSet) Incrby(encoding string, offset int64, increment int64) SBitfieldIncrby {
	c.cs = append(c.cs, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (SBitfieldIncrby)(c)
}

func (c BitfieldSet) OverflowWrap() BitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldSet) OverflowWrap() SBitfieldOverflowWrap {
	c.cs = append(c.cs, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldSet) OverflowSat() BitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldSet) OverflowSat() SBitfieldOverflowSat {
	c.cs = append(c.cs, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldSet) OverflowFail() BitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldSet) OverflowFail() SBitfieldOverflowFail {
	c.cs = append(c.cs, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldSet) Build() Completed {
	return Completed(c)
}

func (c SBitfieldSet) Build() SCompleted {
	return SCompleted(c)
}

type Bitop Completed

type SBitop SCompleted

func (b *Builder) Bitop() Bitop {
	return Bitop{cs: append(b.get(), "BITOP"), ks: InitSlot}
}

func (b *SBuilder) Bitop() SBitop {
	return SBitop{cs: append(b.get(), "BITOP"), ks: InitSlot}
}

func (c Bitop) Operation(operation string) BitopOperation {
	c.cs = append(c.cs, operation)
	return (BitopOperation)(c)
}

func (c SBitop) Operation(operation string) SBitopOperation {
	c.cs = append(c.cs, operation)
	return (SBitopOperation)(c)
}

type BitopDestkey Completed

type SBitopDestkey SCompleted

func (c BitopDestkey) Key(key ...string) BitopKey {
	c.cs = append(c.cs, key...)
	return (BitopKey)(c)
}

func (c SBitopDestkey) Key(key ...string) SBitopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBitopKey)(c)
}

type BitopKey Completed

type SBitopKey SCompleted

func (c BitopKey) Key(key ...string) BitopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBitopKey) Key(key ...string) SBitopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BitopKey) Build() Completed {
	return Completed(c)
}

func (c SBitopKey) Build() SCompleted {
	return SCompleted(c)
}

type BitopOperation Completed

type SBitopOperation SCompleted

func (c BitopOperation) Destkey(destkey string) BitopDestkey {
	c.cs = append(c.cs, destkey)
	return (BitopDestkey)(c)
}

func (c SBitopOperation) Destkey(destkey string) SBitopDestkey {
	c.ks = checkSlot(c.ks, slot(destkey))
	c.cs = append(c.cs, destkey)
	return (SBitopDestkey)(c)
}

type Bitpos Completed

type SBitpos SCompleted

func (b *Builder) Bitpos() Bitpos {
	return Bitpos{cs: append(b.get(), "BITPOS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Bitpos() SBitpos {
	return SBitpos{cs: append(b.get(), "BITPOS"), ks: InitSlot, cf: readonly}
}

func (c Bitpos) Key(key string) BitposKey {
	c.cs = append(c.cs, key)
	return (BitposKey)(c)
}

func (c SBitpos) Key(key string) SBitposKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SBitposKey)(c)
}

type BitposBit Completed

type SBitposBit SCompleted

func (c BitposBit) Start(start int64) BitposIndexStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (BitposIndexStart)(c)
}

func (c SBitposBit) Start(start int64) SBitposIndexStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SBitposIndexStart)(c)
}

func (c BitposBit) Build() Completed {
	return Completed(c)
}

func (c SBitposBit) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposBit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposBit) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexEndIndexEnd Completed

type SBitposIndexEndIndexEnd SCompleted

func (c BitposIndexEndIndexEnd) Byte() BitposIndexEndIndexIndexUnitByte {
	c.cs = append(c.cs, "BYTE")
	return (BitposIndexEndIndexIndexUnitByte)(c)
}

func (c SBitposIndexEndIndexEnd) Byte() SBitposIndexEndIndexIndexUnitByte {
	c.cs = append(c.cs, "BYTE")
	return (SBitposIndexEndIndexIndexUnitByte)(c)
}

func (c BitposIndexEndIndexEnd) Bit() BitposIndexEndIndexIndexUnitBit {
	c.cs = append(c.cs, "BIT")
	return (BitposIndexEndIndexIndexUnitBit)(c)
}

func (c SBitposIndexEndIndexEnd) Bit() SBitposIndexEndIndexIndexUnitBit {
	c.cs = append(c.cs, "BIT")
	return (SBitposIndexEndIndexIndexUnitBit)(c)
}

func (c BitposIndexEndIndexEnd) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexEndIndexEnd) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexEndIndexEnd) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexEndIndexEnd) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexEndIndexIndexUnitBit Completed

type SBitposIndexEndIndexIndexUnitBit SCompleted

func (c BitposIndexEndIndexIndexUnitBit) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexEndIndexIndexUnitBit) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexEndIndexIndexUnitBit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexEndIndexIndexUnitBit) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexEndIndexIndexUnitByte Completed

type SBitposIndexEndIndexIndexUnitByte SCompleted

func (c BitposIndexEndIndexIndexUnitByte) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexEndIndexIndexUnitByte) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexEndIndexIndexUnitByte) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexEndIndexIndexUnitByte) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexStart Completed

type SBitposIndexStart SCompleted

func (c BitposIndexStart) End(end int64) BitposIndexEndIndexEnd {
	c.cs = append(c.cs, strconv.FormatInt(end, 10))
	return (BitposIndexEndIndexEnd)(c)
}

func (c SBitposIndexStart) End(end int64) SBitposIndexEndIndexEnd {
	c.cs = append(c.cs, strconv.FormatInt(end, 10))
	return (SBitposIndexEndIndexEnd)(c)
}

func (c BitposIndexStart) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexStart) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexStart) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexStart) Cache() SCacheable {
	return SCacheable(c)
}

type BitposKey Completed

type SBitposKey SCompleted

func (c BitposKey) Bit(bit int64) BitposBit {
	c.cs = append(c.cs, strconv.FormatInt(bit, 10))
	return (BitposBit)(c)
}

func (c SBitposKey) Bit(bit int64) SBitposBit {
	c.cs = append(c.cs, strconv.FormatInt(bit, 10))
	return (SBitposBit)(c)
}

type Blmove Completed

type SBlmove SCompleted

func (b *Builder) Blmove() Blmove {
	return Blmove{cs: append(b.get(), "BLMOVE"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Blmove() SBlmove {
	return SBlmove{cs: append(b.get(), "BLMOVE"), ks: InitSlot, cf: blockTag}
}

func (c Blmove) Source(source string) BlmoveSource {
	c.cs = append(c.cs, source)
	return (BlmoveSource)(c)
}

func (c SBlmove) Source(source string) SBlmoveSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SBlmoveSource)(c)
}

type BlmoveDestination Completed

type SBlmoveDestination SCompleted

func (c BlmoveDestination) Left() BlmoveWherefromLeft {
	c.cs = append(c.cs, "LEFT")
	return (BlmoveWherefromLeft)(c)
}

func (c SBlmoveDestination) Left() SBlmoveWherefromLeft {
	c.cs = append(c.cs, "LEFT")
	return (SBlmoveWherefromLeft)(c)
}

func (c BlmoveDestination) Right() BlmoveWherefromRight {
	c.cs = append(c.cs, "RIGHT")
	return (BlmoveWherefromRight)(c)
}

func (c SBlmoveDestination) Right() SBlmoveWherefromRight {
	c.cs = append(c.cs, "RIGHT")
	return (SBlmoveWherefromRight)(c)
}

type BlmoveSource Completed

type SBlmoveSource SCompleted

func (c BlmoveSource) Destination(destination string) BlmoveDestination {
	c.cs = append(c.cs, destination)
	return (BlmoveDestination)(c)
}

func (c SBlmoveSource) Destination(destination string) SBlmoveDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SBlmoveDestination)(c)
}

type BlmoveTimeout Completed

type SBlmoveTimeout SCompleted

func (c BlmoveTimeout) Build() Completed {
	return Completed(c)
}

func (c SBlmoveTimeout) Build() SCompleted {
	return SCompleted(c)
}

type BlmoveWherefromLeft Completed

type SBlmoveWherefromLeft SCompleted

func (c BlmoveWherefromLeft) Left() BlmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (BlmoveWheretoLeft)(c)
}

func (c SBlmoveWherefromLeft) Left() SBlmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (SBlmoveWheretoLeft)(c)
}

func (c BlmoveWherefromLeft) Right() BlmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (BlmoveWheretoRight)(c)
}

func (c SBlmoveWherefromLeft) Right() SBlmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (SBlmoveWheretoRight)(c)
}

type BlmoveWherefromRight Completed

type SBlmoveWherefromRight SCompleted

func (c BlmoveWherefromRight) Left() BlmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (BlmoveWheretoLeft)(c)
}

func (c SBlmoveWherefromRight) Left() SBlmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (SBlmoveWheretoLeft)(c)
}

func (c BlmoveWherefromRight) Right() BlmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (BlmoveWheretoRight)(c)
}

func (c SBlmoveWherefromRight) Right() SBlmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (SBlmoveWheretoRight)(c)
}

type BlmoveWheretoLeft Completed

type SBlmoveWheretoLeft SCompleted

func (c BlmoveWheretoLeft) Timeout(timeout float64) BlmoveTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlmoveTimeout)(c)
}

func (c SBlmoveWheretoLeft) Timeout(timeout float64) SBlmoveTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlmoveTimeout)(c)
}

type BlmoveWheretoRight Completed

type SBlmoveWheretoRight SCompleted

func (c BlmoveWheretoRight) Timeout(timeout float64) BlmoveTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlmoveTimeout)(c)
}

func (c SBlmoveWheretoRight) Timeout(timeout float64) SBlmoveTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlmoveTimeout)(c)
}

type Blmpop Completed

type SBlmpop SCompleted

func (b *Builder) Blmpop() Blmpop {
	return Blmpop{cs: append(b.get(), "BLMPOP"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Blmpop() SBlmpop {
	return SBlmpop{cs: append(b.get(), "BLMPOP"), ks: InitSlot, cf: blockTag}
}

func (c Blmpop) Timeout(timeout float64) BlmpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlmpopTimeout)(c)
}

func (c SBlmpop) Timeout(timeout float64) SBlmpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlmpopTimeout)(c)
}

type BlmpopCount Completed

type SBlmpopCount SCompleted

func (c BlmpopCount) Build() Completed {
	return Completed(c)
}

func (c SBlmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type BlmpopKey Completed

type SBlmpopKey SCompleted

func (c BlmpopKey) Key(key ...string) BlmpopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBlmpopKey) Key(key ...string) SBlmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BlmpopKey) Left() BlmpopWhereLeft {
	c.cs = append(c.cs, "LEFT")
	return (BlmpopWhereLeft)(c)
}

func (c SBlmpopKey) Left() SBlmpopWhereLeft {
	c.cs = append(c.cs, "LEFT")
	return (SBlmpopWhereLeft)(c)
}

func (c BlmpopKey) Right() BlmpopWhereRight {
	c.cs = append(c.cs, "RIGHT")
	return (BlmpopWhereRight)(c)
}

func (c SBlmpopKey) Right() SBlmpopWhereRight {
	c.cs = append(c.cs, "RIGHT")
	return (SBlmpopWhereRight)(c)
}

type BlmpopNumkeys Completed

type SBlmpopNumkeys SCompleted

func (c BlmpopNumkeys) Key(key ...string) BlmpopKey {
	c.cs = append(c.cs, key...)
	return (BlmpopKey)(c)
}

func (c SBlmpopNumkeys) Key(key ...string) SBlmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBlmpopKey)(c)
}

type BlmpopTimeout Completed

type SBlmpopTimeout SCompleted

func (c BlmpopTimeout) Numkeys(numkeys int64) BlmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (BlmpopNumkeys)(c)
}

func (c SBlmpopTimeout) Numkeys(numkeys int64) SBlmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SBlmpopNumkeys)(c)
}

type BlmpopWhereLeft Completed

type SBlmpopWhereLeft SCompleted

func (c BlmpopWhereLeft) Count(count int64) BlmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (BlmpopCount)(c)
}

func (c SBlmpopWhereLeft) Count(count int64) SBlmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SBlmpopCount)(c)
}

func (c BlmpopWhereLeft) Build() Completed {
	return Completed(c)
}

func (c SBlmpopWhereLeft) Build() SCompleted {
	return SCompleted(c)
}

type BlmpopWhereRight Completed

type SBlmpopWhereRight SCompleted

func (c BlmpopWhereRight) Count(count int64) BlmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (BlmpopCount)(c)
}

func (c SBlmpopWhereRight) Count(count int64) SBlmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SBlmpopCount)(c)
}

func (c BlmpopWhereRight) Build() Completed {
	return Completed(c)
}

func (c SBlmpopWhereRight) Build() SCompleted {
	return SCompleted(c)
}

type Blpop Completed

type SBlpop SCompleted

func (b *Builder) Blpop() Blpop {
	return Blpop{cs: append(b.get(), "BLPOP"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Blpop() SBlpop {
	return SBlpop{cs: append(b.get(), "BLPOP"), ks: InitSlot, cf: blockTag}
}

func (c Blpop) Key(key ...string) BlpopKey {
	c.cs = append(c.cs, key...)
	return (BlpopKey)(c)
}

func (c SBlpop) Key(key ...string) SBlpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBlpopKey)(c)
}

type BlpopKey Completed

type SBlpopKey SCompleted

func (c BlpopKey) Key(key ...string) BlpopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBlpopKey) Key(key ...string) SBlpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BlpopKey) Timeout(timeout float64) BlpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlpopTimeout)(c)
}

func (c SBlpopKey) Timeout(timeout float64) SBlpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlpopTimeout)(c)
}

type BlpopTimeout Completed

type SBlpopTimeout SCompleted

func (c BlpopTimeout) Build() Completed {
	return Completed(c)
}

func (c SBlpopTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Brpop Completed

type SBrpop SCompleted

func (b *Builder) Brpop() Brpop {
	return Brpop{cs: append(b.get(), "BRPOP"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Brpop() SBrpop {
	return SBrpop{cs: append(b.get(), "BRPOP"), ks: InitSlot, cf: blockTag}
}

func (c Brpop) Key(key ...string) BrpopKey {
	c.cs = append(c.cs, key...)
	return (BrpopKey)(c)
}

func (c SBrpop) Key(key ...string) SBrpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBrpopKey)(c)
}

type BrpopKey Completed

type SBrpopKey SCompleted

func (c BrpopKey) Key(key ...string) BrpopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBrpopKey) Key(key ...string) SBrpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BrpopKey) Timeout(timeout float64) BrpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BrpopTimeout)(c)
}

func (c SBrpopKey) Timeout(timeout float64) SBrpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBrpopTimeout)(c)
}

type BrpopTimeout Completed

type SBrpopTimeout SCompleted

func (c BrpopTimeout) Build() Completed {
	return Completed(c)
}

func (c SBrpopTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Brpoplpush Completed

type SBrpoplpush SCompleted

func (b *Builder) Brpoplpush() Brpoplpush {
	return Brpoplpush{cs: append(b.get(), "BRPOPLPUSH"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Brpoplpush() SBrpoplpush {
	return SBrpoplpush{cs: append(b.get(), "BRPOPLPUSH"), ks: InitSlot, cf: blockTag}
}

func (c Brpoplpush) Source(source string) BrpoplpushSource {
	c.cs = append(c.cs, source)
	return (BrpoplpushSource)(c)
}

func (c SBrpoplpush) Source(source string) SBrpoplpushSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SBrpoplpushSource)(c)
}

type BrpoplpushDestination Completed

type SBrpoplpushDestination SCompleted

func (c BrpoplpushDestination) Timeout(timeout float64) BrpoplpushTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BrpoplpushTimeout)(c)
}

func (c SBrpoplpushDestination) Timeout(timeout float64) SBrpoplpushTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBrpoplpushTimeout)(c)
}

type BrpoplpushSource Completed

type SBrpoplpushSource SCompleted

func (c BrpoplpushSource) Destination(destination string) BrpoplpushDestination {
	c.cs = append(c.cs, destination)
	return (BrpoplpushDestination)(c)
}

func (c SBrpoplpushSource) Destination(destination string) SBrpoplpushDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SBrpoplpushDestination)(c)
}

type BrpoplpushTimeout Completed

type SBrpoplpushTimeout SCompleted

func (c BrpoplpushTimeout) Build() Completed {
	return Completed(c)
}

func (c SBrpoplpushTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Bzmpop Completed

type SBzmpop SCompleted

func (b *Builder) Bzmpop() Bzmpop {
	return Bzmpop{cs: append(b.get(), "BZMPOP"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Bzmpop() SBzmpop {
	return SBzmpop{cs: append(b.get(), "BZMPOP"), ks: InitSlot, cf: blockTag}
}

func (c Bzmpop) Timeout(timeout float64) BzmpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BzmpopTimeout)(c)
}

func (c SBzmpop) Timeout(timeout float64) SBzmpopTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBzmpopTimeout)(c)
}

type BzmpopCount Completed

type SBzmpopCount SCompleted

func (c BzmpopCount) Build() Completed {
	return Completed(c)
}

func (c SBzmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type BzmpopKey Completed

type SBzmpopKey SCompleted

func (c BzmpopKey) Key(key ...string) BzmpopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBzmpopKey) Key(key ...string) SBzmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BzmpopKey) Min() BzmpopWhereMin {
	c.cs = append(c.cs, "MIN")
	return (BzmpopWhereMin)(c)
}

func (c SBzmpopKey) Min() SBzmpopWhereMin {
	c.cs = append(c.cs, "MIN")
	return (SBzmpopWhereMin)(c)
}

func (c BzmpopKey) Max() BzmpopWhereMax {
	c.cs = append(c.cs, "MAX")
	return (BzmpopWhereMax)(c)
}

func (c SBzmpopKey) Max() SBzmpopWhereMax {
	c.cs = append(c.cs, "MAX")
	return (SBzmpopWhereMax)(c)
}

type BzmpopNumkeys Completed

type SBzmpopNumkeys SCompleted

func (c BzmpopNumkeys) Key(key ...string) BzmpopKey {
	c.cs = append(c.cs, key...)
	return (BzmpopKey)(c)
}

func (c SBzmpopNumkeys) Key(key ...string) SBzmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBzmpopKey)(c)
}

type BzmpopTimeout Completed

type SBzmpopTimeout SCompleted

func (c BzmpopTimeout) Numkeys(numkeys int64) BzmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (BzmpopNumkeys)(c)
}

func (c SBzmpopTimeout) Numkeys(numkeys int64) SBzmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SBzmpopNumkeys)(c)
}

type BzmpopWhereMax Completed

type SBzmpopWhereMax SCompleted

func (c BzmpopWhereMax) Count(count int64) BzmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (BzmpopCount)(c)
}

func (c SBzmpopWhereMax) Count(count int64) SBzmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SBzmpopCount)(c)
}

func (c BzmpopWhereMax) Build() Completed {
	return Completed(c)
}

func (c SBzmpopWhereMax) Build() SCompleted {
	return SCompleted(c)
}

type BzmpopWhereMin Completed

type SBzmpopWhereMin SCompleted

func (c BzmpopWhereMin) Count(count int64) BzmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (BzmpopCount)(c)
}

func (c SBzmpopWhereMin) Count(count int64) SBzmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SBzmpopCount)(c)
}

func (c BzmpopWhereMin) Build() Completed {
	return Completed(c)
}

func (c SBzmpopWhereMin) Build() SCompleted {
	return SCompleted(c)
}

type Bzpopmax Completed

type SBzpopmax SCompleted

func (b *Builder) Bzpopmax() Bzpopmax {
	return Bzpopmax{cs: append(b.get(), "BZPOPMAX"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Bzpopmax() SBzpopmax {
	return SBzpopmax{cs: append(b.get(), "BZPOPMAX"), ks: InitSlot, cf: blockTag}
}

func (c Bzpopmax) Key(key ...string) BzpopmaxKey {
	c.cs = append(c.cs, key...)
	return (BzpopmaxKey)(c)
}

func (c SBzpopmax) Key(key ...string) SBzpopmaxKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBzpopmaxKey)(c)
}

type BzpopmaxKey Completed

type SBzpopmaxKey SCompleted

func (c BzpopmaxKey) Key(key ...string) BzpopmaxKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBzpopmaxKey) Key(key ...string) SBzpopmaxKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BzpopmaxKey) Timeout(timeout float64) BzpopmaxTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BzpopmaxTimeout)(c)
}

func (c SBzpopmaxKey) Timeout(timeout float64) SBzpopmaxTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBzpopmaxTimeout)(c)
}

type BzpopmaxTimeout Completed

type SBzpopmaxTimeout SCompleted

func (c BzpopmaxTimeout) Build() Completed {
	return Completed(c)
}

func (c SBzpopmaxTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Bzpopmin Completed

type SBzpopmin SCompleted

func (b *Builder) Bzpopmin() Bzpopmin {
	return Bzpopmin{cs: append(b.get(), "BZPOPMIN"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Bzpopmin() SBzpopmin {
	return SBzpopmin{cs: append(b.get(), "BZPOPMIN"), ks: InitSlot, cf: blockTag}
}

func (c Bzpopmin) Key(key ...string) BzpopminKey {
	c.cs = append(c.cs, key...)
	return (BzpopminKey)(c)
}

func (c SBzpopmin) Key(key ...string) SBzpopminKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SBzpopminKey)(c)
}

type BzpopminKey Completed

type SBzpopminKey SCompleted

func (c BzpopminKey) Key(key ...string) BzpopminKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SBzpopminKey) Key(key ...string) SBzpopminKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c BzpopminKey) Timeout(timeout float64) BzpopminTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BzpopminTimeout)(c)
}

func (c SBzpopminKey) Timeout(timeout float64) SBzpopminTimeout {
	c.cs = append(c.cs, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBzpopminTimeout)(c)
}

type BzpopminTimeout Completed

type SBzpopminTimeout SCompleted

func (c BzpopminTimeout) Build() Completed {
	return Completed(c)
}

func (c SBzpopminTimeout) Build() SCompleted {
	return SCompleted(c)
}

type CfAdd Completed

type SCfAdd SCompleted

func (b *Builder) CfAdd() CfAdd {
	return CfAdd{cs: append(b.get(), "CF.ADD"), ks: InitSlot}
}

func (b *SBuilder) CfAdd() SCfAdd {
	return SCfAdd{cs: append(b.get(), "CF.ADD"), ks: InitSlot}
}

func (c CfAdd) Key(key string) CfAddKey {
	c.cs = append(c.cs, key)
	return (CfAddKey)(c)
}

func (c SCfAdd) Key(key string) SCfAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfAddKey)(c)
}

type CfAddItem Completed

type SCfAddItem SCompleted

func (c CfAddItem) Build() Completed {
	return Completed(c)
}

func (c SCfAddItem) Build() SCompleted {
	return SCompleted(c)
}

type CfAddKey Completed

type SCfAddKey SCompleted

func (c CfAddKey) Item(item string) CfAddItem {
	c.cs = append(c.cs, item)
	return (CfAddItem)(c)
}

func (c SCfAddKey) Item(item string) SCfAddItem {
	c.cs = append(c.cs, item)
	return (SCfAddItem)(c)
}

type CfAddnx Completed

type SCfAddnx SCompleted

func (b *Builder) CfAddnx() CfAddnx {
	return CfAddnx{cs: append(b.get(), "CF.ADDNX"), ks: InitSlot}
}

func (b *SBuilder) CfAddnx() SCfAddnx {
	return SCfAddnx{cs: append(b.get(), "CF.ADDNX"), ks: InitSlot}
}

func (c CfAddnx) Key(key string) CfAddnxKey {
	c.cs = append(c.cs, key)
	return (CfAddnxKey)(c)
}

func (c SCfAddnx) Key(key string) SCfAddnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfAddnxKey)(c)
}

type CfAddnxItem Completed

type SCfAddnxItem SCompleted

func (c CfAddnxItem) Item(item ...string) CfAddnxItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SCfAddnxItem) Item(item ...string) SCfAddnxItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c CfAddnxItem) Build() Completed {
	return Completed(c)
}

func (c SCfAddnxItem) Build() SCompleted {
	return SCompleted(c)
}

type CfAddnxKey Completed

type SCfAddnxKey SCompleted

func (c CfAddnxKey) Item(item ...string) CfAddnxItem {
	c.cs = append(c.cs, item...)
	return (CfAddnxItem)(c)
}

func (c SCfAddnxKey) Item(item ...string) SCfAddnxItem {
	c.cs = append(c.cs, item...)
	return (SCfAddnxItem)(c)
}

type CfCount Completed

type SCfCount SCompleted

func (b *Builder) CfCount() CfCount {
	return CfCount{cs: append(b.get(), "CF.COUNT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) CfCount() SCfCount {
	return SCfCount{cs: append(b.get(), "CF.COUNT"), ks: InitSlot, cf: readonly}
}

func (c CfCount) Key(key string) CfCountKey {
	c.cs = append(c.cs, key)
	return (CfCountKey)(c)
}

func (c SCfCount) Key(key string) SCfCountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfCountKey)(c)
}

type CfCountItem Completed

type SCfCountItem SCompleted

func (c CfCountItem) Build() Completed {
	return Completed(c)
}

func (c SCfCountItem) Build() SCompleted {
	return SCompleted(c)
}

func (c CfCountItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCfCountItem) Cache() SCacheable {
	return SCacheable(c)
}

type CfCountKey Completed

type SCfCountKey SCompleted

func (c CfCountKey) Item(item string) CfCountItem {
	c.cs = append(c.cs, item)
	return (CfCountItem)(c)
}

func (c SCfCountKey) Item(item string) SCfCountItem {
	c.cs = append(c.cs, item)
	return (SCfCountItem)(c)
}

type CfDel Completed

type SCfDel SCompleted

func (b *Builder) CfDel() CfDel {
	return CfDel{cs: append(b.get(), "CF.DEL"), ks: InitSlot}
}

func (b *SBuilder) CfDel() SCfDel {
	return SCfDel{cs: append(b.get(), "CF.DEL"), ks: InitSlot}
}

func (c CfDel) Key(key string) CfDelKey {
	c.cs = append(c.cs, key)
	return (CfDelKey)(c)
}

func (c SCfDel) Key(key string) SCfDelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfDelKey)(c)
}

type CfDelItem Completed

type SCfDelItem SCompleted

func (c CfDelItem) Build() Completed {
	return Completed(c)
}

func (c SCfDelItem) Build() SCompleted {
	return SCompleted(c)
}

type CfDelKey Completed

type SCfDelKey SCompleted

func (c CfDelKey) Item(item string) CfDelItem {
	c.cs = append(c.cs, item)
	return (CfDelItem)(c)
}

func (c SCfDelKey) Item(item string) SCfDelItem {
	c.cs = append(c.cs, item)
	return (SCfDelItem)(c)
}

type CfExists Completed

type SCfExists SCompleted

func (b *Builder) CfExists() CfExists {
	return CfExists{cs: append(b.get(), "CF.EXISTS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) CfExists() SCfExists {
	return SCfExists{cs: append(b.get(), "CF.EXISTS"), ks: InitSlot, cf: readonly}
}

func (c CfExists) Key(key string) CfExistsKey {
	c.cs = append(c.cs, key)
	return (CfExistsKey)(c)
}

func (c SCfExists) Key(key string) SCfExistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfExistsKey)(c)
}

type CfExistsItem Completed

type SCfExistsItem SCompleted

func (c CfExistsItem) Build() Completed {
	return Completed(c)
}

func (c SCfExistsItem) Build() SCompleted {
	return SCompleted(c)
}

func (c CfExistsItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCfExistsItem) Cache() SCacheable {
	return SCacheable(c)
}

type CfExistsKey Completed

type SCfExistsKey SCompleted

func (c CfExistsKey) Item(item string) CfExistsItem {
	c.cs = append(c.cs, item)
	return (CfExistsItem)(c)
}

func (c SCfExistsKey) Item(item string) SCfExistsItem {
	c.cs = append(c.cs, item)
	return (SCfExistsItem)(c)
}

type CfInfo Completed

type SCfInfo SCompleted

func (b *Builder) CfInfo() CfInfo {
	return CfInfo{cs: append(b.get(), "CF.INFO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) CfInfo() SCfInfo {
	return SCfInfo{cs: append(b.get(), "CF.INFO"), ks: InitSlot, cf: readonly}
}

func (c CfInfo) Key(key string) CfInfoKey {
	c.cs = append(c.cs, key)
	return (CfInfoKey)(c)
}

func (c SCfInfo) Key(key string) SCfInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfInfoKey)(c)
}

type CfInfoKey Completed

type SCfInfoKey SCompleted

func (c CfInfoKey) Build() Completed {
	return Completed(c)
}

func (c SCfInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c CfInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCfInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type CfInsert Completed

type SCfInsert SCompleted

func (b *Builder) CfInsert() CfInsert {
	return CfInsert{cs: append(b.get(), "CF.INSERT"), ks: InitSlot}
}

func (b *SBuilder) CfInsert() SCfInsert {
	return SCfInsert{cs: append(b.get(), "CF.INSERT"), ks: InitSlot}
}

func (c CfInsert) Key(key string) CfInsertKey {
	c.cs = append(c.cs, key)
	return (CfInsertKey)(c)
}

func (c SCfInsert) Key(key string) SCfInsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfInsertKey)(c)
}

type CfInsertCapacity Completed

type SCfInsertCapacity SCompleted

func (c CfInsertCapacity) Nocreate() CfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (CfInsertNocreate)(c)
}

func (c SCfInsertCapacity) Nocreate() SCfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SCfInsertNocreate)(c)
}

func (c CfInsertCapacity) Items() CfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (CfInsertItems)(c)
}

func (c SCfInsertCapacity) Items() SCfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SCfInsertItems)(c)
}

type CfInsertItem Completed

type SCfInsertItem SCompleted

func (c CfInsertItem) Item(item ...string) CfInsertItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SCfInsertItem) Item(item ...string) SCfInsertItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c CfInsertItem) Build() Completed {
	return Completed(c)
}

func (c SCfInsertItem) Build() SCompleted {
	return SCompleted(c)
}

type CfInsertItems Completed

type SCfInsertItems SCompleted

func (c CfInsertItems) Item(item ...string) CfInsertItem {
	c.cs = append(c.cs, item...)
	return (CfInsertItem)(c)
}

func (c SCfInsertItems) Item(item ...string) SCfInsertItem {
	c.cs = append(c.cs, item...)
	return (SCfInsertItem)(c)
}

type CfInsertKey Completed

type SCfInsertKey SCompleted

func (c CfInsertKey) Capacity(capacity int64) CfInsertCapacity {
	c.cs = append(c.cs, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (CfInsertCapacity)(c)
}

func (c SCfInsertKey) Capacity(capacity int64) SCfInsertCapacity {
	c.cs = append(c.cs, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (SCfInsertCapacity)(c)
}

func (c CfInsertKey) Nocreate() CfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (CfInsertNocreate)(c)
}

func (c SCfInsertKey) Nocreate() SCfInsertNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SCfInsertNocreate)(c)
}

func (c CfInsertKey) Items() CfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (CfInsertItems)(c)
}

func (c SCfInsertKey) Items() SCfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SCfInsertItems)(c)
}

type CfInsertNocreate Completed

type SCfInsertNocreate SCompleted

func (c CfInsertNocreate) Items() CfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (CfInsertItems)(c)
}

func (c SCfInsertNocreate) Items() SCfInsertItems {
	c.cs = append(c.cs, "ITEMS")
	return (SCfInsertItems)(c)
}

type CfInsertnx Completed

type SCfInsertnx SCompleted

func (b *Builder) CfInsertnx() CfInsertnx {
	return CfInsertnx{cs: append(b.get(), "CF.INSERTNX"), ks: InitSlot}
}

func (b *SBuilder) CfInsertnx() SCfInsertnx {
	return SCfInsertnx{cs: append(b.get(), "CF.INSERTNX"), ks: InitSlot}
}

func (c CfInsertnx) Key(key string) CfInsertnxKey {
	c.cs = append(c.cs, key)
	return (CfInsertnxKey)(c)
}

func (c SCfInsertnx) Key(key string) SCfInsertnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfInsertnxKey)(c)
}

type CfInsertnxCapacity Completed

type SCfInsertnxCapacity SCompleted

func (c CfInsertnxCapacity) Nocreate() CfInsertnxNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (CfInsertnxNocreate)(c)
}

func (c SCfInsertnxCapacity) Nocreate() SCfInsertnxNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SCfInsertnxNocreate)(c)
}

func (c CfInsertnxCapacity) Items() CfInsertnxItems {
	c.cs = append(c.cs, "ITEMS")
	return (CfInsertnxItems)(c)
}

func (c SCfInsertnxCapacity) Items() SCfInsertnxItems {
	c.cs = append(c.cs, "ITEMS")
	return (SCfInsertnxItems)(c)
}

type CfInsertnxItem Completed

type SCfInsertnxItem SCompleted

func (c CfInsertnxItem) Item(item ...string) CfInsertnxItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SCfInsertnxItem) Item(item ...string) SCfInsertnxItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c CfInsertnxItem) Build() Completed {
	return Completed(c)
}

func (c SCfInsertnxItem) Build() SCompleted {
	return SCompleted(c)
}

type CfInsertnxItems Completed

type SCfInsertnxItems SCompleted

func (c CfInsertnxItems) Item(item ...string) CfInsertnxItem {
	c.cs = append(c.cs, item...)
	return (CfInsertnxItem)(c)
}

func (c SCfInsertnxItems) Item(item ...string) SCfInsertnxItem {
	c.cs = append(c.cs, item...)
	return (SCfInsertnxItem)(c)
}

type CfInsertnxKey Completed

type SCfInsertnxKey SCompleted

func (c CfInsertnxKey) Capacity(capacity int64) CfInsertnxCapacity {
	c.cs = append(c.cs, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (CfInsertnxCapacity)(c)
}

func (c SCfInsertnxKey) Capacity(capacity int64) SCfInsertnxCapacity {
	c.cs = append(c.cs, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (SCfInsertnxCapacity)(c)
}

func (c CfInsertnxKey) Nocreate() CfInsertnxNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (CfInsertnxNocreate)(c)
}

func (c SCfInsertnxKey) Nocreate() SCfInsertnxNocreate {
	c.cs = append(c.cs, "NOCREATE")
	return (SCfInsertnxNocreate)(c)
}

func (c CfInsertnxKey) Items() CfInsertnxItems {
	c.cs = append(c.cs, "ITEMS")
	return (CfInsertnxItems)(c)
}

func (c SCfInsertnxKey) Items() SCfInsertnxItems {
	c.cs = append(c.cs, "ITEMS")
	return (SCfInsertnxItems)(c)
}

type CfInsertnxNocreate Completed

type SCfInsertnxNocreate SCompleted

func (c CfInsertnxNocreate) Items() CfInsertnxItems {
	c.cs = append(c.cs, "ITEMS")
	return (CfInsertnxItems)(c)
}

func (c SCfInsertnxNocreate) Items() SCfInsertnxItems {
	c.cs = append(c.cs, "ITEMS")
	return (SCfInsertnxItems)(c)
}

type CfLoadchunk Completed

type SCfLoadchunk SCompleted

func (b *Builder) CfLoadchunk() CfLoadchunk {
	return CfLoadchunk{cs: append(b.get(), "CF.LOADCHUNK"), ks: InitSlot}
}

func (b *SBuilder) CfLoadchunk() SCfLoadchunk {
	return SCfLoadchunk{cs: append(b.get(), "CF.LOADCHUNK"), ks: InitSlot}
}

func (c CfLoadchunk) Key(key string) CfLoadchunkKey {
	c.cs = append(c.cs, key)
	return (CfLoadchunkKey)(c)
}

func (c SCfLoadchunk) Key(key string) SCfLoadchunkKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfLoadchunkKey)(c)
}

type CfLoadchunkData Completed

type SCfLoadchunkData SCompleted

func (c CfLoadchunkData) Build() Completed {
	return Completed(c)
}

func (c SCfLoadchunkData) Build() SCompleted {
	return SCompleted(c)
}

type CfLoadchunkIterator Completed

type SCfLoadchunkIterator SCompleted

func (c CfLoadchunkIterator) Data(data string) CfLoadchunkData {
	c.cs = append(c.cs, data)
	return (CfLoadchunkData)(c)
}

func (c SCfLoadchunkIterator) Data(data string) SCfLoadchunkData {
	c.cs = append(c.cs, data)
	return (SCfLoadchunkData)(c)
}

type CfLoadchunkKey Completed

type SCfLoadchunkKey SCompleted

func (c CfLoadchunkKey) Iterator(iterator int64) CfLoadchunkIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (CfLoadchunkIterator)(c)
}

func (c SCfLoadchunkKey) Iterator(iterator int64) SCfLoadchunkIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (SCfLoadchunkIterator)(c)
}

type CfMexists Completed

type SCfMexists SCompleted

func (b *Builder) CfMexists() CfMexists {
	return CfMexists{cs: append(b.get(), "CF.MEXISTS"), ks: InitSlot}
}

func (b *SBuilder) CfMexists() SCfMexists {
	return SCfMexists{cs: append(b.get(), "CF.MEXISTS"), ks: InitSlot}
}

func (c CfMexists) Key(key string) CfMexistsKey {
	c.cs = append(c.cs, key)
	return (CfMexistsKey)(c)
}

func (c SCfMexists) Key(key string) SCfMexistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfMexistsKey)(c)
}

type CfMexistsItem Completed

type SCfMexistsItem SCompleted

func (c CfMexistsItem) Item(item ...string) CfMexistsItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SCfMexistsItem) Item(item ...string) SCfMexistsItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c CfMexistsItem) Build() Completed {
	return Completed(c)
}

func (c SCfMexistsItem) Build() SCompleted {
	return SCompleted(c)
}

type CfMexistsKey Completed

type SCfMexistsKey SCompleted

func (c CfMexistsKey) Item(item ...string) CfMexistsItem {
	c.cs = append(c.cs, item...)
	return (CfMexistsItem)(c)
}

func (c SCfMexistsKey) Item(item ...string) SCfMexistsItem {
	c.cs = append(c.cs, item...)
	return (SCfMexistsItem)(c)
}

type CfReserve Completed

type SCfReserve SCompleted

func (b *Builder) CfReserve() CfReserve {
	return CfReserve{cs: append(b.get(), "CF.RESERVE"), ks: InitSlot}
}

func (b *SBuilder) CfReserve() SCfReserve {
	return SCfReserve{cs: append(b.get(), "CF.RESERVE"), ks: InitSlot}
}

func (c CfReserve) Key(key string) CfReserveKey {
	c.cs = append(c.cs, key)
	return (CfReserveKey)(c)
}

func (c SCfReserve) Key(key string) SCfReserveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfReserveKey)(c)
}

type CfReserveBucketsize Completed

type SCfReserveBucketsize SCompleted

func (c CfReserveBucketsize) Maxiterations(maxiterations int64) CfReserveMaxiterations {
	c.cs = append(c.cs, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (CfReserveMaxiterations)(c)
}

func (c SCfReserveBucketsize) Maxiterations(maxiterations int64) SCfReserveMaxiterations {
	c.cs = append(c.cs, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (SCfReserveMaxiterations)(c)
}

func (c CfReserveBucketsize) Expansion(expansion int64) CfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (CfReserveExpansion)(c)
}

func (c SCfReserveBucketsize) Expansion(expansion int64) SCfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SCfReserveExpansion)(c)
}

func (c CfReserveBucketsize) Build() Completed {
	return Completed(c)
}

func (c SCfReserveBucketsize) Build() SCompleted {
	return SCompleted(c)
}

type CfReserveCapacity Completed

type SCfReserveCapacity SCompleted

func (c CfReserveCapacity) Bucketsize(bucketsize int64) CfReserveBucketsize {
	c.cs = append(c.cs, "BUCKETSIZE", strconv.FormatInt(bucketsize, 10))
	return (CfReserveBucketsize)(c)
}

func (c SCfReserveCapacity) Bucketsize(bucketsize int64) SCfReserveBucketsize {
	c.cs = append(c.cs, "BUCKETSIZE", strconv.FormatInt(bucketsize, 10))
	return (SCfReserveBucketsize)(c)
}

func (c CfReserveCapacity) Maxiterations(maxiterations int64) CfReserveMaxiterations {
	c.cs = append(c.cs, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (CfReserveMaxiterations)(c)
}

func (c SCfReserveCapacity) Maxiterations(maxiterations int64) SCfReserveMaxiterations {
	c.cs = append(c.cs, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (SCfReserveMaxiterations)(c)
}

func (c CfReserveCapacity) Expansion(expansion int64) CfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (CfReserveExpansion)(c)
}

func (c SCfReserveCapacity) Expansion(expansion int64) SCfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SCfReserveExpansion)(c)
}

func (c CfReserveCapacity) Build() Completed {
	return Completed(c)
}

func (c SCfReserveCapacity) Build() SCompleted {
	return SCompleted(c)
}

type CfReserveExpansion Completed

type SCfReserveExpansion SCompleted

func (c CfReserveExpansion) Build() Completed {
	return Completed(c)
}

func (c SCfReserveExpansion) Build() SCompleted {
	return SCompleted(c)
}

type CfReserveKey Completed

type SCfReserveKey SCompleted

func (c CfReserveKey) Capacity(capacity int64) CfReserveCapacity {
	c.cs = append(c.cs, strconv.FormatInt(capacity, 10))
	return (CfReserveCapacity)(c)
}

func (c SCfReserveKey) Capacity(capacity int64) SCfReserveCapacity {
	c.cs = append(c.cs, strconv.FormatInt(capacity, 10))
	return (SCfReserveCapacity)(c)
}

type CfReserveMaxiterations Completed

type SCfReserveMaxiterations SCompleted

func (c CfReserveMaxiterations) Expansion(expansion int64) CfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (CfReserveExpansion)(c)
}

func (c SCfReserveMaxiterations) Expansion(expansion int64) SCfReserveExpansion {
	c.cs = append(c.cs, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SCfReserveExpansion)(c)
}

func (c CfReserveMaxiterations) Build() Completed {
	return Completed(c)
}

func (c SCfReserveMaxiterations) Build() SCompleted {
	return SCompleted(c)
}

type CfScandump Completed

type SCfScandump SCompleted

func (b *Builder) CfScandump() CfScandump {
	return CfScandump{cs: append(b.get(), "CF.SCANDUMP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) CfScandump() SCfScandump {
	return SCfScandump{cs: append(b.get(), "CF.SCANDUMP"), ks: InitSlot, cf: readonly}
}

func (c CfScandump) Key(key string) CfScandumpKey {
	c.cs = append(c.cs, key)
	return (CfScandumpKey)(c)
}

func (c SCfScandump) Key(key string) SCfScandumpKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCfScandumpKey)(c)
}

type CfScandumpIterator Completed

type SCfScandumpIterator SCompleted

func (c CfScandumpIterator) Build() Completed {
	return Completed(c)
}

func (c SCfScandumpIterator) Build() SCompleted {
	return SCompleted(c)
}

type CfScandumpKey Completed

type SCfScandumpKey SCompleted

func (c CfScandumpKey) Iterator(iterator int64) CfScandumpIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (CfScandumpIterator)(c)
}

func (c SCfScandumpKey) Iterator(iterator int64) SCfScandumpIterator {
	c.cs = append(c.cs, strconv.FormatInt(iterator, 10))
	return (SCfScandumpIterator)(c)
}

type ClientCaching Completed

type SClientCaching SCompleted

func (b *Builder) ClientCaching() ClientCaching {
	return ClientCaching{cs: append(b.get(), "CLIENT", "CACHING"), ks: InitSlot}
}

func (b *SBuilder) ClientCaching() SClientCaching {
	return SClientCaching{cs: append(b.get(), "CLIENT", "CACHING"), ks: InitSlot}
}

func (c ClientCaching) Yes() ClientCachingModeYes {
	c.cs = append(c.cs, "YES")
	return (ClientCachingModeYes)(c)
}

func (c SClientCaching) Yes() SClientCachingModeYes {
	c.cs = append(c.cs, "YES")
	return (SClientCachingModeYes)(c)
}

func (c ClientCaching) No() ClientCachingModeNo {
	c.cs = append(c.cs, "NO")
	return (ClientCachingModeNo)(c)
}

func (c SClientCaching) No() SClientCachingModeNo {
	c.cs = append(c.cs, "NO")
	return (SClientCachingModeNo)(c)
}

type ClientCachingModeNo Completed

type SClientCachingModeNo SCompleted

func (c ClientCachingModeNo) Build() Completed {
	return Completed(c)
}

func (c SClientCachingModeNo) Build() SCompleted {
	return SCompleted(c)
}

type ClientCachingModeYes Completed

type SClientCachingModeYes SCompleted

func (c ClientCachingModeYes) Build() Completed {
	return Completed(c)
}

func (c SClientCachingModeYes) Build() SCompleted {
	return SCompleted(c)
}

type ClientGetname Completed

type SClientGetname SCompleted

func (b *Builder) ClientGetname() ClientGetname {
	return ClientGetname{cs: append(b.get(), "CLIENT", "GETNAME"), ks: InitSlot}
}

func (b *SBuilder) ClientGetname() SClientGetname {
	return SClientGetname{cs: append(b.get(), "CLIENT", "GETNAME"), ks: InitSlot}
}

func (c ClientGetname) Build() Completed {
	return Completed(c)
}

func (c SClientGetname) Build() SCompleted {
	return SCompleted(c)
}

type ClientGetredir Completed

type SClientGetredir SCompleted

func (b *Builder) ClientGetredir() ClientGetredir {
	return ClientGetredir{cs: append(b.get(), "CLIENT", "GETREDIR"), ks: InitSlot}
}

func (b *SBuilder) ClientGetredir() SClientGetredir {
	return SClientGetredir{cs: append(b.get(), "CLIENT", "GETREDIR"), ks: InitSlot}
}

func (c ClientGetredir) Build() Completed {
	return Completed(c)
}

func (c SClientGetredir) Build() SCompleted {
	return SCompleted(c)
}

type ClientId Completed

type SClientId SCompleted

func (b *Builder) ClientId() ClientId {
	return ClientId{cs: append(b.get(), "CLIENT", "ID"), ks: InitSlot}
}

func (b *SBuilder) ClientId() SClientId {
	return SClientId{cs: append(b.get(), "CLIENT", "ID"), ks: InitSlot}
}

func (c ClientId) Build() Completed {
	return Completed(c)
}

func (c SClientId) Build() SCompleted {
	return SCompleted(c)
}

type ClientInfo Completed

type SClientInfo SCompleted

func (b *Builder) ClientInfo() ClientInfo {
	return ClientInfo{cs: append(b.get(), "CLIENT", "INFO"), ks: InitSlot}
}

func (b *SBuilder) ClientInfo() SClientInfo {
	return SClientInfo{cs: append(b.get(), "CLIENT", "INFO"), ks: InitSlot}
}

func (c ClientInfo) Build() Completed {
	return Completed(c)
}

func (c SClientInfo) Build() SCompleted {
	return SCompleted(c)
}

type ClientKill Completed

type SClientKill SCompleted

func (b *Builder) ClientKill() ClientKill {
	return ClientKill{cs: append(b.get(), "CLIENT", "KILL"), ks: InitSlot}
}

func (b *SBuilder) ClientKill() SClientKill {
	return SClientKill{cs: append(b.get(), "CLIENT", "KILL"), ks: InitSlot}
}

func (c ClientKill) IpPort(ipPort string) ClientKillIpPort {
	c.cs = append(c.cs, ipPort)
	return (ClientKillIpPort)(c)
}

func (c SClientKill) IpPort(ipPort string) SClientKillIpPort {
	c.cs = append(c.cs, ipPort)
	return (SClientKillIpPort)(c)
}

func (c ClientKill) Id(clientId int64) ClientKillId {
	c.cs = append(c.cs, "ID", strconv.FormatInt(clientId, 10))
	return (ClientKillId)(c)
}

func (c SClientKill) Id(clientId int64) SClientKillId {
	c.cs = append(c.cs, "ID", strconv.FormatInt(clientId, 10))
	return (SClientKillId)(c)
}

func (c ClientKill) TypeNormal() ClientKillTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (ClientKillTypeNormal)(c)
}

func (c SClientKill) TypeNormal() SClientKillTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (SClientKillTypeNormal)(c)
}

func (c ClientKill) TypeMaster() ClientKillTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (ClientKillTypeMaster)(c)
}

func (c SClientKill) TypeMaster() SClientKillTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (SClientKillTypeMaster)(c)
}

func (c ClientKill) TypeSlave() ClientKillTypeSlave {
	c.cs = append(c.cs, "TYPE", "slave")
	return (ClientKillTypeSlave)(c)
}

func (c SClientKill) TypeSlave() SClientKillTypeSlave {
	c.cs = append(c.cs, "TYPE", "slave")
	return (SClientKillTypeSlave)(c)
}

func (c ClientKill) TypePubsub() ClientKillTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (ClientKillTypePubsub)(c)
}

func (c SClientKill) TypePubsub() SClientKillTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (SClientKillTypePubsub)(c)
}

func (c ClientKill) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKill) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKill) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKill) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKill) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKill) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKill) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKill) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKill) Build() Completed {
	return Completed(c)
}

func (c SClientKill) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillAddr Completed

type SClientKillAddr SCompleted

func (c ClientKillAddr) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillAddr) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillAddr) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillAddr) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillAddr) Build() Completed {
	return Completed(c)
}

func (c SClientKillAddr) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillId Completed

type SClientKillId SCompleted

func (c ClientKillId) TypeNormal() ClientKillTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (ClientKillTypeNormal)(c)
}

func (c SClientKillId) TypeNormal() SClientKillTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (SClientKillTypeNormal)(c)
}

func (c ClientKillId) TypeMaster() ClientKillTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (ClientKillTypeMaster)(c)
}

func (c SClientKillId) TypeMaster() SClientKillTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (SClientKillTypeMaster)(c)
}

func (c ClientKillId) TypeSlave() ClientKillTypeSlave {
	c.cs = append(c.cs, "TYPE", "slave")
	return (ClientKillTypeSlave)(c)
}

func (c SClientKillId) TypeSlave() SClientKillTypeSlave {
	c.cs = append(c.cs, "TYPE", "slave")
	return (SClientKillTypeSlave)(c)
}

func (c ClientKillId) TypePubsub() ClientKillTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (ClientKillTypePubsub)(c)
}

func (c SClientKillId) TypePubsub() SClientKillTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (SClientKillTypePubsub)(c)
}

func (c ClientKillId) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillId) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillId) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillId) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillId) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillId) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillId) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillId) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillId) Build() Completed {
	return Completed(c)
}

func (c SClientKillId) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillIpPort Completed

type SClientKillIpPort SCompleted

func (c ClientKillIpPort) Id(clientId int64) ClientKillId {
	c.cs = append(c.cs, "ID", strconv.FormatInt(clientId, 10))
	return (ClientKillId)(c)
}

func (c SClientKillIpPort) Id(clientId int64) SClientKillId {
	c.cs = append(c.cs, "ID", strconv.FormatInt(clientId, 10))
	return (SClientKillId)(c)
}

func (c ClientKillIpPort) TypeNormal() ClientKillTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (ClientKillTypeNormal)(c)
}

func (c SClientKillIpPort) TypeNormal() SClientKillTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (SClientKillTypeNormal)(c)
}

func (c ClientKillIpPort) TypeMaster() ClientKillTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (ClientKillTypeMaster)(c)
}

func (c SClientKillIpPort) TypeMaster() SClientKillTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (SClientKillTypeMaster)(c)
}

func (c ClientKillIpPort) TypeSlave() ClientKillTypeSlave {
	c.cs = append(c.cs, "TYPE", "slave")
	return (ClientKillTypeSlave)(c)
}

func (c SClientKillIpPort) TypeSlave() SClientKillTypeSlave {
	c.cs = append(c.cs, "TYPE", "slave")
	return (SClientKillTypeSlave)(c)
}

func (c ClientKillIpPort) TypePubsub() ClientKillTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (ClientKillTypePubsub)(c)
}

func (c SClientKillIpPort) TypePubsub() SClientKillTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (SClientKillTypePubsub)(c)
}

func (c ClientKillIpPort) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillIpPort) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillIpPort) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillIpPort) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillIpPort) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillIpPort) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillIpPort) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillIpPort) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillIpPort) Build() Completed {
	return Completed(c)
}

func (c SClientKillIpPort) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillLaddr Completed

type SClientKillLaddr SCompleted

func (c ClientKillLaddr) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillLaddr) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillLaddr) Build() Completed {
	return Completed(c)
}

func (c SClientKillLaddr) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillSkipme Completed

type SClientKillSkipme SCompleted

func (c ClientKillSkipme) Build() Completed {
	return Completed(c)
}

func (c SClientKillSkipme) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypeMaster Completed

type SClientKillTypeMaster SCompleted

func (c ClientKillTypeMaster) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypeMaster) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypeMaster) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypeMaster) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypeMaster) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypeMaster) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypeMaster) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypeMaster) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypeMaster) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypeMaster) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypeNormal Completed

type SClientKillTypeNormal SCompleted

func (c ClientKillTypeNormal) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypeNormal) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypeNormal) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypeNormal) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypeNormal) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypeNormal) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypeNormal) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypeNormal) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypeNormal) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypeNormal) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypePubsub Completed

type SClientKillTypePubsub SCompleted

func (c ClientKillTypePubsub) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypePubsub) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypePubsub) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypePubsub) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypePubsub) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypePubsub) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypePubsub) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypePubsub) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypePubsub) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypePubsub) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypeSlave Completed

type SClientKillTypeSlave SCompleted

func (c ClientKillTypeSlave) User(username string) ClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypeSlave) User(username string) SClientKillUser {
	c.cs = append(c.cs, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypeSlave) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypeSlave) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypeSlave) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypeSlave) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypeSlave) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypeSlave) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypeSlave) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypeSlave) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillUser Completed

type SClientKillUser SCompleted

func (c ClientKillUser) Addr(ipPort string) ClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillUser) Addr(ipPort string) SClientKillAddr {
	c.cs = append(c.cs, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillUser) Laddr(ipPort string) ClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillUser) Laddr(ipPort string) SClientKillLaddr {
	c.cs = append(c.cs, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillUser) Skipme(yesNo string) ClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillUser) Skipme(yesNo string) SClientKillSkipme {
	c.cs = append(c.cs, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillUser) Build() Completed {
	return Completed(c)
}

func (c SClientKillUser) Build() SCompleted {
	return SCompleted(c)
}

type ClientList Completed

type SClientList SCompleted

func (b *Builder) ClientList() ClientList {
	return ClientList{cs: append(b.get(), "CLIENT", "LIST"), ks: InitSlot}
}

func (b *SBuilder) ClientList() SClientList {
	return SClientList{cs: append(b.get(), "CLIENT", "LIST"), ks: InitSlot}
}

func (c ClientList) TypeNormal() ClientListTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (ClientListTypeNormal)(c)
}

func (c SClientList) TypeNormal() SClientListTypeNormal {
	c.cs = append(c.cs, "TYPE", "normal")
	return (SClientListTypeNormal)(c)
}

func (c ClientList) TypeMaster() ClientListTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (ClientListTypeMaster)(c)
}

func (c SClientList) TypeMaster() SClientListTypeMaster {
	c.cs = append(c.cs, "TYPE", "master")
	return (SClientListTypeMaster)(c)
}

func (c ClientList) TypeReplica() ClientListTypeReplica {
	c.cs = append(c.cs, "TYPE", "replica")
	return (ClientListTypeReplica)(c)
}

func (c SClientList) TypeReplica() SClientListTypeReplica {
	c.cs = append(c.cs, "TYPE", "replica")
	return (SClientListTypeReplica)(c)
}

func (c ClientList) TypePubsub() ClientListTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (ClientListTypePubsub)(c)
}

func (c SClientList) TypePubsub() SClientListTypePubsub {
	c.cs = append(c.cs, "TYPE", "pubsub")
	return (SClientListTypePubsub)(c)
}

func (c ClientList) Id() ClientListIdId {
	c.cs = append(c.cs, "ID")
	return (ClientListIdId)(c)
}

func (c SClientList) Id() SClientListIdId {
	c.cs = append(c.cs, "ID")
	return (SClientListIdId)(c)
}

func (c ClientList) Build() Completed {
	return Completed(c)
}

func (c SClientList) Build() SCompleted {
	return SCompleted(c)
}

type ClientListIdClientId Completed

type SClientListIdClientId SCompleted

func (c ClientListIdClientId) ClientId(clientId ...int64) ClientListIdClientId {
	for _, n := range clientId {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SClientListIdClientId) ClientId(clientId ...int64) SClientListIdClientId {
	for _, n := range clientId {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ClientListIdClientId) Build() Completed {
	return Completed(c)
}

func (c SClientListIdClientId) Build() SCompleted {
	return SCompleted(c)
}

type ClientListIdId Completed

type SClientListIdId SCompleted

func (c ClientListIdId) ClientId(clientId ...int64) ClientListIdClientId {
	for _, n := range clientId {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ClientListIdClientId)(c)
}

func (c SClientListIdId) ClientId(clientId ...int64) SClientListIdClientId {
	for _, n := range clientId {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SClientListIdClientId)(c)
}

type ClientListTypeMaster Completed

type SClientListTypeMaster SCompleted

func (c ClientListTypeMaster) Id() ClientListIdId {
	c.cs = append(c.cs, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypeMaster) Id() SClientListIdId {
	c.cs = append(c.cs, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypeMaster) Build() Completed {
	return Completed(c)
}

func (c SClientListTypeMaster) Build() SCompleted {
	return SCompleted(c)
}

type ClientListTypeNormal Completed

type SClientListTypeNormal SCompleted

func (c ClientListTypeNormal) Id() ClientListIdId {
	c.cs = append(c.cs, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypeNormal) Id() SClientListIdId {
	c.cs = append(c.cs, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypeNormal) Build() Completed {
	return Completed(c)
}

func (c SClientListTypeNormal) Build() SCompleted {
	return SCompleted(c)
}

type ClientListTypePubsub Completed

type SClientListTypePubsub SCompleted

func (c ClientListTypePubsub) Id() ClientListIdId {
	c.cs = append(c.cs, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypePubsub) Id() SClientListIdId {
	c.cs = append(c.cs, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypePubsub) Build() Completed {
	return Completed(c)
}

func (c SClientListTypePubsub) Build() SCompleted {
	return SCompleted(c)
}

type ClientListTypeReplica Completed

type SClientListTypeReplica SCompleted

func (c ClientListTypeReplica) Id() ClientListIdId {
	c.cs = append(c.cs, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypeReplica) Id() SClientListIdId {
	c.cs = append(c.cs, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypeReplica) Build() Completed {
	return Completed(c)
}

func (c SClientListTypeReplica) Build() SCompleted {
	return SCompleted(c)
}

type ClientNoEvict Completed

type SClientNoEvict SCompleted

func (b *Builder) ClientNoEvict() ClientNoEvict {
	return ClientNoEvict{cs: append(b.get(), "CLIENT", "NO-EVICT"), ks: InitSlot}
}

func (b *SBuilder) ClientNoEvict() SClientNoEvict {
	return SClientNoEvict{cs: append(b.get(), "CLIENT", "NO-EVICT"), ks: InitSlot}
}

func (c ClientNoEvict) On() ClientNoEvictEnabledOn {
	c.cs = append(c.cs, "ON")
	return (ClientNoEvictEnabledOn)(c)
}

func (c SClientNoEvict) On() SClientNoEvictEnabledOn {
	c.cs = append(c.cs, "ON")
	return (SClientNoEvictEnabledOn)(c)
}

func (c ClientNoEvict) Off() ClientNoEvictEnabledOff {
	c.cs = append(c.cs, "OFF")
	return (ClientNoEvictEnabledOff)(c)
}

func (c SClientNoEvict) Off() SClientNoEvictEnabledOff {
	c.cs = append(c.cs, "OFF")
	return (SClientNoEvictEnabledOff)(c)
}

type ClientNoEvictEnabledOff Completed

type SClientNoEvictEnabledOff SCompleted

func (c ClientNoEvictEnabledOff) Build() Completed {
	return Completed(c)
}

func (c SClientNoEvictEnabledOff) Build() SCompleted {
	return SCompleted(c)
}

type ClientNoEvictEnabledOn Completed

type SClientNoEvictEnabledOn SCompleted

func (c ClientNoEvictEnabledOn) Build() Completed {
	return Completed(c)
}

func (c SClientNoEvictEnabledOn) Build() SCompleted {
	return SCompleted(c)
}

type ClientPause Completed

type SClientPause SCompleted

func (b *Builder) ClientPause() ClientPause {
	return ClientPause{cs: append(b.get(), "CLIENT", "PAUSE"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) ClientPause() SClientPause {
	return SClientPause{cs: append(b.get(), "CLIENT", "PAUSE"), ks: InitSlot, cf: blockTag}
}

func (c ClientPause) Timeout(timeout int64) ClientPauseTimeout {
	c.cs = append(c.cs, strconv.FormatInt(timeout, 10))
	return (ClientPauseTimeout)(c)
}

func (c SClientPause) Timeout(timeout int64) SClientPauseTimeout {
	c.cs = append(c.cs, strconv.FormatInt(timeout, 10))
	return (SClientPauseTimeout)(c)
}

type ClientPauseModeAll Completed

type SClientPauseModeAll SCompleted

func (c ClientPauseModeAll) Build() Completed {
	return Completed(c)
}

func (c SClientPauseModeAll) Build() SCompleted {
	return SCompleted(c)
}

type ClientPauseModeWrite Completed

type SClientPauseModeWrite SCompleted

func (c ClientPauseModeWrite) Build() Completed {
	return Completed(c)
}

func (c SClientPauseModeWrite) Build() SCompleted {
	return SCompleted(c)
}

type ClientPauseTimeout Completed

type SClientPauseTimeout SCompleted

func (c ClientPauseTimeout) Write() ClientPauseModeWrite {
	c.cs = append(c.cs, "WRITE")
	return (ClientPauseModeWrite)(c)
}

func (c SClientPauseTimeout) Write() SClientPauseModeWrite {
	c.cs = append(c.cs, "WRITE")
	return (SClientPauseModeWrite)(c)
}

func (c ClientPauseTimeout) All() ClientPauseModeAll {
	c.cs = append(c.cs, "ALL")
	return (ClientPauseModeAll)(c)
}

func (c SClientPauseTimeout) All() SClientPauseModeAll {
	c.cs = append(c.cs, "ALL")
	return (SClientPauseModeAll)(c)
}

func (c ClientPauseTimeout) Build() Completed {
	return Completed(c)
}

func (c SClientPauseTimeout) Build() SCompleted {
	return SCompleted(c)
}

type ClientReply Completed

type SClientReply SCompleted

func (b *Builder) ClientReply() ClientReply {
	return ClientReply{cs: append(b.get(), "CLIENT", "REPLY"), ks: InitSlot}
}

func (b *SBuilder) ClientReply() SClientReply {
	return SClientReply{cs: append(b.get(), "CLIENT", "REPLY"), ks: InitSlot}
}

func (c ClientReply) On() ClientReplyReplyModeOn {
	c.cs = append(c.cs, "ON")
	return (ClientReplyReplyModeOn)(c)
}

func (c SClientReply) On() SClientReplyReplyModeOn {
	c.cs = append(c.cs, "ON")
	return (SClientReplyReplyModeOn)(c)
}

func (c ClientReply) Off() ClientReplyReplyModeOff {
	c.cs = append(c.cs, "OFF")
	return (ClientReplyReplyModeOff)(c)
}

func (c SClientReply) Off() SClientReplyReplyModeOff {
	c.cs = append(c.cs, "OFF")
	return (SClientReplyReplyModeOff)(c)
}

func (c ClientReply) Skip() ClientReplyReplyModeSkip {
	c.cs = append(c.cs, "SKIP")
	return (ClientReplyReplyModeSkip)(c)
}

func (c SClientReply) Skip() SClientReplyReplyModeSkip {
	c.cs = append(c.cs, "SKIP")
	return (SClientReplyReplyModeSkip)(c)
}

type ClientReplyReplyModeOff Completed

type SClientReplyReplyModeOff SCompleted

func (c ClientReplyReplyModeOff) Build() Completed {
	return Completed(c)
}

func (c SClientReplyReplyModeOff) Build() SCompleted {
	return SCompleted(c)
}

type ClientReplyReplyModeOn Completed

type SClientReplyReplyModeOn SCompleted

func (c ClientReplyReplyModeOn) Build() Completed {
	return Completed(c)
}

func (c SClientReplyReplyModeOn) Build() SCompleted {
	return SCompleted(c)
}

type ClientReplyReplyModeSkip Completed

type SClientReplyReplyModeSkip SCompleted

func (c ClientReplyReplyModeSkip) Build() Completed {
	return Completed(c)
}

func (c SClientReplyReplyModeSkip) Build() SCompleted {
	return SCompleted(c)
}

type ClientSetname Completed

type SClientSetname SCompleted

func (b *Builder) ClientSetname() ClientSetname {
	return ClientSetname{cs: append(b.get(), "CLIENT", "SETNAME"), ks: InitSlot}
}

func (b *SBuilder) ClientSetname() SClientSetname {
	return SClientSetname{cs: append(b.get(), "CLIENT", "SETNAME"), ks: InitSlot}
}

func (c ClientSetname) ConnectionName(connectionName string) ClientSetnameConnectionName {
	c.cs = append(c.cs, connectionName)
	return (ClientSetnameConnectionName)(c)
}

func (c SClientSetname) ConnectionName(connectionName string) SClientSetnameConnectionName {
	c.cs = append(c.cs, connectionName)
	return (SClientSetnameConnectionName)(c)
}

type ClientSetnameConnectionName Completed

type SClientSetnameConnectionName SCompleted

func (c ClientSetnameConnectionName) Build() Completed {
	return Completed(c)
}

func (c SClientSetnameConnectionName) Build() SCompleted {
	return SCompleted(c)
}

type ClientTracking Completed

type SClientTracking SCompleted

func (b *Builder) ClientTracking() ClientTracking {
	return ClientTracking{cs: append(b.get(), "CLIENT", "TRACKING"), ks: InitSlot}
}

func (b *SBuilder) ClientTracking() SClientTracking {
	return SClientTracking{cs: append(b.get(), "CLIENT", "TRACKING"), ks: InitSlot}
}

func (c ClientTracking) On() ClientTrackingStatusOn {
	c.cs = append(c.cs, "ON")
	return (ClientTrackingStatusOn)(c)
}

func (c SClientTracking) On() SClientTrackingStatusOn {
	c.cs = append(c.cs, "ON")
	return (SClientTrackingStatusOn)(c)
}

func (c ClientTracking) Off() ClientTrackingStatusOff {
	c.cs = append(c.cs, "OFF")
	return (ClientTrackingStatusOff)(c)
}

func (c SClientTracking) Off() SClientTrackingStatusOff {
	c.cs = append(c.cs, "OFF")
	return (SClientTrackingStatusOff)(c)
}

type ClientTrackingBcast Completed

type SClientTrackingBcast SCompleted

func (c ClientTrackingBcast) Optin() ClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingBcast) Optin() SClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingBcast) Optout() ClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingBcast) Optout() SClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingBcast) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingBcast) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingBcast) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingBcast) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingNoloop Completed

type SClientTrackingNoloop SCompleted

func (c ClientTrackingNoloop) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingNoloop) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingOptin Completed

type SClientTrackingOptin SCompleted

func (c ClientTrackingOptin) Optout() ClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingOptin) Optout() SClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingOptin) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingOptin) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingOptin) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingOptin) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingOptout Completed

type SClientTrackingOptout SCompleted

func (c ClientTrackingOptout) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingOptout) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingOptout) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingOptout) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingPrefix Completed

type SClientTrackingPrefix SCompleted

func (c ClientTrackingPrefix) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return c
}

func (c SClientTrackingPrefix) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return c
}

func (c ClientTrackingPrefix) Bcast() ClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingPrefix) Bcast() SClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingPrefix) Optin() ClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingPrefix) Optin() SClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingPrefix) Optout() ClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingPrefix) Optout() SClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingPrefix) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingPrefix) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingPrefix) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingPrefix) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingRedirect Completed

type SClientTrackingRedirect SCompleted

func (c ClientTrackingRedirect) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return (ClientTrackingPrefix)(c)
}

func (c SClientTrackingRedirect) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return (SClientTrackingPrefix)(c)
}

func (c ClientTrackingRedirect) Bcast() ClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingRedirect) Bcast() SClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingRedirect) Optin() ClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingRedirect) Optin() SClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingRedirect) Optout() ClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingRedirect) Optout() SClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingRedirect) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingRedirect) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingRedirect) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingRedirect) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingStatusOff Completed

type SClientTrackingStatusOff SCompleted

func (c ClientTrackingStatusOff) Redirect(clientId int64) ClientTrackingRedirect {
	c.cs = append(c.cs, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (ClientTrackingRedirect)(c)
}

func (c SClientTrackingStatusOff) Redirect(clientId int64) SClientTrackingRedirect {
	c.cs = append(c.cs, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (SClientTrackingRedirect)(c)
}

func (c ClientTrackingStatusOff) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return (ClientTrackingPrefix)(c)
}

func (c SClientTrackingStatusOff) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return (SClientTrackingPrefix)(c)
}

func (c ClientTrackingStatusOff) Bcast() ClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingStatusOff) Bcast() SClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingStatusOff) Optin() ClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingStatusOff) Optin() SClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingStatusOff) Optout() ClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingStatusOff) Optout() SClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingStatusOff) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingStatusOff) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingStatusOff) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingStatusOff) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingStatusOn Completed

type SClientTrackingStatusOn SCompleted

func (c ClientTrackingStatusOn) Redirect(clientId int64) ClientTrackingRedirect {
	c.cs = append(c.cs, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (ClientTrackingRedirect)(c)
}

func (c SClientTrackingStatusOn) Redirect(clientId int64) SClientTrackingRedirect {
	c.cs = append(c.cs, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (SClientTrackingRedirect)(c)
}

func (c ClientTrackingStatusOn) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return (ClientTrackingPrefix)(c)
}

func (c SClientTrackingStatusOn) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs = append(c.cs, "PREFIX")
	c.cs = append(c.cs, prefix...)
	return (SClientTrackingPrefix)(c)
}

func (c ClientTrackingStatusOn) Bcast() ClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingStatusOn) Bcast() SClientTrackingBcast {
	c.cs = append(c.cs, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingStatusOn) Optin() ClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingStatusOn) Optin() SClientTrackingOptin {
	c.cs = append(c.cs, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingStatusOn) Optout() ClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingStatusOn) Optout() SClientTrackingOptout {
	c.cs = append(c.cs, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingStatusOn) Noloop() ClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingStatusOn) Noloop() SClientTrackingNoloop {
	c.cs = append(c.cs, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingStatusOn) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingStatusOn) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackinginfo Completed

type SClientTrackinginfo SCompleted

func (b *Builder) ClientTrackinginfo() ClientTrackinginfo {
	return ClientTrackinginfo{cs: append(b.get(), "CLIENT", "TRACKINGINFO"), ks: InitSlot}
}

func (b *SBuilder) ClientTrackinginfo() SClientTrackinginfo {
	return SClientTrackinginfo{cs: append(b.get(), "CLIENT", "TRACKINGINFO"), ks: InitSlot}
}

func (c ClientTrackinginfo) Build() Completed {
	return Completed(c)
}

func (c SClientTrackinginfo) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnblock Completed

type SClientUnblock SCompleted

func (b *Builder) ClientUnblock() ClientUnblock {
	return ClientUnblock{cs: append(b.get(), "CLIENT", "UNBLOCK"), ks: InitSlot}
}

func (b *SBuilder) ClientUnblock() SClientUnblock {
	return SClientUnblock{cs: append(b.get(), "CLIENT", "UNBLOCK"), ks: InitSlot}
}

func (c ClientUnblock) ClientId(clientId int64) ClientUnblockClientId {
	c.cs = append(c.cs, strconv.FormatInt(clientId, 10))
	return (ClientUnblockClientId)(c)
}

func (c SClientUnblock) ClientId(clientId int64) SClientUnblockClientId {
	c.cs = append(c.cs, strconv.FormatInt(clientId, 10))
	return (SClientUnblockClientId)(c)
}

type ClientUnblockClientId Completed

type SClientUnblockClientId SCompleted

func (c ClientUnblockClientId) Timeout() ClientUnblockUnblockTypeTimeout {
	c.cs = append(c.cs, "TIMEOUT")
	return (ClientUnblockUnblockTypeTimeout)(c)
}

func (c SClientUnblockClientId) Timeout() SClientUnblockUnblockTypeTimeout {
	c.cs = append(c.cs, "TIMEOUT")
	return (SClientUnblockUnblockTypeTimeout)(c)
}

func (c ClientUnblockClientId) Error() ClientUnblockUnblockTypeError {
	c.cs = append(c.cs, "ERROR")
	return (ClientUnblockUnblockTypeError)(c)
}

func (c SClientUnblockClientId) Error() SClientUnblockUnblockTypeError {
	c.cs = append(c.cs, "ERROR")
	return (SClientUnblockUnblockTypeError)(c)
}

func (c ClientUnblockClientId) Build() Completed {
	return Completed(c)
}

func (c SClientUnblockClientId) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnblockUnblockTypeError Completed

type SClientUnblockUnblockTypeError SCompleted

func (c ClientUnblockUnblockTypeError) Build() Completed {
	return Completed(c)
}

func (c SClientUnblockUnblockTypeError) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnblockUnblockTypeTimeout Completed

type SClientUnblockUnblockTypeTimeout SCompleted

func (c ClientUnblockUnblockTypeTimeout) Build() Completed {
	return Completed(c)
}

func (c SClientUnblockUnblockTypeTimeout) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnpause Completed

type SClientUnpause SCompleted

func (b *Builder) ClientUnpause() ClientUnpause {
	return ClientUnpause{cs: append(b.get(), "CLIENT", "UNPAUSE"), ks: InitSlot}
}

func (b *SBuilder) ClientUnpause() SClientUnpause {
	return SClientUnpause{cs: append(b.get(), "CLIENT", "UNPAUSE"), ks: InitSlot}
}

func (c ClientUnpause) Build() Completed {
	return Completed(c)
}

func (c SClientUnpause) Build() SCompleted {
	return SCompleted(c)
}

type ClusterAddslots Completed

type SClusterAddslots SCompleted

func (b *Builder) ClusterAddslots() ClusterAddslots {
	return ClusterAddslots{cs: append(b.get(), "CLUSTER", "ADDSLOTS"), ks: InitSlot}
}

func (b *SBuilder) ClusterAddslots() SClusterAddslots {
	return SClusterAddslots{cs: append(b.get(), "CLUSTER", "ADDSLOTS"), ks: InitSlot}
}

func (c ClusterAddslots) Slot(slot ...int64) ClusterAddslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ClusterAddslotsSlot)(c)
}

func (c SClusterAddslots) Slot(slot ...int64) SClusterAddslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SClusterAddslotsSlot)(c)
}

type ClusterAddslotsSlot Completed

type SClusterAddslotsSlot SCompleted

func (c ClusterAddslotsSlot) Slot(slot ...int64) ClusterAddslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SClusterAddslotsSlot) Slot(slot ...int64) SClusterAddslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ClusterAddslotsSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterAddslotsSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterAddslotsrange Completed

type SClusterAddslotsrange SCompleted

func (b *Builder) ClusterAddslotsrange() ClusterAddslotsrange {
	return ClusterAddslotsrange{cs: append(b.get(), "CLUSTER", "ADDSLOTSRANGE"), ks: InitSlot}
}

func (b *SBuilder) ClusterAddslotsrange() SClusterAddslotsrange {
	return SClusterAddslotsrange{cs: append(b.get(), "CLUSTER", "ADDSLOTSRANGE"), ks: InitSlot}
}

func (c ClusterAddslotsrange) StartSlotEndSlot() ClusterAddslotsrangeStartSlotEndSlot {
	return (ClusterAddslotsrangeStartSlotEndSlot)(c)
}

func (c SClusterAddslotsrange) StartSlotEndSlot() SClusterAddslotsrangeStartSlotEndSlot {
	return (SClusterAddslotsrangeStartSlotEndSlot)(c)
}

type ClusterAddslotsrangeStartSlotEndSlot Completed

type SClusterAddslotsrangeStartSlotEndSlot SCompleted

func (c ClusterAddslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) ClusterAddslotsrangeStartSlotEndSlot {
	c.cs = append(c.cs, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c SClusterAddslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) SClusterAddslotsrangeStartSlotEndSlot {
	c.cs = append(c.cs, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c ClusterAddslotsrangeStartSlotEndSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterAddslotsrangeStartSlotEndSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterBumpepoch Completed

type SClusterBumpepoch SCompleted

func (b *Builder) ClusterBumpepoch() ClusterBumpepoch {
	return ClusterBumpepoch{cs: append(b.get(), "CLUSTER", "BUMPEPOCH"), ks: InitSlot}
}

func (b *SBuilder) ClusterBumpepoch() SClusterBumpepoch {
	return SClusterBumpepoch{cs: append(b.get(), "CLUSTER", "BUMPEPOCH"), ks: InitSlot}
}

func (c ClusterBumpepoch) Build() Completed {
	return Completed(c)
}

func (c SClusterBumpepoch) Build() SCompleted {
	return SCompleted(c)
}

type ClusterCountFailureReports Completed

type SClusterCountFailureReports SCompleted

func (b *Builder) ClusterCountFailureReports() ClusterCountFailureReports {
	return ClusterCountFailureReports{cs: append(b.get(), "CLUSTER", "COUNT-FAILURE-REPORTS"), ks: InitSlot}
}

func (b *SBuilder) ClusterCountFailureReports() SClusterCountFailureReports {
	return SClusterCountFailureReports{cs: append(b.get(), "CLUSTER", "COUNT-FAILURE-REPORTS"), ks: InitSlot}
}

func (c ClusterCountFailureReports) NodeId(nodeId string) ClusterCountFailureReportsNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterCountFailureReportsNodeId)(c)
}

func (c SClusterCountFailureReports) NodeId(nodeId string) SClusterCountFailureReportsNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterCountFailureReportsNodeId)(c)
}

type ClusterCountFailureReportsNodeId Completed

type SClusterCountFailureReportsNodeId SCompleted

func (c ClusterCountFailureReportsNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterCountFailureReportsNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterCountkeysinslot Completed

type SClusterCountkeysinslot SCompleted

func (b *Builder) ClusterCountkeysinslot() ClusterCountkeysinslot {
	return ClusterCountkeysinslot{cs: append(b.get(), "CLUSTER", "COUNTKEYSINSLOT"), ks: InitSlot}
}

func (b *SBuilder) ClusterCountkeysinslot() SClusterCountkeysinslot {
	return SClusterCountkeysinslot{cs: append(b.get(), "CLUSTER", "COUNTKEYSINSLOT"), ks: InitSlot}
}

func (c ClusterCountkeysinslot) Slot(slot int64) ClusterCountkeysinslotSlot {
	c.cs = append(c.cs, strconv.FormatInt(slot, 10))
	return (ClusterCountkeysinslotSlot)(c)
}

func (c SClusterCountkeysinslot) Slot(slot int64) SClusterCountkeysinslotSlot {
	c.cs = append(c.cs, strconv.FormatInt(slot, 10))
	return (SClusterCountkeysinslotSlot)(c)
}

type ClusterCountkeysinslotSlot Completed

type SClusterCountkeysinslotSlot SCompleted

func (c ClusterCountkeysinslotSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterCountkeysinslotSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterDelslots Completed

type SClusterDelslots SCompleted

func (b *Builder) ClusterDelslots() ClusterDelslots {
	return ClusterDelslots{cs: append(b.get(), "CLUSTER", "DELSLOTS"), ks: InitSlot}
}

func (b *SBuilder) ClusterDelslots() SClusterDelslots {
	return SClusterDelslots{cs: append(b.get(), "CLUSTER", "DELSLOTS"), ks: InitSlot}
}

func (c ClusterDelslots) Slot(slot ...int64) ClusterDelslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ClusterDelslotsSlot)(c)
}

func (c SClusterDelslots) Slot(slot ...int64) SClusterDelslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SClusterDelslotsSlot)(c)
}

type ClusterDelslotsSlot Completed

type SClusterDelslotsSlot SCompleted

func (c ClusterDelslotsSlot) Slot(slot ...int64) ClusterDelslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SClusterDelslotsSlot) Slot(slot ...int64) SClusterDelslotsSlot {
	for _, n := range slot {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ClusterDelslotsSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterDelslotsSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterDelslotsrange Completed

type SClusterDelslotsrange SCompleted

func (b *Builder) ClusterDelslotsrange() ClusterDelslotsrange {
	return ClusterDelslotsrange{cs: append(b.get(), "CLUSTER", "DELSLOTSRANGE"), ks: InitSlot}
}

func (b *SBuilder) ClusterDelslotsrange() SClusterDelslotsrange {
	return SClusterDelslotsrange{cs: append(b.get(), "CLUSTER", "DELSLOTSRANGE"), ks: InitSlot}
}

func (c ClusterDelslotsrange) StartSlotEndSlot() ClusterDelslotsrangeStartSlotEndSlot {
	return (ClusterDelslotsrangeStartSlotEndSlot)(c)
}

func (c SClusterDelslotsrange) StartSlotEndSlot() SClusterDelslotsrangeStartSlotEndSlot {
	return (SClusterDelslotsrangeStartSlotEndSlot)(c)
}

type ClusterDelslotsrangeStartSlotEndSlot Completed

type SClusterDelslotsrangeStartSlotEndSlot SCompleted

func (c ClusterDelslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) ClusterDelslotsrangeStartSlotEndSlot {
	c.cs = append(c.cs, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c SClusterDelslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) SClusterDelslotsrangeStartSlotEndSlot {
	c.cs = append(c.cs, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c ClusterDelslotsrangeStartSlotEndSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterDelslotsrangeStartSlotEndSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFailover Completed

type SClusterFailover SCompleted

func (b *Builder) ClusterFailover() ClusterFailover {
	return ClusterFailover{cs: append(b.get(), "CLUSTER", "FAILOVER"), ks: InitSlot}
}

func (b *SBuilder) ClusterFailover() SClusterFailover {
	return SClusterFailover{cs: append(b.get(), "CLUSTER", "FAILOVER"), ks: InitSlot}
}

func (c ClusterFailover) Force() ClusterFailoverOptionsForce {
	c.cs = append(c.cs, "FORCE")
	return (ClusterFailoverOptionsForce)(c)
}

func (c SClusterFailover) Force() SClusterFailoverOptionsForce {
	c.cs = append(c.cs, "FORCE")
	return (SClusterFailoverOptionsForce)(c)
}

func (c ClusterFailover) Takeover() ClusterFailoverOptionsTakeover {
	c.cs = append(c.cs, "TAKEOVER")
	return (ClusterFailoverOptionsTakeover)(c)
}

func (c SClusterFailover) Takeover() SClusterFailoverOptionsTakeover {
	c.cs = append(c.cs, "TAKEOVER")
	return (SClusterFailoverOptionsTakeover)(c)
}

func (c ClusterFailover) Build() Completed {
	return Completed(c)
}

func (c SClusterFailover) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFailoverOptionsForce Completed

type SClusterFailoverOptionsForce SCompleted

func (c ClusterFailoverOptionsForce) Build() Completed {
	return Completed(c)
}

func (c SClusterFailoverOptionsForce) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFailoverOptionsTakeover Completed

type SClusterFailoverOptionsTakeover SCompleted

func (c ClusterFailoverOptionsTakeover) Build() Completed {
	return Completed(c)
}

func (c SClusterFailoverOptionsTakeover) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFlushslots Completed

type SClusterFlushslots SCompleted

func (b *Builder) ClusterFlushslots() ClusterFlushslots {
	return ClusterFlushslots{cs: append(b.get(), "CLUSTER", "FLUSHSLOTS"), ks: InitSlot}
}

func (b *SBuilder) ClusterFlushslots() SClusterFlushslots {
	return SClusterFlushslots{cs: append(b.get(), "CLUSTER", "FLUSHSLOTS"), ks: InitSlot}
}

func (c ClusterFlushslots) Build() Completed {
	return Completed(c)
}

func (c SClusterFlushslots) Build() SCompleted {
	return SCompleted(c)
}

type ClusterForget Completed

type SClusterForget SCompleted

func (b *Builder) ClusterForget() ClusterForget {
	return ClusterForget{cs: append(b.get(), "CLUSTER", "FORGET"), ks: InitSlot}
}

func (b *SBuilder) ClusterForget() SClusterForget {
	return SClusterForget{cs: append(b.get(), "CLUSTER", "FORGET"), ks: InitSlot}
}

func (c ClusterForget) NodeId(nodeId string) ClusterForgetNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterForgetNodeId)(c)
}

func (c SClusterForget) NodeId(nodeId string) SClusterForgetNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterForgetNodeId)(c)
}

type ClusterForgetNodeId Completed

type SClusterForgetNodeId SCompleted

func (c ClusterForgetNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterForgetNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterGetkeysinslot Completed

type SClusterGetkeysinslot SCompleted

func (b *Builder) ClusterGetkeysinslot() ClusterGetkeysinslot {
	return ClusterGetkeysinslot{cs: append(b.get(), "CLUSTER", "GETKEYSINSLOT"), ks: InitSlot}
}

func (b *SBuilder) ClusterGetkeysinslot() SClusterGetkeysinslot {
	return SClusterGetkeysinslot{cs: append(b.get(), "CLUSTER", "GETKEYSINSLOT"), ks: InitSlot}
}

func (c ClusterGetkeysinslot) Slot(slot int64) ClusterGetkeysinslotSlot {
	c.cs = append(c.cs, strconv.FormatInt(slot, 10))
	return (ClusterGetkeysinslotSlot)(c)
}

func (c SClusterGetkeysinslot) Slot(slot int64) SClusterGetkeysinslotSlot {
	c.cs = append(c.cs, strconv.FormatInt(slot, 10))
	return (SClusterGetkeysinslotSlot)(c)
}

type ClusterGetkeysinslotCount Completed

type SClusterGetkeysinslotCount SCompleted

func (c ClusterGetkeysinslotCount) Build() Completed {
	return Completed(c)
}

func (c SClusterGetkeysinslotCount) Build() SCompleted {
	return SCompleted(c)
}

type ClusterGetkeysinslotSlot Completed

type SClusterGetkeysinslotSlot SCompleted

func (c ClusterGetkeysinslotSlot) Count(count int64) ClusterGetkeysinslotCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (ClusterGetkeysinslotCount)(c)
}

func (c SClusterGetkeysinslotSlot) Count(count int64) SClusterGetkeysinslotCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SClusterGetkeysinslotCount)(c)
}

type ClusterInfo Completed

type SClusterInfo SCompleted

func (b *Builder) ClusterInfo() ClusterInfo {
	return ClusterInfo{cs: append(b.get(), "CLUSTER", "INFO"), ks: InitSlot}
}

func (b *SBuilder) ClusterInfo() SClusterInfo {
	return SClusterInfo{cs: append(b.get(), "CLUSTER", "INFO"), ks: InitSlot}
}

func (c ClusterInfo) Build() Completed {
	return Completed(c)
}

func (c SClusterInfo) Build() SCompleted {
	return SCompleted(c)
}

type ClusterKeyslot Completed

type SClusterKeyslot SCompleted

func (b *Builder) ClusterKeyslot() ClusterKeyslot {
	return ClusterKeyslot{cs: append(b.get(), "CLUSTER", "KEYSLOT"), ks: InitSlot}
}

func (b *SBuilder) ClusterKeyslot() SClusterKeyslot {
	return SClusterKeyslot{cs: append(b.get(), "CLUSTER", "KEYSLOT"), ks: InitSlot}
}

func (c ClusterKeyslot) Key(key string) ClusterKeyslotKey {
	c.cs = append(c.cs, key)
	return (ClusterKeyslotKey)(c)
}

func (c SClusterKeyslot) Key(key string) SClusterKeyslotKey {
	c.cs = append(c.cs, key)
	return (SClusterKeyslotKey)(c)
}

type ClusterKeyslotKey Completed

type SClusterKeyslotKey SCompleted

func (c ClusterKeyslotKey) Build() Completed {
	return Completed(c)
}

func (c SClusterKeyslotKey) Build() SCompleted {
	return SCompleted(c)
}

type ClusterMeet Completed

type SClusterMeet SCompleted

func (b *Builder) ClusterMeet() ClusterMeet {
	return ClusterMeet{cs: append(b.get(), "CLUSTER", "MEET"), ks: InitSlot}
}

func (b *SBuilder) ClusterMeet() SClusterMeet {
	return SClusterMeet{cs: append(b.get(), "CLUSTER", "MEET"), ks: InitSlot}
}

func (c ClusterMeet) Ip(ip string) ClusterMeetIp {
	c.cs = append(c.cs, ip)
	return (ClusterMeetIp)(c)
}

func (c SClusterMeet) Ip(ip string) SClusterMeetIp {
	c.cs = append(c.cs, ip)
	return (SClusterMeetIp)(c)
}

type ClusterMeetIp Completed

type SClusterMeetIp SCompleted

func (c ClusterMeetIp) Port(port int64) ClusterMeetPort {
	c.cs = append(c.cs, strconv.FormatInt(port, 10))
	return (ClusterMeetPort)(c)
}

func (c SClusterMeetIp) Port(port int64) SClusterMeetPort {
	c.cs = append(c.cs, strconv.FormatInt(port, 10))
	return (SClusterMeetPort)(c)
}

type ClusterMeetPort Completed

type SClusterMeetPort SCompleted

func (c ClusterMeetPort) Build() Completed {
	return Completed(c)
}

func (c SClusterMeetPort) Build() SCompleted {
	return SCompleted(c)
}

type ClusterMyid Completed

type SClusterMyid SCompleted

func (b *Builder) ClusterMyid() ClusterMyid {
	return ClusterMyid{cs: append(b.get(), "CLUSTER", "MYID"), ks: InitSlot}
}

func (b *SBuilder) ClusterMyid() SClusterMyid {
	return SClusterMyid{cs: append(b.get(), "CLUSTER", "MYID"), ks: InitSlot}
}

func (c ClusterMyid) Build() Completed {
	return Completed(c)
}

func (c SClusterMyid) Build() SCompleted {
	return SCompleted(c)
}

type ClusterNodes Completed

type SClusterNodes SCompleted

func (b *Builder) ClusterNodes() ClusterNodes {
	return ClusterNodes{cs: append(b.get(), "CLUSTER", "NODES"), ks: InitSlot}
}

func (b *SBuilder) ClusterNodes() SClusterNodes {
	return SClusterNodes{cs: append(b.get(), "CLUSTER", "NODES"), ks: InitSlot}
}

func (c ClusterNodes) Build() Completed {
	return Completed(c)
}

func (c SClusterNodes) Build() SCompleted {
	return SCompleted(c)
}

type ClusterReplicas Completed

type SClusterReplicas SCompleted

func (b *Builder) ClusterReplicas() ClusterReplicas {
	return ClusterReplicas{cs: append(b.get(), "CLUSTER", "REPLICAS"), ks: InitSlot}
}

func (b *SBuilder) ClusterReplicas() SClusterReplicas {
	return SClusterReplicas{cs: append(b.get(), "CLUSTER", "REPLICAS"), ks: InitSlot}
}

func (c ClusterReplicas) NodeId(nodeId string) ClusterReplicasNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterReplicasNodeId)(c)
}

func (c SClusterReplicas) NodeId(nodeId string) SClusterReplicasNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterReplicasNodeId)(c)
}

type ClusterReplicasNodeId Completed

type SClusterReplicasNodeId SCompleted

func (c ClusterReplicasNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterReplicasNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterReplicate Completed

type SClusterReplicate SCompleted

func (b *Builder) ClusterReplicate() ClusterReplicate {
	return ClusterReplicate{cs: append(b.get(), "CLUSTER", "REPLICATE"), ks: InitSlot}
}

func (b *SBuilder) ClusterReplicate() SClusterReplicate {
	return SClusterReplicate{cs: append(b.get(), "CLUSTER", "REPLICATE"), ks: InitSlot}
}

func (c ClusterReplicate) NodeId(nodeId string) ClusterReplicateNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterReplicateNodeId)(c)
}

func (c SClusterReplicate) NodeId(nodeId string) SClusterReplicateNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterReplicateNodeId)(c)
}

type ClusterReplicateNodeId Completed

type SClusterReplicateNodeId SCompleted

func (c ClusterReplicateNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterReplicateNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterReset Completed

type SClusterReset SCompleted

func (b *Builder) ClusterReset() ClusterReset {
	return ClusterReset{cs: append(b.get(), "CLUSTER", "RESET"), ks: InitSlot}
}

func (b *SBuilder) ClusterReset() SClusterReset {
	return SClusterReset{cs: append(b.get(), "CLUSTER", "RESET"), ks: InitSlot}
}

func (c ClusterReset) Hard() ClusterResetResetTypeHard {
	c.cs = append(c.cs, "HARD")
	return (ClusterResetResetTypeHard)(c)
}

func (c SClusterReset) Hard() SClusterResetResetTypeHard {
	c.cs = append(c.cs, "HARD")
	return (SClusterResetResetTypeHard)(c)
}

func (c ClusterReset) Soft() ClusterResetResetTypeSoft {
	c.cs = append(c.cs, "SOFT")
	return (ClusterResetResetTypeSoft)(c)
}

func (c SClusterReset) Soft() SClusterResetResetTypeSoft {
	c.cs = append(c.cs, "SOFT")
	return (SClusterResetResetTypeSoft)(c)
}

func (c ClusterReset) Build() Completed {
	return Completed(c)
}

func (c SClusterReset) Build() SCompleted {
	return SCompleted(c)
}

type ClusterResetResetTypeHard Completed

type SClusterResetResetTypeHard SCompleted

func (c ClusterResetResetTypeHard) Build() Completed {
	return Completed(c)
}

func (c SClusterResetResetTypeHard) Build() SCompleted {
	return SCompleted(c)
}

type ClusterResetResetTypeSoft Completed

type SClusterResetResetTypeSoft SCompleted

func (c ClusterResetResetTypeSoft) Build() Completed {
	return Completed(c)
}

func (c SClusterResetResetTypeSoft) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSaveconfig Completed

type SClusterSaveconfig SCompleted

func (b *Builder) ClusterSaveconfig() ClusterSaveconfig {
	return ClusterSaveconfig{cs: append(b.get(), "CLUSTER", "SAVECONFIG"), ks: InitSlot}
}

func (b *SBuilder) ClusterSaveconfig() SClusterSaveconfig {
	return SClusterSaveconfig{cs: append(b.get(), "CLUSTER", "SAVECONFIG"), ks: InitSlot}
}

func (c ClusterSaveconfig) Build() Completed {
	return Completed(c)
}

func (c SClusterSaveconfig) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetConfigEpoch Completed

type SClusterSetConfigEpoch SCompleted

func (b *Builder) ClusterSetConfigEpoch() ClusterSetConfigEpoch {
	return ClusterSetConfigEpoch{cs: append(b.get(), "CLUSTER", "SET-CONFIG-EPOCH"), ks: InitSlot}
}

func (b *SBuilder) ClusterSetConfigEpoch() SClusterSetConfigEpoch {
	return SClusterSetConfigEpoch{cs: append(b.get(), "CLUSTER", "SET-CONFIG-EPOCH"), ks: InitSlot}
}

func (c ClusterSetConfigEpoch) ConfigEpoch(configEpoch int64) ClusterSetConfigEpochConfigEpoch {
	c.cs = append(c.cs, strconv.FormatInt(configEpoch, 10))
	return (ClusterSetConfigEpochConfigEpoch)(c)
}

func (c SClusterSetConfigEpoch) ConfigEpoch(configEpoch int64) SClusterSetConfigEpochConfigEpoch {
	c.cs = append(c.cs, strconv.FormatInt(configEpoch, 10))
	return (SClusterSetConfigEpochConfigEpoch)(c)
}

type ClusterSetConfigEpochConfigEpoch Completed

type SClusterSetConfigEpochConfigEpoch SCompleted

func (c ClusterSetConfigEpochConfigEpoch) Build() Completed {
	return Completed(c)
}

func (c SClusterSetConfigEpochConfigEpoch) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslot Completed

type SClusterSetslot SCompleted

func (b *Builder) ClusterSetslot() ClusterSetslot {
	return ClusterSetslot{cs: append(b.get(), "CLUSTER", "SETSLOT"), ks: InitSlot}
}

func (b *SBuilder) ClusterSetslot() SClusterSetslot {
	return SClusterSetslot{cs: append(b.get(), "CLUSTER", "SETSLOT"), ks: InitSlot}
}

func (c ClusterSetslot) Slot(slot int64) ClusterSetslotSlot {
	c.cs = append(c.cs, strconv.FormatInt(slot, 10))
	return (ClusterSetslotSlot)(c)
}

func (c SClusterSetslot) Slot(slot int64) SClusterSetslotSlot {
	c.cs = append(c.cs, strconv.FormatInt(slot, 10))
	return (SClusterSetslotSlot)(c)
}

type ClusterSetslotNodeId Completed

type SClusterSetslotNodeId SCompleted

func (c ClusterSetslotNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSlot Completed

type SClusterSetslotSlot SCompleted

func (c ClusterSetslotSlot) Importing() ClusterSetslotSubcommandImporting {
	c.cs = append(c.cs, "IMPORTING")
	return (ClusterSetslotSubcommandImporting)(c)
}

func (c SClusterSetslotSlot) Importing() SClusterSetslotSubcommandImporting {
	c.cs = append(c.cs, "IMPORTING")
	return (SClusterSetslotSubcommandImporting)(c)
}

func (c ClusterSetslotSlot) Migrating() ClusterSetslotSubcommandMigrating {
	c.cs = append(c.cs, "MIGRATING")
	return (ClusterSetslotSubcommandMigrating)(c)
}

func (c SClusterSetslotSlot) Migrating() SClusterSetslotSubcommandMigrating {
	c.cs = append(c.cs, "MIGRATING")
	return (SClusterSetslotSubcommandMigrating)(c)
}

func (c ClusterSetslotSlot) Stable() ClusterSetslotSubcommandStable {
	c.cs = append(c.cs, "STABLE")
	return (ClusterSetslotSubcommandStable)(c)
}

func (c SClusterSetslotSlot) Stable() SClusterSetslotSubcommandStable {
	c.cs = append(c.cs, "STABLE")
	return (SClusterSetslotSubcommandStable)(c)
}

func (c ClusterSetslotSlot) Node() ClusterSetslotSubcommandNode {
	c.cs = append(c.cs, "NODE")
	return (ClusterSetslotSubcommandNode)(c)
}

func (c SClusterSetslotSlot) Node() SClusterSetslotSubcommandNode {
	c.cs = append(c.cs, "NODE")
	return (SClusterSetslotSubcommandNode)(c)
}

type ClusterSetslotSubcommandImporting Completed

type SClusterSetslotSubcommandImporting SCompleted

func (c ClusterSetslotSubcommandImporting) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandImporting) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandImporting) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandImporting) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSubcommandMigrating Completed

type SClusterSetslotSubcommandMigrating SCompleted

func (c ClusterSetslotSubcommandMigrating) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandMigrating) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandMigrating) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandMigrating) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSubcommandNode Completed

type SClusterSetslotSubcommandNode SCompleted

func (c ClusterSetslotSubcommandNode) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandNode) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandNode) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandNode) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSubcommandStable Completed

type SClusterSetslotSubcommandStable SCompleted

func (c ClusterSetslotSubcommandStable) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandStable) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandStable) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandStable) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSlaves Completed

type SClusterSlaves SCompleted

func (b *Builder) ClusterSlaves() ClusterSlaves {
	return ClusterSlaves{cs: append(b.get(), "CLUSTER", "SLAVES"), ks: InitSlot}
}

func (b *SBuilder) ClusterSlaves() SClusterSlaves {
	return SClusterSlaves{cs: append(b.get(), "CLUSTER", "SLAVES"), ks: InitSlot}
}

func (c ClusterSlaves) NodeId(nodeId string) ClusterSlavesNodeId {
	c.cs = append(c.cs, nodeId)
	return (ClusterSlavesNodeId)(c)
}

func (c SClusterSlaves) NodeId(nodeId string) SClusterSlavesNodeId {
	c.cs = append(c.cs, nodeId)
	return (SClusterSlavesNodeId)(c)
}

type ClusterSlavesNodeId Completed

type SClusterSlavesNodeId SCompleted

func (c ClusterSlavesNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterSlavesNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSlots Completed

type SClusterSlots SCompleted

func (b *Builder) ClusterSlots() ClusterSlots {
	return ClusterSlots{cs: append(b.get(), "CLUSTER", "SLOTS"), ks: InitSlot}
}

func (b *SBuilder) ClusterSlots() SClusterSlots {
	return SClusterSlots{cs: append(b.get(), "CLUSTER", "SLOTS"), ks: InitSlot}
}

func (c ClusterSlots) Build() Completed {
	return Completed(c)
}

func (c SClusterSlots) Build() SCompleted {
	return SCompleted(c)
}

type CmsIncrby Completed

type SCmsIncrby SCompleted

func (b *Builder) CmsIncrby() CmsIncrby {
	return CmsIncrby{cs: append(b.get(), "CMS.INCRBY"), ks: InitSlot}
}

func (b *SBuilder) CmsIncrby() SCmsIncrby {
	return SCmsIncrby{cs: append(b.get(), "CMS.INCRBY"), ks: InitSlot}
}

func (c CmsIncrby) Key(key string) CmsIncrbyKey {
	c.cs = append(c.cs, key)
	return (CmsIncrbyKey)(c)
}

func (c SCmsIncrby) Key(key string) SCmsIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCmsIncrbyKey)(c)
}

type CmsIncrbyItemsIncrement Completed

type SCmsIncrbyItemsIncrement SCompleted

func (c CmsIncrbyItemsIncrement) Item(item string) CmsIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (CmsIncrbyItemsItem)(c)
}

func (c SCmsIncrbyItemsIncrement) Item(item string) SCmsIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (SCmsIncrbyItemsItem)(c)
}

func (c CmsIncrbyItemsIncrement) Build() Completed {
	return Completed(c)
}

func (c SCmsIncrbyItemsIncrement) Build() SCompleted {
	return SCompleted(c)
}

type CmsIncrbyItemsItem Completed

type SCmsIncrbyItemsItem SCompleted

func (c CmsIncrbyItemsItem) Increment(increment int64) CmsIncrbyItemsIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (CmsIncrbyItemsIncrement)(c)
}

func (c SCmsIncrbyItemsItem) Increment(increment int64) SCmsIncrbyItemsIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (SCmsIncrbyItemsIncrement)(c)
}

type CmsIncrbyKey Completed

type SCmsIncrbyKey SCompleted

func (c CmsIncrbyKey) Item(item string) CmsIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (CmsIncrbyItemsItem)(c)
}

func (c SCmsIncrbyKey) Item(item string) SCmsIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (SCmsIncrbyItemsItem)(c)
}

type CmsInfo Completed

type SCmsInfo SCompleted

func (b *Builder) CmsInfo() CmsInfo {
	return CmsInfo{cs: append(b.get(), "CMS.INFO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) CmsInfo() SCmsInfo {
	return SCmsInfo{cs: append(b.get(), "CMS.INFO"), ks: InitSlot, cf: readonly}
}

func (c CmsInfo) Key(key string) CmsInfoKey {
	c.cs = append(c.cs, key)
	return (CmsInfoKey)(c)
}

func (c SCmsInfo) Key(key string) SCmsInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCmsInfoKey)(c)
}

type CmsInfoKey Completed

type SCmsInfoKey SCompleted

func (c CmsInfoKey) Build() Completed {
	return Completed(c)
}

func (c SCmsInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c CmsInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCmsInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type CmsInitbydim Completed

type SCmsInitbydim SCompleted

func (b *Builder) CmsInitbydim() CmsInitbydim {
	return CmsInitbydim{cs: append(b.get(), "CMS.INITBYDIM"), ks: InitSlot}
}

func (b *SBuilder) CmsInitbydim() SCmsInitbydim {
	return SCmsInitbydim{cs: append(b.get(), "CMS.INITBYDIM"), ks: InitSlot}
}

func (c CmsInitbydim) Key(key string) CmsInitbydimKey {
	c.cs = append(c.cs, key)
	return (CmsInitbydimKey)(c)
}

func (c SCmsInitbydim) Key(key string) SCmsInitbydimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCmsInitbydimKey)(c)
}

type CmsInitbydimDepth Completed

type SCmsInitbydimDepth SCompleted

func (c CmsInitbydimDepth) Build() Completed {
	return Completed(c)
}

func (c SCmsInitbydimDepth) Build() SCompleted {
	return SCompleted(c)
}

type CmsInitbydimKey Completed

type SCmsInitbydimKey SCompleted

func (c CmsInitbydimKey) Width(width int64) CmsInitbydimWidth {
	c.cs = append(c.cs, strconv.FormatInt(width, 10))
	return (CmsInitbydimWidth)(c)
}

func (c SCmsInitbydimKey) Width(width int64) SCmsInitbydimWidth {
	c.cs = append(c.cs, strconv.FormatInt(width, 10))
	return (SCmsInitbydimWidth)(c)
}

type CmsInitbydimWidth Completed

type SCmsInitbydimWidth SCompleted

func (c CmsInitbydimWidth) Depth(depth int64) CmsInitbydimDepth {
	c.cs = append(c.cs, strconv.FormatInt(depth, 10))
	return (CmsInitbydimDepth)(c)
}

func (c SCmsInitbydimWidth) Depth(depth int64) SCmsInitbydimDepth {
	c.cs = append(c.cs, strconv.FormatInt(depth, 10))
	return (SCmsInitbydimDepth)(c)
}

type CmsInitbyprob Completed

type SCmsInitbyprob SCompleted

func (b *Builder) CmsInitbyprob() CmsInitbyprob {
	return CmsInitbyprob{cs: append(b.get(), "CMS.INITBYPROB"), ks: InitSlot}
}

func (b *SBuilder) CmsInitbyprob() SCmsInitbyprob {
	return SCmsInitbyprob{cs: append(b.get(), "CMS.INITBYPROB"), ks: InitSlot}
}

func (c CmsInitbyprob) Key(key string) CmsInitbyprobKey {
	c.cs = append(c.cs, key)
	return (CmsInitbyprobKey)(c)
}

func (c SCmsInitbyprob) Key(key string) SCmsInitbyprobKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCmsInitbyprobKey)(c)
}

type CmsInitbyprobError Completed

type SCmsInitbyprobError SCompleted

func (c CmsInitbyprobError) Probability(probability float64) CmsInitbyprobProbability {
	c.cs = append(c.cs, strconv.FormatFloat(probability, 'f', -1, 64))
	return (CmsInitbyprobProbability)(c)
}

func (c SCmsInitbyprobError) Probability(probability float64) SCmsInitbyprobProbability {
	c.cs = append(c.cs, strconv.FormatFloat(probability, 'f', -1, 64))
	return (SCmsInitbyprobProbability)(c)
}

type CmsInitbyprobKey Completed

type SCmsInitbyprobKey SCompleted

func (c CmsInitbyprobKey) Error(error float64) CmsInitbyprobError {
	c.cs = append(c.cs, strconv.FormatFloat(error, 'f', -1, 64))
	return (CmsInitbyprobError)(c)
}

func (c SCmsInitbyprobKey) Error(error float64) SCmsInitbyprobError {
	c.cs = append(c.cs, strconv.FormatFloat(error, 'f', -1, 64))
	return (SCmsInitbyprobError)(c)
}

type CmsInitbyprobProbability Completed

type SCmsInitbyprobProbability SCompleted

func (c CmsInitbyprobProbability) Build() Completed {
	return Completed(c)
}

func (c SCmsInitbyprobProbability) Build() SCompleted {
	return SCompleted(c)
}

type CmsMerge Completed

type SCmsMerge SCompleted

func (b *Builder) CmsMerge() CmsMerge {
	return CmsMerge{cs: append(b.get(), "CMS.MERGE"), ks: InitSlot}
}

func (b *SBuilder) CmsMerge() SCmsMerge {
	return SCmsMerge{cs: append(b.get(), "CMS.MERGE"), ks: InitSlot}
}

func (c CmsMerge) Destination(destination string) CmsMergeDestination {
	c.cs = append(c.cs, destination)
	return (CmsMergeDestination)(c)
}

func (c SCmsMerge) Destination(destination string) SCmsMergeDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SCmsMergeDestination)(c)
}

type CmsMergeDestination Completed

type SCmsMergeDestination SCompleted

func (c CmsMergeDestination) Numkeys(numkeys int64) CmsMergeNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (CmsMergeNumkeys)(c)
}

func (c SCmsMergeDestination) Numkeys(numkeys int64) SCmsMergeNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SCmsMergeNumkeys)(c)
}

type CmsMergeNumkeys Completed

type SCmsMergeNumkeys SCompleted

func (c CmsMergeNumkeys) Source(source ...string) CmsMergeSource {
	c.cs = append(c.cs, source...)
	return (CmsMergeSource)(c)
}

func (c SCmsMergeNumkeys) Source(source ...string) SCmsMergeSource {
	for _, k := range source {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, source...)
	return (SCmsMergeSource)(c)
}

type CmsMergeSource Completed

type SCmsMergeSource SCompleted

func (c CmsMergeSource) Source(source ...string) CmsMergeSource {
	c.cs = append(c.cs, source...)
	return c
}

func (c SCmsMergeSource) Source(source ...string) SCmsMergeSource {
	for _, k := range source {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, source...)
	return c
}

func (c CmsMergeSource) Weights() CmsMergeWeightWeights {
	c.cs = append(c.cs, "WEIGHTS")
	return (CmsMergeWeightWeights)(c)
}

func (c SCmsMergeSource) Weights() SCmsMergeWeightWeights {
	c.cs = append(c.cs, "WEIGHTS")
	return (SCmsMergeWeightWeights)(c)
}

func (c CmsMergeSource) Build() Completed {
	return Completed(c)
}

func (c SCmsMergeSource) Build() SCompleted {
	return SCompleted(c)
}

type CmsMergeWeightWeight Completed

type SCmsMergeWeightWeight SCompleted

func (c CmsMergeWeightWeight) Weight(weight ...float64) CmsMergeWeightWeight {
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return c
}

func (c SCmsMergeWeightWeight) Weight(weight ...float64) SCmsMergeWeightWeight {
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return c
}

func (c CmsMergeWeightWeight) Build() Completed {
	return Completed(c)
}

func (c SCmsMergeWeightWeight) Build() SCompleted {
	return SCompleted(c)
}

type CmsMergeWeightWeights Completed

type SCmsMergeWeightWeights SCompleted

func (c CmsMergeWeightWeights) Weight(weight ...float64) CmsMergeWeightWeight {
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return (CmsMergeWeightWeight)(c)
}

func (c SCmsMergeWeightWeights) Weight(weight ...float64) SCmsMergeWeightWeight {
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return (SCmsMergeWeightWeight)(c)
}

type CmsQuery Completed

type SCmsQuery SCompleted

func (b *Builder) CmsQuery() CmsQuery {
	return CmsQuery{cs: append(b.get(), "CMS.QUERY"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) CmsQuery() SCmsQuery {
	return SCmsQuery{cs: append(b.get(), "CMS.QUERY"), ks: InitSlot, cf: readonly}
}

func (c CmsQuery) Key(key string) CmsQueryKey {
	c.cs = append(c.cs, key)
	return (CmsQueryKey)(c)
}

func (c SCmsQuery) Key(key string) SCmsQueryKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SCmsQueryKey)(c)
}

type CmsQueryItem Completed

type SCmsQueryItem SCompleted

func (c CmsQueryItem) Item(item ...string) CmsQueryItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c SCmsQueryItem) Item(item ...string) SCmsQueryItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c CmsQueryItem) Build() Completed {
	return Completed(c)
}

func (c SCmsQueryItem) Build() SCompleted {
	return SCompleted(c)
}

func (c CmsQueryItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCmsQueryItem) Cache() SCacheable {
	return SCacheable(c)
}

type CmsQueryKey Completed

type SCmsQueryKey SCompleted

func (c CmsQueryKey) Item(item ...string) CmsQueryItem {
	c.cs = append(c.cs, item...)
	return (CmsQueryItem)(c)
}

func (c SCmsQueryKey) Item(item ...string) SCmsQueryItem {
	c.cs = append(c.cs, item...)
	return (SCmsQueryItem)(c)
}

type Command Completed

type SCommand SCompleted

func (b *Builder) Command() Command {
	return Command{cs: append(b.get(), "COMMAND"), ks: InitSlot}
}

func (b *SBuilder) Command() SCommand {
	return SCommand{cs: append(b.get(), "COMMAND"), ks: InitSlot}
}

func (c Command) Build() Completed {
	return Completed(c)
}

func (c SCommand) Build() SCompleted {
	return SCompleted(c)
}

type CommandCount Completed

type SCommandCount SCompleted

func (b *Builder) CommandCount() CommandCount {
	return CommandCount{cs: append(b.get(), "COMMAND", "COUNT"), ks: InitSlot}
}

func (b *SBuilder) CommandCount() SCommandCount {
	return SCommandCount{cs: append(b.get(), "COMMAND", "COUNT"), ks: InitSlot}
}

func (c CommandCount) Build() Completed {
	return Completed(c)
}

func (c SCommandCount) Build() SCompleted {
	return SCompleted(c)
}

type CommandGetkeys Completed

type SCommandGetkeys SCompleted

func (b *Builder) CommandGetkeys() CommandGetkeys {
	return CommandGetkeys{cs: append(b.get(), "COMMAND", "GETKEYS"), ks: InitSlot}
}

func (b *SBuilder) CommandGetkeys() SCommandGetkeys {
	return SCommandGetkeys{cs: append(b.get(), "COMMAND", "GETKEYS"), ks: InitSlot}
}

func (c CommandGetkeys) Build() Completed {
	return Completed(c)
}

func (c SCommandGetkeys) Build() SCompleted {
	return SCompleted(c)
}

type CommandInfo Completed

type SCommandInfo SCompleted

func (b *Builder) CommandInfo() CommandInfo {
	return CommandInfo{cs: append(b.get(), "COMMAND", "INFO"), ks: InitSlot}
}

func (b *SBuilder) CommandInfo() SCommandInfo {
	return SCommandInfo{cs: append(b.get(), "COMMAND", "INFO"), ks: InitSlot}
}

func (c CommandInfo) CommandName(commandName ...string) CommandInfoCommandName {
	c.cs = append(c.cs, commandName...)
	return (CommandInfoCommandName)(c)
}

func (c SCommandInfo) CommandName(commandName ...string) SCommandInfoCommandName {
	c.cs = append(c.cs, commandName...)
	return (SCommandInfoCommandName)(c)
}

type CommandInfoCommandName Completed

type SCommandInfoCommandName SCompleted

func (c CommandInfoCommandName) CommandName(commandName ...string) CommandInfoCommandName {
	c.cs = append(c.cs, commandName...)
	return c
}

func (c SCommandInfoCommandName) CommandName(commandName ...string) SCommandInfoCommandName {
	c.cs = append(c.cs, commandName...)
	return c
}

func (c CommandInfoCommandName) Build() Completed {
	return Completed(c)
}

func (c SCommandInfoCommandName) Build() SCompleted {
	return SCompleted(c)
}

type ConfigGet Completed

type SConfigGet SCompleted

func (b *Builder) ConfigGet() ConfigGet {
	return ConfigGet{cs: append(b.get(), "CONFIG", "GET"), ks: InitSlot}
}

func (b *SBuilder) ConfigGet() SConfigGet {
	return SConfigGet{cs: append(b.get(), "CONFIG", "GET"), ks: InitSlot}
}

func (c ConfigGet) Parameter(parameter ...string) ConfigGetParameter {
	c.cs = append(c.cs, parameter...)
	return (ConfigGetParameter)(c)
}

func (c SConfigGet) Parameter(parameter ...string) SConfigGetParameter {
	c.cs = append(c.cs, parameter...)
	return (SConfigGetParameter)(c)
}

type ConfigGetParameter Completed

type SConfigGetParameter SCompleted

func (c ConfigGetParameter) Parameter(parameter ...string) ConfigGetParameter {
	c.cs = append(c.cs, parameter...)
	return c
}

func (c SConfigGetParameter) Parameter(parameter ...string) SConfigGetParameter {
	c.cs = append(c.cs, parameter...)
	return c
}

func (c ConfigGetParameter) Build() Completed {
	return Completed(c)
}

func (c SConfigGetParameter) Build() SCompleted {
	return SCompleted(c)
}

type ConfigResetstat Completed

type SConfigResetstat SCompleted

func (b *Builder) ConfigResetstat() ConfigResetstat {
	return ConfigResetstat{cs: append(b.get(), "CONFIG", "RESETSTAT"), ks: InitSlot}
}

func (b *SBuilder) ConfigResetstat() SConfigResetstat {
	return SConfigResetstat{cs: append(b.get(), "CONFIG", "RESETSTAT"), ks: InitSlot}
}

func (c ConfigResetstat) Build() Completed {
	return Completed(c)
}

func (c SConfigResetstat) Build() SCompleted {
	return SCompleted(c)
}

type ConfigRewrite Completed

type SConfigRewrite SCompleted

func (b *Builder) ConfigRewrite() ConfigRewrite {
	return ConfigRewrite{cs: append(b.get(), "CONFIG", "REWRITE"), ks: InitSlot}
}

func (b *SBuilder) ConfigRewrite() SConfigRewrite {
	return SConfigRewrite{cs: append(b.get(), "CONFIG", "REWRITE"), ks: InitSlot}
}

func (c ConfigRewrite) Build() Completed {
	return Completed(c)
}

func (c SConfigRewrite) Build() SCompleted {
	return SCompleted(c)
}

type ConfigSet Completed

type SConfigSet SCompleted

func (b *Builder) ConfigSet() ConfigSet {
	return ConfigSet{cs: append(b.get(), "CONFIG", "SET"), ks: InitSlot}
}

func (b *SBuilder) ConfigSet() SConfigSet {
	return SConfigSet{cs: append(b.get(), "CONFIG", "SET"), ks: InitSlot}
}

func (c ConfigSet) ParameterValue() ConfigSetParameterValue {
	return (ConfigSetParameterValue)(c)
}

func (c SConfigSet) ParameterValue() SConfigSetParameterValue {
	return (SConfigSetParameterValue)(c)
}

type ConfigSetParameterValue Completed

type SConfigSetParameterValue SCompleted

func (c ConfigSetParameterValue) ParameterValue(parameter string, value string) ConfigSetParameterValue {
	c.cs = append(c.cs, parameter, value)
	return c
}

func (c SConfigSetParameterValue) ParameterValue(parameter string, value string) SConfigSetParameterValue {
	c.cs = append(c.cs, parameter, value)
	return c
}

func (c ConfigSetParameterValue) Build() Completed {
	return Completed(c)
}

func (c SConfigSetParameterValue) Build() SCompleted {
	return SCompleted(c)
}

type Copy Completed

type SCopy SCompleted

func (b *Builder) Copy() Copy {
	return Copy{cs: append(b.get(), "COPY"), ks: InitSlot}
}

func (b *SBuilder) Copy() SCopy {
	return SCopy{cs: append(b.get(), "COPY"), ks: InitSlot}
}

func (c Copy) Source(source string) CopySource {
	c.cs = append(c.cs, source)
	return (CopySource)(c)
}

func (c SCopy) Source(source string) SCopySource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SCopySource)(c)
}

type CopyDb Completed

type SCopyDb SCompleted

func (c CopyDb) Replace() CopyReplace {
	c.cs = append(c.cs, "REPLACE")
	return (CopyReplace)(c)
}

func (c SCopyDb) Replace() SCopyReplace {
	c.cs = append(c.cs, "REPLACE")
	return (SCopyReplace)(c)
}

func (c CopyDb) Build() Completed {
	return Completed(c)
}

func (c SCopyDb) Build() SCompleted {
	return SCompleted(c)
}

type CopyDestination Completed

type SCopyDestination SCompleted

func (c CopyDestination) Db(destinationDb int64) CopyDb {
	c.cs = append(c.cs, "DB", strconv.FormatInt(destinationDb, 10))
	return (CopyDb)(c)
}

func (c SCopyDestination) Db(destinationDb int64) SCopyDb {
	c.cs = append(c.cs, "DB", strconv.FormatInt(destinationDb, 10))
	return (SCopyDb)(c)
}

func (c CopyDestination) Replace() CopyReplace {
	c.cs = append(c.cs, "REPLACE")
	return (CopyReplace)(c)
}

func (c SCopyDestination) Replace() SCopyReplace {
	c.cs = append(c.cs, "REPLACE")
	return (SCopyReplace)(c)
}

func (c CopyDestination) Build() Completed {
	return Completed(c)
}

func (c SCopyDestination) Build() SCompleted {
	return SCompleted(c)
}

type CopyReplace Completed

type SCopyReplace SCompleted

func (c CopyReplace) Build() Completed {
	return Completed(c)
}

func (c SCopyReplace) Build() SCompleted {
	return SCompleted(c)
}

type CopySource Completed

type SCopySource SCompleted

func (c CopySource) Destination(destination string) CopyDestination {
	c.cs = append(c.cs, destination)
	return (CopyDestination)(c)
}

func (c SCopySource) Destination(destination string) SCopyDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SCopyDestination)(c)
}

type Dbsize Completed

type SDbsize SCompleted

func (b *Builder) Dbsize() Dbsize {
	return Dbsize{cs: append(b.get(), "DBSIZE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Dbsize() SDbsize {
	return SDbsize{cs: append(b.get(), "DBSIZE"), ks: InitSlot, cf: readonly}
}

func (c Dbsize) Build() Completed {
	return Completed(c)
}

func (c SDbsize) Build() SCompleted {
	return SCompleted(c)
}

type DebugObject Completed

type SDebugObject SCompleted

func (b *Builder) DebugObject() DebugObject {
	return DebugObject{cs: append(b.get(), "DEBUG", "OBJECT"), ks: InitSlot}
}

func (b *SBuilder) DebugObject() SDebugObject {
	return SDebugObject{cs: append(b.get(), "DEBUG", "OBJECT"), ks: InitSlot}
}

func (c DebugObject) Key(key string) DebugObjectKey {
	c.cs = append(c.cs, key)
	return (DebugObjectKey)(c)
}

func (c SDebugObject) Key(key string) SDebugObjectKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SDebugObjectKey)(c)
}

type DebugObjectKey Completed

type SDebugObjectKey SCompleted

func (c DebugObjectKey) Build() Completed {
	return Completed(c)
}

func (c SDebugObjectKey) Build() SCompleted {
	return SCompleted(c)
}

type DebugSegfault Completed

type SDebugSegfault SCompleted

func (b *Builder) DebugSegfault() DebugSegfault {
	return DebugSegfault{cs: append(b.get(), "DEBUG", "SEGFAULT"), ks: InitSlot}
}

func (b *SBuilder) DebugSegfault() SDebugSegfault {
	return SDebugSegfault{cs: append(b.get(), "DEBUG", "SEGFAULT"), ks: InitSlot}
}

func (c DebugSegfault) Build() Completed {
	return Completed(c)
}

func (c SDebugSegfault) Build() SCompleted {
	return SCompleted(c)
}

type Decr Completed

type SDecr SCompleted

func (b *Builder) Decr() Decr {
	return Decr{cs: append(b.get(), "DECR"), ks: InitSlot}
}

func (b *SBuilder) Decr() SDecr {
	return SDecr{cs: append(b.get(), "DECR"), ks: InitSlot}
}

func (c Decr) Key(key string) DecrKey {
	c.cs = append(c.cs, key)
	return (DecrKey)(c)
}

func (c SDecr) Key(key string) SDecrKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SDecrKey)(c)
}

type DecrKey Completed

type SDecrKey SCompleted

func (c DecrKey) Build() Completed {
	return Completed(c)
}

func (c SDecrKey) Build() SCompleted {
	return SCompleted(c)
}

type Decrby Completed

type SDecrby SCompleted

func (b *Builder) Decrby() Decrby {
	return Decrby{cs: append(b.get(), "DECRBY"), ks: InitSlot}
}

func (b *SBuilder) Decrby() SDecrby {
	return SDecrby{cs: append(b.get(), "DECRBY"), ks: InitSlot}
}

func (c Decrby) Key(key string) DecrbyKey {
	c.cs = append(c.cs, key)
	return (DecrbyKey)(c)
}

func (c SDecrby) Key(key string) SDecrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SDecrbyKey)(c)
}

type DecrbyDecrement Completed

type SDecrbyDecrement SCompleted

func (c DecrbyDecrement) Build() Completed {
	return Completed(c)
}

func (c SDecrbyDecrement) Build() SCompleted {
	return SCompleted(c)
}

type DecrbyKey Completed

type SDecrbyKey SCompleted

func (c DecrbyKey) Decrement(decrement int64) DecrbyDecrement {
	c.cs = append(c.cs, strconv.FormatInt(decrement, 10))
	return (DecrbyDecrement)(c)
}

func (c SDecrbyKey) Decrement(decrement int64) SDecrbyDecrement {
	c.cs = append(c.cs, strconv.FormatInt(decrement, 10))
	return (SDecrbyDecrement)(c)
}

type Del Completed

type SDel SCompleted

func (b *Builder) Del() Del {
	return Del{cs: append(b.get(), "DEL"), ks: InitSlot}
}

func (b *SBuilder) Del() SDel {
	return SDel{cs: append(b.get(), "DEL"), ks: InitSlot}
}

func (c Del) Key(key ...string) DelKey {
	c.cs = append(c.cs, key...)
	return (DelKey)(c)
}

func (c SDel) Key(key ...string) SDelKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SDelKey)(c)
}

type DelKey Completed

type SDelKey SCompleted

func (c DelKey) Key(key ...string) DelKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SDelKey) Key(key ...string) SDelKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c DelKey) Build() Completed {
	return Completed(c)
}

func (c SDelKey) Build() SCompleted {
	return SCompleted(c)
}

type Discard Completed

type SDiscard SCompleted

func (b *Builder) Discard() Discard {
	return Discard{cs: append(b.get(), "DISCARD"), ks: InitSlot}
}

func (b *SBuilder) Discard() SDiscard {
	return SDiscard{cs: append(b.get(), "DISCARD"), ks: InitSlot}
}

func (c Discard) Build() Completed {
	return Completed(c)
}

func (c SDiscard) Build() SCompleted {
	return SCompleted(c)
}

type Dump Completed

type SDump SCompleted

func (b *Builder) Dump() Dump {
	return Dump{cs: append(b.get(), "DUMP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Dump() SDump {
	return SDump{cs: append(b.get(), "DUMP"), ks: InitSlot, cf: readonly}
}

func (c Dump) Key(key string) DumpKey {
	c.cs = append(c.cs, key)
	return (DumpKey)(c)
}

func (c SDump) Key(key string) SDumpKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SDumpKey)(c)
}

type DumpKey Completed

type SDumpKey SCompleted

func (c DumpKey) Build() Completed {
	return Completed(c)
}

func (c SDumpKey) Build() SCompleted {
	return SCompleted(c)
}

type Echo Completed

type SEcho SCompleted

func (b *Builder) Echo() Echo {
	return Echo{cs: append(b.get(), "ECHO"), ks: InitSlot}
}

func (b *SBuilder) Echo() SEcho {
	return SEcho{cs: append(b.get(), "ECHO"), ks: InitSlot}
}

func (c Echo) Message(message string) EchoMessage {
	c.cs = append(c.cs, message)
	return (EchoMessage)(c)
}

func (c SEcho) Message(message string) SEchoMessage {
	c.cs = append(c.cs, message)
	return (SEchoMessage)(c)
}

type EchoMessage Completed

type SEchoMessage SCompleted

func (c EchoMessage) Build() Completed {
	return Completed(c)
}

func (c SEchoMessage) Build() SCompleted {
	return SCompleted(c)
}

type Eval Completed

type SEval SCompleted

func (b *Builder) Eval() Eval {
	return Eval{cs: append(b.get(), "EVAL"), ks: InitSlot}
}

func (b *SBuilder) Eval() SEval {
	return SEval{cs: append(b.get(), "EVAL"), ks: InitSlot}
}

func (c Eval) Script(script string) EvalScript {
	c.cs = append(c.cs, script)
	return (EvalScript)(c)
}

func (c SEval) Script(script string) SEvalScript {
	c.cs = append(c.cs, script)
	return (SEvalScript)(c)
}

type EvalArg Completed

type SEvalArg SCompleted

func (c EvalArg) Arg(arg ...string) EvalArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c SEvalArg) Arg(arg ...string) SEvalArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c EvalArg) Build() Completed {
	return Completed(c)
}

func (c SEvalArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalKey Completed

type SEvalKey SCompleted

func (c EvalKey) Key(key ...string) EvalKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SEvalKey) Key(key ...string) SEvalKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c EvalKey) Arg(arg ...string) EvalArg {
	c.cs = append(c.cs, arg...)
	return (EvalArg)(c)
}

func (c SEvalKey) Arg(arg ...string) SEvalArg {
	c.cs = append(c.cs, arg...)
	return (SEvalArg)(c)
}

func (c EvalKey) Build() Completed {
	return Completed(c)
}

func (c SEvalKey) Build() SCompleted {
	return SCompleted(c)
}

type EvalNumkeys Completed

type SEvalNumkeys SCompleted

func (c EvalNumkeys) Key(key ...string) EvalKey {
	c.cs = append(c.cs, key...)
	return (EvalKey)(c)
}

func (c SEvalNumkeys) Key(key ...string) SEvalKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SEvalKey)(c)
}

func (c EvalNumkeys) Arg(arg ...string) EvalArg {
	c.cs = append(c.cs, arg...)
	return (EvalArg)(c)
}

func (c SEvalNumkeys) Arg(arg ...string) SEvalArg {
	c.cs = append(c.cs, arg...)
	return (SEvalArg)(c)
}

func (c EvalNumkeys) Build() Completed {
	return Completed(c)
}

func (c SEvalNumkeys) Build() SCompleted {
	return SCompleted(c)
}

type EvalRo Completed

type SEvalRo SCompleted

func (b *Builder) EvalRo() EvalRo {
	return EvalRo{cs: append(b.get(), "EVAL_RO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) EvalRo() SEvalRo {
	return SEvalRo{cs: append(b.get(), "EVAL_RO"), ks: InitSlot, cf: readonly}
}

func (c EvalRo) Script(script string) EvalRoScript {
	c.cs = append(c.cs, script)
	return (EvalRoScript)(c)
}

func (c SEvalRo) Script(script string) SEvalRoScript {
	c.cs = append(c.cs, script)
	return (SEvalRoScript)(c)
}

type EvalRoArg Completed

type SEvalRoArg SCompleted

func (c EvalRoArg) Arg(arg ...string) EvalRoArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c SEvalRoArg) Arg(arg ...string) SEvalRoArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c EvalRoArg) Build() Completed {
	return Completed(c)
}

func (c SEvalRoArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalRoKey Completed

type SEvalRoKey SCompleted

func (c EvalRoKey) Key(key ...string) EvalRoKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SEvalRoKey) Key(key ...string) SEvalRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c EvalRoKey) Arg(arg ...string) EvalRoArg {
	c.cs = append(c.cs, arg...)
	return (EvalRoArg)(c)
}

func (c SEvalRoKey) Arg(arg ...string) SEvalRoArg {
	c.cs = append(c.cs, arg...)
	return (SEvalRoArg)(c)
}

type EvalRoNumkeys Completed

type SEvalRoNumkeys SCompleted

func (c EvalRoNumkeys) Key(key ...string) EvalRoKey {
	c.cs = append(c.cs, key...)
	return (EvalRoKey)(c)
}

func (c SEvalRoNumkeys) Key(key ...string) SEvalRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SEvalRoKey)(c)
}

type EvalRoScript Completed

type SEvalRoScript SCompleted

func (c EvalRoScript) Numkeys(numkeys int64) EvalRoNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (EvalRoNumkeys)(c)
}

func (c SEvalRoScript) Numkeys(numkeys int64) SEvalRoNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SEvalRoNumkeys)(c)
}

type EvalScript Completed

type SEvalScript SCompleted

func (c EvalScript) Numkeys(numkeys int64) EvalNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (EvalNumkeys)(c)
}

func (c SEvalScript) Numkeys(numkeys int64) SEvalNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SEvalNumkeys)(c)
}

type Evalsha Completed

type SEvalsha SCompleted

func (b *Builder) Evalsha() Evalsha {
	return Evalsha{cs: append(b.get(), "EVALSHA"), ks: InitSlot}
}

func (b *SBuilder) Evalsha() SEvalsha {
	return SEvalsha{cs: append(b.get(), "EVALSHA"), ks: InitSlot}
}

func (c Evalsha) Sha1(sha1 string) EvalshaSha1 {
	c.cs = append(c.cs, sha1)
	return (EvalshaSha1)(c)
}

func (c SEvalsha) Sha1(sha1 string) SEvalshaSha1 {
	c.cs = append(c.cs, sha1)
	return (SEvalshaSha1)(c)
}

type EvalshaArg Completed

type SEvalshaArg SCompleted

func (c EvalshaArg) Arg(arg ...string) EvalshaArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c SEvalshaArg) Arg(arg ...string) SEvalshaArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c EvalshaArg) Build() Completed {
	return Completed(c)
}

func (c SEvalshaArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaKey Completed

type SEvalshaKey SCompleted

func (c EvalshaKey) Key(key ...string) EvalshaKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SEvalshaKey) Key(key ...string) SEvalshaKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c EvalshaKey) Arg(arg ...string) EvalshaArg {
	c.cs = append(c.cs, arg...)
	return (EvalshaArg)(c)
}

func (c SEvalshaKey) Arg(arg ...string) SEvalshaArg {
	c.cs = append(c.cs, arg...)
	return (SEvalshaArg)(c)
}

func (c EvalshaKey) Build() Completed {
	return Completed(c)
}

func (c SEvalshaKey) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaNumkeys Completed

type SEvalshaNumkeys SCompleted

func (c EvalshaNumkeys) Key(key ...string) EvalshaKey {
	c.cs = append(c.cs, key...)
	return (EvalshaKey)(c)
}

func (c SEvalshaNumkeys) Key(key ...string) SEvalshaKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SEvalshaKey)(c)
}

func (c EvalshaNumkeys) Arg(arg ...string) EvalshaArg {
	c.cs = append(c.cs, arg...)
	return (EvalshaArg)(c)
}

func (c SEvalshaNumkeys) Arg(arg ...string) SEvalshaArg {
	c.cs = append(c.cs, arg...)
	return (SEvalshaArg)(c)
}

func (c EvalshaNumkeys) Build() Completed {
	return Completed(c)
}

func (c SEvalshaNumkeys) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaRo Completed

type SEvalshaRo SCompleted

func (b *Builder) EvalshaRo() EvalshaRo {
	return EvalshaRo{cs: append(b.get(), "EVALSHA_RO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) EvalshaRo() SEvalshaRo {
	return SEvalshaRo{cs: append(b.get(), "EVALSHA_RO"), ks: InitSlot, cf: readonly}
}

func (c EvalshaRo) Sha1(sha1 string) EvalshaRoSha1 {
	c.cs = append(c.cs, sha1)
	return (EvalshaRoSha1)(c)
}

func (c SEvalshaRo) Sha1(sha1 string) SEvalshaRoSha1 {
	c.cs = append(c.cs, sha1)
	return (SEvalshaRoSha1)(c)
}

type EvalshaRoArg Completed

type SEvalshaRoArg SCompleted

func (c EvalshaRoArg) Arg(arg ...string) EvalshaRoArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c SEvalshaRoArg) Arg(arg ...string) SEvalshaRoArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c EvalshaRoArg) Build() Completed {
	return Completed(c)
}

func (c SEvalshaRoArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaRoKey Completed

type SEvalshaRoKey SCompleted

func (c EvalshaRoKey) Key(key ...string) EvalshaRoKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SEvalshaRoKey) Key(key ...string) SEvalshaRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c EvalshaRoKey) Arg(arg ...string) EvalshaRoArg {
	c.cs = append(c.cs, arg...)
	return (EvalshaRoArg)(c)
}

func (c SEvalshaRoKey) Arg(arg ...string) SEvalshaRoArg {
	c.cs = append(c.cs, arg...)
	return (SEvalshaRoArg)(c)
}

type EvalshaRoNumkeys Completed

type SEvalshaRoNumkeys SCompleted

func (c EvalshaRoNumkeys) Key(key ...string) EvalshaRoKey {
	c.cs = append(c.cs, key...)
	return (EvalshaRoKey)(c)
}

func (c SEvalshaRoNumkeys) Key(key ...string) SEvalshaRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SEvalshaRoKey)(c)
}

type EvalshaRoSha1 Completed

type SEvalshaRoSha1 SCompleted

func (c EvalshaRoSha1) Numkeys(numkeys int64) EvalshaRoNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (EvalshaRoNumkeys)(c)
}

func (c SEvalshaRoSha1) Numkeys(numkeys int64) SEvalshaRoNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SEvalshaRoNumkeys)(c)
}

type EvalshaSha1 Completed

type SEvalshaSha1 SCompleted

func (c EvalshaSha1) Numkeys(numkeys int64) EvalshaNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (EvalshaNumkeys)(c)
}

func (c SEvalshaSha1) Numkeys(numkeys int64) SEvalshaNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SEvalshaNumkeys)(c)
}

type Exec Completed

type SExec SCompleted

func (b *Builder) Exec() Exec {
	return Exec{cs: append(b.get(), "EXEC"), ks: InitSlot}
}

func (b *SBuilder) Exec() SExec {
	return SExec{cs: append(b.get(), "EXEC"), ks: InitSlot}
}

func (c Exec) Build() Completed {
	return Completed(c)
}

func (c SExec) Build() SCompleted {
	return SCompleted(c)
}

type Exists Completed

type SExists SCompleted

func (b *Builder) Exists() Exists {
	return Exists{cs: append(b.get(), "EXISTS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Exists() SExists {
	return SExists{cs: append(b.get(), "EXISTS"), ks: InitSlot, cf: readonly}
}

func (c Exists) Key(key ...string) ExistsKey {
	c.cs = append(c.cs, key...)
	return (ExistsKey)(c)
}

func (c SExists) Key(key ...string) SExistsKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SExistsKey)(c)
}

type ExistsKey Completed

type SExistsKey SCompleted

func (c ExistsKey) Key(key ...string) ExistsKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SExistsKey) Key(key ...string) SExistsKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ExistsKey) Build() Completed {
	return Completed(c)
}

func (c SExistsKey) Build() SCompleted {
	return SCompleted(c)
}

type Expire Completed

type SExpire SCompleted

func (b *Builder) Expire() Expire {
	return Expire{cs: append(b.get(), "EXPIRE"), ks: InitSlot}
}

func (b *SBuilder) Expire() SExpire {
	return SExpire{cs: append(b.get(), "EXPIRE"), ks: InitSlot}
}

func (c Expire) Key(key string) ExpireKey {
	c.cs = append(c.cs, key)
	return (ExpireKey)(c)
}

func (c SExpire) Key(key string) SExpireKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SExpireKey)(c)
}

type ExpireConditionGt Completed

type SExpireConditionGt SCompleted

func (c ExpireConditionGt) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireConditionLt Completed

type SExpireConditionLt SCompleted

func (c ExpireConditionLt) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireConditionNx Completed

type SExpireConditionNx SCompleted

func (c ExpireConditionNx) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireConditionXx Completed

type SExpireConditionXx SCompleted

func (c ExpireConditionXx) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireKey Completed

type SExpireKey SCompleted

func (c ExpireKey) Seconds(seconds int64) ExpireSeconds {
	c.cs = append(c.cs, strconv.FormatInt(seconds, 10))
	return (ExpireSeconds)(c)
}

func (c SExpireKey) Seconds(seconds int64) SExpireSeconds {
	c.cs = append(c.cs, strconv.FormatInt(seconds, 10))
	return (SExpireSeconds)(c)
}

type ExpireSeconds Completed

type SExpireSeconds SCompleted

func (c ExpireSeconds) Nx() ExpireConditionNx {
	c.cs = append(c.cs, "NX")
	return (ExpireConditionNx)(c)
}

func (c SExpireSeconds) Nx() SExpireConditionNx {
	c.cs = append(c.cs, "NX")
	return (SExpireConditionNx)(c)
}

func (c ExpireSeconds) Xx() ExpireConditionXx {
	c.cs = append(c.cs, "XX")
	return (ExpireConditionXx)(c)
}

func (c SExpireSeconds) Xx() SExpireConditionXx {
	c.cs = append(c.cs, "XX")
	return (SExpireConditionXx)(c)
}

func (c ExpireSeconds) Gt() ExpireConditionGt {
	c.cs = append(c.cs, "GT")
	return (ExpireConditionGt)(c)
}

func (c SExpireSeconds) Gt() SExpireConditionGt {
	c.cs = append(c.cs, "GT")
	return (SExpireConditionGt)(c)
}

func (c ExpireSeconds) Lt() ExpireConditionLt {
	c.cs = append(c.cs, "LT")
	return (ExpireConditionLt)(c)
}

func (c SExpireSeconds) Lt() SExpireConditionLt {
	c.cs = append(c.cs, "LT")
	return (SExpireConditionLt)(c)
}

func (c ExpireSeconds) Build() Completed {
	return Completed(c)
}

func (c SExpireSeconds) Build() SCompleted {
	return SCompleted(c)
}

type Expireat Completed

type SExpireat SCompleted

func (b *Builder) Expireat() Expireat {
	return Expireat{cs: append(b.get(), "EXPIREAT"), ks: InitSlot}
}

func (b *SBuilder) Expireat() SExpireat {
	return SExpireat{cs: append(b.get(), "EXPIREAT"), ks: InitSlot}
}

func (c Expireat) Key(key string) ExpireatKey {
	c.cs = append(c.cs, key)
	return (ExpireatKey)(c)
}

func (c SExpireat) Key(key string) SExpireatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SExpireatKey)(c)
}

type ExpireatConditionGt Completed

type SExpireatConditionGt SCompleted

func (c ExpireatConditionGt) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatConditionLt Completed

type SExpireatConditionLt SCompleted

func (c ExpireatConditionLt) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatConditionNx Completed

type SExpireatConditionNx SCompleted

func (c ExpireatConditionNx) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatConditionXx Completed

type SExpireatConditionXx SCompleted

func (c ExpireatConditionXx) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatKey Completed

type SExpireatKey SCompleted

func (c ExpireatKey) Timestamp(timestamp int64) ExpireatTimestamp {
	c.cs = append(c.cs, strconv.FormatInt(timestamp, 10))
	return (ExpireatTimestamp)(c)
}

func (c SExpireatKey) Timestamp(timestamp int64) SExpireatTimestamp {
	c.cs = append(c.cs, strconv.FormatInt(timestamp, 10))
	return (SExpireatTimestamp)(c)
}

type ExpireatTimestamp Completed

type SExpireatTimestamp SCompleted

func (c ExpireatTimestamp) Nx() ExpireatConditionNx {
	c.cs = append(c.cs, "NX")
	return (ExpireatConditionNx)(c)
}

func (c SExpireatTimestamp) Nx() SExpireatConditionNx {
	c.cs = append(c.cs, "NX")
	return (SExpireatConditionNx)(c)
}

func (c ExpireatTimestamp) Xx() ExpireatConditionXx {
	c.cs = append(c.cs, "XX")
	return (ExpireatConditionXx)(c)
}

func (c SExpireatTimestamp) Xx() SExpireatConditionXx {
	c.cs = append(c.cs, "XX")
	return (SExpireatConditionXx)(c)
}

func (c ExpireatTimestamp) Gt() ExpireatConditionGt {
	c.cs = append(c.cs, "GT")
	return (ExpireatConditionGt)(c)
}

func (c SExpireatTimestamp) Gt() SExpireatConditionGt {
	c.cs = append(c.cs, "GT")
	return (SExpireatConditionGt)(c)
}

func (c ExpireatTimestamp) Lt() ExpireatConditionLt {
	c.cs = append(c.cs, "LT")
	return (ExpireatConditionLt)(c)
}

func (c SExpireatTimestamp) Lt() SExpireatConditionLt {
	c.cs = append(c.cs, "LT")
	return (SExpireatConditionLt)(c)
}

func (c ExpireatTimestamp) Build() Completed {
	return Completed(c)
}

func (c SExpireatTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type Expiretime Completed

type SExpiretime SCompleted

func (b *Builder) Expiretime() Expiretime {
	return Expiretime{cs: append(b.get(), "EXPIRETIME"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Expiretime() SExpiretime {
	return SExpiretime{cs: append(b.get(), "EXPIRETIME"), ks: InitSlot, cf: readonly}
}

func (c Expiretime) Key(key string) ExpiretimeKey {
	c.cs = append(c.cs, key)
	return (ExpiretimeKey)(c)
}

func (c SExpiretime) Key(key string) SExpiretimeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SExpiretimeKey)(c)
}

type ExpiretimeKey Completed

type SExpiretimeKey SCompleted

func (c ExpiretimeKey) Build() Completed {
	return Completed(c)
}

func (c SExpiretimeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c ExpiretimeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SExpiretimeKey) Cache() SCacheable {
	return SCacheable(c)
}

type Failover Completed

type SFailover SCompleted

func (b *Builder) Failover() Failover {
	return Failover{cs: append(b.get(), "FAILOVER"), ks: InitSlot}
}

func (b *SBuilder) Failover() SFailover {
	return SFailover{cs: append(b.get(), "FAILOVER"), ks: InitSlot}
}

func (c Failover) To() FailoverTargetTo {
	c.cs = append(c.cs, "TO")
	return (FailoverTargetTo)(c)
}

func (c SFailover) To() SFailoverTargetTo {
	c.cs = append(c.cs, "TO")
	return (SFailoverTargetTo)(c)
}

func (c Failover) Abort() FailoverAbort {
	c.cs = append(c.cs, "ABORT")
	return (FailoverAbort)(c)
}

func (c SFailover) Abort() SFailoverAbort {
	c.cs = append(c.cs, "ABORT")
	return (SFailoverAbort)(c)
}

func (c Failover) Timeout(milliseconds int64) FailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailover) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c Failover) Build() Completed {
	return Completed(c)
}

func (c SFailover) Build() SCompleted {
	return SCompleted(c)
}

type FailoverAbort Completed

type SFailoverAbort SCompleted

func (c FailoverAbort) Timeout(milliseconds int64) FailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailoverAbort) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c FailoverAbort) Build() Completed {
	return Completed(c)
}

func (c SFailoverAbort) Build() SCompleted {
	return SCompleted(c)
}

type FailoverTargetForce Completed

type SFailoverTargetForce SCompleted

func (c FailoverTargetForce) Abort() FailoverAbort {
	c.cs = append(c.cs, "ABORT")
	return (FailoverAbort)(c)
}

func (c SFailoverTargetForce) Abort() SFailoverAbort {
	c.cs = append(c.cs, "ABORT")
	return (SFailoverAbort)(c)
}

func (c FailoverTargetForce) Timeout(milliseconds int64) FailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailoverTargetForce) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c FailoverTargetForce) Build() Completed {
	return Completed(c)
}

func (c SFailoverTargetForce) Build() SCompleted {
	return SCompleted(c)
}

type FailoverTargetHost Completed

type SFailoverTargetHost SCompleted

func (c FailoverTargetHost) Port(port int64) FailoverTargetPort {
	c.cs = append(c.cs, strconv.FormatInt(port, 10))
	return (FailoverTargetPort)(c)
}

func (c SFailoverTargetHost) Port(port int64) SFailoverTargetPort {
	c.cs = append(c.cs, strconv.FormatInt(port, 10))
	return (SFailoverTargetPort)(c)
}

type FailoverTargetPort Completed

type SFailoverTargetPort SCompleted

func (c FailoverTargetPort) Force() FailoverTargetForce {
	c.cs = append(c.cs, "FORCE")
	return (FailoverTargetForce)(c)
}

func (c SFailoverTargetPort) Force() SFailoverTargetForce {
	c.cs = append(c.cs, "FORCE")
	return (SFailoverTargetForce)(c)
}

func (c FailoverTargetPort) Abort() FailoverAbort {
	c.cs = append(c.cs, "ABORT")
	return (FailoverAbort)(c)
}

func (c SFailoverTargetPort) Abort() SFailoverAbort {
	c.cs = append(c.cs, "ABORT")
	return (SFailoverAbort)(c)
}

func (c FailoverTargetPort) Timeout(milliseconds int64) FailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailoverTargetPort) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs = append(c.cs, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c FailoverTargetPort) Build() Completed {
	return Completed(c)
}

func (c SFailoverTargetPort) Build() SCompleted {
	return SCompleted(c)
}

type FailoverTargetTo Completed

type SFailoverTargetTo SCompleted

func (c FailoverTargetTo) Host(host string) FailoverTargetHost {
	c.cs = append(c.cs, host)
	return (FailoverTargetHost)(c)
}

func (c SFailoverTargetTo) Host(host string) SFailoverTargetHost {
	c.cs = append(c.cs, host)
	return (SFailoverTargetHost)(c)
}

type FailoverTimeout Completed

type SFailoverTimeout SCompleted

func (c FailoverTimeout) Build() Completed {
	return Completed(c)
}

func (c SFailoverTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Flushall Completed

type SFlushall SCompleted

func (b *Builder) Flushall() Flushall {
	return Flushall{cs: append(b.get(), "FLUSHALL"), ks: InitSlot}
}

func (b *SBuilder) Flushall() SFlushall {
	return SFlushall{cs: append(b.get(), "FLUSHALL"), ks: InitSlot}
}

func (c Flushall) Async() FlushallAsync {
	c.cs = append(c.cs, "ASYNC")
	return (FlushallAsync)(c)
}

func (c SFlushall) Async() SFlushallAsync {
	c.cs = append(c.cs, "ASYNC")
	return (SFlushallAsync)(c)
}

func (c Flushall) Sync() FlushallAsyncSync {
	c.cs = append(c.cs, "SYNC")
	return (FlushallAsyncSync)(c)
}

func (c SFlushall) Sync() SFlushallAsyncSync {
	c.cs = append(c.cs, "SYNC")
	return (SFlushallAsyncSync)(c)
}

func (c Flushall) Build() Completed {
	return Completed(c)
}

func (c SFlushall) Build() SCompleted {
	return SCompleted(c)
}

type FlushallAsync Completed

type SFlushallAsync SCompleted

func (c FlushallAsync) Build() Completed {
	return Completed(c)
}

func (c SFlushallAsync) Build() SCompleted {
	return SCompleted(c)
}

type FlushallAsyncSync Completed

type SFlushallAsyncSync SCompleted

func (c FlushallAsyncSync) Build() Completed {
	return Completed(c)
}

func (c SFlushallAsyncSync) Build() SCompleted {
	return SCompleted(c)
}

type Flushdb Completed

type SFlushdb SCompleted

func (b *Builder) Flushdb() Flushdb {
	return Flushdb{cs: append(b.get(), "FLUSHDB"), ks: InitSlot}
}

func (b *SBuilder) Flushdb() SFlushdb {
	return SFlushdb{cs: append(b.get(), "FLUSHDB"), ks: InitSlot}
}

func (c Flushdb) Async() FlushdbAsync {
	c.cs = append(c.cs, "ASYNC")
	return (FlushdbAsync)(c)
}

func (c SFlushdb) Async() SFlushdbAsync {
	c.cs = append(c.cs, "ASYNC")
	return (SFlushdbAsync)(c)
}

func (c Flushdb) Sync() FlushdbAsyncSync {
	c.cs = append(c.cs, "SYNC")
	return (FlushdbAsyncSync)(c)
}

func (c SFlushdb) Sync() SFlushdbAsyncSync {
	c.cs = append(c.cs, "SYNC")
	return (SFlushdbAsyncSync)(c)
}

func (c Flushdb) Build() Completed {
	return Completed(c)
}

func (c SFlushdb) Build() SCompleted {
	return SCompleted(c)
}

type FlushdbAsync Completed

type SFlushdbAsync SCompleted

func (c FlushdbAsync) Build() Completed {
	return Completed(c)
}

func (c SFlushdbAsync) Build() SCompleted {
	return SCompleted(c)
}

type FlushdbAsyncSync Completed

type SFlushdbAsyncSync SCompleted

func (c FlushdbAsyncSync) Build() Completed {
	return Completed(c)
}

func (c SFlushdbAsyncSync) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregate Completed

type SFtAggregate SCompleted

func (b *Builder) FtAggregate() FtAggregate {
	return FtAggregate{cs: append(b.get(), "FT.AGGREGATE"), ks: InitSlot}
}

func (b *SBuilder) FtAggregate() SFtAggregate {
	return SFtAggregate{cs: append(b.get(), "FT.AGGREGATE"), ks: InitSlot}
}

func (c FtAggregate) Index(index string) FtAggregateIndex {
	c.cs = append(c.cs, index)
	return (FtAggregateIndex)(c)
}

func (c SFtAggregate) Index(index string) SFtAggregateIndex {
	c.cs = append(c.cs, index)
	return (SFtAggregateIndex)(c)
}

type FtAggregateApplyApply Completed

type SFtAggregateApplyApply SCompleted

func (c FtAggregateApplyApply) As(name string) FtAggregateApplyAs {
	c.cs = append(c.cs, "AS", name)
	return (FtAggregateApplyAs)(c)
}

func (c SFtAggregateApplyApply) As(name string) SFtAggregateApplyAs {
	c.cs = append(c.cs, "AS", name)
	return (SFtAggregateApplyAs)(c)
}

type FtAggregateApplyAs Completed

type SFtAggregateApplyAs SCompleted

func (c FtAggregateApplyAs) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateApplyAs) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateApplyAs) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateApplyAs) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateApplyAs) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateApplyAs) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateApplyAs) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateApplyAs) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateApplyAs) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateApplyAs) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateCursorCount Completed

type SFtAggregateCursorCount SCompleted

func (c FtAggregateCursorCount) Maxidle(idleTime int64) FtAggregateCursorMaxidle {
	c.cs = append(c.cs, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (FtAggregateCursorMaxidle)(c)
}

func (c SFtAggregateCursorCount) Maxidle(idleTime int64) SFtAggregateCursorMaxidle {
	c.cs = append(c.cs, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (SFtAggregateCursorMaxidle)(c)
}

func (c FtAggregateCursorCount) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateCursorCount) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateCursorMaxidle Completed

type SFtAggregateCursorMaxidle SCompleted

func (c FtAggregateCursorMaxidle) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateCursorMaxidle) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateCursorWithcursor Completed

type SFtAggregateCursorWithcursor SCompleted

func (c FtAggregateCursorWithcursor) Count(readSize int64) FtAggregateCursorCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(readSize, 10))
	return (FtAggregateCursorCount)(c)
}

func (c SFtAggregateCursorWithcursor) Count(readSize int64) SFtAggregateCursorCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(readSize, 10))
	return (SFtAggregateCursorCount)(c)
}

func (c FtAggregateCursorWithcursor) Maxidle(idleTime int64) FtAggregateCursorMaxidle {
	c.cs = append(c.cs, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (FtAggregateCursorMaxidle)(c)
}

func (c SFtAggregateCursorWithcursor) Maxidle(idleTime int64) SFtAggregateCursorMaxidle {
	c.cs = append(c.cs, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (SFtAggregateCursorMaxidle)(c)
}

func (c FtAggregateCursorWithcursor) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateCursorWithcursor) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateFilter Completed

type SFtAggregateFilter SCompleted

func (c FtAggregateFilter) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateFilter) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateFilter) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateFilter) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyGroupby Completed

type SFtAggregateGroupbyGroupby SCompleted

func (c FtAggregateGroupbyGroupby) Property(property ...string) FtAggregateGroupbyProperty {
	c.cs = append(c.cs, property...)
	return (FtAggregateGroupbyProperty)(c)
}

func (c SFtAggregateGroupbyGroupby) Property(property ...string) SFtAggregateGroupbyProperty {
	c.cs = append(c.cs, property...)
	return (SFtAggregateGroupbyProperty)(c)
}

type FtAggregateGroupbyProperty Completed

type SFtAggregateGroupbyProperty SCompleted

func (c FtAggregateGroupbyProperty) Property(property ...string) FtAggregateGroupbyProperty {
	c.cs = append(c.cs, property...)
	return c
}

func (c SFtAggregateGroupbyProperty) Property(property ...string) SFtAggregateGroupbyProperty {
	c.cs = append(c.cs, property...)
	return c
}

func (c FtAggregateGroupbyProperty) Reduce(function string) FtAggregateGroupbyReduceReduce {
	c.cs = append(c.cs, "REDUCE", function)
	return (FtAggregateGroupbyReduceReduce)(c)
}

func (c SFtAggregateGroupbyProperty) Reduce(function string) SFtAggregateGroupbyReduceReduce {
	c.cs = append(c.cs, "REDUCE", function)
	return (SFtAggregateGroupbyReduceReduce)(c)
}

func (c FtAggregateGroupbyProperty) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateGroupbyProperty) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateGroupbyProperty) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateGroupbyProperty) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateGroupbyProperty) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateGroupbyProperty) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateGroupbyProperty) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateGroupbyProperty) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateGroupbyProperty) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateGroupbyProperty) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateGroupbyProperty) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateGroupbyProperty) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateGroupbyProperty) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateGroupbyProperty) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyReduceArg Completed

type SFtAggregateGroupbyReduceArg SCompleted

func (c FtAggregateGroupbyReduceArg) Arg(arg ...string) FtAggregateGroupbyReduceArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c SFtAggregateGroupbyReduceArg) Arg(arg ...string) SFtAggregateGroupbyReduceArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c FtAggregateGroupbyReduceArg) As(name string) FtAggregateGroupbyReduceAs {
	c.cs = append(c.cs, "AS", name)
	return (FtAggregateGroupbyReduceAs)(c)
}

func (c SFtAggregateGroupbyReduceArg) As(name string) SFtAggregateGroupbyReduceAs {
	c.cs = append(c.cs, "AS", name)
	return (SFtAggregateGroupbyReduceAs)(c)
}

func (c FtAggregateGroupbyReduceArg) Reduce(function string) FtAggregateGroupbyReduceReduce {
	c.cs = append(c.cs, "REDUCE", function)
	return (FtAggregateGroupbyReduceReduce)(c)
}

func (c SFtAggregateGroupbyReduceArg) Reduce(function string) SFtAggregateGroupbyReduceReduce {
	c.cs = append(c.cs, "REDUCE", function)
	return (SFtAggregateGroupbyReduceReduce)(c)
}

func (c FtAggregateGroupbyReduceArg) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateGroupbyReduceArg) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateGroupbyReduceArg) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateGroupbyReduceArg) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateGroupbyReduceArg) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateGroupbyReduceArg) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateGroupbyReduceArg) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateGroupbyReduceArg) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateGroupbyReduceArg) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateGroupbyReduceArg) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateGroupbyReduceArg) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateGroupbyReduceArg) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateGroupbyReduceArg) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateGroupbyReduceArg) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyReduceAs Completed

type SFtAggregateGroupbyReduceAs SCompleted

func (c FtAggregateGroupbyReduceAs) Reduce(function string) FtAggregateGroupbyReduceReduce {
	c.cs = append(c.cs, "REDUCE", function)
	return (FtAggregateGroupbyReduceReduce)(c)
}

func (c SFtAggregateGroupbyReduceAs) Reduce(function string) SFtAggregateGroupbyReduceReduce {
	c.cs = append(c.cs, "REDUCE", function)
	return (SFtAggregateGroupbyReduceReduce)(c)
}

func (c FtAggregateGroupbyReduceAs) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateGroupbyReduceAs) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateGroupbyReduceAs) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateGroupbyReduceAs) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateGroupbyReduceAs) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateGroupbyReduceAs) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateGroupbyReduceAs) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateGroupbyReduceAs) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateGroupbyReduceAs) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateGroupbyReduceAs) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateGroupbyReduceAs) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateGroupbyReduceAs) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateGroupbyReduceAs) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateGroupbyReduceAs) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyReduceNargs Completed

type SFtAggregateGroupbyReduceNargs SCompleted

func (c FtAggregateGroupbyReduceNargs) Arg(arg ...string) FtAggregateGroupbyReduceArg {
	c.cs = append(c.cs, arg...)
	return (FtAggregateGroupbyReduceArg)(c)
}

func (c SFtAggregateGroupbyReduceNargs) Arg(arg ...string) SFtAggregateGroupbyReduceArg {
	c.cs = append(c.cs, arg...)
	return (SFtAggregateGroupbyReduceArg)(c)
}

type FtAggregateGroupbyReduceReduce Completed

type SFtAggregateGroupbyReduceReduce SCompleted

func (c FtAggregateGroupbyReduceReduce) Nargs(nargs int64) FtAggregateGroupbyReduceNargs {
	c.cs = append(c.cs, strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyReduceNargs)(c)
}

func (c SFtAggregateGroupbyReduceReduce) Nargs(nargs int64) SFtAggregateGroupbyReduceNargs {
	c.cs = append(c.cs, strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyReduceNargs)(c)
}

type FtAggregateIndex Completed

type SFtAggregateIndex SCompleted

func (c FtAggregateIndex) Query(query string) FtAggregateQuery {
	c.cs = append(c.cs, query)
	return (FtAggregateQuery)(c)
}

func (c SFtAggregateIndex) Query(query string) SFtAggregateQuery {
	c.cs = append(c.cs, query)
	return (SFtAggregateQuery)(c)
}

type FtAggregateLimitLimit Completed

type SFtAggregateLimitLimit SCompleted

func (c FtAggregateLimitLimit) OffsetNum(offset int64, num int64) FtAggregateLimitOffsetNum {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (FtAggregateLimitOffsetNum)(c)
}

func (c SFtAggregateLimitLimit) OffsetNum(offset int64, num int64) SFtAggregateLimitOffsetNum {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (SFtAggregateLimitOffsetNum)(c)
}

type FtAggregateLimitOffsetNum Completed

type SFtAggregateLimitOffsetNum SCompleted

func (c FtAggregateLimitOffsetNum) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateLimitOffsetNum) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateLimitOffsetNum) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateLimitOffsetNum) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateLimitOffsetNum) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateLimitOffsetNum) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateLoadField Completed

type SFtAggregateLoadField SCompleted

func (c FtAggregateLoadField) Field(field ...string) FtAggregateLoadField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SFtAggregateLoadField) Field(field ...string) SFtAggregateLoadField {
	c.cs = append(c.cs, field...)
	return c
}

func (c FtAggregateLoadField) LoadAll() FtAggregateLoadallLoadAll {
	c.cs = append(c.cs, "LOAD", "*")
	return (FtAggregateLoadallLoadAll)(c)
}

func (c SFtAggregateLoadField) LoadAll() SFtAggregateLoadallLoadAll {
	c.cs = append(c.cs, "LOAD", "*")
	return (SFtAggregateLoadallLoadAll)(c)
}

func (c FtAggregateLoadField) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateLoadField) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateLoadField) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateLoadField) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateLoadField) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateLoadField) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateLoadField) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateLoadField) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateLoadField) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateLoadField) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateLoadField) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateLoadField) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateLoadField) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateLoadField) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateLoadLoad Completed

type SFtAggregateLoadLoad SCompleted

func (c FtAggregateLoadLoad) Field(field ...string) FtAggregateLoadField {
	c.cs = append(c.cs, field...)
	return (FtAggregateLoadField)(c)
}

func (c SFtAggregateLoadLoad) Field(field ...string) SFtAggregateLoadField {
	c.cs = append(c.cs, field...)
	return (SFtAggregateLoadField)(c)
}

type FtAggregateLoadallLoadAll Completed

type SFtAggregateLoadallLoadAll SCompleted

func (c FtAggregateLoadallLoadAll) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateLoadallLoadAll) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateLoadallLoadAll) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateLoadallLoadAll) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateLoadallLoadAll) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateLoadallLoadAll) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateLoadallLoadAll) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateLoadallLoadAll) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateLoadallLoadAll) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateLoadallLoadAll) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateLoadallLoadAll) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateLoadallLoadAll) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateLoadallLoadAll) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateLoadallLoadAll) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateQuery Completed

type SFtAggregateQuery SCompleted

func (c FtAggregateQuery) Verbatim() FtAggregateVerbatim {
	c.cs = append(c.cs, "VERBATIM")
	return (FtAggregateVerbatim)(c)
}

func (c SFtAggregateQuery) Verbatim() SFtAggregateVerbatim {
	c.cs = append(c.cs, "VERBATIM")
	return (SFtAggregateVerbatim)(c)
}

func (c FtAggregateQuery) Load(count string) FtAggregateLoadLoad {
	c.cs = append(c.cs, "LOAD", count)
	return (FtAggregateLoadLoad)(c)
}

func (c SFtAggregateQuery) Load(count string) SFtAggregateLoadLoad {
	c.cs = append(c.cs, "LOAD", count)
	return (SFtAggregateLoadLoad)(c)
}

func (c FtAggregateQuery) LoadAll() FtAggregateLoadallLoadAll {
	c.cs = append(c.cs, "LOAD", "*")
	return (FtAggregateLoadallLoadAll)(c)
}

func (c SFtAggregateQuery) LoadAll() SFtAggregateLoadallLoadAll {
	c.cs = append(c.cs, "LOAD", "*")
	return (SFtAggregateLoadallLoadAll)(c)
}

func (c FtAggregateQuery) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateQuery) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateQuery) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateQuery) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateQuery) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateQuery) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateQuery) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateQuery) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateQuery) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateQuery) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateQuery) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateQuery) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateQuery) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbyFieldsOrderAsc Completed

type SFtAggregateSortbyFieldsOrderAsc SCompleted

func (c FtAggregateSortbyFieldsOrderAsc) Property(property string) FtAggregateSortbyFieldsProperty {
	c.cs = append(c.cs, property)
	return (FtAggregateSortbyFieldsProperty)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Property(property string) SFtAggregateSortbyFieldsProperty {
	c.cs = append(c.cs, property)
	return (SFtAggregateSortbyFieldsProperty)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Max(num int64) FtAggregateSortbyMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(num, 10))
	return (FtAggregateSortbyMax)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Max(num int64) SFtAggregateSortbyMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(num, 10))
	return (SFtAggregateSortbyMax)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbyFieldsOrderDesc Completed

type SFtAggregateSortbyFieldsOrderDesc SCompleted

func (c FtAggregateSortbyFieldsOrderDesc) Property(property string) FtAggregateSortbyFieldsProperty {
	c.cs = append(c.cs, property)
	return (FtAggregateSortbyFieldsProperty)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Property(property string) SFtAggregateSortbyFieldsProperty {
	c.cs = append(c.cs, property)
	return (SFtAggregateSortbyFieldsProperty)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Max(num int64) FtAggregateSortbyMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(num, 10))
	return (FtAggregateSortbyMax)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Max(num int64) SFtAggregateSortbyMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(num, 10))
	return (SFtAggregateSortbyMax)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbyFieldsProperty Completed

type SFtAggregateSortbyFieldsProperty SCompleted

func (c FtAggregateSortbyFieldsProperty) Asc() FtAggregateSortbyFieldsOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (FtAggregateSortbyFieldsOrderAsc)(c)
}

func (c SFtAggregateSortbyFieldsProperty) Asc() SFtAggregateSortbyFieldsOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SFtAggregateSortbyFieldsOrderAsc)(c)
}

func (c FtAggregateSortbyFieldsProperty) Desc() FtAggregateSortbyFieldsOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (FtAggregateSortbyFieldsOrderDesc)(c)
}

func (c SFtAggregateSortbyFieldsProperty) Desc() SFtAggregateSortbyFieldsOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SFtAggregateSortbyFieldsOrderDesc)(c)
}

type FtAggregateSortbyMax Completed

type SFtAggregateSortbyMax SCompleted

func (c FtAggregateSortbyMax) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbyMax) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbyMax) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbyMax) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbyMax) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbyMax) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbyMax) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbyMax) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbyMax) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbyMax) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbySortby Completed

type SFtAggregateSortbySortby SCompleted

func (c FtAggregateSortbySortby) Property(property string) FtAggregateSortbyFieldsProperty {
	c.cs = append(c.cs, property)
	return (FtAggregateSortbyFieldsProperty)(c)
}

func (c SFtAggregateSortbySortby) Property(property string) SFtAggregateSortbyFieldsProperty {
	c.cs = append(c.cs, property)
	return (SFtAggregateSortbyFieldsProperty)(c)
}

func (c FtAggregateSortbySortby) Max(num int64) FtAggregateSortbyMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(num, 10))
	return (FtAggregateSortbyMax)(c)
}

func (c SFtAggregateSortbySortby) Max(num int64) SFtAggregateSortbyMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(num, 10))
	return (SFtAggregateSortbyMax)(c)
}

func (c FtAggregateSortbySortby) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbySortby) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbySortby) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbySortby) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbySortby) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbySortby) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbySortby) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbySortby) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbySortby) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbySortby) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateVerbatim Completed

type SFtAggregateVerbatim SCompleted

func (c FtAggregateVerbatim) Load(count string) FtAggregateLoadLoad {
	c.cs = append(c.cs, "LOAD", count)
	return (FtAggregateLoadLoad)(c)
}

func (c SFtAggregateVerbatim) Load(count string) SFtAggregateLoadLoad {
	c.cs = append(c.cs, "LOAD", count)
	return (SFtAggregateLoadLoad)(c)
}

func (c FtAggregateVerbatim) LoadAll() FtAggregateLoadallLoadAll {
	c.cs = append(c.cs, "LOAD", "*")
	return (FtAggregateLoadallLoadAll)(c)
}

func (c SFtAggregateVerbatim) LoadAll() SFtAggregateLoadallLoadAll {
	c.cs = append(c.cs, "LOAD", "*")
	return (SFtAggregateLoadallLoadAll)(c)
}

func (c FtAggregateVerbatim) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateVerbatim) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs = append(c.cs, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateVerbatim) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateVerbatim) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs = append(c.cs, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateVerbatim) Apply(expression string) FtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateVerbatim) Apply(expression string) SFtAggregateApplyApply {
	c.cs = append(c.cs, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateVerbatim) Limit() FtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateVerbatim) Limit() SFtAggregateLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateVerbatim) Filter(filter string) FtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateVerbatim) Filter(filter string) SFtAggregateFilter {
	c.cs = append(c.cs, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateVerbatim) Withcursor() FtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateVerbatim) Withcursor() SFtAggregateCursorWithcursor {
	c.cs = append(c.cs, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateVerbatim) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateVerbatim) Build() SCompleted {
	return SCompleted(c)
}

type FtAliasadd Completed

type SFtAliasadd SCompleted

func (b *Builder) FtAliasadd() FtAliasadd {
	return FtAliasadd{cs: append(b.get(), "FT.ALIASADD"), ks: InitSlot}
}

func (b *SBuilder) FtAliasadd() SFtAliasadd {
	return SFtAliasadd{cs: append(b.get(), "FT.ALIASADD"), ks: InitSlot}
}

func (c FtAliasadd) Alias(alias string) FtAliasaddAlias {
	c.cs = append(c.cs, alias)
	return (FtAliasaddAlias)(c)
}

func (c SFtAliasadd) Alias(alias string) SFtAliasaddAlias {
	c.cs = append(c.cs, alias)
	return (SFtAliasaddAlias)(c)
}

type FtAliasaddAlias Completed

type SFtAliasaddAlias SCompleted

func (c FtAliasaddAlias) Index(index string) FtAliasaddIndex {
	c.cs = append(c.cs, index)
	return (FtAliasaddIndex)(c)
}

func (c SFtAliasaddAlias) Index(index string) SFtAliasaddIndex {
	c.cs = append(c.cs, index)
	return (SFtAliasaddIndex)(c)
}

type FtAliasaddIndex Completed

type SFtAliasaddIndex SCompleted

func (c FtAliasaddIndex) Build() Completed {
	return Completed(c)
}

func (c SFtAliasaddIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtAliasdel Completed

type SFtAliasdel SCompleted

func (b *Builder) FtAliasdel() FtAliasdel {
	return FtAliasdel{cs: append(b.get(), "FT.ALIASDEL"), ks: InitSlot}
}

func (b *SBuilder) FtAliasdel() SFtAliasdel {
	return SFtAliasdel{cs: append(b.get(), "FT.ALIASDEL"), ks: InitSlot}
}

func (c FtAliasdel) Alias(alias string) FtAliasdelAlias {
	c.cs = append(c.cs, alias)
	return (FtAliasdelAlias)(c)
}

func (c SFtAliasdel) Alias(alias string) SFtAliasdelAlias {
	c.cs = append(c.cs, alias)
	return (SFtAliasdelAlias)(c)
}

type FtAliasdelAlias Completed

type SFtAliasdelAlias SCompleted

func (c FtAliasdelAlias) Build() Completed {
	return Completed(c)
}

func (c SFtAliasdelAlias) Build() SCompleted {
	return SCompleted(c)
}

type FtAliasupdate Completed

type SFtAliasupdate SCompleted

func (b *Builder) FtAliasupdate() FtAliasupdate {
	return FtAliasupdate{cs: append(b.get(), "FT.ALIASUPDATE"), ks: InitSlot}
}

func (b *SBuilder) FtAliasupdate() SFtAliasupdate {
	return SFtAliasupdate{cs: append(b.get(), "FT.ALIASUPDATE"), ks: InitSlot}
}

func (c FtAliasupdate) Alias(alias string) FtAliasupdateAlias {
	c.cs = append(c.cs, alias)
	return (FtAliasupdateAlias)(c)
}

func (c SFtAliasupdate) Alias(alias string) SFtAliasupdateAlias {
	c.cs = append(c.cs, alias)
	return (SFtAliasupdateAlias)(c)
}

type FtAliasupdateAlias Completed

type SFtAliasupdateAlias SCompleted

func (c FtAliasupdateAlias) Index(index string) FtAliasupdateIndex {
	c.cs = append(c.cs, index)
	return (FtAliasupdateIndex)(c)
}

func (c SFtAliasupdateAlias) Index(index string) SFtAliasupdateIndex {
	c.cs = append(c.cs, index)
	return (SFtAliasupdateIndex)(c)
}

type FtAliasupdateIndex Completed

type SFtAliasupdateIndex SCompleted

func (c FtAliasupdateIndex) Build() Completed {
	return Completed(c)
}

func (c SFtAliasupdateIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtAlter Completed

type SFtAlter SCompleted

func (b *Builder) FtAlter() FtAlter {
	return FtAlter{cs: append(b.get(), "FT.ALTER"), ks: InitSlot}
}

func (b *SBuilder) FtAlter() SFtAlter {
	return SFtAlter{cs: append(b.get(), "FT.ALTER"), ks: InitSlot}
}

func (c FtAlter) Index(index string) FtAlterIndex {
	c.cs = append(c.cs, index)
	return (FtAlterIndex)(c)
}

func (c SFtAlter) Index(index string) SFtAlterIndex {
	c.cs = append(c.cs, index)
	return (SFtAlterIndex)(c)
}

type FtAlterAdd Completed

type SFtAlterAdd SCompleted

func (c FtAlterAdd) Field(field string) FtAlterField {
	c.cs = append(c.cs, field)
	return (FtAlterField)(c)
}

func (c SFtAlterAdd) Field(field string) SFtAlterField {
	c.cs = append(c.cs, field)
	return (SFtAlterField)(c)
}

type FtAlterField Completed

type SFtAlterField SCompleted

func (c FtAlterField) Options(options string) FtAlterOptions {
	c.cs = append(c.cs, options)
	return (FtAlterOptions)(c)
}

func (c SFtAlterField) Options(options string) SFtAlterOptions {
	c.cs = append(c.cs, options)
	return (SFtAlterOptions)(c)
}

type FtAlterIndex Completed

type SFtAlterIndex SCompleted

func (c FtAlterIndex) Schema() FtAlterSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtAlterSchema)(c)
}

func (c SFtAlterIndex) Schema() SFtAlterSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtAlterSchema)(c)
}

type FtAlterOptions Completed

type SFtAlterOptions SCompleted

func (c FtAlterOptions) Build() Completed {
	return Completed(c)
}

func (c SFtAlterOptions) Build() SCompleted {
	return SCompleted(c)
}

type FtAlterSchema Completed

type SFtAlterSchema SCompleted

func (c FtAlterSchema) Add() FtAlterAdd {
	c.cs = append(c.cs, "ADD")
	return (FtAlterAdd)(c)
}

func (c SFtAlterSchema) Add() SFtAlterAdd {
	c.cs = append(c.cs, "ADD")
	return (SFtAlterAdd)(c)
}

type FtConfigGet Completed

type SFtConfigGet SCompleted

func (b *Builder) FtConfigGet() FtConfigGet {
	return FtConfigGet{cs: append(b.get(), "FT.CONFIG", "GET"), ks: InitSlot}
}

func (b *SBuilder) FtConfigGet() SFtConfigGet {
	return SFtConfigGet{cs: append(b.get(), "FT.CONFIG", "GET"), ks: InitSlot}
}

func (c FtConfigGet) Option(option string) FtConfigGetOption {
	c.cs = append(c.cs, option)
	return (FtConfigGetOption)(c)
}

func (c SFtConfigGet) Option(option string) SFtConfigGetOption {
	c.cs = append(c.cs, option)
	return (SFtConfigGetOption)(c)
}

type FtConfigGetOption Completed

type SFtConfigGetOption SCompleted

func (c FtConfigGetOption) Value(value string) FtConfigGetValue {
	c.cs = append(c.cs, value)
	return (FtConfigGetValue)(c)
}

func (c SFtConfigGetOption) Value(value string) SFtConfigGetValue {
	c.cs = append(c.cs, value)
	return (SFtConfigGetValue)(c)
}

type FtConfigGetValue Completed

type SFtConfigGetValue SCompleted

func (c FtConfigGetValue) Build() Completed {
	return Completed(c)
}

func (c SFtConfigGetValue) Build() SCompleted {
	return SCompleted(c)
}

type FtConfigHelp Completed

type SFtConfigHelp SCompleted

func (b *Builder) FtConfigHelp() FtConfigHelp {
	return FtConfigHelp{cs: append(b.get(), "FT.CONFIG", "HELP"), ks: InitSlot}
}

func (b *SBuilder) FtConfigHelp() SFtConfigHelp {
	return SFtConfigHelp{cs: append(b.get(), "FT.CONFIG", "HELP"), ks: InitSlot}
}

func (c FtConfigHelp) Option(option string) FtConfigHelpOption {
	c.cs = append(c.cs, option)
	return (FtConfigHelpOption)(c)
}

func (c SFtConfigHelp) Option(option string) SFtConfigHelpOption {
	c.cs = append(c.cs, option)
	return (SFtConfigHelpOption)(c)
}

type FtConfigHelpOption Completed

type SFtConfigHelpOption SCompleted

func (c FtConfigHelpOption) Build() Completed {
	return Completed(c)
}

func (c SFtConfigHelpOption) Build() SCompleted {
	return SCompleted(c)
}

type FtConfigSet Completed

type SFtConfigSet SCompleted

func (b *Builder) FtConfigSet() FtConfigSet {
	return FtConfigSet{cs: append(b.get(), "FT.CONFIG", "SET"), ks: InitSlot}
}

func (b *SBuilder) FtConfigSet() SFtConfigSet {
	return SFtConfigSet{cs: append(b.get(), "FT.CONFIG", "SET"), ks: InitSlot}
}

func (c FtConfigSet) Option(option string) FtConfigSetOption {
	c.cs = append(c.cs, option)
	return (FtConfigSetOption)(c)
}

func (c SFtConfigSet) Option(option string) SFtConfigSetOption {
	c.cs = append(c.cs, option)
	return (SFtConfigSetOption)(c)
}

type FtConfigSetOption Completed

type SFtConfigSetOption SCompleted

func (c FtConfigSetOption) Build() Completed {
	return Completed(c)
}

func (c SFtConfigSetOption) Build() SCompleted {
	return SCompleted(c)
}

type FtCreate Completed

type SFtCreate SCompleted

func (b *Builder) FtCreate() FtCreate {
	return FtCreate{cs: append(b.get(), "FT.CREATE"), ks: InitSlot}
}

func (b *SBuilder) FtCreate() SFtCreate {
	return SFtCreate{cs: append(b.get(), "FT.CREATE"), ks: InitSlot}
}

func (c FtCreate) Index(index string) FtCreateIndex {
	c.cs = append(c.cs, index)
	return (FtCreateIndex)(c)
}

func (c SFtCreate) Index(index string) SFtCreateIndex {
	c.cs = append(c.cs, index)
	return (SFtCreateIndex)(c)
}

type FtCreateFieldAs Completed

type SFtCreateFieldAs SCompleted

func (c FtCreateFieldAs) Text() FtCreateFieldFieldTypeText {
	c.cs = append(c.cs, "TEXT")
	return (FtCreateFieldFieldTypeText)(c)
}

func (c SFtCreateFieldAs) Text() SFtCreateFieldFieldTypeText {
	c.cs = append(c.cs, "TEXT")
	return (SFtCreateFieldFieldTypeText)(c)
}

func (c FtCreateFieldAs) Tag() FtCreateFieldFieldTypeTag {
	c.cs = append(c.cs, "TAG")
	return (FtCreateFieldFieldTypeTag)(c)
}

func (c SFtCreateFieldAs) Tag() SFtCreateFieldFieldTypeTag {
	c.cs = append(c.cs, "TAG")
	return (SFtCreateFieldFieldTypeTag)(c)
}

func (c FtCreateFieldAs) Numeric() FtCreateFieldFieldTypeNumeric {
	c.cs = append(c.cs, "NUMERIC")
	return (FtCreateFieldFieldTypeNumeric)(c)
}

func (c SFtCreateFieldAs) Numeric() SFtCreateFieldFieldTypeNumeric {
	c.cs = append(c.cs, "NUMERIC")
	return (SFtCreateFieldFieldTypeNumeric)(c)
}

func (c FtCreateFieldAs) Geo() FtCreateFieldFieldTypeGeo {
	c.cs = append(c.cs, "GEO")
	return (FtCreateFieldFieldTypeGeo)(c)
}

func (c SFtCreateFieldAs) Geo() SFtCreateFieldFieldTypeGeo {
	c.cs = append(c.cs, "GEO")
	return (SFtCreateFieldFieldTypeGeo)(c)
}

type FtCreateFieldFieldName Completed

type SFtCreateFieldFieldName SCompleted

func (c FtCreateFieldFieldName) As(alias string) FtCreateFieldAs {
	c.cs = append(c.cs, "AS", alias)
	return (FtCreateFieldAs)(c)
}

func (c SFtCreateFieldFieldName) As(alias string) SFtCreateFieldAs {
	c.cs = append(c.cs, "AS", alias)
	return (SFtCreateFieldAs)(c)
}

func (c FtCreateFieldFieldName) Text() FtCreateFieldFieldTypeText {
	c.cs = append(c.cs, "TEXT")
	return (FtCreateFieldFieldTypeText)(c)
}

func (c SFtCreateFieldFieldName) Text() SFtCreateFieldFieldTypeText {
	c.cs = append(c.cs, "TEXT")
	return (SFtCreateFieldFieldTypeText)(c)
}

func (c FtCreateFieldFieldName) Tag() FtCreateFieldFieldTypeTag {
	c.cs = append(c.cs, "TAG")
	return (FtCreateFieldFieldTypeTag)(c)
}

func (c SFtCreateFieldFieldName) Tag() SFtCreateFieldFieldTypeTag {
	c.cs = append(c.cs, "TAG")
	return (SFtCreateFieldFieldTypeTag)(c)
}

func (c FtCreateFieldFieldName) Numeric() FtCreateFieldFieldTypeNumeric {
	c.cs = append(c.cs, "NUMERIC")
	return (FtCreateFieldFieldTypeNumeric)(c)
}

func (c SFtCreateFieldFieldName) Numeric() SFtCreateFieldFieldTypeNumeric {
	c.cs = append(c.cs, "NUMERIC")
	return (SFtCreateFieldFieldTypeNumeric)(c)
}

func (c FtCreateFieldFieldName) Geo() FtCreateFieldFieldTypeGeo {
	c.cs = append(c.cs, "GEO")
	return (FtCreateFieldFieldTypeGeo)(c)
}

func (c SFtCreateFieldFieldName) Geo() SFtCreateFieldFieldTypeGeo {
	c.cs = append(c.cs, "GEO")
	return (SFtCreateFieldFieldTypeGeo)(c)
}

type FtCreateFieldFieldTypeGeo Completed

type SFtCreateFieldFieldTypeGeo SCompleted

func (c FtCreateFieldFieldTypeGeo) Sortable() FtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeGeo) Sortable() SFtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeGeo) Noindex() FtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeGeo) Noindex() SFtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeGeo) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeGeo) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeGeo) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeGeo) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldFieldTypeNumeric Completed

type SFtCreateFieldFieldTypeNumeric SCompleted

func (c FtCreateFieldFieldTypeNumeric) Sortable() FtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeNumeric) Sortable() SFtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeNumeric) Noindex() FtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeNumeric) Noindex() SFtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeNumeric) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeNumeric) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeNumeric) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeNumeric) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldFieldTypeTag Completed

type SFtCreateFieldFieldTypeTag SCompleted

func (c FtCreateFieldFieldTypeTag) Sortable() FtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeTag) Sortable() SFtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeTag) Noindex() FtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeTag) Noindex() SFtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeTag) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeTag) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeTag) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeTag) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldFieldTypeText Completed

type SFtCreateFieldFieldTypeText SCompleted

func (c FtCreateFieldFieldTypeText) Sortable() FtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeText) Sortable() SFtCreateFieldSortableSortable {
	c.cs = append(c.cs, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeText) Noindex() FtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeText) Noindex() SFtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeText) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeText) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeText) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeText) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldNoindex Completed

type SFtCreateFieldNoindex SCompleted

func (c FtCreateFieldNoindex) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldNoindex) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldNoindex) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldNoindex) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldSortableSortable Completed

type SFtCreateFieldSortableSortable SCompleted

func (c FtCreateFieldSortableSortable) Unf() FtCreateFieldSortableUnf {
	c.cs = append(c.cs, "UNF")
	return (FtCreateFieldSortableUnf)(c)
}

func (c SFtCreateFieldSortableSortable) Unf() SFtCreateFieldSortableUnf {
	c.cs = append(c.cs, "UNF")
	return (SFtCreateFieldSortableUnf)(c)
}

func (c FtCreateFieldSortableSortable) Noindex() FtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldSortableSortable) Noindex() SFtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldSortableSortable) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldSortableSortable) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldSortableSortable) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldSortableSortable) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldSortableUnf Completed

type SFtCreateFieldSortableUnf SCompleted

func (c FtCreateFieldSortableUnf) Noindex() FtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldSortableUnf) Noindex() SFtCreateFieldNoindex {
	c.cs = append(c.cs, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldSortableUnf) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldSortableUnf) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldSortableUnf) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldSortableUnf) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateIndex Completed

type SFtCreateIndex SCompleted

func (c FtCreateIndex) OnHash() FtCreateOnHash {
	c.cs = append(c.cs, "ON", "HASH")
	return (FtCreateOnHash)(c)
}

func (c SFtCreateIndex) OnHash() SFtCreateOnHash {
	c.cs = append(c.cs, "ON", "HASH")
	return (SFtCreateOnHash)(c)
}

func (c FtCreateIndex) OnJson() FtCreateOnJson {
	c.cs = append(c.cs, "ON", "JSON")
	return (FtCreateOnJson)(c)
}

func (c SFtCreateIndex) OnJson() SFtCreateOnJson {
	c.cs = append(c.cs, "ON", "JSON")
	return (SFtCreateOnJson)(c)
}

func (c FtCreateIndex) Prefix(count int64) FtCreatePrefixCount {
	c.cs = append(c.cs, "PREFIX", strconv.FormatInt(count, 10))
	return (FtCreatePrefixCount)(c)
}

func (c SFtCreateIndex) Prefix(count int64) SFtCreatePrefixCount {
	c.cs = append(c.cs, "PREFIX", strconv.FormatInt(count, 10))
	return (SFtCreatePrefixCount)(c)
}

func (c FtCreateIndex) Language(defaultLang string) FtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreateIndex) Language(defaultLang string) SFtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreateIndex) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateIndex) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateIndex) Score(defaultScore float64) FtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateIndex) Score(defaultScore float64) SFtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateIndex) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateIndex) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateIndex) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateIndex) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateIndex) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateIndex) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateIndex) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateIndex) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateIndex) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateIndex) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateIndex) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateIndex) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateIndex) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateIndex) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateIndex) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateIndex) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateIndex) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateIndex) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateIndex) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateIndex) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateLanguage Completed

type SFtCreateLanguage SCompleted

func (c FtCreateLanguage) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateLanguage) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateLanguage) Score(defaultScore float64) FtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateLanguage) Score(defaultScore float64) SFtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateLanguage) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateLanguage) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateLanguage) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateLanguage) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateLanguage) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateLanguage) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateLanguage) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateLanguage) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateLanguage) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateLanguage) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateLanguage) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateLanguage) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateLanguage) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateLanguage) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateLanguage) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateLanguage) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateLanguage) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateLanguage) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateLanguage) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateLanguage) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateLanguageField Completed

type SFtCreateLanguageField SCompleted

func (c FtCreateLanguageField) Score(defaultScore float64) FtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateLanguageField) Score(defaultScore float64) SFtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateLanguageField) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateLanguageField) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateLanguageField) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateLanguageField) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateLanguageField) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateLanguageField) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateLanguageField) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateLanguageField) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateLanguageField) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateLanguageField) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateLanguageField) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateLanguageField) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateLanguageField) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateLanguageField) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateLanguageField) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateLanguageField) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateLanguageField) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateLanguageField) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateLanguageField) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateLanguageField) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateMaxtextfields Completed

type SFtCreateMaxtextfields SCompleted

func (c FtCreateMaxtextfields) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateMaxtextfields) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateMaxtextfields) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateMaxtextfields) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateMaxtextfields) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateMaxtextfields) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateMaxtextfields) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateMaxtextfields) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateMaxtextfields) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateMaxtextfields) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateMaxtextfields) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateMaxtextfields) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateMaxtextfields) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateMaxtextfields) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNofields Completed

type SFtCreateNofields SCompleted

func (c FtCreateNofields) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateNofields) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateNofields) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNofields) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNofields) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNofields) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNofreqs Completed

type SFtCreateNofreqs SCompleted

func (c FtCreateNofreqs) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNofreqs) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNofreqs) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNofreqs) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNohl Completed

type SFtCreateNohl SCompleted

func (c FtCreateNohl) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateNohl) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateNohl) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateNohl) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateNohl) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNohl) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNohl) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNohl) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNooffsets Completed

type SFtCreateNooffsets SCompleted

func (c FtCreateNooffsets) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateNooffsets) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateNooffsets) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateNooffsets) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateNooffsets) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateNooffsets) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateNooffsets) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNooffsets) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNooffsets) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNooffsets) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateOnHash Completed

type SFtCreateOnHash SCompleted

func (c FtCreateOnHash) Prefix(count int64) FtCreatePrefixCount {
	c.cs = append(c.cs, "PREFIX", strconv.FormatInt(count, 10))
	return (FtCreatePrefixCount)(c)
}

func (c SFtCreateOnHash) Prefix(count int64) SFtCreatePrefixCount {
	c.cs = append(c.cs, "PREFIX", strconv.FormatInt(count, 10))
	return (SFtCreatePrefixCount)(c)
}

func (c FtCreateOnHash) Language(defaultLang string) FtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreateOnHash) Language(defaultLang string) SFtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreateOnHash) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateOnHash) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateOnHash) Score(defaultScore float64) FtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateOnHash) Score(defaultScore float64) SFtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateOnHash) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateOnHash) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateOnHash) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateOnHash) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateOnHash) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateOnHash) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateOnHash) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateOnHash) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateOnHash) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateOnHash) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateOnHash) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateOnHash) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateOnHash) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateOnHash) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateOnHash) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateOnHash) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateOnHash) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateOnHash) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateOnHash) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateOnHash) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateOnJson Completed

type SFtCreateOnJson SCompleted

func (c FtCreateOnJson) Prefix(count int64) FtCreatePrefixCount {
	c.cs = append(c.cs, "PREFIX", strconv.FormatInt(count, 10))
	return (FtCreatePrefixCount)(c)
}

func (c SFtCreateOnJson) Prefix(count int64) SFtCreatePrefixCount {
	c.cs = append(c.cs, "PREFIX", strconv.FormatInt(count, 10))
	return (SFtCreatePrefixCount)(c)
}

func (c FtCreateOnJson) Language(defaultLang string) FtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreateOnJson) Language(defaultLang string) SFtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreateOnJson) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateOnJson) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateOnJson) Score(defaultScore float64) FtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateOnJson) Score(defaultScore float64) SFtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateOnJson) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateOnJson) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateOnJson) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateOnJson) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateOnJson) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateOnJson) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateOnJson) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateOnJson) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateOnJson) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateOnJson) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateOnJson) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateOnJson) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateOnJson) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateOnJson) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateOnJson) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateOnJson) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateOnJson) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateOnJson) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateOnJson) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateOnJson) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreatePayloadField Completed

type SFtCreatePayloadField SCompleted

func (c FtCreatePayloadField) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreatePayloadField) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreatePayloadField) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreatePayloadField) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreatePayloadField) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreatePayloadField) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreatePayloadField) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreatePayloadField) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreatePayloadField) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreatePayloadField) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreatePayloadField) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreatePayloadField) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreatePayloadField) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreatePayloadField) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreatePayloadField) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreatePayloadField) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreatePrefixCount Completed

type SFtCreatePrefixCount SCompleted

func (c FtCreatePrefixCount) Prefix(prefix ...string) FtCreatePrefixPrefix {
	c.cs = append(c.cs, prefix...)
	return (FtCreatePrefixPrefix)(c)
}

func (c SFtCreatePrefixCount) Prefix(prefix ...string) SFtCreatePrefixPrefix {
	c.cs = append(c.cs, prefix...)
	return (SFtCreatePrefixPrefix)(c)
}

type FtCreatePrefixPrefix Completed

type SFtCreatePrefixPrefix SCompleted

func (c FtCreatePrefixPrefix) Prefix(prefix ...string) FtCreatePrefixPrefix {
	c.cs = append(c.cs, prefix...)
	return c
}

func (c SFtCreatePrefixPrefix) Prefix(prefix ...string) SFtCreatePrefixPrefix {
	c.cs = append(c.cs, prefix...)
	return c
}

func (c FtCreatePrefixPrefix) Language(defaultLang string) FtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreatePrefixPrefix) Language(defaultLang string) SFtCreateLanguage {
	c.cs = append(c.cs, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreatePrefixPrefix) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreatePrefixPrefix) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs = append(c.cs, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreatePrefixPrefix) Score(defaultScore float64) FtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreatePrefixPrefix) Score(defaultScore float64) SFtCreateScore {
	c.cs = append(c.cs, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreatePrefixPrefix) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreatePrefixPrefix) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreatePrefixPrefix) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreatePrefixPrefix) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreatePrefixPrefix) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreatePrefixPrefix) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreatePrefixPrefix) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreatePrefixPrefix) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreatePrefixPrefix) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreatePrefixPrefix) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreatePrefixPrefix) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreatePrefixPrefix) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreatePrefixPrefix) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreatePrefixPrefix) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreatePrefixPrefix) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreatePrefixPrefix) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreatePrefixPrefix) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreatePrefixPrefix) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreatePrefixPrefix) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreatePrefixPrefix) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateSchema Completed

type SFtCreateSchema SCompleted

func (c FtCreateSchema) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateSchema) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

type FtCreateScore Completed

type SFtCreateScore SCompleted

func (c FtCreateScore) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateScore) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs = append(c.cs, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateScore) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateScore) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateScore) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateScore) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateScore) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateScore) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateScore) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateScore) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateScore) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateScore) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateScore) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateScore) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateScore) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateScore) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateScore) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateScore) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateScore) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateScore) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateScoreField Completed

type SFtCreateScoreField SCompleted

func (c FtCreateScoreField) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateScoreField) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs = append(c.cs, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateScoreField) Maxtextfields() FtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateScoreField) Maxtextfields() SFtCreateMaxtextfields {
	c.cs = append(c.cs, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateScoreField) Temporary(seconds float64) FtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateScoreField) Temporary(seconds float64) SFtCreateTemporary {
	c.cs = append(c.cs, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateScoreField) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateScoreField) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateScoreField) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateScoreField) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateScoreField) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateScoreField) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateScoreField) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateScoreField) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateScoreField) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateScoreField) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateScoreField) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateScoreField) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateStopwordsStopword Completed

type SFtCreateStopwordsStopword SCompleted

func (c FtCreateStopwordsStopword) Stopword(stopword ...string) FtCreateStopwordsStopword {
	c.cs = append(c.cs, stopword...)
	return c
}

func (c SFtCreateStopwordsStopword) Stopword(stopword ...string) SFtCreateStopwordsStopword {
	c.cs = append(c.cs, stopword...)
	return c
}

func (c FtCreateStopwordsStopword) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateStopwordsStopword) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateStopwordsStopwords Completed

type SFtCreateStopwordsStopwords SCompleted

func (c FtCreateStopwordsStopwords) Stopword(stopword ...string) FtCreateStopwordsStopword {
	c.cs = append(c.cs, stopword...)
	return (FtCreateStopwordsStopword)(c)
}

func (c SFtCreateStopwordsStopwords) Stopword(stopword ...string) SFtCreateStopwordsStopword {
	c.cs = append(c.cs, stopword...)
	return (SFtCreateStopwordsStopword)(c)
}

type FtCreateTemporary Completed

type SFtCreateTemporary SCompleted

func (c FtCreateTemporary) Nooffsets() FtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateTemporary) Nooffsets() SFtCreateNooffsets {
	c.cs = append(c.cs, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateTemporary) Nohl() FtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateTemporary) Nohl() SFtCreateNohl {
	c.cs = append(c.cs, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateTemporary) Nofields() FtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateTemporary) Nofields() SFtCreateNofields {
	c.cs = append(c.cs, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateTemporary) Nofreqs() FtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateTemporary) Nofreqs() SFtCreateNofreqs {
	c.cs = append(c.cs, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateTemporary) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateTemporary) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs = append(c.cs, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateTemporary) Schema() FtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateTemporary) Schema() SFtCreateSchema {
	c.cs = append(c.cs, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCursorDel Completed

type SFtCursorDel SCompleted

func (b *Builder) FtCursorDel() FtCursorDel {
	return FtCursorDel{cs: append(b.get(), "FT.CURSOR", "DEL"), ks: InitSlot}
}

func (b *SBuilder) FtCursorDel() SFtCursorDel {
	return SFtCursorDel{cs: append(b.get(), "FT.CURSOR", "DEL"), ks: InitSlot}
}

func (c FtCursorDel) Index(index string) FtCursorDelIndex {
	c.cs = append(c.cs, index)
	return (FtCursorDelIndex)(c)
}

func (c SFtCursorDel) Index(index string) SFtCursorDelIndex {
	c.cs = append(c.cs, index)
	return (SFtCursorDelIndex)(c)
}

type FtCursorDelCursorId Completed

type SFtCursorDelCursorId SCompleted

func (c FtCursorDelCursorId) Build() Completed {
	return Completed(c)
}

func (c SFtCursorDelCursorId) Build() SCompleted {
	return SCompleted(c)
}

type FtCursorDelIndex Completed

type SFtCursorDelIndex SCompleted

func (c FtCursorDelIndex) CursorId(cursorId int64) FtCursorDelCursorId {
	c.cs = append(c.cs, strconv.FormatInt(cursorId, 10))
	return (FtCursorDelCursorId)(c)
}

func (c SFtCursorDelIndex) CursorId(cursorId int64) SFtCursorDelCursorId {
	c.cs = append(c.cs, strconv.FormatInt(cursorId, 10))
	return (SFtCursorDelCursorId)(c)
}

type FtCursorRead Completed

type SFtCursorRead SCompleted

func (b *Builder) FtCursorRead() FtCursorRead {
	return FtCursorRead{cs: append(b.get(), "FT.CURSOR", "READ"), ks: InitSlot}
}

func (b *SBuilder) FtCursorRead() SFtCursorRead {
	return SFtCursorRead{cs: append(b.get(), "FT.CURSOR", "READ"), ks: InitSlot}
}

func (c FtCursorRead) Index(index string) FtCursorReadIndex {
	c.cs = append(c.cs, index)
	return (FtCursorReadIndex)(c)
}

func (c SFtCursorRead) Index(index string) SFtCursorReadIndex {
	c.cs = append(c.cs, index)
	return (SFtCursorReadIndex)(c)
}

type FtCursorReadCount Completed

type SFtCursorReadCount SCompleted

func (c FtCursorReadCount) Build() Completed {
	return Completed(c)
}

func (c SFtCursorReadCount) Build() SCompleted {
	return SCompleted(c)
}

type FtCursorReadCursorId Completed

type SFtCursorReadCursorId SCompleted

func (c FtCursorReadCursorId) Count(readSize int64) FtCursorReadCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(readSize, 10))
	return (FtCursorReadCount)(c)
}

func (c SFtCursorReadCursorId) Count(readSize int64) SFtCursorReadCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(readSize, 10))
	return (SFtCursorReadCount)(c)
}

func (c FtCursorReadCursorId) Build() Completed {
	return Completed(c)
}

func (c SFtCursorReadCursorId) Build() SCompleted {
	return SCompleted(c)
}

type FtCursorReadIndex Completed

type SFtCursorReadIndex SCompleted

func (c FtCursorReadIndex) CursorId(cursorId int64) FtCursorReadCursorId {
	c.cs = append(c.cs, strconv.FormatInt(cursorId, 10))
	return (FtCursorReadCursorId)(c)
}

func (c SFtCursorReadIndex) CursorId(cursorId int64) SFtCursorReadCursorId {
	c.cs = append(c.cs, strconv.FormatInt(cursorId, 10))
	return (SFtCursorReadCursorId)(c)
}

type FtDictadd Completed

type SFtDictadd SCompleted

func (b *Builder) FtDictadd() FtDictadd {
	return FtDictadd{cs: append(b.get(), "FT.DICTADD"), ks: InitSlot}
}

func (b *SBuilder) FtDictadd() SFtDictadd {
	return SFtDictadd{cs: append(b.get(), "FT.DICTADD"), ks: InitSlot}
}

func (c FtDictadd) Dict(dict string) FtDictaddDict {
	c.cs = append(c.cs, dict)
	return (FtDictaddDict)(c)
}

func (c SFtDictadd) Dict(dict string) SFtDictaddDict {
	c.cs = append(c.cs, dict)
	return (SFtDictaddDict)(c)
}

type FtDictaddDict Completed

type SFtDictaddDict SCompleted

func (c FtDictaddDict) Term(term ...string) FtDictaddTerm {
	c.cs = append(c.cs, term...)
	return (FtDictaddTerm)(c)
}

func (c SFtDictaddDict) Term(term ...string) SFtDictaddTerm {
	c.cs = append(c.cs, term...)
	return (SFtDictaddTerm)(c)
}

type FtDictaddTerm Completed

type SFtDictaddTerm SCompleted

func (c FtDictaddTerm) Term(term ...string) FtDictaddTerm {
	c.cs = append(c.cs, term...)
	return c
}

func (c SFtDictaddTerm) Term(term ...string) SFtDictaddTerm {
	c.cs = append(c.cs, term...)
	return c
}

func (c FtDictaddTerm) Build() Completed {
	return Completed(c)
}

func (c SFtDictaddTerm) Build() SCompleted {
	return SCompleted(c)
}

type FtDictdel Completed

type SFtDictdel SCompleted

func (b *Builder) FtDictdel() FtDictdel {
	return FtDictdel{cs: append(b.get(), "FT.DICTDEL"), ks: InitSlot}
}

func (b *SBuilder) FtDictdel() SFtDictdel {
	return SFtDictdel{cs: append(b.get(), "FT.DICTDEL"), ks: InitSlot}
}

func (c FtDictdel) Dict(dict string) FtDictdelDict {
	c.cs = append(c.cs, dict)
	return (FtDictdelDict)(c)
}

func (c SFtDictdel) Dict(dict string) SFtDictdelDict {
	c.cs = append(c.cs, dict)
	return (SFtDictdelDict)(c)
}

type FtDictdelDict Completed

type SFtDictdelDict SCompleted

func (c FtDictdelDict) Term(term ...string) FtDictdelTerm {
	c.cs = append(c.cs, term...)
	return (FtDictdelTerm)(c)
}

func (c SFtDictdelDict) Term(term ...string) SFtDictdelTerm {
	c.cs = append(c.cs, term...)
	return (SFtDictdelTerm)(c)
}

type FtDictdelTerm Completed

type SFtDictdelTerm SCompleted

func (c FtDictdelTerm) Term(term ...string) FtDictdelTerm {
	c.cs = append(c.cs, term...)
	return c
}

func (c SFtDictdelTerm) Term(term ...string) SFtDictdelTerm {
	c.cs = append(c.cs, term...)
	return c
}

func (c FtDictdelTerm) Build() Completed {
	return Completed(c)
}

func (c SFtDictdelTerm) Build() SCompleted {
	return SCompleted(c)
}

type FtDictdump Completed

type SFtDictdump SCompleted

func (b *Builder) FtDictdump() FtDictdump {
	return FtDictdump{cs: append(b.get(), "FT.DICTDUMP"), ks: InitSlot}
}

func (b *SBuilder) FtDictdump() SFtDictdump {
	return SFtDictdump{cs: append(b.get(), "FT.DICTDUMP"), ks: InitSlot}
}

func (c FtDictdump) Dict(dict string) FtDictdumpDict {
	c.cs = append(c.cs, dict)
	return (FtDictdumpDict)(c)
}

func (c SFtDictdump) Dict(dict string) SFtDictdumpDict {
	c.cs = append(c.cs, dict)
	return (SFtDictdumpDict)(c)
}

type FtDictdumpDict Completed

type SFtDictdumpDict SCompleted

func (c FtDictdumpDict) Build() Completed {
	return Completed(c)
}

func (c SFtDictdumpDict) Build() SCompleted {
	return SCompleted(c)
}

type FtDropindex Completed

type SFtDropindex SCompleted

func (b *Builder) FtDropindex() FtDropindex {
	return FtDropindex{cs: append(b.get(), "FT.DROPINDEX"), ks: InitSlot}
}

func (b *SBuilder) FtDropindex() SFtDropindex {
	return SFtDropindex{cs: append(b.get(), "FT.DROPINDEX"), ks: InitSlot}
}

func (c FtDropindex) Index(index string) FtDropindexIndex {
	c.cs = append(c.cs, index)
	return (FtDropindexIndex)(c)
}

func (c SFtDropindex) Index(index string) SFtDropindexIndex {
	c.cs = append(c.cs, index)
	return (SFtDropindexIndex)(c)
}

type FtDropindexDeleteDocsDd Completed

type SFtDropindexDeleteDocsDd SCompleted

func (c FtDropindexDeleteDocsDd) Build() Completed {
	return Completed(c)
}

func (c SFtDropindexDeleteDocsDd) Build() SCompleted {
	return SCompleted(c)
}

type FtDropindexIndex Completed

type SFtDropindexIndex SCompleted

func (c FtDropindexIndex) Dd() FtDropindexDeleteDocsDd {
	c.cs = append(c.cs, "DD")
	return (FtDropindexDeleteDocsDd)(c)
}

func (c SFtDropindexIndex) Dd() SFtDropindexDeleteDocsDd {
	c.cs = append(c.cs, "DD")
	return (SFtDropindexDeleteDocsDd)(c)
}

func (c FtDropindexIndex) Build() Completed {
	return Completed(c)
}

func (c SFtDropindexIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtExplain Completed

type SFtExplain SCompleted

func (b *Builder) FtExplain() FtExplain {
	return FtExplain{cs: append(b.get(), "FT.EXPLAIN"), ks: InitSlot}
}

func (b *SBuilder) FtExplain() SFtExplain {
	return SFtExplain{cs: append(b.get(), "FT.EXPLAIN"), ks: InitSlot}
}

func (c FtExplain) Index(index string) FtExplainIndex {
	c.cs = append(c.cs, index)
	return (FtExplainIndex)(c)
}

func (c SFtExplain) Index(index string) SFtExplainIndex {
	c.cs = append(c.cs, index)
	return (SFtExplainIndex)(c)
}

type FtExplainIndex Completed

type SFtExplainIndex SCompleted

func (c FtExplainIndex) Query(query string) FtExplainQuery {
	c.cs = append(c.cs, query)
	return (FtExplainQuery)(c)
}

func (c SFtExplainIndex) Query(query string) SFtExplainQuery {
	c.cs = append(c.cs, query)
	return (SFtExplainQuery)(c)
}

type FtExplainQuery Completed

type SFtExplainQuery SCompleted

func (c FtExplainQuery) Build() Completed {
	return Completed(c)
}

func (c SFtExplainQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtExplaincli Completed

type SFtExplaincli SCompleted

func (b *Builder) FtExplaincli() FtExplaincli {
	return FtExplaincli{cs: append(b.get(), "FT.EXPLAINCLI"), ks: InitSlot}
}

func (b *SBuilder) FtExplaincli() SFtExplaincli {
	return SFtExplaincli{cs: append(b.get(), "FT.EXPLAINCLI"), ks: InitSlot}
}

func (c FtExplaincli) Index(index string) FtExplaincliIndex {
	c.cs = append(c.cs, index)
	return (FtExplaincliIndex)(c)
}

func (c SFtExplaincli) Index(index string) SFtExplaincliIndex {
	c.cs = append(c.cs, index)
	return (SFtExplaincliIndex)(c)
}

type FtExplaincliIndex Completed

type SFtExplaincliIndex SCompleted

func (c FtExplaincliIndex) Query(query string) FtExplaincliQuery {
	c.cs = append(c.cs, query)
	return (FtExplaincliQuery)(c)
}

func (c SFtExplaincliIndex) Query(query string) SFtExplaincliQuery {
	c.cs = append(c.cs, query)
	return (SFtExplaincliQuery)(c)
}

type FtExplaincliQuery Completed

type SFtExplaincliQuery SCompleted

func (c FtExplaincliQuery) Build() Completed {
	return Completed(c)
}

func (c SFtExplaincliQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtInfo Completed

type SFtInfo SCompleted

func (b *Builder) FtInfo() FtInfo {
	return FtInfo{cs: append(b.get(), "FT.INFO"), ks: InitSlot}
}

func (b *SBuilder) FtInfo() SFtInfo {
	return SFtInfo{cs: append(b.get(), "FT.INFO"), ks: InitSlot}
}

func (c FtInfo) Index(index string) FtInfoIndex {
	c.cs = append(c.cs, index)
	return (FtInfoIndex)(c)
}

func (c SFtInfo) Index(index string) SFtInfoIndex {
	c.cs = append(c.cs, index)
	return (SFtInfoIndex)(c)
}

type FtInfoIndex Completed

type SFtInfoIndex SCompleted

func (c FtInfoIndex) Build() Completed {
	return Completed(c)
}

func (c SFtInfoIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtList Completed

type SFtList SCompleted

func (b *Builder) FtList() FtList {
	return FtList{cs: append(b.get(), "FT._LIST"), ks: InitSlot}
}

func (b *SBuilder) FtList() SFtList {
	return SFtList{cs: append(b.get(), "FT._LIST"), ks: InitSlot}
}

func (c FtList) Build() Completed {
	return Completed(c)
}

func (c SFtList) Build() SCompleted {
	return SCompleted(c)
}

type FtSearch Completed

type SFtSearch SCompleted

func (b *Builder) FtSearch() FtSearch {
	return FtSearch{cs: append(b.get(), "FT.SEARCH"), ks: InitSlot}
}

func (b *SBuilder) FtSearch() SFtSearch {
	return SFtSearch{cs: append(b.get(), "FT.SEARCH"), ks: InitSlot}
}

func (c FtSearch) Index(index string) FtSearchIndex {
	c.cs = append(c.cs, index)
	return (FtSearchIndex)(c)
}

func (c SFtSearch) Index(index string) SFtSearchIndex {
	c.cs = append(c.cs, index)
	return (SFtSearchIndex)(c)
}

type FtSearchExpander Completed

type SFtSearchExpander SCompleted

func (c FtSearchExpander) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchExpander) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchExpander) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchExpander) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchExpander) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchExpander) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchExpander) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchExpander) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchExpander) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchExpander) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchExpander) Build() Completed {
	return Completed(c)
}

func (c SFtSearchExpander) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchExplainscore Completed

type SFtSearchExplainscore SCompleted

func (c FtSearchExplainscore) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchExplainscore) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchExplainscore) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchExplainscore) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchExplainscore) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchExplainscore) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchExplainscore) Build() Completed {
	return Completed(c)
}

func (c SFtSearchExplainscore) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchFilterFilter Completed

type SFtSearchFilterFilter SCompleted

func (c FtSearchFilterFilter) Min(min float64) FtSearchFilterMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (FtSearchFilterMin)(c)
}

func (c SFtSearchFilterFilter) Min(min float64) SFtSearchFilterMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (SFtSearchFilterMin)(c)
}

type FtSearchFilterMax Completed

type SFtSearchFilterMax SCompleted

func (c FtSearchFilterMax) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchFilterMax) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchFilterMax) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchFilterMax) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchFilterMax) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchFilterMax) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchFilterMax) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchFilterMax) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchFilterMax) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchFilterMax) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchFilterMax) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchFilterMax) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchFilterMax) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchFilterMax) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchFilterMax) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchFilterMax) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchFilterMax) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchFilterMax) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchFilterMax) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchFilterMax) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchFilterMax) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchFilterMax) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchFilterMax) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchFilterMax) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchFilterMax) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchFilterMax) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchFilterMax) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchFilterMax) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchFilterMax) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchFilterMax) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchFilterMax) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchFilterMax) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchFilterMax) Build() Completed {
	return Completed(c)
}

func (c SFtSearchFilterMax) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchFilterMin Completed

type SFtSearchFilterMin SCompleted

func (c FtSearchFilterMin) Max(max float64) FtSearchFilterMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (FtSearchFilterMax)(c)
}

func (c SFtSearchFilterMin) Max(max float64) SFtSearchFilterMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (SFtSearchFilterMax)(c)
}

type FtSearchGeoFilterGeofilter Completed

type SFtSearchGeoFilterGeofilter SCompleted

func (c FtSearchGeoFilterGeofilter) Lon(lon float64) FtSearchGeoFilterLon {
	c.cs = append(c.cs, strconv.FormatFloat(lon, 'f', -1, 64))
	return (FtSearchGeoFilterLon)(c)
}

func (c SFtSearchGeoFilterGeofilter) Lon(lon float64) SFtSearchGeoFilterLon {
	c.cs = append(c.cs, strconv.FormatFloat(lon, 'f', -1, 64))
	return (SFtSearchGeoFilterLon)(c)
}

type FtSearchGeoFilterLat Completed

type SFtSearchGeoFilterLat SCompleted

func (c FtSearchGeoFilterLat) Radius(radius float64) FtSearchGeoFilterRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (FtSearchGeoFilterRadius)(c)
}

func (c SFtSearchGeoFilterLat) Radius(radius float64) SFtSearchGeoFilterRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SFtSearchGeoFilterRadius)(c)
}

type FtSearchGeoFilterLon Completed

type SFtSearchGeoFilterLon SCompleted

func (c FtSearchGeoFilterLon) Lat(lat float64) FtSearchGeoFilterLat {
	c.cs = append(c.cs, strconv.FormatFloat(lat, 'f', -1, 64))
	return (FtSearchGeoFilterLat)(c)
}

func (c SFtSearchGeoFilterLon) Lat(lat float64) SFtSearchGeoFilterLat {
	c.cs = append(c.cs, strconv.FormatFloat(lat, 'f', -1, 64))
	return (SFtSearchGeoFilterLat)(c)
}

type FtSearchGeoFilterRadius Completed

type SFtSearchGeoFilterRadius SCompleted

func (c FtSearchGeoFilterRadius) M() FtSearchGeoFilterRadiusTypeM {
	c.cs = append(c.cs, "m")
	return (FtSearchGeoFilterRadiusTypeM)(c)
}

func (c SFtSearchGeoFilterRadius) M() SFtSearchGeoFilterRadiusTypeM {
	c.cs = append(c.cs, "m")
	return (SFtSearchGeoFilterRadiusTypeM)(c)
}

func (c FtSearchGeoFilterRadius) Km() FtSearchGeoFilterRadiusTypeKm {
	c.cs = append(c.cs, "km")
	return (FtSearchGeoFilterRadiusTypeKm)(c)
}

func (c SFtSearchGeoFilterRadius) Km() SFtSearchGeoFilterRadiusTypeKm {
	c.cs = append(c.cs, "km")
	return (SFtSearchGeoFilterRadiusTypeKm)(c)
}

func (c FtSearchGeoFilterRadius) Mi() FtSearchGeoFilterRadiusTypeMi {
	c.cs = append(c.cs, "mi")
	return (FtSearchGeoFilterRadiusTypeMi)(c)
}

func (c SFtSearchGeoFilterRadius) Mi() SFtSearchGeoFilterRadiusTypeMi {
	c.cs = append(c.cs, "mi")
	return (SFtSearchGeoFilterRadiusTypeMi)(c)
}

func (c FtSearchGeoFilterRadius) Ft() FtSearchGeoFilterRadiusTypeFt {
	c.cs = append(c.cs, "ft")
	return (FtSearchGeoFilterRadiusTypeFt)(c)
}

func (c SFtSearchGeoFilterRadius) Ft() SFtSearchGeoFilterRadiusTypeFt {
	c.cs = append(c.cs, "ft")
	return (SFtSearchGeoFilterRadiusTypeFt)(c)
}

type FtSearchGeoFilterRadiusTypeFt Completed

type SFtSearchGeoFilterRadiusTypeFt SCompleted

func (c FtSearchGeoFilterRadiusTypeFt) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchGeoFilterRadiusTypeKm Completed

type SFtSearchGeoFilterRadiusTypeKm SCompleted

func (c FtSearchGeoFilterRadiusTypeKm) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchGeoFilterRadiusTypeM Completed

type SFtSearchGeoFilterRadiusTypeM SCompleted

func (c FtSearchGeoFilterRadiusTypeM) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchGeoFilterRadiusTypeMi Completed

type SFtSearchGeoFilterRadiusTypeMi SCompleted

func (c FtSearchGeoFilterRadiusTypeMi) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightFieldsField Completed

type SFtSearchHighlightFieldsField SCompleted

func (c FtSearchHighlightFieldsField) Field(field ...string) FtSearchHighlightFieldsField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SFtSearchHighlightFieldsField) Field(field ...string) SFtSearchHighlightFieldsField {
	c.cs = append(c.cs, field...)
	return c
}

func (c FtSearchHighlightFieldsField) Tags() FtSearchHighlightTagsTags {
	c.cs = append(c.cs, "TAGS")
	return (FtSearchHighlightTagsTags)(c)
}

func (c SFtSearchHighlightFieldsField) Tags() SFtSearchHighlightTagsTags {
	c.cs = append(c.cs, "TAGS")
	return (SFtSearchHighlightTagsTags)(c)
}

func (c FtSearchHighlightFieldsField) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchHighlightFieldsField) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchHighlightFieldsField) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchHighlightFieldsField) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchHighlightFieldsField) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchHighlightFieldsField) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchHighlightFieldsField) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchHighlightFieldsField) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchHighlightFieldsField) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchHighlightFieldsField) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchHighlightFieldsField) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchHighlightFieldsField) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchHighlightFieldsField) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchHighlightFieldsField) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchHighlightFieldsField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchHighlightFieldsField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchHighlightFieldsField) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchHighlightFieldsField) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchHighlightFieldsField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchHighlightFieldsField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightFieldsFields Completed

type SFtSearchHighlightFieldsFields SCompleted

func (c FtSearchHighlightFieldsFields) Field(field ...string) FtSearchHighlightFieldsField {
	c.cs = append(c.cs, field...)
	return (FtSearchHighlightFieldsField)(c)
}

func (c SFtSearchHighlightFieldsFields) Field(field ...string) SFtSearchHighlightFieldsField {
	c.cs = append(c.cs, field...)
	return (SFtSearchHighlightFieldsField)(c)
}

type FtSearchHighlightHighlight Completed

type SFtSearchHighlightHighlight SCompleted

func (c FtSearchHighlightHighlight) Fields(count string) FtSearchHighlightFieldsFields {
	c.cs = append(c.cs, "FIELDS", count)
	return (FtSearchHighlightFieldsFields)(c)
}

func (c SFtSearchHighlightHighlight) Fields(count string) SFtSearchHighlightFieldsFields {
	c.cs = append(c.cs, "FIELDS", count)
	return (SFtSearchHighlightFieldsFields)(c)
}

func (c FtSearchHighlightHighlight) Tags() FtSearchHighlightTagsTags {
	c.cs = append(c.cs, "TAGS")
	return (FtSearchHighlightTagsTags)(c)
}

func (c SFtSearchHighlightHighlight) Tags() SFtSearchHighlightTagsTags {
	c.cs = append(c.cs, "TAGS")
	return (SFtSearchHighlightTagsTags)(c)
}

func (c FtSearchHighlightHighlight) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchHighlightHighlight) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchHighlightHighlight) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchHighlightHighlight) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchHighlightHighlight) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchHighlightHighlight) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchHighlightHighlight) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchHighlightHighlight) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchHighlightHighlight) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchHighlightHighlight) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchHighlightHighlight) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchHighlightHighlight) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchHighlightHighlight) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchHighlightHighlight) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchHighlightHighlight) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchHighlightHighlight) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchHighlightHighlight) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchHighlightHighlight) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchHighlightHighlight) Build() Completed {
	return Completed(c)
}

func (c SFtSearchHighlightHighlight) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightTagsOpenClose Completed

type SFtSearchHighlightTagsOpenClose SCompleted

func (c FtSearchHighlightTagsOpenClose) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchHighlightTagsOpenClose) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchHighlightTagsOpenClose) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchHighlightTagsOpenClose) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchHighlightTagsOpenClose) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchHighlightTagsOpenClose) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchHighlightTagsOpenClose) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchHighlightTagsOpenClose) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchHighlightTagsOpenClose) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchHighlightTagsOpenClose) Build() Completed {
	return Completed(c)
}

func (c SFtSearchHighlightTagsOpenClose) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightTagsTags Completed

type SFtSearchHighlightTagsTags SCompleted

func (c FtSearchHighlightTagsTags) OpenClose(open string, close string) FtSearchHighlightTagsOpenClose {
	c.cs = append(c.cs, open, close)
	return (FtSearchHighlightTagsOpenClose)(c)
}

func (c SFtSearchHighlightTagsTags) OpenClose(open string, close string) SFtSearchHighlightTagsOpenClose {
	c.cs = append(c.cs, open, close)
	return (SFtSearchHighlightTagsOpenClose)(c)
}

type FtSearchInFieldsField Completed

type SFtSearchInFieldsField SCompleted

func (c FtSearchInFieldsField) Field(field ...string) FtSearchInFieldsField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SFtSearchInFieldsField) Field(field ...string) SFtSearchInFieldsField {
	c.cs = append(c.cs, field...)
	return c
}

func (c FtSearchInFieldsField) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchInFieldsField) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchInFieldsField) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchInFieldsField) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchInFieldsField) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchInFieldsField) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchInFieldsField) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchInFieldsField) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchInFieldsField) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchInFieldsField) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchInFieldsField) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchInFieldsField) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchInFieldsField) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchInFieldsField) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchInFieldsField) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchInFieldsField) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchInFieldsField) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchInFieldsField) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchInFieldsField) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchInFieldsField) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchInFieldsField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchInFieldsField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchInFieldsField) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchInFieldsField) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchInFieldsField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchInFieldsField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchInFieldsInfields Completed

type SFtSearchInFieldsInfields SCompleted

func (c FtSearchInFieldsInfields) Field(field ...string) FtSearchInFieldsField {
	c.cs = append(c.cs, field...)
	return (FtSearchInFieldsField)(c)
}

func (c SFtSearchInFieldsInfields) Field(field ...string) SFtSearchInFieldsField {
	c.cs = append(c.cs, field...)
	return (SFtSearchInFieldsField)(c)
}

type FtSearchInKeysInkeys Completed

type SFtSearchInKeysInkeys SCompleted

func (c FtSearchInKeysInkeys) Key(key ...string) FtSearchInKeysKey {
	c.cs = append(c.cs, key...)
	return (FtSearchInKeysKey)(c)
}

func (c SFtSearchInKeysInkeys) Key(key ...string) SFtSearchInKeysKey {
	c.cs = append(c.cs, key...)
	return (SFtSearchInKeysKey)(c)
}

type FtSearchInKeysKey Completed

type SFtSearchInKeysKey SCompleted

func (c FtSearchInKeysKey) Key(key ...string) FtSearchInKeysKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SFtSearchInKeysKey) Key(key ...string) SFtSearchInKeysKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c FtSearchInKeysKey) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchInKeysKey) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchInKeysKey) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchInKeysKey) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchInKeysKey) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchInKeysKey) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchInKeysKey) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchInKeysKey) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchInKeysKey) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchInKeysKey) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchInKeysKey) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchInKeysKey) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchInKeysKey) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchInKeysKey) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchInKeysKey) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchInKeysKey) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchInKeysKey) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchInKeysKey) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchInKeysKey) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchInKeysKey) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchInKeysKey) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchInKeysKey) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchInKeysKey) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchInKeysKey) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchInKeysKey) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchInKeysKey) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchInKeysKey) Build() Completed {
	return Completed(c)
}

func (c SFtSearchInKeysKey) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchIndex Completed

type SFtSearchIndex SCompleted

func (c FtSearchIndex) Query(query string) FtSearchQuery {
	c.cs = append(c.cs, query)
	return (FtSearchQuery)(c)
}

func (c SFtSearchIndex) Query(query string) SFtSearchQuery {
	c.cs = append(c.cs, query)
	return (SFtSearchQuery)(c)
}

type FtSearchLanguage Completed

type SFtSearchLanguage SCompleted

func (c FtSearchLanguage) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchLanguage) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchLanguage) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchLanguage) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchLanguage) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchLanguage) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchLanguage) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchLanguage) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchLanguage) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchLanguage) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchLanguage) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchLanguage) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchLanguage) Build() Completed {
	return Completed(c)
}

func (c SFtSearchLanguage) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchLimitLimit Completed

type SFtSearchLimitLimit SCompleted

func (c FtSearchLimitLimit) OffsetNum(offset int64, num int64) FtSearchLimitOffsetNum {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (FtSearchLimitOffsetNum)(c)
}

func (c SFtSearchLimitLimit) OffsetNum(offset int64, num int64) SFtSearchLimitOffsetNum {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (SFtSearchLimitOffsetNum)(c)
}

type FtSearchLimitOffsetNum Completed

type SFtSearchLimitOffsetNum SCompleted

func (c FtSearchLimitOffsetNum) Build() Completed {
	return Completed(c)
}

func (c SFtSearchLimitOffsetNum) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchNocontent Completed

type SFtSearchNocontent SCompleted

func (c FtSearchNocontent) Verbatim() FtSearchVerbatim {
	c.cs = append(c.cs, "VERBATIM")
	return (FtSearchVerbatim)(c)
}

func (c SFtSearchNocontent) Verbatim() SFtSearchVerbatim {
	c.cs = append(c.cs, "VERBATIM")
	return (SFtSearchVerbatim)(c)
}

func (c FtSearchNocontent) Nostopwords() FtSearchNostopwords {
	c.cs = append(c.cs, "NOSTOPWORDS")
	return (FtSearchNostopwords)(c)
}

func (c SFtSearchNocontent) Nostopwords() SFtSearchNostopwords {
	c.cs = append(c.cs, "NOSTOPWORDS")
	return (SFtSearchNostopwords)(c)
}

func (c FtSearchNocontent) Withscores() FtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchNocontent) Withscores() SFtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchNocontent) Withpayloads() FtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchNocontent) Withpayloads() SFtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchNocontent) Withsortkeys() FtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchNocontent) Withsortkeys() SFtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchNocontent) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchNocontent) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchNocontent) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchNocontent) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchNocontent) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchNocontent) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchNocontent) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchNocontent) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchNocontent) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchNocontent) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchNocontent) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchNocontent) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchNocontent) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchNocontent) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchNocontent) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchNocontent) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchNocontent) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchNocontent) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchNocontent) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchNocontent) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchNocontent) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchNocontent) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchNocontent) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchNocontent) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchNocontent) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchNocontent) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchNocontent) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchNocontent) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchNocontent) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchNocontent) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchNocontent) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchNocontent) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchNocontent) Build() Completed {
	return Completed(c)
}

func (c SFtSearchNocontent) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchNostopwords Completed

type SFtSearchNostopwords SCompleted

func (c FtSearchNostopwords) Withscores() FtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchNostopwords) Withscores() SFtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchNostopwords) Withpayloads() FtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchNostopwords) Withpayloads() SFtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchNostopwords) Withsortkeys() FtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchNostopwords) Withsortkeys() SFtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchNostopwords) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchNostopwords) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchNostopwords) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchNostopwords) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchNostopwords) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchNostopwords) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchNostopwords) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchNostopwords) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchNostopwords) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchNostopwords) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchNostopwords) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchNostopwords) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchNostopwords) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchNostopwords) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchNostopwords) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchNostopwords) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchNostopwords) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchNostopwords) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchNostopwords) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchNostopwords) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchNostopwords) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchNostopwords) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchNostopwords) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchNostopwords) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchNostopwords) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchNostopwords) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchNostopwords) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchNostopwords) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchNostopwords) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchNostopwords) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchNostopwords) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchNostopwords) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchNostopwords) Build() Completed {
	return Completed(c)
}

func (c SFtSearchNostopwords) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchPayload Completed

type SFtSearchPayload SCompleted

func (c FtSearchPayload) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchPayload) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchPayload) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchPayload) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchPayload) Build() Completed {
	return Completed(c)
}

func (c SFtSearchPayload) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchQuery Completed

type SFtSearchQuery SCompleted

func (c FtSearchQuery) Nocontent() FtSearchNocontent {
	c.cs = append(c.cs, "NOCONTENT")
	return (FtSearchNocontent)(c)
}

func (c SFtSearchQuery) Nocontent() SFtSearchNocontent {
	c.cs = append(c.cs, "NOCONTENT")
	return (SFtSearchNocontent)(c)
}

func (c FtSearchQuery) Verbatim() FtSearchVerbatim {
	c.cs = append(c.cs, "VERBATIM")
	return (FtSearchVerbatim)(c)
}

func (c SFtSearchQuery) Verbatim() SFtSearchVerbatim {
	c.cs = append(c.cs, "VERBATIM")
	return (SFtSearchVerbatim)(c)
}

func (c FtSearchQuery) Nostopwords() FtSearchNostopwords {
	c.cs = append(c.cs, "NOSTOPWORDS")
	return (FtSearchNostopwords)(c)
}

func (c SFtSearchQuery) Nostopwords() SFtSearchNostopwords {
	c.cs = append(c.cs, "NOSTOPWORDS")
	return (SFtSearchNostopwords)(c)
}

func (c FtSearchQuery) Withscores() FtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchQuery) Withscores() SFtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchQuery) Withpayloads() FtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchQuery) Withpayloads() SFtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchQuery) Withsortkeys() FtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchQuery) Withsortkeys() SFtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchQuery) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchQuery) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchQuery) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchQuery) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchQuery) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchQuery) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchQuery) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchQuery) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchQuery) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchQuery) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchQuery) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchQuery) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchQuery) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchQuery) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchQuery) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchQuery) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchQuery) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchQuery) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchQuery) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchQuery) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchQuery) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchQuery) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchQuery) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchQuery) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchQuery) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchQuery) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchQuery) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchQuery) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchQuery) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchQuery) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchQuery) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchQuery) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchQuery) Build() Completed {
	return Completed(c)
}

func (c SFtSearchQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchReturnField Completed

type SFtSearchReturnField SCompleted

func (c FtSearchReturnField) Field(field ...string) FtSearchReturnField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SFtSearchReturnField) Field(field ...string) SFtSearchReturnField {
	c.cs = append(c.cs, field...)
	return c
}

func (c FtSearchReturnField) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchReturnField) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchReturnField) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchReturnField) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchReturnField) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchReturnField) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchReturnField) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchReturnField) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchReturnField) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchReturnField) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchReturnField) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchReturnField) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchReturnField) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchReturnField) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchReturnField) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchReturnField) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchReturnField) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchReturnField) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchReturnField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchReturnField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchReturnField) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchReturnField) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchReturnField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchReturnField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchReturnReturn Completed

type SFtSearchReturnReturn SCompleted

func (c FtSearchReturnReturn) Field(field ...string) FtSearchReturnField {
	c.cs = append(c.cs, field...)
	return (FtSearchReturnField)(c)
}

func (c SFtSearchReturnReturn) Field(field ...string) SFtSearchReturnField {
	c.cs = append(c.cs, field...)
	return (SFtSearchReturnField)(c)
}

type FtSearchScorer Completed

type SFtSearchScorer SCompleted

func (c FtSearchScorer) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchScorer) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchScorer) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchScorer) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchScorer) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchScorer) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchScorer) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchScorer) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchScorer) Build() Completed {
	return Completed(c)
}

func (c SFtSearchScorer) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSlop Completed

type SFtSearchSlop SCompleted

func (c FtSearchSlop) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSlop) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSlop) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSlop) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSlop) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSlop) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSlop) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSlop) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSlop) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSlop) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSlop) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSlop) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSlop) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSlop) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSlop) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSlop) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSlop) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSlop) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSortbyOrderAsc Completed

type SFtSearchSortbyOrderAsc SCompleted

func (c FtSearchSortbyOrderAsc) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSortbyOrderAsc) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSortbyOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSortbyOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSortbyOrderDesc Completed

type SFtSearchSortbyOrderDesc SCompleted

func (c FtSearchSortbyOrderDesc) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSortbyOrderDesc) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSortbyOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSortbyOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSortbySortby Completed

type SFtSearchSortbySortby SCompleted

func (c FtSearchSortbySortby) Asc() FtSearchSortbyOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (FtSearchSortbyOrderAsc)(c)
}

func (c SFtSearchSortbySortby) Asc() SFtSearchSortbyOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SFtSearchSortbyOrderAsc)(c)
}

func (c FtSearchSortbySortby) Desc() FtSearchSortbyOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (FtSearchSortbyOrderDesc)(c)
}

func (c SFtSearchSortbySortby) Desc() SFtSearchSortbyOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SFtSearchSortbyOrderDesc)(c)
}

func (c FtSearchSortbySortby) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSortbySortby) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSortbySortby) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSortbySortby) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeFieldsField Completed

type SFtSearchSummarizeFieldsField SCompleted

func (c FtSearchSummarizeFieldsField) Field(field ...string) FtSearchSummarizeFieldsField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SFtSearchSummarizeFieldsField) Field(field ...string) SFtSearchSummarizeFieldsField {
	c.cs = append(c.cs, field...)
	return c
}

func (c FtSearchSummarizeFieldsField) Frags(num int64) FtSearchSummarizeFrags {
	c.cs = append(c.cs, "FRAGS", strconv.FormatInt(num, 10))
	return (FtSearchSummarizeFrags)(c)
}

func (c SFtSearchSummarizeFieldsField) Frags(num int64) SFtSearchSummarizeFrags {
	c.cs = append(c.cs, "FRAGS", strconv.FormatInt(num, 10))
	return (SFtSearchSummarizeFrags)(c)
}

func (c FtSearchSummarizeFieldsField) Len(fragsize int64) FtSearchSummarizeLen {
	c.cs = append(c.cs, "LEN", strconv.FormatInt(fragsize, 10))
	return (FtSearchSummarizeLen)(c)
}

func (c SFtSearchSummarizeFieldsField) Len(fragsize int64) SFtSearchSummarizeLen {
	c.cs = append(c.cs, "LEN", strconv.FormatInt(fragsize, 10))
	return (SFtSearchSummarizeLen)(c)
}

func (c FtSearchSummarizeFieldsField) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeFieldsField) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeFieldsField) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeFieldsField) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeFieldsField) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeFieldsField) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeFieldsField) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeFieldsField) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeFieldsField) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeFieldsField) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeFieldsField) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeFieldsField) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeFieldsField) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeFieldsField) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeFieldsField) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeFieldsField) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeFieldsField) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeFieldsField) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeFieldsField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeFieldsField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeFieldsField) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeFieldsField) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeFieldsField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeFieldsField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeFieldsFields Completed

type SFtSearchSummarizeFieldsFields SCompleted

func (c FtSearchSummarizeFieldsFields) Field(field ...string) FtSearchSummarizeFieldsField {
	c.cs = append(c.cs, field...)
	return (FtSearchSummarizeFieldsField)(c)
}

func (c SFtSearchSummarizeFieldsFields) Field(field ...string) SFtSearchSummarizeFieldsField {
	c.cs = append(c.cs, field...)
	return (SFtSearchSummarizeFieldsField)(c)
}

type FtSearchSummarizeFrags Completed

type SFtSearchSummarizeFrags SCompleted

func (c FtSearchSummarizeFrags) Len(fragsize int64) FtSearchSummarizeLen {
	c.cs = append(c.cs, "LEN", strconv.FormatInt(fragsize, 10))
	return (FtSearchSummarizeLen)(c)
}

func (c SFtSearchSummarizeFrags) Len(fragsize int64) SFtSearchSummarizeLen {
	c.cs = append(c.cs, "LEN", strconv.FormatInt(fragsize, 10))
	return (SFtSearchSummarizeLen)(c)
}

func (c FtSearchSummarizeFrags) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeFrags) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeFrags) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeFrags) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeFrags) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeFrags) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeFrags) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeFrags) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeFrags) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeFrags) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeFrags) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeFrags) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeFrags) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeFrags) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeFrags) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeFrags) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeFrags) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeFrags) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeFrags) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeFrags) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeFrags) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeFrags) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeFrags) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeFrags) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeLen Completed

type SFtSearchSummarizeLen SCompleted

func (c FtSearchSummarizeLen) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeLen) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeLen) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeLen) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeLen) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeLen) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeLen) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeLen) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeLen) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeLen) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeLen) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeLen) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeLen) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeLen) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeLen) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeLen) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeLen) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeLen) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeLen) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeLen) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeLen) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeLen) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeLen) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeLen) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeSeparator Completed

type SFtSearchSummarizeSeparator SCompleted

func (c FtSearchSummarizeSeparator) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeSeparator) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeSeparator) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeSeparator) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeSeparator) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeSeparator) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeSeparator) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeSeparator) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeSeparator) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeSeparator) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeSeparator) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeSeparator) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeSeparator) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeSeparator) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeSeparator) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeSeparator) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeSeparator) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeSeparator) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeSeparator) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeSeparator) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeSeparator) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeSeparator) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeSummarize Completed

type SFtSearchSummarizeSummarize SCompleted

func (c FtSearchSummarizeSummarize) Fields(count string) FtSearchSummarizeFieldsFields {
	c.cs = append(c.cs, "FIELDS", count)
	return (FtSearchSummarizeFieldsFields)(c)
}

func (c SFtSearchSummarizeSummarize) Fields(count string) SFtSearchSummarizeFieldsFields {
	c.cs = append(c.cs, "FIELDS", count)
	return (SFtSearchSummarizeFieldsFields)(c)
}

func (c FtSearchSummarizeSummarize) Frags(num int64) FtSearchSummarizeFrags {
	c.cs = append(c.cs, "FRAGS", strconv.FormatInt(num, 10))
	return (FtSearchSummarizeFrags)(c)
}

func (c SFtSearchSummarizeSummarize) Frags(num int64) SFtSearchSummarizeFrags {
	c.cs = append(c.cs, "FRAGS", strconv.FormatInt(num, 10))
	return (SFtSearchSummarizeFrags)(c)
}

func (c FtSearchSummarizeSummarize) Len(fragsize int64) FtSearchSummarizeLen {
	c.cs = append(c.cs, "LEN", strconv.FormatInt(fragsize, 10))
	return (FtSearchSummarizeLen)(c)
}

func (c SFtSearchSummarizeSummarize) Len(fragsize int64) SFtSearchSummarizeLen {
	c.cs = append(c.cs, "LEN", strconv.FormatInt(fragsize, 10))
	return (SFtSearchSummarizeLen)(c)
}

func (c FtSearchSummarizeSummarize) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeSummarize) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs = append(c.cs, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeSummarize) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeSummarize) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeSummarize) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeSummarize) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeSummarize) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeSummarize) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeSummarize) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeSummarize) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeSummarize) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeSummarize) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeSummarize) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeSummarize) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeSummarize) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeSummarize) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeSummarize) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeSummarize) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeSummarize) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeSummarize) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeSummarize) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeSummarize) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeSummarize) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeSummarize) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchTagsInorder Completed

type SFtSearchTagsInorder SCompleted

func (c FtSearchTagsInorder) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchTagsInorder) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchTagsInorder) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchTagsInorder) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchTagsInorder) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchTagsInorder) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchTagsInorder) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchTagsInorder) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchTagsInorder) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchTagsInorder) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchTagsInorder) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchTagsInorder) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchTagsInorder) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchTagsInorder) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchTagsInorder) Build() Completed {
	return Completed(c)
}

func (c SFtSearchTagsInorder) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchVerbatim Completed

type SFtSearchVerbatim SCompleted

func (c FtSearchVerbatim) Nostopwords() FtSearchNostopwords {
	c.cs = append(c.cs, "NOSTOPWORDS")
	return (FtSearchNostopwords)(c)
}

func (c SFtSearchVerbatim) Nostopwords() SFtSearchNostopwords {
	c.cs = append(c.cs, "NOSTOPWORDS")
	return (SFtSearchNostopwords)(c)
}

func (c FtSearchVerbatim) Withscores() FtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchVerbatim) Withscores() SFtSearchWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchVerbatim) Withpayloads() FtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchVerbatim) Withpayloads() SFtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchVerbatim) Withsortkeys() FtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchVerbatim) Withsortkeys() SFtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchVerbatim) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchVerbatim) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchVerbatim) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchVerbatim) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchVerbatim) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchVerbatim) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchVerbatim) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchVerbatim) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchVerbatim) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchVerbatim) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchVerbatim) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchVerbatim) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchVerbatim) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchVerbatim) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchVerbatim) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchVerbatim) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchVerbatim) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchVerbatim) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchVerbatim) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchVerbatim) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchVerbatim) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchVerbatim) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchVerbatim) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchVerbatim) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchVerbatim) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchVerbatim) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchVerbatim) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchVerbatim) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchVerbatim) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchVerbatim) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchVerbatim) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchVerbatim) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchVerbatim) Build() Completed {
	return Completed(c)
}

func (c SFtSearchVerbatim) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchWithpayloads Completed

type SFtSearchWithpayloads SCompleted

func (c FtSearchWithpayloads) Withsortkeys() FtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchWithpayloads) Withsortkeys() SFtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchWithpayloads) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchWithpayloads) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchWithpayloads) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchWithpayloads) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchWithpayloads) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchWithpayloads) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchWithpayloads) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchWithpayloads) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchWithpayloads) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchWithpayloads) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchWithpayloads) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchWithpayloads) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchWithpayloads) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchWithpayloads) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchWithpayloads) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchWithpayloads) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchWithpayloads) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchWithpayloads) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchWithpayloads) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchWithpayloads) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchWithpayloads) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchWithpayloads) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchWithpayloads) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchWithpayloads) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchWithpayloads) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchWithpayloads) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchWithpayloads) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchWithpayloads) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchWithpayloads) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchWithpayloads) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchWithpayloads) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchWithpayloads) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchWithpayloads) Build() Completed {
	return Completed(c)
}

func (c SFtSearchWithpayloads) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchWithscores Completed

type SFtSearchWithscores SCompleted

func (c FtSearchWithscores) Withpayloads() FtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchWithscores) Withpayloads() SFtSearchWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchWithscores) Withsortkeys() FtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchWithscores) Withsortkeys() SFtSearchWithsortkeys {
	c.cs = append(c.cs, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchWithscores) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchWithscores) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchWithscores) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchWithscores) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchWithscores) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchWithscores) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchWithscores) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchWithscores) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchWithscores) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchWithscores) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchWithscores) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchWithscores) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchWithscores) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchWithscores) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchWithscores) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchWithscores) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchWithscores) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchWithscores) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchWithscores) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchWithscores) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchWithscores) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchWithscores) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchWithscores) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchWithscores) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchWithscores) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchWithscores) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchWithscores) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchWithscores) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchWithscores) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchWithscores) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchWithscores) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchWithscores) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchWithscores) Build() Completed {
	return Completed(c)
}

func (c SFtSearchWithscores) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchWithsortkeys Completed

type SFtSearchWithsortkeys SCompleted

func (c FtSearchWithsortkeys) Filter(numericField string) FtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchWithsortkeys) Filter(numericField string) SFtSearchFilterFilter {
	c.cs = append(c.cs, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchWithsortkeys) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchWithsortkeys) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs = append(c.cs, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchWithsortkeys) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchWithsortkeys) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs = append(c.cs, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchWithsortkeys) Infields(count string) FtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchWithsortkeys) Infields(count string) SFtSearchInFieldsInfields {
	c.cs = append(c.cs, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchWithsortkeys) Return(count string) FtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchWithsortkeys) Return(count string) SFtSearchReturnReturn {
	c.cs = append(c.cs, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchWithsortkeys) Summarize() FtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchWithsortkeys) Summarize() SFtSearchSummarizeSummarize {
	c.cs = append(c.cs, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchWithsortkeys) Highlight() FtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchWithsortkeys) Highlight() SFtSearchHighlightHighlight {
	c.cs = append(c.cs, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchWithsortkeys) Slop(slop int64) FtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchWithsortkeys) Slop(slop int64) SFtSearchSlop {
	c.cs = append(c.cs, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchWithsortkeys) Inorder() FtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchWithsortkeys) Inorder() SFtSearchTagsInorder {
	c.cs = append(c.cs, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchWithsortkeys) Language(language string) FtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchWithsortkeys) Language(language string) SFtSearchLanguage {
	c.cs = append(c.cs, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchWithsortkeys) Expander(expander string) FtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchWithsortkeys) Expander(expander string) SFtSearchExpander {
	c.cs = append(c.cs, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchWithsortkeys) Scorer(scorer string) FtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchWithsortkeys) Scorer(scorer string) SFtSearchScorer {
	c.cs = append(c.cs, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchWithsortkeys) Explainscore() FtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchWithsortkeys) Explainscore() SFtSearchExplainscore {
	c.cs = append(c.cs, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchWithsortkeys) Payload(payload string) FtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchWithsortkeys) Payload(payload string) SFtSearchPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchWithsortkeys) Sortby(sortby string) FtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchWithsortkeys) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs = append(c.cs, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchWithsortkeys) Limit() FtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchWithsortkeys) Limit() SFtSearchLimitLimit {
	c.cs = append(c.cs, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchWithsortkeys) Build() Completed {
	return Completed(c)
}

func (c SFtSearchWithsortkeys) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheck Completed

type SFtSpellcheck SCompleted

func (b *Builder) FtSpellcheck() FtSpellcheck {
	return FtSpellcheck{cs: append(b.get(), "FT.SPELLCHECK"), ks: InitSlot}
}

func (b *SBuilder) FtSpellcheck() SFtSpellcheck {
	return SFtSpellcheck{cs: append(b.get(), "FT.SPELLCHECK"), ks: InitSlot}
}

func (c FtSpellcheck) Index(index string) FtSpellcheckIndex {
	c.cs = append(c.cs, index)
	return (FtSpellcheckIndex)(c)
}

func (c SFtSpellcheck) Index(index string) SFtSpellcheckIndex {
	c.cs = append(c.cs, index)
	return (SFtSpellcheckIndex)(c)
}

type FtSpellcheckDistance Completed

type SFtSpellcheckDistance SCompleted

func (c FtSpellcheckDistance) TermsInclude() FtSpellcheckTermsTermsInclude {
	c.cs = append(c.cs, "TERMS", "INCLUDE")
	return (FtSpellcheckTermsTermsInclude)(c)
}

func (c SFtSpellcheckDistance) TermsInclude() SFtSpellcheckTermsTermsInclude {
	c.cs = append(c.cs, "TERMS", "INCLUDE")
	return (SFtSpellcheckTermsTermsInclude)(c)
}

func (c FtSpellcheckDistance) TermsExclude() FtSpellcheckTermsTermsExclude {
	c.cs = append(c.cs, "TERMS", "EXCLUDE")
	return (FtSpellcheckTermsTermsExclude)(c)
}

func (c SFtSpellcheckDistance) TermsExclude() SFtSpellcheckTermsTermsExclude {
	c.cs = append(c.cs, "TERMS", "EXCLUDE")
	return (SFtSpellcheckTermsTermsExclude)(c)
}

func (c FtSpellcheckDistance) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckDistance) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckIndex Completed

type SFtSpellcheckIndex SCompleted

func (c FtSpellcheckIndex) Query(query string) FtSpellcheckQuery {
	c.cs = append(c.cs, query)
	return (FtSpellcheckQuery)(c)
}

func (c SFtSpellcheckIndex) Query(query string) SFtSpellcheckQuery {
	c.cs = append(c.cs, query)
	return (SFtSpellcheckQuery)(c)
}

type FtSpellcheckQuery Completed

type SFtSpellcheckQuery SCompleted

func (c FtSpellcheckQuery) Distance(distance int64) FtSpellcheckDistance {
	c.cs = append(c.cs, "DISTANCE", strconv.FormatInt(distance, 10))
	return (FtSpellcheckDistance)(c)
}

func (c SFtSpellcheckQuery) Distance(distance int64) SFtSpellcheckDistance {
	c.cs = append(c.cs, "DISTANCE", strconv.FormatInt(distance, 10))
	return (SFtSpellcheckDistance)(c)
}

func (c FtSpellcheckQuery) TermsInclude() FtSpellcheckTermsTermsInclude {
	c.cs = append(c.cs, "TERMS", "INCLUDE")
	return (FtSpellcheckTermsTermsInclude)(c)
}

func (c SFtSpellcheckQuery) TermsInclude() SFtSpellcheckTermsTermsInclude {
	c.cs = append(c.cs, "TERMS", "INCLUDE")
	return (SFtSpellcheckTermsTermsInclude)(c)
}

func (c FtSpellcheckQuery) TermsExclude() FtSpellcheckTermsTermsExclude {
	c.cs = append(c.cs, "TERMS", "EXCLUDE")
	return (FtSpellcheckTermsTermsExclude)(c)
}

func (c SFtSpellcheckQuery) TermsExclude() SFtSpellcheckTermsTermsExclude {
	c.cs = append(c.cs, "TERMS", "EXCLUDE")
	return (SFtSpellcheckTermsTermsExclude)(c)
}

func (c FtSpellcheckQuery) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckTermsDictionary Completed

type SFtSpellcheckTermsDictionary SCompleted

func (c FtSpellcheckTermsDictionary) Terms(terms ...string) FtSpellcheckTermsTerms {
	c.cs = append(c.cs, terms...)
	return (FtSpellcheckTermsTerms)(c)
}

func (c SFtSpellcheckTermsDictionary) Terms(terms ...string) SFtSpellcheckTermsTerms {
	c.cs = append(c.cs, terms...)
	return (SFtSpellcheckTermsTerms)(c)
}

func (c FtSpellcheckTermsDictionary) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckTermsDictionary) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckTermsTerms Completed

type SFtSpellcheckTermsTerms SCompleted

func (c FtSpellcheckTermsTerms) Terms(terms ...string) FtSpellcheckTermsTerms {
	c.cs = append(c.cs, terms...)
	return c
}

func (c SFtSpellcheckTermsTerms) Terms(terms ...string) SFtSpellcheckTermsTerms {
	c.cs = append(c.cs, terms...)
	return c
}

func (c FtSpellcheckTermsTerms) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckTermsTerms) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckTermsTermsExclude Completed

type SFtSpellcheckTermsTermsExclude SCompleted

func (c FtSpellcheckTermsTermsExclude) Dictionary(dictionary string) FtSpellcheckTermsDictionary {
	c.cs = append(c.cs, dictionary)
	return (FtSpellcheckTermsDictionary)(c)
}

func (c SFtSpellcheckTermsTermsExclude) Dictionary(dictionary string) SFtSpellcheckTermsDictionary {
	c.cs = append(c.cs, dictionary)
	return (SFtSpellcheckTermsDictionary)(c)
}

type FtSpellcheckTermsTermsInclude Completed

type SFtSpellcheckTermsTermsInclude SCompleted

func (c FtSpellcheckTermsTermsInclude) Dictionary(dictionary string) FtSpellcheckTermsDictionary {
	c.cs = append(c.cs, dictionary)
	return (FtSpellcheckTermsDictionary)(c)
}

func (c SFtSpellcheckTermsTermsInclude) Dictionary(dictionary string) SFtSpellcheckTermsDictionary {
	c.cs = append(c.cs, dictionary)
	return (SFtSpellcheckTermsDictionary)(c)
}

type FtSugadd Completed

type SFtSugadd SCompleted

func (b *Builder) FtSugadd() FtSugadd {
	return FtSugadd{cs: append(b.get(), "FT.SUGADD"), ks: InitSlot}
}

func (b *SBuilder) FtSugadd() SFtSugadd {
	return SFtSugadd{cs: append(b.get(), "FT.SUGADD"), ks: InitSlot}
}

func (c FtSugadd) Key(key string) FtSugaddKey {
	c.cs = append(c.cs, key)
	return (FtSugaddKey)(c)
}

func (c SFtSugadd) Key(key string) SFtSugaddKey {
	c.cs = append(c.cs, key)
	return (SFtSugaddKey)(c)
}

type FtSugaddIncrementScoreIncr Completed

type SFtSugaddIncrementScoreIncr SCompleted

func (c FtSugaddIncrementScoreIncr) Payload(payload string) FtSugaddPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSugaddPayload)(c)
}

func (c SFtSugaddIncrementScoreIncr) Payload(payload string) SFtSugaddPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSugaddPayload)(c)
}

func (c FtSugaddIncrementScoreIncr) Build() Completed {
	return Completed(c)
}

func (c SFtSugaddIncrementScoreIncr) Build() SCompleted {
	return SCompleted(c)
}

type FtSugaddKey Completed

type SFtSugaddKey SCompleted

func (c FtSugaddKey) String(string string) FtSugaddString {
	c.cs = append(c.cs, string)
	return (FtSugaddString)(c)
}

func (c SFtSugaddKey) String(string string) SFtSugaddString {
	c.cs = append(c.cs, string)
	return (SFtSugaddString)(c)
}

type FtSugaddPayload Completed

type SFtSugaddPayload SCompleted

func (c FtSugaddPayload) Build() Completed {
	return Completed(c)
}

func (c SFtSugaddPayload) Build() SCompleted {
	return SCompleted(c)
}

type FtSugaddScore Completed

type SFtSugaddScore SCompleted

func (c FtSugaddScore) Incr() FtSugaddIncrementScoreIncr {
	c.cs = append(c.cs, "INCR")
	return (FtSugaddIncrementScoreIncr)(c)
}

func (c SFtSugaddScore) Incr() SFtSugaddIncrementScoreIncr {
	c.cs = append(c.cs, "INCR")
	return (SFtSugaddIncrementScoreIncr)(c)
}

func (c FtSugaddScore) Payload(payload string) FtSugaddPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (FtSugaddPayload)(c)
}

func (c SFtSugaddScore) Payload(payload string) SFtSugaddPayload {
	c.cs = append(c.cs, "PAYLOAD", payload)
	return (SFtSugaddPayload)(c)
}

func (c FtSugaddScore) Build() Completed {
	return Completed(c)
}

func (c SFtSugaddScore) Build() SCompleted {
	return SCompleted(c)
}

type FtSugaddString Completed

type SFtSugaddString SCompleted

func (c FtSugaddString) Score(score float64) FtSugaddScore {
	c.cs = append(c.cs, strconv.FormatFloat(score, 'f', -1, 64))
	return (FtSugaddScore)(c)
}

func (c SFtSugaddString) Score(score float64) SFtSugaddScore {
	c.cs = append(c.cs, strconv.FormatFloat(score, 'f', -1, 64))
	return (SFtSugaddScore)(c)
}

type FtSugdel Completed

type SFtSugdel SCompleted

func (b *Builder) FtSugdel() FtSugdel {
	return FtSugdel{cs: append(b.get(), "FT.SUGDEL"), ks: InitSlot}
}

func (b *SBuilder) FtSugdel() SFtSugdel {
	return SFtSugdel{cs: append(b.get(), "FT.SUGDEL"), ks: InitSlot}
}

func (c FtSugdel) Key(key string) FtSugdelKey {
	c.cs = append(c.cs, key)
	return (FtSugdelKey)(c)
}

func (c SFtSugdel) Key(key string) SFtSugdelKey {
	c.cs = append(c.cs, key)
	return (SFtSugdelKey)(c)
}

type FtSugdelKey Completed

type SFtSugdelKey SCompleted

func (c FtSugdelKey) String(string string) FtSugdelString {
	c.cs = append(c.cs, string)
	return (FtSugdelString)(c)
}

func (c SFtSugdelKey) String(string string) SFtSugdelString {
	c.cs = append(c.cs, string)
	return (SFtSugdelString)(c)
}

type FtSugdelString Completed

type SFtSugdelString SCompleted

func (c FtSugdelString) Build() Completed {
	return Completed(c)
}

func (c SFtSugdelString) Build() SCompleted {
	return SCompleted(c)
}

type FtSugget Completed

type SFtSugget SCompleted

func (b *Builder) FtSugget() FtSugget {
	return FtSugget{cs: append(b.get(), "FT.SUGGET"), ks: InitSlot}
}

func (b *SBuilder) FtSugget() SFtSugget {
	return SFtSugget{cs: append(b.get(), "FT.SUGGET"), ks: InitSlot}
}

func (c FtSugget) Key(key string) FtSuggetKey {
	c.cs = append(c.cs, key)
	return (FtSuggetKey)(c)
}

func (c SFtSugget) Key(key string) SFtSuggetKey {
	c.cs = append(c.cs, key)
	return (SFtSuggetKey)(c)
}

type FtSuggetFuzzy Completed

type SFtSuggetFuzzy SCompleted

func (c FtSuggetFuzzy) Withscores() FtSuggetWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (FtSuggetWithscores)(c)
}

func (c SFtSuggetFuzzy) Withscores() SFtSuggetWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SFtSuggetWithscores)(c)
}

func (c FtSuggetFuzzy) Withpayloads() FtSuggetWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSuggetWithpayloads)(c)
}

func (c SFtSuggetFuzzy) Withpayloads() SFtSuggetWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSuggetWithpayloads)(c)
}

func (c FtSuggetFuzzy) Max(max int64) FtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetFuzzy) Max(max int64) SFtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetFuzzy) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetFuzzy) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetKey Completed

type SFtSuggetKey SCompleted

func (c FtSuggetKey) Prefix(prefix string) FtSuggetPrefix {
	c.cs = append(c.cs, prefix)
	return (FtSuggetPrefix)(c)
}

func (c SFtSuggetKey) Prefix(prefix string) SFtSuggetPrefix {
	c.cs = append(c.cs, prefix)
	return (SFtSuggetPrefix)(c)
}

type FtSuggetMax Completed

type SFtSuggetMax SCompleted

func (c FtSuggetMax) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetMax) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetPrefix Completed

type SFtSuggetPrefix SCompleted

func (c FtSuggetPrefix) Fuzzy() FtSuggetFuzzy {
	c.cs = append(c.cs, "FUZZY")
	return (FtSuggetFuzzy)(c)
}

func (c SFtSuggetPrefix) Fuzzy() SFtSuggetFuzzy {
	c.cs = append(c.cs, "FUZZY")
	return (SFtSuggetFuzzy)(c)
}

func (c FtSuggetPrefix) Withscores() FtSuggetWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (FtSuggetWithscores)(c)
}

func (c SFtSuggetPrefix) Withscores() SFtSuggetWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SFtSuggetWithscores)(c)
}

func (c FtSuggetPrefix) Withpayloads() FtSuggetWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSuggetWithpayloads)(c)
}

func (c SFtSuggetPrefix) Withpayloads() SFtSuggetWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSuggetWithpayloads)(c)
}

func (c FtSuggetPrefix) Max(max int64) FtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetPrefix) Max(max int64) SFtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetPrefix) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetPrefix) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetWithpayloads Completed

type SFtSuggetWithpayloads SCompleted

func (c FtSuggetWithpayloads) Max(max int64) FtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetWithpayloads) Max(max int64) SFtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetWithpayloads) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetWithpayloads) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetWithscores Completed

type SFtSuggetWithscores SCompleted

func (c FtSuggetWithscores) Withpayloads() FtSuggetWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (FtSuggetWithpayloads)(c)
}

func (c SFtSuggetWithscores) Withpayloads() SFtSuggetWithpayloads {
	c.cs = append(c.cs, "WITHPAYLOADS")
	return (SFtSuggetWithpayloads)(c)
}

func (c FtSuggetWithscores) Max(max int64) FtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetWithscores) Max(max int64) SFtSuggetMax {
	c.cs = append(c.cs, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetWithscores) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetWithscores) Build() SCompleted {
	return SCompleted(c)
}

type FtSuglen Completed

type SFtSuglen SCompleted

func (b *Builder) FtSuglen() FtSuglen {
	return FtSuglen{cs: append(b.get(), "FT.SUGLEN"), ks: InitSlot}
}

func (b *SBuilder) FtSuglen() SFtSuglen {
	return SFtSuglen{cs: append(b.get(), "FT.SUGLEN"), ks: InitSlot}
}

func (c FtSuglen) Key(key string) FtSuglenKey {
	c.cs = append(c.cs, key)
	return (FtSuglenKey)(c)
}

func (c SFtSuglen) Key(key string) SFtSuglenKey {
	c.cs = append(c.cs, key)
	return (SFtSuglenKey)(c)
}

type FtSuglenKey Completed

type SFtSuglenKey SCompleted

func (c FtSuglenKey) Build() Completed {
	return Completed(c)
}

func (c SFtSuglenKey) Build() SCompleted {
	return SCompleted(c)
}

type FtSyndump Completed

type SFtSyndump SCompleted

func (b *Builder) FtSyndump() FtSyndump {
	return FtSyndump{cs: append(b.get(), "FT.SYNDUMP"), ks: InitSlot}
}

func (b *SBuilder) FtSyndump() SFtSyndump {
	return SFtSyndump{cs: append(b.get(), "FT.SYNDUMP"), ks: InitSlot}
}

func (c FtSyndump) Index(index string) FtSyndumpIndex {
	c.cs = append(c.cs, index)
	return (FtSyndumpIndex)(c)
}

func (c SFtSyndump) Index(index string) SFtSyndumpIndex {
	c.cs = append(c.cs, index)
	return (SFtSyndumpIndex)(c)
}

type FtSyndumpIndex Completed

type SFtSyndumpIndex SCompleted

func (c FtSyndumpIndex) Build() Completed {
	return Completed(c)
}

func (c SFtSyndumpIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtSynupdate Completed

type SFtSynupdate SCompleted

func (b *Builder) FtSynupdate() FtSynupdate {
	return FtSynupdate{cs: append(b.get(), "FT.SYNUPDATE"), ks: InitSlot}
}

func (b *SBuilder) FtSynupdate() SFtSynupdate {
	return SFtSynupdate{cs: append(b.get(), "FT.SYNUPDATE"), ks: InitSlot}
}

func (c FtSynupdate) Index(index string) FtSynupdateIndex {
	c.cs = append(c.cs, index)
	return (FtSynupdateIndex)(c)
}

func (c SFtSynupdate) Index(index string) SFtSynupdateIndex {
	c.cs = append(c.cs, index)
	return (SFtSynupdateIndex)(c)
}

type FtSynupdateIndex Completed

type SFtSynupdateIndex SCompleted

func (c FtSynupdateIndex) SynonymGroupId(synonymGroupId string) FtSynupdateSynonymGroupId {
	c.cs = append(c.cs, synonymGroupId)
	return (FtSynupdateSynonymGroupId)(c)
}

func (c SFtSynupdateIndex) SynonymGroupId(synonymGroupId string) SFtSynupdateSynonymGroupId {
	c.cs = append(c.cs, synonymGroupId)
	return (SFtSynupdateSynonymGroupId)(c)
}

type FtSynupdateSkipinitialscan Completed

type SFtSynupdateSkipinitialscan SCompleted

func (c FtSynupdateSkipinitialscan) Term(term ...string) FtSynupdateTerm {
	c.cs = append(c.cs, term...)
	return (FtSynupdateTerm)(c)
}

func (c SFtSynupdateSkipinitialscan) Term(term ...string) SFtSynupdateTerm {
	c.cs = append(c.cs, term...)
	return (SFtSynupdateTerm)(c)
}

type FtSynupdateSynonymGroupId Completed

type SFtSynupdateSynonymGroupId SCompleted

func (c FtSynupdateSynonymGroupId) Skipinitialscan() FtSynupdateSkipinitialscan {
	c.cs = append(c.cs, "SKIPINITIALSCAN")
	return (FtSynupdateSkipinitialscan)(c)
}

func (c SFtSynupdateSynonymGroupId) Skipinitialscan() SFtSynupdateSkipinitialscan {
	c.cs = append(c.cs, "SKIPINITIALSCAN")
	return (SFtSynupdateSkipinitialscan)(c)
}

func (c FtSynupdateSynonymGroupId) Term(term ...string) FtSynupdateTerm {
	c.cs = append(c.cs, term...)
	return (FtSynupdateTerm)(c)
}

func (c SFtSynupdateSynonymGroupId) Term(term ...string) SFtSynupdateTerm {
	c.cs = append(c.cs, term...)
	return (SFtSynupdateTerm)(c)
}

type FtSynupdateTerm Completed

type SFtSynupdateTerm SCompleted

func (c FtSynupdateTerm) Term(term ...string) FtSynupdateTerm {
	c.cs = append(c.cs, term...)
	return c
}

func (c SFtSynupdateTerm) Term(term ...string) SFtSynupdateTerm {
	c.cs = append(c.cs, term...)
	return c
}

func (c FtSynupdateTerm) Build() Completed {
	return Completed(c)
}

func (c SFtSynupdateTerm) Build() SCompleted {
	return SCompleted(c)
}

type FtTagvals Completed

type SFtTagvals SCompleted

func (b *Builder) FtTagvals() FtTagvals {
	return FtTagvals{cs: append(b.get(), "FT.TAGVALS"), ks: InitSlot}
}

func (b *SBuilder) FtTagvals() SFtTagvals {
	return SFtTagvals{cs: append(b.get(), "FT.TAGVALS"), ks: InitSlot}
}

func (c FtTagvals) Index(index string) FtTagvalsIndex {
	c.cs = append(c.cs, index)
	return (FtTagvalsIndex)(c)
}

func (c SFtTagvals) Index(index string) SFtTagvalsIndex {
	c.cs = append(c.cs, index)
	return (SFtTagvalsIndex)(c)
}

type FtTagvalsFieldName Completed

type SFtTagvalsFieldName SCompleted

func (c FtTagvalsFieldName) Build() Completed {
	return Completed(c)
}

func (c SFtTagvalsFieldName) Build() SCompleted {
	return SCompleted(c)
}

type FtTagvalsIndex Completed

type SFtTagvalsIndex SCompleted

func (c FtTagvalsIndex) FieldName(fieldName string) FtTagvalsFieldName {
	c.cs = append(c.cs, fieldName)
	return (FtTagvalsFieldName)(c)
}

func (c SFtTagvalsIndex) FieldName(fieldName string) SFtTagvalsFieldName {
	c.cs = append(c.cs, fieldName)
	return (SFtTagvalsFieldName)(c)
}

type Geoadd Completed

type SGeoadd SCompleted

func (b *Builder) Geoadd() Geoadd {
	return Geoadd{cs: append(b.get(), "GEOADD"), ks: InitSlot}
}

func (b *SBuilder) Geoadd() SGeoadd {
	return SGeoadd{cs: append(b.get(), "GEOADD"), ks: InitSlot}
}

func (c Geoadd) Key(key string) GeoaddKey {
	c.cs = append(c.cs, key)
	return (GeoaddKey)(c)
}

func (c SGeoadd) Key(key string) SGeoaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeoaddKey)(c)
}

type GeoaddChangeCh Completed

type SGeoaddChangeCh SCompleted

func (c GeoaddChangeCh) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddChangeCh) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddConditionNx Completed

type SGeoaddConditionNx SCompleted

func (c GeoaddConditionNx) Ch() GeoaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (GeoaddChangeCh)(c)
}

func (c SGeoaddConditionNx) Ch() SGeoaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SGeoaddChangeCh)(c)
}

func (c GeoaddConditionNx) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddConditionNx) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddConditionXx Completed

type SGeoaddConditionXx SCompleted

func (c GeoaddConditionXx) Ch() GeoaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (GeoaddChangeCh)(c)
}

func (c SGeoaddConditionXx) Ch() SGeoaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SGeoaddChangeCh)(c)
}

func (c GeoaddConditionXx) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddConditionXx) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddKey Completed

type SGeoaddKey SCompleted

func (c GeoaddKey) Nx() GeoaddConditionNx {
	c.cs = append(c.cs, "NX")
	return (GeoaddConditionNx)(c)
}

func (c SGeoaddKey) Nx() SGeoaddConditionNx {
	c.cs = append(c.cs, "NX")
	return (SGeoaddConditionNx)(c)
}

func (c GeoaddKey) Xx() GeoaddConditionXx {
	c.cs = append(c.cs, "XX")
	return (GeoaddConditionXx)(c)
}

func (c SGeoaddKey) Xx() SGeoaddConditionXx {
	c.cs = append(c.cs, "XX")
	return (SGeoaddConditionXx)(c)
}

func (c GeoaddKey) Ch() GeoaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (GeoaddChangeCh)(c)
}

func (c SGeoaddKey) Ch() SGeoaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SGeoaddChangeCh)(c)
}

func (c GeoaddKey) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddKey) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddLongitudeLatitudeMember Completed

type SGeoaddLongitudeLatitudeMember SCompleted

func (c GeoaddLongitudeLatitudeMember) LongitudeLatitudeMember(longitude float64, latitude float64, member string) GeoaddLongitudeLatitudeMember {
	c.cs = append(c.cs, strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64), member)
	return c
}

func (c SGeoaddLongitudeLatitudeMember) LongitudeLatitudeMember(longitude float64, latitude float64, member string) SGeoaddLongitudeLatitudeMember {
	c.cs = append(c.cs, strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64), member)
	return c
}

func (c GeoaddLongitudeLatitudeMember) Build() Completed {
	return Completed(c)
}

func (c SGeoaddLongitudeLatitudeMember) Build() SCompleted {
	return SCompleted(c)
}

type Geodist Completed

type SGeodist SCompleted

func (b *Builder) Geodist() Geodist {
	return Geodist{cs: append(b.get(), "GEODIST"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Geodist() SGeodist {
	return SGeodist{cs: append(b.get(), "GEODIST"), ks: InitSlot, cf: readonly}
}

func (c Geodist) Key(key string) GeodistKey {
	c.cs = append(c.cs, key)
	return (GeodistKey)(c)
}

func (c SGeodist) Key(key string) SGeodistKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeodistKey)(c)
}

type GeodistKey Completed

type SGeodistKey SCompleted

func (c GeodistKey) Member1(member1 string) GeodistMember1 {
	c.cs = append(c.cs, member1)
	return (GeodistMember1)(c)
}

func (c SGeodistKey) Member1(member1 string) SGeodistMember1 {
	c.cs = append(c.cs, member1)
	return (SGeodistMember1)(c)
}

type GeodistMember1 Completed

type SGeodistMember1 SCompleted

func (c GeodistMember1) Member2(member2 string) GeodistMember2 {
	c.cs = append(c.cs, member2)
	return (GeodistMember2)(c)
}

func (c SGeodistMember1) Member2(member2 string) SGeodistMember2 {
	c.cs = append(c.cs, member2)
	return (SGeodistMember2)(c)
}

type GeodistMember2 Completed

type SGeodistMember2 SCompleted

func (c GeodistMember2) M() GeodistUnitM {
	c.cs = append(c.cs, "m")
	return (GeodistUnitM)(c)
}

func (c SGeodistMember2) M() SGeodistUnitM {
	c.cs = append(c.cs, "m")
	return (SGeodistUnitM)(c)
}

func (c GeodistMember2) Km() GeodistUnitKm {
	c.cs = append(c.cs, "km")
	return (GeodistUnitKm)(c)
}

func (c SGeodistMember2) Km() SGeodistUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeodistUnitKm)(c)
}

func (c GeodistMember2) Ft() GeodistUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeodistUnitFt)(c)
}

func (c SGeodistMember2) Ft() SGeodistUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeodistUnitFt)(c)
}

func (c GeodistMember2) Mi() GeodistUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeodistUnitMi)(c)
}

func (c SGeodistMember2) Mi() SGeodistUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeodistUnitMi)(c)
}

func (c GeodistMember2) Build() Completed {
	return Completed(c)
}

func (c SGeodistMember2) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistMember2) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistMember2) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitFt Completed

type SGeodistUnitFt SCompleted

func (c GeodistUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitKm Completed

type SGeodistUnitKm SCompleted

func (c GeodistUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitM Completed

type SGeodistUnitM SCompleted

func (c GeodistUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitMi Completed

type SGeodistUnitMi SCompleted

func (c GeodistUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type Geohash Completed

type SGeohash SCompleted

func (b *Builder) Geohash() Geohash {
	return Geohash{cs: append(b.get(), "GEOHASH"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Geohash() SGeohash {
	return SGeohash{cs: append(b.get(), "GEOHASH"), ks: InitSlot, cf: readonly}
}

func (c Geohash) Key(key string) GeohashKey {
	c.cs = append(c.cs, key)
	return (GeohashKey)(c)
}

func (c SGeohash) Key(key string) SGeohashKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeohashKey)(c)
}

type GeohashKey Completed

type SGeohashKey SCompleted

func (c GeohashKey) Member(member ...string) GeohashMember {
	c.cs = append(c.cs, member...)
	return (GeohashMember)(c)
}

func (c SGeohashKey) Member(member ...string) SGeohashMember {
	c.cs = append(c.cs, member...)
	return (SGeohashMember)(c)
}

type GeohashMember Completed

type SGeohashMember SCompleted

func (c GeohashMember) Member(member ...string) GeohashMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SGeohashMember) Member(member ...string) SGeohashMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c GeohashMember) Build() Completed {
	return Completed(c)
}

func (c SGeohashMember) Build() SCompleted {
	return SCompleted(c)
}

func (c GeohashMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeohashMember) Cache() SCacheable {
	return SCacheable(c)
}

type Geopos Completed

type SGeopos SCompleted

func (b *Builder) Geopos() Geopos {
	return Geopos{cs: append(b.get(), "GEOPOS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Geopos() SGeopos {
	return SGeopos{cs: append(b.get(), "GEOPOS"), ks: InitSlot, cf: readonly}
}

func (c Geopos) Key(key string) GeoposKey {
	c.cs = append(c.cs, key)
	return (GeoposKey)(c)
}

func (c SGeopos) Key(key string) SGeoposKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeoposKey)(c)
}

type GeoposKey Completed

type SGeoposKey SCompleted

func (c GeoposKey) Member(member ...string) GeoposMember {
	c.cs = append(c.cs, member...)
	return (GeoposMember)(c)
}

func (c SGeoposKey) Member(member ...string) SGeoposMember {
	c.cs = append(c.cs, member...)
	return (SGeoposMember)(c)
}

type GeoposMember Completed

type SGeoposMember SCompleted

func (c GeoposMember) Member(member ...string) GeoposMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SGeoposMember) Member(member ...string) SGeoposMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c GeoposMember) Build() Completed {
	return Completed(c)
}

func (c SGeoposMember) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoposMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoposMember) Cache() SCacheable {
	return SCacheable(c)
}

type Georadius Completed

type SGeoradius SCompleted

func (b *Builder) Georadius() Georadius {
	return Georadius{cs: append(b.get(), "GEORADIUS"), ks: InitSlot}
}

func (b *SBuilder) Georadius() SGeoradius {
	return SGeoradius{cs: append(b.get(), "GEORADIUS"), ks: InitSlot}
}

func (c Georadius) Key(key string) GeoradiusKey {
	c.cs = append(c.cs, key)
	return (GeoradiusKey)(c)
}

func (c SGeoradius) Key(key string) SGeoradiusKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeoradiusKey)(c)
}

type GeoradiusCountAny Completed

type SGeoradiusCountAny SCompleted

func (c GeoradiusCountAny) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusCountAny) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusCountAny) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusCountAny) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusCountAny) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusCountAny) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusCountAny) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusCountAny) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusCountAny) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusCountCount Completed

type SGeoradiusCountCount SCompleted

func (c GeoradiusCountCount) Any() GeoradiusCountAny {
	c.cs = append(c.cs, "ANY")
	return (GeoradiusCountAny)(c)
}

func (c SGeoradiusCountCount) Any() SGeoradiusCountAny {
	c.cs = append(c.cs, "ANY")
	return (SGeoradiusCountAny)(c)
}

func (c GeoradiusCountCount) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusCountCount) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusCountCount) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusCountCount) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusCountCount) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusCountCount) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusCountCount) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusCountCount) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusCountCount) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusKey Completed

type SGeoradiusKey SCompleted

func (c GeoradiusKey) Longitude(longitude float64) GeoradiusLongitude {
	c.cs = append(c.cs, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (GeoradiusLongitude)(c)
}

func (c SGeoradiusKey) Longitude(longitude float64) SGeoradiusLongitude {
	c.cs = append(c.cs, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (SGeoradiusLongitude)(c)
}

type GeoradiusLatitude Completed

type SGeoradiusLatitude SCompleted

func (c GeoradiusLatitude) Radius(radius float64) GeoradiusRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusRadius)(c)
}

func (c SGeoradiusLatitude) Radius(radius float64) SGeoradiusRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusRadius)(c)
}

type GeoradiusLongitude Completed

type SGeoradiusLongitude SCompleted

func (c GeoradiusLongitude) Latitude(latitude float64) GeoradiusLatitude {
	c.cs = append(c.cs, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeoradiusLatitude)(c)
}

func (c SGeoradiusLongitude) Latitude(latitude float64) SGeoradiusLatitude {
	c.cs = append(c.cs, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeoradiusLatitude)(c)
}

type GeoradiusOrderAsc Completed

type SGeoradiusOrderAsc SCompleted

func (c GeoradiusOrderAsc) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusOrderAsc) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusOrderAsc) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusOrderAsc) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusOrderDesc Completed

type SGeoradiusOrderDesc SCompleted

func (c GeoradiusOrderDesc) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusOrderDesc) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusOrderDesc) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusOrderDesc) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusRadius Completed

type SGeoradiusRadius SCompleted

func (c GeoradiusRadius) M() GeoradiusUnitM {
	c.cs = append(c.cs, "m")
	return (GeoradiusUnitM)(c)
}

func (c SGeoradiusRadius) M() SGeoradiusUnitM {
	c.cs = append(c.cs, "m")
	return (SGeoradiusUnitM)(c)
}

func (c GeoradiusRadius) Km() GeoradiusUnitKm {
	c.cs = append(c.cs, "km")
	return (GeoradiusUnitKm)(c)
}

func (c SGeoradiusRadius) Km() SGeoradiusUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeoradiusUnitKm)(c)
}

func (c GeoradiusRadius) Ft() GeoradiusUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeoradiusUnitFt)(c)
}

func (c SGeoradiusRadius) Ft() SGeoradiusUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeoradiusUnitFt)(c)
}

func (c GeoradiusRadius) Mi() GeoradiusUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeoradiusUnitMi)(c)
}

func (c SGeoradiusRadius) Mi() SGeoradiusUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeoradiusUnitMi)(c)
}

type GeoradiusRo Completed

type SGeoradiusRo SCompleted

func (b *Builder) GeoradiusRo() GeoradiusRo {
	return GeoradiusRo{cs: append(b.get(), "GEORADIUS_RO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) GeoradiusRo() SGeoradiusRo {
	return SGeoradiusRo{cs: append(b.get(), "GEORADIUS_RO"), ks: InitSlot, cf: readonly}
}

func (c GeoradiusRo) Key(key string) GeoradiusRoKey {
	c.cs = append(c.cs, key)
	return (GeoradiusRoKey)(c)
}

func (c SGeoradiusRo) Key(key string) SGeoradiusRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeoradiusRoKey)(c)
}

type GeoradiusRoCountAny Completed

type SGeoradiusRoCountAny SCompleted

func (c GeoradiusRoCountAny) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoCountAny) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoCountAny) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoCountAny) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoCountAny) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoCountAny) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoCountAny) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoCountAny) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoCountAny) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoCountCount Completed

type SGeoradiusRoCountCount SCompleted

func (c GeoradiusRoCountCount) Any() GeoradiusRoCountAny {
	c.cs = append(c.cs, "ANY")
	return (GeoradiusRoCountAny)(c)
}

func (c SGeoradiusRoCountCount) Any() SGeoradiusRoCountAny {
	c.cs = append(c.cs, "ANY")
	return (SGeoradiusRoCountAny)(c)
}

func (c GeoradiusRoCountCount) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoCountCount) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoCountCount) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoCountCount) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoCountCount) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoCountCount) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoCountCount) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoCountCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoCountCount) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoKey Completed

type SGeoradiusRoKey SCompleted

func (c GeoradiusRoKey) Longitude(longitude float64) GeoradiusRoLongitude {
	c.cs = append(c.cs, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (GeoradiusRoLongitude)(c)
}

func (c SGeoradiusRoKey) Longitude(longitude float64) SGeoradiusRoLongitude {
	c.cs = append(c.cs, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (SGeoradiusRoLongitude)(c)
}

type GeoradiusRoLatitude Completed

type SGeoradiusRoLatitude SCompleted

func (c GeoradiusRoLatitude) Radius(radius float64) GeoradiusRoRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusRoRadius)(c)
}

func (c SGeoradiusRoLatitude) Radius(radius float64) SGeoradiusRoRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusRoRadius)(c)
}

type GeoradiusRoLongitude Completed

type SGeoradiusRoLongitude SCompleted

func (c GeoradiusRoLongitude) Latitude(latitude float64) GeoradiusRoLatitude {
	c.cs = append(c.cs, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeoradiusRoLatitude)(c)
}

func (c SGeoradiusRoLongitude) Latitude(latitude float64) SGeoradiusRoLatitude {
	c.cs = append(c.cs, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeoradiusRoLatitude)(c)
}

type GeoradiusRoOrderAsc Completed

type SGeoradiusRoOrderAsc SCompleted

func (c GeoradiusRoOrderAsc) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoOrderAsc) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoOrderDesc Completed

type SGeoradiusRoOrderDesc SCompleted

func (c GeoradiusRoOrderDesc) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoOrderDesc) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoRadius Completed

type SGeoradiusRoRadius SCompleted

func (c GeoradiusRoRadius) M() GeoradiusRoUnitM {
	c.cs = append(c.cs, "m")
	return (GeoradiusRoUnitM)(c)
}

func (c SGeoradiusRoRadius) M() SGeoradiusRoUnitM {
	c.cs = append(c.cs, "m")
	return (SGeoradiusRoUnitM)(c)
}

func (c GeoradiusRoRadius) Km() GeoradiusRoUnitKm {
	c.cs = append(c.cs, "km")
	return (GeoradiusRoUnitKm)(c)
}

func (c SGeoradiusRoRadius) Km() SGeoradiusRoUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeoradiusRoUnitKm)(c)
}

func (c GeoradiusRoRadius) Ft() GeoradiusRoUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeoradiusRoUnitFt)(c)
}

func (c SGeoradiusRoRadius) Ft() SGeoradiusRoUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeoradiusRoUnitFt)(c)
}

func (c GeoradiusRoRadius) Mi() GeoradiusRoUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeoradiusRoUnitMi)(c)
}

func (c SGeoradiusRoRadius) Mi() SGeoradiusRoUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeoradiusRoUnitMi)(c)
}

type GeoradiusRoStoredist Completed

type SGeoradiusRoStoredist SCompleted

func (c GeoradiusRoStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoStoredist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoStoredist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoStoredist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitFt Completed

type SGeoradiusRoUnitFt SCompleted

func (c GeoradiusRoUnitFt) Withcoord() GeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitFt) Withcoord() SGeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitFt) Withdist() GeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitFt) Withdist() SGeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitFt) Withhash() GeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitFt) Withhash() SGeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitFt) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitFt) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitFt) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitFt) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitFt) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitFt) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitFt) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitFt) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitKm Completed

type SGeoradiusRoUnitKm SCompleted

func (c GeoradiusRoUnitKm) Withcoord() GeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitKm) Withcoord() SGeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitKm) Withdist() GeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitKm) Withdist() SGeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitKm) Withhash() GeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitKm) Withhash() SGeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitKm) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitKm) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitKm) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitKm) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitKm) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitKm) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitKm) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitKm) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitM Completed

type SGeoradiusRoUnitM SCompleted

func (c GeoradiusRoUnitM) Withcoord() GeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitM) Withcoord() SGeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitM) Withdist() GeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitM) Withdist() SGeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitM) Withhash() GeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitM) Withhash() SGeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitM) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitM) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitM) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitM) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitM) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitM) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitM) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitM) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitMi Completed

type SGeoradiusRoUnitMi SCompleted

func (c GeoradiusRoUnitMi) Withcoord() GeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitMi) Withcoord() SGeoradiusRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitMi) Withdist() GeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitMi) Withdist() SGeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitMi) Withhash() GeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitMi) Withhash() SGeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitMi) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitMi) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitMi) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitMi) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitMi) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitMi) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitMi) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitMi) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoWithcoord Completed

type SGeoradiusRoWithcoord SCompleted

func (c GeoradiusRoWithcoord) Withdist() GeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoWithcoord) Withdist() SGeoradiusRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoWithcoord) Withhash() GeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoWithcoord) Withhash() SGeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoWithcoord) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoWithcoord) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoWithcoord) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoWithcoord) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoWithcoord) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoWithcoord) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoWithcoord) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoWithcoord) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoWithcoord) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoWithcoord) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoWithcoord) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoWithdist Completed

type SGeoradiusRoWithdist SCompleted

func (c GeoradiusRoWithdist) Withhash() GeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoWithdist) Withhash() SGeoradiusRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoWithdist) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoWithdist) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoWithdist) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoWithdist) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoWithdist) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoWithdist) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoWithdist) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoWithdist) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoWithdist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoWithdist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoWithdist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoWithhash Completed

type SGeoradiusRoWithhash SCompleted

func (c GeoradiusRoWithhash) Count(count int64) GeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoWithhash) Count(count int64) SGeoradiusRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoWithhash) Asc() GeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoWithhash) Asc() SGeoradiusRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoWithhash) Desc() GeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoWithhash) Desc() SGeoradiusRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoWithhash) Storedist(key string) GeoradiusRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoWithhash) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoWithhash) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoWithhash) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoWithhash) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusStore Completed

type SGeoradiusStore SCompleted

func (c GeoradiusStore) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusStore) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusStore) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusStore) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusStoredist Completed

type SGeoradiusStoredist SCompleted

func (c GeoradiusStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusStoredist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitFt Completed

type SGeoradiusUnitFt SCompleted

func (c GeoradiusUnitFt) Withcoord() GeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitFt) Withcoord() SGeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitFt) Withdist() GeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitFt) Withdist() SGeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitFt) Withhash() GeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitFt) Withhash() SGeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitFt) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitFt) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitFt) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitFt) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitFt) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitFt) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitFt) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitFt) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitFt) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitFt) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitKm Completed

type SGeoradiusUnitKm SCompleted

func (c GeoradiusUnitKm) Withcoord() GeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitKm) Withcoord() SGeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitKm) Withdist() GeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitKm) Withdist() SGeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitKm) Withhash() GeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitKm) Withhash() SGeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitKm) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitKm) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitKm) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitKm) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitKm) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitKm) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitKm) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitKm) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitKm) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitKm) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitM Completed

type SGeoradiusUnitM SCompleted

func (c GeoradiusUnitM) Withcoord() GeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitM) Withcoord() SGeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitM) Withdist() GeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitM) Withdist() SGeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitM) Withhash() GeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitM) Withhash() SGeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitM) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitM) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitM) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitM) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitM) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitM) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitM) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitM) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitM) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitM) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitMi Completed

type SGeoradiusUnitMi SCompleted

func (c GeoradiusUnitMi) Withcoord() GeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitMi) Withcoord() SGeoradiusWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitMi) Withdist() GeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitMi) Withdist() SGeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitMi) Withhash() GeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitMi) Withhash() SGeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitMi) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitMi) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitMi) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitMi) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitMi) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitMi) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitMi) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitMi) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitMi) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitMi) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusWithcoord Completed

type SGeoradiusWithcoord SCompleted

func (c GeoradiusWithcoord) Withdist() GeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusWithcoord) Withdist() SGeoradiusWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusWithcoord) Withhash() GeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusWithcoord) Withhash() SGeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusWithcoord) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusWithcoord) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusWithcoord) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusWithcoord) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusWithcoord) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusWithcoord) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusWithcoord) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusWithcoord) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusWithcoord) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusWithcoord) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusWithcoord) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusWithdist Completed

type SGeoradiusWithdist SCompleted

func (c GeoradiusWithdist) Withhash() GeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusWithdist) Withhash() SGeoradiusWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusWithdist) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusWithdist) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusWithdist) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusWithdist) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusWithdist) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusWithdist) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusWithdist) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusWithdist) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusWithdist) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusWithdist) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusWithdist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusWithhash Completed

type SGeoradiusWithhash SCompleted

func (c GeoradiusWithhash) Count(count int64) GeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusWithhash) Count(count int64) SGeoradiusCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusWithhash) Asc() GeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusWithhash) Asc() SGeoradiusOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusWithhash) Desc() GeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusWithhash) Desc() SGeoradiusOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusWithhash) Store(key string) GeoradiusStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusWithhash) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusWithhash) Storedist(key string) GeoradiusStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusWithhash) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusWithhash) Build() SCompleted {
	return SCompleted(c)
}

type Georadiusbymember Completed

type SGeoradiusbymember SCompleted

func (b *Builder) Georadiusbymember() Georadiusbymember {
	return Georadiusbymember{cs: append(b.get(), "GEORADIUSBYMEMBER"), ks: InitSlot}
}

func (b *SBuilder) Georadiusbymember() SGeoradiusbymember {
	return SGeoradiusbymember{cs: append(b.get(), "GEORADIUSBYMEMBER"), ks: InitSlot}
}

func (c Georadiusbymember) Key(key string) GeoradiusbymemberKey {
	c.cs = append(c.cs, key)
	return (GeoradiusbymemberKey)(c)
}

func (c SGeoradiusbymember) Key(key string) SGeoradiusbymemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeoradiusbymemberKey)(c)
}

type GeoradiusbymemberCountAny Completed

type SGeoradiusbymemberCountAny SCompleted

func (c GeoradiusbymemberCountAny) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberCountAny) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberCountAny) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberCountAny) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberCountAny) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberCountAny) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberCountAny) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberCountAny) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberCountAny) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberCountCount Completed

type SGeoradiusbymemberCountCount SCompleted

func (c GeoradiusbymemberCountCount) Any() GeoradiusbymemberCountAny {
	c.cs = append(c.cs, "ANY")
	return (GeoradiusbymemberCountAny)(c)
}

func (c SGeoradiusbymemberCountCount) Any() SGeoradiusbymemberCountAny {
	c.cs = append(c.cs, "ANY")
	return (SGeoradiusbymemberCountAny)(c)
}

func (c GeoradiusbymemberCountCount) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberCountCount) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberCountCount) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberCountCount) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberCountCount) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberCountCount) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberCountCount) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberCountCount) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberCountCount) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberKey Completed

type SGeoradiusbymemberKey SCompleted

func (c GeoradiusbymemberKey) Member(member string) GeoradiusbymemberMember {
	c.cs = append(c.cs, member)
	return (GeoradiusbymemberMember)(c)
}

func (c SGeoradiusbymemberKey) Member(member string) SGeoradiusbymemberMember {
	c.cs = append(c.cs, member)
	return (SGeoradiusbymemberMember)(c)
}

type GeoradiusbymemberMember Completed

type SGeoradiusbymemberMember SCompleted

func (c GeoradiusbymemberMember) Radius(radius float64) GeoradiusbymemberRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusbymemberRadius)(c)
}

func (c SGeoradiusbymemberMember) Radius(radius float64) SGeoradiusbymemberRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusbymemberRadius)(c)
}

type GeoradiusbymemberOrderAsc Completed

type SGeoradiusbymemberOrderAsc SCompleted

func (c GeoradiusbymemberOrderAsc) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberOrderAsc) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberOrderAsc) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberOrderAsc) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberOrderDesc Completed

type SGeoradiusbymemberOrderDesc SCompleted

func (c GeoradiusbymemberOrderDesc) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberOrderDesc) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberOrderDesc) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberOrderDesc) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberRadius Completed

type SGeoradiusbymemberRadius SCompleted

func (c GeoradiusbymemberRadius) M() GeoradiusbymemberUnitM {
	c.cs = append(c.cs, "m")
	return (GeoradiusbymemberUnitM)(c)
}

func (c SGeoradiusbymemberRadius) M() SGeoradiusbymemberUnitM {
	c.cs = append(c.cs, "m")
	return (SGeoradiusbymemberUnitM)(c)
}

func (c GeoradiusbymemberRadius) Km() GeoradiusbymemberUnitKm {
	c.cs = append(c.cs, "km")
	return (GeoradiusbymemberUnitKm)(c)
}

func (c SGeoradiusbymemberRadius) Km() SGeoradiusbymemberUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeoradiusbymemberUnitKm)(c)
}

func (c GeoradiusbymemberRadius) Ft() GeoradiusbymemberUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeoradiusbymemberUnitFt)(c)
}

func (c SGeoradiusbymemberRadius) Ft() SGeoradiusbymemberUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeoradiusbymemberUnitFt)(c)
}

func (c GeoradiusbymemberRadius) Mi() GeoradiusbymemberUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeoradiusbymemberUnitMi)(c)
}

func (c SGeoradiusbymemberRadius) Mi() SGeoradiusbymemberUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeoradiusbymemberUnitMi)(c)
}

type GeoradiusbymemberRo Completed

type SGeoradiusbymemberRo SCompleted

func (b *Builder) GeoradiusbymemberRo() GeoradiusbymemberRo {
	return GeoradiusbymemberRo{cs: append(b.get(), "GEORADIUSBYMEMBER_RO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) GeoradiusbymemberRo() SGeoradiusbymemberRo {
	return SGeoradiusbymemberRo{cs: append(b.get(), "GEORADIUSBYMEMBER_RO"), ks: InitSlot, cf: readonly}
}

func (c GeoradiusbymemberRo) Key(key string) GeoradiusbymemberRoKey {
	c.cs = append(c.cs, key)
	return (GeoradiusbymemberRoKey)(c)
}

func (c SGeoradiusbymemberRo) Key(key string) SGeoradiusbymemberRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeoradiusbymemberRoKey)(c)
}

type GeoradiusbymemberRoCountAny Completed

type SGeoradiusbymemberRoCountAny SCompleted

func (c GeoradiusbymemberRoCountAny) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoCountAny) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoCountAny) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoCountAny) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoCountAny) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoCountAny) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoCountAny) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoCountAny) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoCountAny) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoCountCount Completed

type SGeoradiusbymemberRoCountCount SCompleted

func (c GeoradiusbymemberRoCountCount) Any() GeoradiusbymemberRoCountAny {
	c.cs = append(c.cs, "ANY")
	return (GeoradiusbymemberRoCountAny)(c)
}

func (c SGeoradiusbymemberRoCountCount) Any() SGeoradiusbymemberRoCountAny {
	c.cs = append(c.cs, "ANY")
	return (SGeoradiusbymemberRoCountAny)(c)
}

func (c GeoradiusbymemberRoCountCount) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoCountCount) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoCountCount) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoCountCount) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoCountCount) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoCountCount) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoCountCount) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoCountCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoCountCount) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoKey Completed

type SGeoradiusbymemberRoKey SCompleted

func (c GeoradiusbymemberRoKey) Member(member string) GeoradiusbymemberRoMember {
	c.cs = append(c.cs, member)
	return (GeoradiusbymemberRoMember)(c)
}

func (c SGeoradiusbymemberRoKey) Member(member string) SGeoradiusbymemberRoMember {
	c.cs = append(c.cs, member)
	return (SGeoradiusbymemberRoMember)(c)
}

type GeoradiusbymemberRoMember Completed

type SGeoradiusbymemberRoMember SCompleted

func (c GeoradiusbymemberRoMember) Radius(radius float64) GeoradiusbymemberRoRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusbymemberRoRadius)(c)
}

func (c SGeoradiusbymemberRoMember) Radius(radius float64) SGeoradiusbymemberRoRadius {
	c.cs = append(c.cs, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusbymemberRoRadius)(c)
}

type GeoradiusbymemberRoOrderAsc Completed

type SGeoradiusbymemberRoOrderAsc SCompleted

func (c GeoradiusbymemberRoOrderAsc) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoOrderAsc) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoOrderDesc Completed

type SGeoradiusbymemberRoOrderDesc SCompleted

func (c GeoradiusbymemberRoOrderDesc) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoOrderDesc) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoRadius Completed

type SGeoradiusbymemberRoRadius SCompleted

func (c GeoradiusbymemberRoRadius) M() GeoradiusbymemberRoUnitM {
	c.cs = append(c.cs, "m")
	return (GeoradiusbymemberRoUnitM)(c)
}

func (c SGeoradiusbymemberRoRadius) M() SGeoradiusbymemberRoUnitM {
	c.cs = append(c.cs, "m")
	return (SGeoradiusbymemberRoUnitM)(c)
}

func (c GeoradiusbymemberRoRadius) Km() GeoradiusbymemberRoUnitKm {
	c.cs = append(c.cs, "km")
	return (GeoradiusbymemberRoUnitKm)(c)
}

func (c SGeoradiusbymemberRoRadius) Km() SGeoradiusbymemberRoUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeoradiusbymemberRoUnitKm)(c)
}

func (c GeoradiusbymemberRoRadius) Ft() GeoradiusbymemberRoUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeoradiusbymemberRoUnitFt)(c)
}

func (c SGeoradiusbymemberRoRadius) Ft() SGeoradiusbymemberRoUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeoradiusbymemberRoUnitFt)(c)
}

func (c GeoradiusbymemberRoRadius) Mi() GeoradiusbymemberRoUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeoradiusbymemberRoUnitMi)(c)
}

func (c SGeoradiusbymemberRoRadius) Mi() SGeoradiusbymemberRoUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeoradiusbymemberRoUnitMi)(c)
}

type GeoradiusbymemberRoStoredist Completed

type SGeoradiusbymemberRoStoredist SCompleted

func (c GeoradiusbymemberRoStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoStoredist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoStoredist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoStoredist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitFt Completed

type SGeoradiusbymemberRoUnitFt SCompleted

func (c GeoradiusbymemberRoUnitFt) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitFt) Withdist() GeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitFt) Withhash() GeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitFt) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitFt) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitFt) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitFt) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitKm Completed

type SGeoradiusbymemberRoUnitKm SCompleted

func (c GeoradiusbymemberRoUnitKm) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitKm) Withdist() GeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitKm) Withhash() GeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitKm) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitKm) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitKm) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitKm) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitM Completed

type SGeoradiusbymemberRoUnitM SCompleted

func (c GeoradiusbymemberRoUnitM) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitM) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitM) Withdist() GeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitM) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitM) Withhash() GeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitM) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitM) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitM) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitM) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitM) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitM) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitM) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitM) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitM) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitMi Completed

type SGeoradiusbymemberRoUnitMi SCompleted

func (c GeoradiusbymemberRoUnitMi) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitMi) Withdist() GeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitMi) Withhash() GeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitMi) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitMi) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitMi) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitMi) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoWithcoord Completed

type SGeoradiusbymemberRoWithcoord SCompleted

func (c GeoradiusbymemberRoWithcoord) Withdist() GeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoWithcoord) Withhash() GeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoWithcoord) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoWithcoord) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoWithcoord) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoWithcoord) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoWithcoord) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoWithcoord) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoWithcoord) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoWithdist Completed

type SGeoradiusbymemberRoWithdist SCompleted

func (c GeoradiusbymemberRoWithdist) Withhash() GeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoWithdist) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoWithdist) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoWithdist) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoWithdist) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoWithdist) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoWithdist) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoWithdist) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoWithdist) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoWithdist) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoWithdist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoWithdist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoWithdist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoWithhash Completed

type SGeoradiusbymemberRoWithhash SCompleted

func (c GeoradiusbymemberRoWithhash) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoWithhash) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoWithhash) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoWithhash) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoWithhash) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoWithhash) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoWithhash) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoWithhash) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoWithhash) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoWithhash) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoWithhash) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberStore Completed

type SGeoradiusbymemberStore SCompleted

func (c GeoradiusbymemberStore) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberStore) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberStore) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberStore) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberStoredist Completed

type SGeoradiusbymemberStoredist SCompleted

func (c GeoradiusbymemberStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberStoredist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitFt Completed

type SGeoradiusbymemberUnitFt SCompleted

func (c GeoradiusbymemberUnitFt) Withcoord() GeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitFt) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitFt) Withdist() GeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitFt) Withdist() SGeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitFt) Withhash() GeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitFt) Withhash() SGeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitFt) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitFt) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitFt) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitFt) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitFt) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitFt) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitFt) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitFt) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitFt) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitFt) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitKm Completed

type SGeoradiusbymemberUnitKm SCompleted

func (c GeoradiusbymemberUnitKm) Withcoord() GeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitKm) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitKm) Withdist() GeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitKm) Withdist() SGeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitKm) Withhash() GeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitKm) Withhash() SGeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitKm) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitKm) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitKm) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitKm) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitKm) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitKm) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitKm) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitKm) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitKm) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitKm) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitM Completed

type SGeoradiusbymemberUnitM SCompleted

func (c GeoradiusbymemberUnitM) Withcoord() GeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitM) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitM) Withdist() GeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitM) Withdist() SGeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitM) Withhash() GeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitM) Withhash() SGeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitM) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitM) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitM) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitM) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitM) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitM) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitM) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitM) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitM) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitM) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitMi Completed

type SGeoradiusbymemberUnitMi SCompleted

func (c GeoradiusbymemberUnitMi) Withcoord() GeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitMi) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitMi) Withdist() GeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitMi) Withdist() SGeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitMi) Withhash() GeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitMi) Withhash() SGeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitMi) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitMi) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitMi) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitMi) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitMi) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitMi) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitMi) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitMi) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitMi) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitMi) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberWithcoord Completed

type SGeoradiusbymemberWithcoord SCompleted

func (c GeoradiusbymemberWithcoord) Withdist() GeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberWithcoord) Withdist() SGeoradiusbymemberWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberWithcoord) Withhash() GeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberWithcoord) Withhash() SGeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberWithcoord) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberWithcoord) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberWithcoord) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberWithcoord) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberWithcoord) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberWithcoord) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberWithcoord) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberWithcoord) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberWithcoord) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberWithcoord) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberWithcoord) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberWithdist Completed

type SGeoradiusbymemberWithdist SCompleted

func (c GeoradiusbymemberWithdist) Withhash() GeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberWithdist) Withhash() SGeoradiusbymemberWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberWithdist) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberWithdist) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberWithdist) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberWithdist) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberWithdist) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberWithdist) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberWithdist) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberWithdist) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberWithdist) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberWithdist) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberWithdist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberWithhash Completed

type SGeoradiusbymemberWithhash SCompleted

func (c GeoradiusbymemberWithhash) Count(count int64) GeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberWithhash) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberWithhash) Asc() GeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberWithhash) Asc() SGeoradiusbymemberOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberWithhash) Desc() GeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberWithhash) Desc() SGeoradiusbymemberOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberWithhash) Store(key string) GeoradiusbymemberStore {
	c.cs = append(c.cs, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberWithhash) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberWithhash) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs = append(c.cs, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberWithhash) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberWithhash) Build() SCompleted {
	return SCompleted(c)
}

type Geosearch Completed

type SGeosearch SCompleted

func (b *Builder) Geosearch() Geosearch {
	return Geosearch{cs: append(b.get(), "GEOSEARCH"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Geosearch() SGeosearch {
	return SGeosearch{cs: append(b.get(), "GEOSEARCH"), ks: InitSlot, cf: readonly}
}

func (c Geosearch) Key(key string) GeosearchKey {
	c.cs = append(c.cs, key)
	return (GeosearchKey)(c)
}

func (c SGeosearch) Key(key string) SGeosearchKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGeosearchKey)(c)
}

type GeosearchBoxBybox Completed

type SGeosearchBoxBybox SCompleted

func (c GeosearchBoxBybox) Height(height float64) GeosearchBoxHeight {
	c.cs = append(c.cs, strconv.FormatFloat(height, 'f', -1, 64))
	return (GeosearchBoxHeight)(c)
}

func (c SGeosearchBoxBybox) Height(height float64) SGeosearchBoxHeight {
	c.cs = append(c.cs, strconv.FormatFloat(height, 'f', -1, 64))
	return (SGeosearchBoxHeight)(c)
}

type GeosearchBoxHeight Completed

type SGeosearchBoxHeight SCompleted

func (c GeosearchBoxHeight) M() GeosearchBoxUnitM {
	c.cs = append(c.cs, "m")
	return (GeosearchBoxUnitM)(c)
}

func (c SGeosearchBoxHeight) M() SGeosearchBoxUnitM {
	c.cs = append(c.cs, "m")
	return (SGeosearchBoxUnitM)(c)
}

func (c GeosearchBoxHeight) Km() GeosearchBoxUnitKm {
	c.cs = append(c.cs, "km")
	return (GeosearchBoxUnitKm)(c)
}

func (c SGeosearchBoxHeight) Km() SGeosearchBoxUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeosearchBoxUnitKm)(c)
}

func (c GeosearchBoxHeight) Ft() GeosearchBoxUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeosearchBoxUnitFt)(c)
}

func (c SGeosearchBoxHeight) Ft() SGeosearchBoxUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeosearchBoxUnitFt)(c)
}

func (c GeosearchBoxHeight) Mi() GeosearchBoxUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeosearchBoxUnitMi)(c)
}

func (c SGeosearchBoxHeight) Mi() SGeosearchBoxUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeosearchBoxUnitMi)(c)
}

type GeosearchBoxUnitFt Completed

type SGeosearchBoxUnitFt SCompleted

func (c GeosearchBoxUnitFt) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitFt) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitFt) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitFt) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitFt) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitFt) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitFt) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitFt) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitFt) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitFt) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitFt) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitFt) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchBoxUnitKm Completed

type SGeosearchBoxUnitKm SCompleted

func (c GeosearchBoxUnitKm) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitKm) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitKm) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitKm) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitKm) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitKm) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitKm) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitKm) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitKm) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitKm) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitKm) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitKm) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchBoxUnitM Completed

type SGeosearchBoxUnitM SCompleted

func (c GeosearchBoxUnitM) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitM) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitM) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitM) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitM) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitM) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitM) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitM) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitM) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitM) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitM) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitM) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchBoxUnitMi Completed

type SGeosearchBoxUnitMi SCompleted

func (c GeosearchBoxUnitMi) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitMi) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitMi) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitMi) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitMi) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitMi) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitMi) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitMi) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitMi) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitMi) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitMi) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitMi) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleByradius Completed

type SGeosearchCircleByradius SCompleted

func (c GeosearchCircleByradius) M() GeosearchCircleUnitM {
	c.cs = append(c.cs, "m")
	return (GeosearchCircleUnitM)(c)
}

func (c SGeosearchCircleByradius) M() SGeosearchCircleUnitM {
	c.cs = append(c.cs, "m")
	return (SGeosearchCircleUnitM)(c)
}

func (c GeosearchCircleByradius) Km() GeosearchCircleUnitKm {
	c.cs = append(c.cs, "km")
	return (GeosearchCircleUnitKm)(c)
}

func (c SGeosearchCircleByradius) Km() SGeosearchCircleUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeosearchCircleUnitKm)(c)
}

func (c GeosearchCircleByradius) Ft() GeosearchCircleUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeosearchCircleUnitFt)(c)
}

func (c SGeosearchCircleByradius) Ft() SGeosearchCircleUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeosearchCircleUnitFt)(c)
}

func (c GeosearchCircleByradius) Mi() GeosearchCircleUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeosearchCircleUnitMi)(c)
}

func (c SGeosearchCircleByradius) Mi() SGeosearchCircleUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeosearchCircleUnitMi)(c)
}

type GeosearchCircleUnitFt Completed

type SGeosearchCircleUnitFt SCompleted

func (c GeosearchCircleUnitFt) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitFt) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitFt) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitFt) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitFt) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitFt) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitFt) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitFt) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitFt) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitFt) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitFt) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitFt) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitFt) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitFt) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleUnitKm Completed

type SGeosearchCircleUnitKm SCompleted

func (c GeosearchCircleUnitKm) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitKm) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitKm) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitKm) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitKm) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitKm) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitKm) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitKm) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitKm) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitKm) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitKm) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitKm) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitKm) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitKm) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleUnitM Completed

type SGeosearchCircleUnitM SCompleted

func (c GeosearchCircleUnitM) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitM) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitM) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitM) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitM) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitM) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitM) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitM) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitM) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitM) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitM) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitM) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitM) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitM) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleUnitMi Completed

type SGeosearchCircleUnitMi SCompleted

func (c GeosearchCircleUnitMi) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitMi) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitMi) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitMi) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitMi) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitMi) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitMi) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitMi) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitMi) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitMi) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitMi) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitMi) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitMi) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitMi) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCountAny Completed

type SGeosearchCountAny SCompleted

func (c GeosearchCountAny) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCountAny) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCountAny) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCountAny) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCountAny) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCountAny) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCountAny) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCountAny) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCountAny) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCountCount Completed

type SGeosearchCountCount SCompleted

func (c GeosearchCountCount) Any() GeosearchCountAny {
	c.cs = append(c.cs, "ANY")
	return (GeosearchCountAny)(c)
}

func (c SGeosearchCountCount) Any() SGeosearchCountAny {
	c.cs = append(c.cs, "ANY")
	return (SGeosearchCountAny)(c)
}

func (c GeosearchCountCount) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCountCount) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCountCount) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCountCount) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCountCount) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCountCount) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCountCount) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCountCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCountCount) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchFromlonlat Completed

type SGeosearchFromlonlat SCompleted

func (c GeosearchFromlonlat) Byradius(radius float64) GeosearchCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchCircleByradius)(c)
}

func (c SGeosearchFromlonlat) Byradius(radius float64) SGeosearchCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchCircleByradius)(c)
}

func (c GeosearchFromlonlat) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchFromlonlat) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchFromlonlat) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchFromlonlat) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchFromlonlat) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchFromlonlat) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchFromlonlat) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchFromlonlat) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchFromlonlat) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchFromlonlat) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchFromlonlat) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchFromlonlat) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchFromlonlat) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchFromlonlat) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchFromlonlat) Build() Completed {
	return Completed(c)
}

func (c SGeosearchFromlonlat) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchFromlonlat) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchFromlonlat) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchFrommember Completed

type SGeosearchFrommember SCompleted

func (c GeosearchFrommember) Fromlonlat(longitude float64, latitude float64) GeosearchFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchFromlonlat)(c)
}

func (c SGeosearchFrommember) Fromlonlat(longitude float64, latitude float64) SGeosearchFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchFromlonlat)(c)
}

func (c GeosearchFrommember) Byradius(radius float64) GeosearchCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchCircleByradius)(c)
}

func (c SGeosearchFrommember) Byradius(radius float64) SGeosearchCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchCircleByradius)(c)
}

func (c GeosearchFrommember) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchFrommember) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchFrommember) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchFrommember) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchFrommember) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchFrommember) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchFrommember) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchFrommember) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchFrommember) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchFrommember) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchFrommember) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchFrommember) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchFrommember) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchFrommember) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchFrommember) Build() Completed {
	return Completed(c)
}

func (c SGeosearchFrommember) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchFrommember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchFrommember) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchKey Completed

type SGeosearchKey SCompleted

func (c GeosearchKey) Frommember(member string) GeosearchFrommember {
	c.cs = append(c.cs, "FROMMEMBER", member)
	return (GeosearchFrommember)(c)
}

func (c SGeosearchKey) Frommember(member string) SGeosearchFrommember {
	c.cs = append(c.cs, "FROMMEMBER", member)
	return (SGeosearchFrommember)(c)
}

func (c GeosearchKey) Fromlonlat(longitude float64, latitude float64) GeosearchFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchFromlonlat)(c)
}

func (c SGeosearchKey) Fromlonlat(longitude float64, latitude float64) SGeosearchFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchFromlonlat)(c)
}

func (c GeosearchKey) Byradius(radius float64) GeosearchCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchCircleByradius)(c)
}

func (c SGeosearchKey) Byradius(radius float64) SGeosearchCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchCircleByradius)(c)
}

func (c GeosearchKey) Bybox(width float64) GeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchKey) Bybox(width float64) SGeosearchBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchKey) Asc() GeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchKey) Asc() SGeosearchOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchKey) Desc() GeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchKey) Desc() SGeosearchOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchKey) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchKey) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchKey) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchKey) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchKey) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchKey) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchKey) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchKey) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchKey) Build() Completed {
	return Completed(c)
}

func (c SGeosearchKey) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchKey) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchOrderAsc Completed

type SGeosearchOrderAsc SCompleted

func (c GeosearchOrderAsc) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchOrderAsc) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchOrderAsc) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchOrderAsc) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchOrderAsc) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchOrderAsc) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchOrderAsc) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchOrderAsc) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchOrderDesc Completed

type SGeosearchOrderDesc SCompleted

func (c GeosearchOrderDesc) Count(count int64) GeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchOrderDesc) Count(count int64) SGeosearchCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchOrderDesc) Withcoord() GeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchOrderDesc) Withcoord() SGeosearchWithcoord {
	c.cs = append(c.cs, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchOrderDesc) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchOrderDesc) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchOrderDesc) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchOrderDesc) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchWithcoord Completed

type SGeosearchWithcoord SCompleted

func (c GeosearchWithcoord) Withdist() GeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchWithcoord) Withdist() SGeosearchWithdist {
	c.cs = append(c.cs, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchWithcoord) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchWithcoord) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeosearchWithcoord) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchWithcoord) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchWithcoord) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchWithdist Completed

type SGeosearchWithdist SCompleted

func (c GeosearchWithdist) Withhash() GeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchWithdist) Withhash() SGeosearchWithhash {
	c.cs = append(c.cs, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeosearchWithdist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchWithdist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchWithdist) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchWithhash Completed

type SGeosearchWithhash SCompleted

func (c GeosearchWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeosearchWithhash) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchWithhash) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchWithhash) Cache() SCacheable {
	return SCacheable(c)
}

type Geosearchstore Completed

type SGeosearchstore SCompleted

func (b *Builder) Geosearchstore() Geosearchstore {
	return Geosearchstore{cs: append(b.get(), "GEOSEARCHSTORE"), ks: InitSlot}
}

func (b *SBuilder) Geosearchstore() SGeosearchstore {
	return SGeosearchstore{cs: append(b.get(), "GEOSEARCHSTORE"), ks: InitSlot}
}

func (c Geosearchstore) Destination(destination string) GeosearchstoreDestination {
	c.cs = append(c.cs, destination)
	return (GeosearchstoreDestination)(c)
}

func (c SGeosearchstore) Destination(destination string) SGeosearchstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SGeosearchstoreDestination)(c)
}

type GeosearchstoreBoxBybox Completed

type SGeosearchstoreBoxBybox SCompleted

func (c GeosearchstoreBoxBybox) Height(height float64) GeosearchstoreBoxHeight {
	c.cs = append(c.cs, strconv.FormatFloat(height, 'f', -1, 64))
	return (GeosearchstoreBoxHeight)(c)
}

func (c SGeosearchstoreBoxBybox) Height(height float64) SGeosearchstoreBoxHeight {
	c.cs = append(c.cs, strconv.FormatFloat(height, 'f', -1, 64))
	return (SGeosearchstoreBoxHeight)(c)
}

type GeosearchstoreBoxHeight Completed

type SGeosearchstoreBoxHeight SCompleted

func (c GeosearchstoreBoxHeight) M() GeosearchstoreBoxUnitM {
	c.cs = append(c.cs, "m")
	return (GeosearchstoreBoxUnitM)(c)
}

func (c SGeosearchstoreBoxHeight) M() SGeosearchstoreBoxUnitM {
	c.cs = append(c.cs, "m")
	return (SGeosearchstoreBoxUnitM)(c)
}

func (c GeosearchstoreBoxHeight) Km() GeosearchstoreBoxUnitKm {
	c.cs = append(c.cs, "km")
	return (GeosearchstoreBoxUnitKm)(c)
}

func (c SGeosearchstoreBoxHeight) Km() SGeosearchstoreBoxUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeosearchstoreBoxUnitKm)(c)
}

func (c GeosearchstoreBoxHeight) Ft() GeosearchstoreBoxUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeosearchstoreBoxUnitFt)(c)
}

func (c SGeosearchstoreBoxHeight) Ft() SGeosearchstoreBoxUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeosearchstoreBoxUnitFt)(c)
}

func (c GeosearchstoreBoxHeight) Mi() GeosearchstoreBoxUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeosearchstoreBoxUnitMi)(c)
}

func (c SGeosearchstoreBoxHeight) Mi() SGeosearchstoreBoxUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeosearchstoreBoxUnitMi)(c)
}

type GeosearchstoreBoxUnitFt Completed

type SGeosearchstoreBoxUnitFt SCompleted

func (c GeosearchstoreBoxUnitFt) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitFt) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitFt) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitFt) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitFt) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitFt) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitFt) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitFt) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreBoxUnitKm Completed

type SGeosearchstoreBoxUnitKm SCompleted

func (c GeosearchstoreBoxUnitKm) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitKm) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitKm) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitKm) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitKm) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitKm) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitKm) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitKm) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreBoxUnitM Completed

type SGeosearchstoreBoxUnitM SCompleted

func (c GeosearchstoreBoxUnitM) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitM) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitM) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitM) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitM) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitM) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitM) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitM) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreBoxUnitMi Completed

type SGeosearchstoreBoxUnitMi SCompleted

func (c GeosearchstoreBoxUnitMi) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitMi) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitMi) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitMi) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitMi) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitMi) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitMi) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitMi) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleByradius Completed

type SGeosearchstoreCircleByradius SCompleted

func (c GeosearchstoreCircleByradius) M() GeosearchstoreCircleUnitM {
	c.cs = append(c.cs, "m")
	return (GeosearchstoreCircleUnitM)(c)
}

func (c SGeosearchstoreCircleByradius) M() SGeosearchstoreCircleUnitM {
	c.cs = append(c.cs, "m")
	return (SGeosearchstoreCircleUnitM)(c)
}

func (c GeosearchstoreCircleByradius) Km() GeosearchstoreCircleUnitKm {
	c.cs = append(c.cs, "km")
	return (GeosearchstoreCircleUnitKm)(c)
}

func (c SGeosearchstoreCircleByradius) Km() SGeosearchstoreCircleUnitKm {
	c.cs = append(c.cs, "km")
	return (SGeosearchstoreCircleUnitKm)(c)
}

func (c GeosearchstoreCircleByradius) Ft() GeosearchstoreCircleUnitFt {
	c.cs = append(c.cs, "ft")
	return (GeosearchstoreCircleUnitFt)(c)
}

func (c SGeosearchstoreCircleByradius) Ft() SGeosearchstoreCircleUnitFt {
	c.cs = append(c.cs, "ft")
	return (SGeosearchstoreCircleUnitFt)(c)
}

func (c GeosearchstoreCircleByradius) Mi() GeosearchstoreCircleUnitMi {
	c.cs = append(c.cs, "mi")
	return (GeosearchstoreCircleUnitMi)(c)
}

func (c SGeosearchstoreCircleByradius) Mi() SGeosearchstoreCircleUnitMi {
	c.cs = append(c.cs, "mi")
	return (SGeosearchstoreCircleUnitMi)(c)
}

type GeosearchstoreCircleUnitFt Completed

type SGeosearchstoreCircleUnitFt SCompleted

func (c GeosearchstoreCircleUnitFt) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitFt) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitFt) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitFt) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitFt) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitFt) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitFt) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitFt) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitFt) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitFt) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleUnitKm Completed

type SGeosearchstoreCircleUnitKm SCompleted

func (c GeosearchstoreCircleUnitKm) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitKm) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitKm) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitKm) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitKm) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitKm) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitKm) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitKm) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitKm) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitKm) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleUnitM Completed

type SGeosearchstoreCircleUnitM SCompleted

func (c GeosearchstoreCircleUnitM) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitM) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitM) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitM) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitM) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitM) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitM) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitM) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitM) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitM) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleUnitMi Completed

type SGeosearchstoreCircleUnitMi SCompleted

func (c GeosearchstoreCircleUnitMi) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitMi) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitMi) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitMi) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitMi) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitMi) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitMi) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitMi) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitMi) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitMi) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCountAny Completed

type SGeosearchstoreCountAny SCompleted

func (c GeosearchstoreCountAny) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCountAny) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCountAny) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCountCount Completed

type SGeosearchstoreCountCount SCompleted

func (c GeosearchstoreCountCount) Any() GeosearchstoreCountAny {
	c.cs = append(c.cs, "ANY")
	return (GeosearchstoreCountAny)(c)
}

func (c SGeosearchstoreCountCount) Any() SGeosearchstoreCountAny {
	c.cs = append(c.cs, "ANY")
	return (SGeosearchstoreCountAny)(c)
}

func (c GeosearchstoreCountCount) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCountCount) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCountCount) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreDestination Completed

type SGeosearchstoreDestination SCompleted

func (c GeosearchstoreDestination) Source(source string) GeosearchstoreSource {
	c.cs = append(c.cs, source)
	return (GeosearchstoreSource)(c)
}

func (c SGeosearchstoreDestination) Source(source string) SGeosearchstoreSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SGeosearchstoreSource)(c)
}

type GeosearchstoreFromlonlat Completed

type SGeosearchstoreFromlonlat SCompleted

func (c GeosearchstoreFromlonlat) Byradius(radius float64) GeosearchstoreCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchstoreCircleByradius)(c)
}

func (c SGeosearchstoreFromlonlat) Byradius(radius float64) SGeosearchstoreCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchstoreCircleByradius)(c)
}

func (c GeosearchstoreFromlonlat) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreFromlonlat) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreFromlonlat) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreFromlonlat) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreFromlonlat) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreFromlonlat) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreFromlonlat) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreFromlonlat) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreFromlonlat) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreFromlonlat) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreFromlonlat) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreFromlonlat) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreFrommember Completed

type SGeosearchstoreFrommember SCompleted

func (c GeosearchstoreFrommember) Fromlonlat(longitude float64, latitude float64) GeosearchstoreFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchstoreFromlonlat)(c)
}

func (c SGeosearchstoreFrommember) Fromlonlat(longitude float64, latitude float64) SGeosearchstoreFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchstoreFromlonlat)(c)
}

func (c GeosearchstoreFrommember) Byradius(radius float64) GeosearchstoreCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchstoreCircleByradius)(c)
}

func (c SGeosearchstoreFrommember) Byradius(radius float64) SGeosearchstoreCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchstoreCircleByradius)(c)
}

func (c GeosearchstoreFrommember) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreFrommember) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreFrommember) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreFrommember) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreFrommember) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreFrommember) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreFrommember) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreFrommember) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreFrommember) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreFrommember) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreFrommember) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreFrommember) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreOrderAsc Completed

type SGeosearchstoreOrderAsc SCompleted

func (c GeosearchstoreOrderAsc) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreOrderAsc) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreOrderAsc) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreOrderAsc) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreOrderDesc Completed

type SGeosearchstoreOrderDesc SCompleted

func (c GeosearchstoreOrderDesc) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreOrderDesc) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreOrderDesc) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreOrderDesc) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreSource Completed

type SGeosearchstoreSource SCompleted

func (c GeosearchstoreSource) Frommember(member string) GeosearchstoreFrommember {
	c.cs = append(c.cs, "FROMMEMBER", member)
	return (GeosearchstoreFrommember)(c)
}

func (c SGeosearchstoreSource) Frommember(member string) SGeosearchstoreFrommember {
	c.cs = append(c.cs, "FROMMEMBER", member)
	return (SGeosearchstoreFrommember)(c)
}

func (c GeosearchstoreSource) Fromlonlat(longitude float64, latitude float64) GeosearchstoreFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchstoreFromlonlat)(c)
}

func (c SGeosearchstoreSource) Fromlonlat(longitude float64, latitude float64) SGeosearchstoreFromlonlat {
	c.cs = append(c.cs, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchstoreFromlonlat)(c)
}

func (c GeosearchstoreSource) Byradius(radius float64) GeosearchstoreCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchstoreCircleByradius)(c)
}

func (c SGeosearchstoreSource) Byradius(radius float64) SGeosearchstoreCircleByradius {
	c.cs = append(c.cs, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchstoreCircleByradius)(c)
}

func (c GeosearchstoreSource) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreSource) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs = append(c.cs, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreSource) Asc() GeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreSource) Asc() SGeosearchstoreOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreSource) Desc() GeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreSource) Desc() SGeosearchstoreOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreSource) Count(count int64) GeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreSource) Count(count int64) SGeosearchstoreCountCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreSource) Storedist() GeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreSource) Storedist() SGeosearchstoreStoredist {
	c.cs = append(c.cs, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreSource) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreSource) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreStoredist Completed

type SGeosearchstoreStoredist SCompleted

func (c GeosearchstoreStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreStoredist) Build() SCompleted {
	return SCompleted(c)
}

type Get Completed

type SGet SCompleted

func (b *Builder) Get() Get {
	return Get{cs: append(b.get(), "GET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Get() SGet {
	return SGet{cs: append(b.get(), "GET"), ks: InitSlot, cf: readonly}
}

func (c Get) Key(key string) GetKey {
	c.cs = append(c.cs, key)
	return (GetKey)(c)
}

func (c SGet) Key(key string) SGetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGetKey)(c)
}

type GetKey Completed

type SGetKey SCompleted

func (c GetKey) Build() Completed {
	return Completed(c)
}

func (c SGetKey) Build() SCompleted {
	return SCompleted(c)
}

func (c GetKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGetKey) Cache() SCacheable {
	return SCacheable(c)
}

type Getbit Completed

type SGetbit SCompleted

func (b *Builder) Getbit() Getbit {
	return Getbit{cs: append(b.get(), "GETBIT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Getbit() SGetbit {
	return SGetbit{cs: append(b.get(), "GETBIT"), ks: InitSlot, cf: readonly}
}

func (c Getbit) Key(key string) GetbitKey {
	c.cs = append(c.cs, key)
	return (GetbitKey)(c)
}

func (c SGetbit) Key(key string) SGetbitKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGetbitKey)(c)
}

type GetbitKey Completed

type SGetbitKey SCompleted

func (c GetbitKey) Offset(offset int64) GetbitOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (GetbitOffset)(c)
}

func (c SGetbitKey) Offset(offset int64) SGetbitOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (SGetbitOffset)(c)
}

type GetbitOffset Completed

type SGetbitOffset SCompleted

func (c GetbitOffset) Build() Completed {
	return Completed(c)
}

func (c SGetbitOffset) Build() SCompleted {
	return SCompleted(c)
}

func (c GetbitOffset) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGetbitOffset) Cache() SCacheable {
	return SCacheable(c)
}

type Getdel Completed

type SGetdel SCompleted

func (b *Builder) Getdel() Getdel {
	return Getdel{cs: append(b.get(), "GETDEL"), ks: InitSlot}
}

func (b *SBuilder) Getdel() SGetdel {
	return SGetdel{cs: append(b.get(), "GETDEL"), ks: InitSlot}
}

func (c Getdel) Key(key string) GetdelKey {
	c.cs = append(c.cs, key)
	return (GetdelKey)(c)
}

func (c SGetdel) Key(key string) SGetdelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGetdelKey)(c)
}

type GetdelKey Completed

type SGetdelKey SCompleted

func (c GetdelKey) Build() Completed {
	return Completed(c)
}

func (c SGetdelKey) Build() SCompleted {
	return SCompleted(c)
}

type Getex Completed

type SGetex SCompleted

func (b *Builder) Getex() Getex {
	return Getex{cs: append(b.get(), "GETEX"), ks: InitSlot}
}

func (b *SBuilder) Getex() SGetex {
	return SGetex{cs: append(b.get(), "GETEX"), ks: InitSlot}
}

func (c Getex) Key(key string) GetexKey {
	c.cs = append(c.cs, key)
	return (GetexKey)(c)
}

func (c SGetex) Key(key string) SGetexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGetexKey)(c)
}

type GetexExpirationExSeconds Completed

type SGetexExpirationExSeconds SCompleted

func (c GetexExpirationExSeconds) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationExSeconds) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationExatTimestamp Completed

type SGetexExpirationExatTimestamp SCompleted

func (c GetexExpirationExatTimestamp) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationExatTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationPersist Completed

type SGetexExpirationPersist SCompleted

func (c GetexExpirationPersist) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationPersist) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationPxMilliseconds Completed

type SGetexExpirationPxMilliseconds SCompleted

func (c GetexExpirationPxMilliseconds) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationPxMilliseconds) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationPxatMillisecondsTimestamp Completed

type SGetexExpirationPxatMillisecondsTimestamp SCompleted

func (c GetexExpirationPxatMillisecondsTimestamp) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationPxatMillisecondsTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type GetexKey Completed

type SGetexKey SCompleted

func (c GetexKey) ExSeconds(seconds int64) GetexExpirationExSeconds {
	c.cs = append(c.cs, "EX", strconv.FormatInt(seconds, 10))
	return (GetexExpirationExSeconds)(c)
}

func (c SGetexKey) ExSeconds(seconds int64) SGetexExpirationExSeconds {
	c.cs = append(c.cs, "EX", strconv.FormatInt(seconds, 10))
	return (SGetexExpirationExSeconds)(c)
}

func (c GetexKey) PxMilliseconds(milliseconds int64) GetexExpirationPxMilliseconds {
	c.cs = append(c.cs, "PX", strconv.FormatInt(milliseconds, 10))
	return (GetexExpirationPxMilliseconds)(c)
}

func (c SGetexKey) PxMilliseconds(milliseconds int64) SGetexExpirationPxMilliseconds {
	c.cs = append(c.cs, "PX", strconv.FormatInt(milliseconds, 10))
	return (SGetexExpirationPxMilliseconds)(c)
}

func (c GetexKey) ExatTimestamp(timestamp int64) GetexExpirationExatTimestamp {
	c.cs = append(c.cs, "EXAT", strconv.FormatInt(timestamp, 10))
	return (GetexExpirationExatTimestamp)(c)
}

func (c SGetexKey) ExatTimestamp(timestamp int64) SGetexExpirationExatTimestamp {
	c.cs = append(c.cs, "EXAT", strconv.FormatInt(timestamp, 10))
	return (SGetexExpirationExatTimestamp)(c)
}

func (c GetexKey) PxatMillisecondsTimestamp(millisecondsTimestamp int64) GetexExpirationPxatMillisecondsTimestamp {
	c.cs = append(c.cs, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (GetexExpirationPxatMillisecondsTimestamp)(c)
}

func (c SGetexKey) PxatMillisecondsTimestamp(millisecondsTimestamp int64) SGetexExpirationPxatMillisecondsTimestamp {
	c.cs = append(c.cs, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (SGetexExpirationPxatMillisecondsTimestamp)(c)
}

func (c GetexKey) Persist() GetexExpirationPersist {
	c.cs = append(c.cs, "PERSIST")
	return (GetexExpirationPersist)(c)
}

func (c SGetexKey) Persist() SGetexExpirationPersist {
	c.cs = append(c.cs, "PERSIST")
	return (SGetexExpirationPersist)(c)
}

func (c GetexKey) Build() Completed {
	return Completed(c)
}

func (c SGetexKey) Build() SCompleted {
	return SCompleted(c)
}

type Getrange Completed

type SGetrange SCompleted

func (b *Builder) Getrange() Getrange {
	return Getrange{cs: append(b.get(), "GETRANGE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Getrange() SGetrange {
	return SGetrange{cs: append(b.get(), "GETRANGE"), ks: InitSlot, cf: readonly}
}

func (c Getrange) Key(key string) GetrangeKey {
	c.cs = append(c.cs, key)
	return (GetrangeKey)(c)
}

func (c SGetrange) Key(key string) SGetrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGetrangeKey)(c)
}

type GetrangeEnd Completed

type SGetrangeEnd SCompleted

func (c GetrangeEnd) Build() Completed {
	return Completed(c)
}

func (c SGetrangeEnd) Build() SCompleted {
	return SCompleted(c)
}

func (c GetrangeEnd) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGetrangeEnd) Cache() SCacheable {
	return SCacheable(c)
}

type GetrangeKey Completed

type SGetrangeKey SCompleted

func (c GetrangeKey) Start(start int64) GetrangeStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (GetrangeStart)(c)
}

func (c SGetrangeKey) Start(start int64) SGetrangeStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SGetrangeStart)(c)
}

type GetrangeStart Completed

type SGetrangeStart SCompleted

func (c GetrangeStart) End(end int64) GetrangeEnd {
	c.cs = append(c.cs, strconv.FormatInt(end, 10))
	return (GetrangeEnd)(c)
}

func (c SGetrangeStart) End(end int64) SGetrangeEnd {
	c.cs = append(c.cs, strconv.FormatInt(end, 10))
	return (SGetrangeEnd)(c)
}

type Getset Completed

type SGetset SCompleted

func (b *Builder) Getset() Getset {
	return Getset{cs: append(b.get(), "GETSET"), ks: InitSlot}
}

func (b *SBuilder) Getset() SGetset {
	return SGetset{cs: append(b.get(), "GETSET"), ks: InitSlot}
}

func (c Getset) Key(key string) GetsetKey {
	c.cs = append(c.cs, key)
	return (GetsetKey)(c)
}

func (c SGetset) Key(key string) SGetsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SGetsetKey)(c)
}

type GetsetKey Completed

type SGetsetKey SCompleted

func (c GetsetKey) Value(value string) GetsetValue {
	c.cs = append(c.cs, value)
	return (GetsetValue)(c)
}

func (c SGetsetKey) Value(value string) SGetsetValue {
	c.cs = append(c.cs, value)
	return (SGetsetValue)(c)
}

type GetsetValue Completed

type SGetsetValue SCompleted

func (c GetsetValue) Build() Completed {
	return Completed(c)
}

func (c SGetsetValue) Build() SCompleted {
	return SCompleted(c)
}

type Hdel Completed

type SHdel SCompleted

func (b *Builder) Hdel() Hdel {
	return Hdel{cs: append(b.get(), "HDEL"), ks: InitSlot}
}

func (b *SBuilder) Hdel() SHdel {
	return SHdel{cs: append(b.get(), "HDEL"), ks: InitSlot}
}

func (c Hdel) Key(key string) HdelKey {
	c.cs = append(c.cs, key)
	return (HdelKey)(c)
}

func (c SHdel) Key(key string) SHdelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHdelKey)(c)
}

type HdelField Completed

type SHdelField SCompleted

func (c HdelField) Field(field ...string) HdelField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SHdelField) Field(field ...string) SHdelField {
	c.cs = append(c.cs, field...)
	return c
}

func (c HdelField) Build() Completed {
	return Completed(c)
}

func (c SHdelField) Build() SCompleted {
	return SCompleted(c)
}

type HdelKey Completed

type SHdelKey SCompleted

func (c HdelKey) Field(field ...string) HdelField {
	c.cs = append(c.cs, field...)
	return (HdelField)(c)
}

func (c SHdelKey) Field(field ...string) SHdelField {
	c.cs = append(c.cs, field...)
	return (SHdelField)(c)
}

type Hello Completed

type SHello SCompleted

func (b *Builder) Hello() Hello {
	return Hello{cs: append(b.get(), "HELLO"), ks: InitSlot}
}

func (b *SBuilder) Hello() SHello {
	return SHello{cs: append(b.get(), "HELLO"), ks: InitSlot}
}

func (c Hello) Protover(protover int64) HelloArgumentsProtover {
	c.cs = append(c.cs, strconv.FormatInt(protover, 10))
	return (HelloArgumentsProtover)(c)
}

func (c SHello) Protover(protover int64) SHelloArgumentsProtover {
	c.cs = append(c.cs, strconv.FormatInt(protover, 10))
	return (SHelloArgumentsProtover)(c)
}

func (c Hello) Build() Completed {
	return Completed(c)
}

func (c SHello) Build() SCompleted {
	return SCompleted(c)
}

type HelloArgumentsAuth Completed

type SHelloArgumentsAuth SCompleted

func (c HelloArgumentsAuth) Setname(clientname string) HelloArgumentsSetname {
	c.cs = append(c.cs, "SETNAME", clientname)
	return (HelloArgumentsSetname)(c)
}

func (c SHelloArgumentsAuth) Setname(clientname string) SHelloArgumentsSetname {
	c.cs = append(c.cs, "SETNAME", clientname)
	return (SHelloArgumentsSetname)(c)
}

func (c HelloArgumentsAuth) Build() Completed {
	return Completed(c)
}

func (c SHelloArgumentsAuth) Build() SCompleted {
	return SCompleted(c)
}

type HelloArgumentsProtover Completed

type SHelloArgumentsProtover SCompleted

func (c HelloArgumentsProtover) Auth(username string, password string) HelloArgumentsAuth {
	c.cs = append(c.cs, "AUTH", username, password)
	return (HelloArgumentsAuth)(c)
}

func (c SHelloArgumentsProtover) Auth(username string, password string) SHelloArgumentsAuth {
	c.cs = append(c.cs, "AUTH", username, password)
	return (SHelloArgumentsAuth)(c)
}

func (c HelloArgumentsProtover) Setname(clientname string) HelloArgumentsSetname {
	c.cs = append(c.cs, "SETNAME", clientname)
	return (HelloArgumentsSetname)(c)
}

func (c SHelloArgumentsProtover) Setname(clientname string) SHelloArgumentsSetname {
	c.cs = append(c.cs, "SETNAME", clientname)
	return (SHelloArgumentsSetname)(c)
}

func (c HelloArgumentsProtover) Build() Completed {
	return Completed(c)
}

func (c SHelloArgumentsProtover) Build() SCompleted {
	return SCompleted(c)
}

type HelloArgumentsSetname Completed

type SHelloArgumentsSetname SCompleted

func (c HelloArgumentsSetname) Build() Completed {
	return Completed(c)
}

func (c SHelloArgumentsSetname) Build() SCompleted {
	return SCompleted(c)
}

type Hexists Completed

type SHexists SCompleted

func (b *Builder) Hexists() Hexists {
	return Hexists{cs: append(b.get(), "HEXISTS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hexists() SHexists {
	return SHexists{cs: append(b.get(), "HEXISTS"), ks: InitSlot, cf: readonly}
}

func (c Hexists) Key(key string) HexistsKey {
	c.cs = append(c.cs, key)
	return (HexistsKey)(c)
}

func (c SHexists) Key(key string) SHexistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHexistsKey)(c)
}

type HexistsField Completed

type SHexistsField SCompleted

func (c HexistsField) Build() Completed {
	return Completed(c)
}

func (c SHexistsField) Build() SCompleted {
	return SCompleted(c)
}

func (c HexistsField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHexistsField) Cache() SCacheable {
	return SCacheable(c)
}

type HexistsKey Completed

type SHexistsKey SCompleted

func (c HexistsKey) Field(field string) HexistsField {
	c.cs = append(c.cs, field)
	return (HexistsField)(c)
}

func (c SHexistsKey) Field(field string) SHexistsField {
	c.cs = append(c.cs, field)
	return (SHexistsField)(c)
}

type Hget Completed

type SHget SCompleted

func (b *Builder) Hget() Hget {
	return Hget{cs: append(b.get(), "HGET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hget() SHget {
	return SHget{cs: append(b.get(), "HGET"), ks: InitSlot, cf: readonly}
}

func (c Hget) Key(key string) HgetKey {
	c.cs = append(c.cs, key)
	return (HgetKey)(c)
}

func (c SHget) Key(key string) SHgetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHgetKey)(c)
}

type HgetField Completed

type SHgetField SCompleted

func (c HgetField) Build() Completed {
	return Completed(c)
}

func (c SHgetField) Build() SCompleted {
	return SCompleted(c)
}

func (c HgetField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHgetField) Cache() SCacheable {
	return SCacheable(c)
}

type HgetKey Completed

type SHgetKey SCompleted

func (c HgetKey) Field(field string) HgetField {
	c.cs = append(c.cs, field)
	return (HgetField)(c)
}

func (c SHgetKey) Field(field string) SHgetField {
	c.cs = append(c.cs, field)
	return (SHgetField)(c)
}

type Hgetall Completed

type SHgetall SCompleted

func (b *Builder) Hgetall() Hgetall {
	return Hgetall{cs: append(b.get(), "HGETALL"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hgetall() SHgetall {
	return SHgetall{cs: append(b.get(), "HGETALL"), ks: InitSlot, cf: readonly}
}

func (c Hgetall) Key(key string) HgetallKey {
	c.cs = append(c.cs, key)
	return (HgetallKey)(c)
}

func (c SHgetall) Key(key string) SHgetallKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHgetallKey)(c)
}

type HgetallKey Completed

type SHgetallKey SCompleted

func (c HgetallKey) Build() Completed {
	return Completed(c)
}

func (c SHgetallKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HgetallKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHgetallKey) Cache() SCacheable {
	return SCacheable(c)
}

type Hincrby Completed

type SHincrby SCompleted

func (b *Builder) Hincrby() Hincrby {
	return Hincrby{cs: append(b.get(), "HINCRBY"), ks: InitSlot}
}

func (b *SBuilder) Hincrby() SHincrby {
	return SHincrby{cs: append(b.get(), "HINCRBY"), ks: InitSlot}
}

func (c Hincrby) Key(key string) HincrbyKey {
	c.cs = append(c.cs, key)
	return (HincrbyKey)(c)
}

func (c SHincrby) Key(key string) SHincrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHincrbyKey)(c)
}

type HincrbyField Completed

type SHincrbyField SCompleted

func (c HincrbyField) Increment(increment int64) HincrbyIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (HincrbyIncrement)(c)
}

func (c SHincrbyField) Increment(increment int64) SHincrbyIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (SHincrbyIncrement)(c)
}

type HincrbyIncrement Completed

type SHincrbyIncrement SCompleted

func (c HincrbyIncrement) Build() Completed {
	return Completed(c)
}

func (c SHincrbyIncrement) Build() SCompleted {
	return SCompleted(c)
}

type HincrbyKey Completed

type SHincrbyKey SCompleted

func (c HincrbyKey) Field(field string) HincrbyField {
	c.cs = append(c.cs, field)
	return (HincrbyField)(c)
}

func (c SHincrbyKey) Field(field string) SHincrbyField {
	c.cs = append(c.cs, field)
	return (SHincrbyField)(c)
}

type Hincrbyfloat Completed

type SHincrbyfloat SCompleted

func (b *Builder) Hincrbyfloat() Hincrbyfloat {
	return Hincrbyfloat{cs: append(b.get(), "HINCRBYFLOAT"), ks: InitSlot}
}

func (b *SBuilder) Hincrbyfloat() SHincrbyfloat {
	return SHincrbyfloat{cs: append(b.get(), "HINCRBYFLOAT"), ks: InitSlot}
}

func (c Hincrbyfloat) Key(key string) HincrbyfloatKey {
	c.cs = append(c.cs, key)
	return (HincrbyfloatKey)(c)
}

func (c SHincrbyfloat) Key(key string) SHincrbyfloatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHincrbyfloatKey)(c)
}

type HincrbyfloatField Completed

type SHincrbyfloatField SCompleted

func (c HincrbyfloatField) Increment(increment float64) HincrbyfloatIncrement {
	c.cs = append(c.cs, strconv.FormatFloat(increment, 'f', -1, 64))
	return (HincrbyfloatIncrement)(c)
}

func (c SHincrbyfloatField) Increment(increment float64) SHincrbyfloatIncrement {
	c.cs = append(c.cs, strconv.FormatFloat(increment, 'f', -1, 64))
	return (SHincrbyfloatIncrement)(c)
}

type HincrbyfloatIncrement Completed

type SHincrbyfloatIncrement SCompleted

func (c HincrbyfloatIncrement) Build() Completed {
	return Completed(c)
}

func (c SHincrbyfloatIncrement) Build() SCompleted {
	return SCompleted(c)
}

type HincrbyfloatKey Completed

type SHincrbyfloatKey SCompleted

func (c HincrbyfloatKey) Field(field string) HincrbyfloatField {
	c.cs = append(c.cs, field)
	return (HincrbyfloatField)(c)
}

func (c SHincrbyfloatKey) Field(field string) SHincrbyfloatField {
	c.cs = append(c.cs, field)
	return (SHincrbyfloatField)(c)
}

type Hkeys Completed

type SHkeys SCompleted

func (b *Builder) Hkeys() Hkeys {
	return Hkeys{cs: append(b.get(), "HKEYS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hkeys() SHkeys {
	return SHkeys{cs: append(b.get(), "HKEYS"), ks: InitSlot, cf: readonly}
}

func (c Hkeys) Key(key string) HkeysKey {
	c.cs = append(c.cs, key)
	return (HkeysKey)(c)
}

func (c SHkeys) Key(key string) SHkeysKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHkeysKey)(c)
}

type HkeysKey Completed

type SHkeysKey SCompleted

func (c HkeysKey) Build() Completed {
	return Completed(c)
}

func (c SHkeysKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HkeysKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHkeysKey) Cache() SCacheable {
	return SCacheable(c)
}

type Hlen Completed

type SHlen SCompleted

func (b *Builder) Hlen() Hlen {
	return Hlen{cs: append(b.get(), "HLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hlen() SHlen {
	return SHlen{cs: append(b.get(), "HLEN"), ks: InitSlot, cf: readonly}
}

func (c Hlen) Key(key string) HlenKey {
	c.cs = append(c.cs, key)
	return (HlenKey)(c)
}

func (c SHlen) Key(key string) SHlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHlenKey)(c)
}

type HlenKey Completed

type SHlenKey SCompleted

func (c HlenKey) Build() Completed {
	return Completed(c)
}

func (c SHlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type Hmget Completed

type SHmget SCompleted

func (b *Builder) Hmget() Hmget {
	return Hmget{cs: append(b.get(), "HMGET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hmget() SHmget {
	return SHmget{cs: append(b.get(), "HMGET"), ks: InitSlot, cf: readonly}
}

func (c Hmget) Key(key string) HmgetKey {
	c.cs = append(c.cs, key)
	return (HmgetKey)(c)
}

func (c SHmget) Key(key string) SHmgetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHmgetKey)(c)
}

type HmgetField Completed

type SHmgetField SCompleted

func (c HmgetField) Field(field ...string) HmgetField {
	c.cs = append(c.cs, field...)
	return c
}

func (c SHmgetField) Field(field ...string) SHmgetField {
	c.cs = append(c.cs, field...)
	return c
}

func (c HmgetField) Build() Completed {
	return Completed(c)
}

func (c SHmgetField) Build() SCompleted {
	return SCompleted(c)
}

func (c HmgetField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHmgetField) Cache() SCacheable {
	return SCacheable(c)
}

type HmgetKey Completed

type SHmgetKey SCompleted

func (c HmgetKey) Field(field ...string) HmgetField {
	c.cs = append(c.cs, field...)
	return (HmgetField)(c)
}

func (c SHmgetKey) Field(field ...string) SHmgetField {
	c.cs = append(c.cs, field...)
	return (SHmgetField)(c)
}

type Hmset Completed

type SHmset SCompleted

func (b *Builder) Hmset() Hmset {
	return Hmset{cs: append(b.get(), "HMSET"), ks: InitSlot}
}

func (b *SBuilder) Hmset() SHmset {
	return SHmset{cs: append(b.get(), "HMSET"), ks: InitSlot}
}

func (c Hmset) Key(key string) HmsetKey {
	c.cs = append(c.cs, key)
	return (HmsetKey)(c)
}

func (c SHmset) Key(key string) SHmsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHmsetKey)(c)
}

type HmsetFieldValue Completed

type SHmsetFieldValue SCompleted

func (c HmsetFieldValue) FieldValue(field string, value string) HmsetFieldValue {
	c.cs = append(c.cs, field, value)
	return c
}

func (c SHmsetFieldValue) FieldValue(field string, value string) SHmsetFieldValue {
	c.cs = append(c.cs, field, value)
	return c
}

func (c HmsetFieldValue) Build() Completed {
	return Completed(c)
}

func (c SHmsetFieldValue) Build() SCompleted {
	return SCompleted(c)
}

type HmsetKey Completed

type SHmsetKey SCompleted

func (c HmsetKey) FieldValue() HmsetFieldValue {
	return (HmsetFieldValue)(c)
}

func (c SHmsetKey) FieldValue() SHmsetFieldValue {
	return (SHmsetFieldValue)(c)
}

type Hrandfield Completed

type SHrandfield SCompleted

func (b *Builder) Hrandfield() Hrandfield {
	return Hrandfield{cs: append(b.get(), "HRANDFIELD"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hrandfield() SHrandfield {
	return SHrandfield{cs: append(b.get(), "HRANDFIELD"), ks: InitSlot, cf: readonly}
}

func (c Hrandfield) Key(key string) HrandfieldKey {
	c.cs = append(c.cs, key)
	return (HrandfieldKey)(c)
}

func (c SHrandfield) Key(key string) SHrandfieldKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHrandfieldKey)(c)
}

type HrandfieldKey Completed

type SHrandfieldKey SCompleted

func (c HrandfieldKey) Count(count int64) HrandfieldOptionsCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (HrandfieldOptionsCount)(c)
}

func (c SHrandfieldKey) Count(count int64) SHrandfieldOptionsCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SHrandfieldOptionsCount)(c)
}

func (c HrandfieldKey) Build() Completed {
	return Completed(c)
}

func (c SHrandfieldKey) Build() SCompleted {
	return SCompleted(c)
}

type HrandfieldOptionsCount Completed

type SHrandfieldOptionsCount SCompleted

func (c HrandfieldOptionsCount) Withvalues() HrandfieldOptionsWithvalues {
	c.cs = append(c.cs, "WITHVALUES")
	return (HrandfieldOptionsWithvalues)(c)
}

func (c SHrandfieldOptionsCount) Withvalues() SHrandfieldOptionsWithvalues {
	c.cs = append(c.cs, "WITHVALUES")
	return (SHrandfieldOptionsWithvalues)(c)
}

func (c HrandfieldOptionsCount) Build() Completed {
	return Completed(c)
}

func (c SHrandfieldOptionsCount) Build() SCompleted {
	return SCompleted(c)
}

type HrandfieldOptionsWithvalues Completed

type SHrandfieldOptionsWithvalues SCompleted

func (c HrandfieldOptionsWithvalues) Build() Completed {
	return Completed(c)
}

func (c SHrandfieldOptionsWithvalues) Build() SCompleted {
	return SCompleted(c)
}

type Hscan Completed

type SHscan SCompleted

func (b *Builder) Hscan() Hscan {
	return Hscan{cs: append(b.get(), "HSCAN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hscan() SHscan {
	return SHscan{cs: append(b.get(), "HSCAN"), ks: InitSlot, cf: readonly}
}

func (c Hscan) Key(key string) HscanKey {
	c.cs = append(c.cs, key)
	return (HscanKey)(c)
}

func (c SHscan) Key(key string) SHscanKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHscanKey)(c)
}

type HscanCount Completed

type SHscanCount SCompleted

func (c HscanCount) Build() Completed {
	return Completed(c)
}

func (c SHscanCount) Build() SCompleted {
	return SCompleted(c)
}

type HscanCursor Completed

type SHscanCursor SCompleted

func (c HscanCursor) Match(pattern string) HscanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (HscanMatch)(c)
}

func (c SHscanCursor) Match(pattern string) SHscanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (SHscanMatch)(c)
}

func (c HscanCursor) Count(count int64) HscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (HscanCount)(c)
}

func (c SHscanCursor) Count(count int64) SHscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SHscanCount)(c)
}

func (c HscanCursor) Build() Completed {
	return Completed(c)
}

func (c SHscanCursor) Build() SCompleted {
	return SCompleted(c)
}

type HscanKey Completed

type SHscanKey SCompleted

func (c HscanKey) Cursor(cursor int64) HscanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (HscanCursor)(c)
}

func (c SHscanKey) Cursor(cursor int64) SHscanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (SHscanCursor)(c)
}

type HscanMatch Completed

type SHscanMatch SCompleted

func (c HscanMatch) Count(count int64) HscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (HscanCount)(c)
}

func (c SHscanMatch) Count(count int64) SHscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SHscanCount)(c)
}

func (c HscanMatch) Build() Completed {
	return Completed(c)
}

func (c SHscanMatch) Build() SCompleted {
	return SCompleted(c)
}

type Hset Completed

type SHset SCompleted

func (b *Builder) Hset() Hset {
	return Hset{cs: append(b.get(), "HSET"), ks: InitSlot}
}

func (b *SBuilder) Hset() SHset {
	return SHset{cs: append(b.get(), "HSET"), ks: InitSlot}
}

func (c Hset) Key(key string) HsetKey {
	c.cs = append(c.cs, key)
	return (HsetKey)(c)
}

func (c SHset) Key(key string) SHsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHsetKey)(c)
}

type HsetFieldValue Completed

type SHsetFieldValue SCompleted

func (c HsetFieldValue) FieldValue(field string, value string) HsetFieldValue {
	c.cs = append(c.cs, field, value)
	return c
}

func (c SHsetFieldValue) FieldValue(field string, value string) SHsetFieldValue {
	c.cs = append(c.cs, field, value)
	return c
}

func (c HsetFieldValue) Build() Completed {
	return Completed(c)
}

func (c SHsetFieldValue) Build() SCompleted {
	return SCompleted(c)
}

type HsetKey Completed

type SHsetKey SCompleted

func (c HsetKey) FieldValue() HsetFieldValue {
	return (HsetFieldValue)(c)
}

func (c SHsetKey) FieldValue() SHsetFieldValue {
	return (SHsetFieldValue)(c)
}

type Hsetnx Completed

type SHsetnx SCompleted

func (b *Builder) Hsetnx() Hsetnx {
	return Hsetnx{cs: append(b.get(), "HSETNX"), ks: InitSlot}
}

func (b *SBuilder) Hsetnx() SHsetnx {
	return SHsetnx{cs: append(b.get(), "HSETNX"), ks: InitSlot}
}

func (c Hsetnx) Key(key string) HsetnxKey {
	c.cs = append(c.cs, key)
	return (HsetnxKey)(c)
}

func (c SHsetnx) Key(key string) SHsetnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHsetnxKey)(c)
}

type HsetnxField Completed

type SHsetnxField SCompleted

func (c HsetnxField) Value(value string) HsetnxValue {
	c.cs = append(c.cs, value)
	return (HsetnxValue)(c)
}

func (c SHsetnxField) Value(value string) SHsetnxValue {
	c.cs = append(c.cs, value)
	return (SHsetnxValue)(c)
}

type HsetnxKey Completed

type SHsetnxKey SCompleted

func (c HsetnxKey) Field(field string) HsetnxField {
	c.cs = append(c.cs, field)
	return (HsetnxField)(c)
}

func (c SHsetnxKey) Field(field string) SHsetnxField {
	c.cs = append(c.cs, field)
	return (SHsetnxField)(c)
}

type HsetnxValue Completed

type SHsetnxValue SCompleted

func (c HsetnxValue) Build() Completed {
	return Completed(c)
}

func (c SHsetnxValue) Build() SCompleted {
	return SCompleted(c)
}

type Hstrlen Completed

type SHstrlen SCompleted

func (b *Builder) Hstrlen() Hstrlen {
	return Hstrlen{cs: append(b.get(), "HSTRLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hstrlen() SHstrlen {
	return SHstrlen{cs: append(b.get(), "HSTRLEN"), ks: InitSlot, cf: readonly}
}

func (c Hstrlen) Key(key string) HstrlenKey {
	c.cs = append(c.cs, key)
	return (HstrlenKey)(c)
}

func (c SHstrlen) Key(key string) SHstrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHstrlenKey)(c)
}

type HstrlenField Completed

type SHstrlenField SCompleted

func (c HstrlenField) Build() Completed {
	return Completed(c)
}

func (c SHstrlenField) Build() SCompleted {
	return SCompleted(c)
}

func (c HstrlenField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHstrlenField) Cache() SCacheable {
	return SCacheable(c)
}

type HstrlenKey Completed

type SHstrlenKey SCompleted

func (c HstrlenKey) Field(field string) HstrlenField {
	c.cs = append(c.cs, field)
	return (HstrlenField)(c)
}

func (c SHstrlenKey) Field(field string) SHstrlenField {
	c.cs = append(c.cs, field)
	return (SHstrlenField)(c)
}

type Hvals Completed

type SHvals SCompleted

func (b *Builder) Hvals() Hvals {
	return Hvals{cs: append(b.get(), "HVALS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Hvals() SHvals {
	return SHvals{cs: append(b.get(), "HVALS"), ks: InitSlot, cf: readonly}
}

func (c Hvals) Key(key string) HvalsKey {
	c.cs = append(c.cs, key)
	return (HvalsKey)(c)
}

func (c SHvals) Key(key string) SHvalsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SHvalsKey)(c)
}

type HvalsKey Completed

type SHvalsKey SCompleted

func (c HvalsKey) Build() Completed {
	return Completed(c)
}

func (c SHvalsKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HvalsKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHvalsKey) Cache() SCacheable {
	return SCacheable(c)
}

type Incr Completed

type SIncr SCompleted

func (b *Builder) Incr() Incr {
	return Incr{cs: append(b.get(), "INCR"), ks: InitSlot}
}

func (b *SBuilder) Incr() SIncr {
	return SIncr{cs: append(b.get(), "INCR"), ks: InitSlot}
}

func (c Incr) Key(key string) IncrKey {
	c.cs = append(c.cs, key)
	return (IncrKey)(c)
}

func (c SIncr) Key(key string) SIncrKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SIncrKey)(c)
}

type IncrKey Completed

type SIncrKey SCompleted

func (c IncrKey) Build() Completed {
	return Completed(c)
}

func (c SIncrKey) Build() SCompleted {
	return SCompleted(c)
}

type Incrby Completed

type SIncrby SCompleted

func (b *Builder) Incrby() Incrby {
	return Incrby{cs: append(b.get(), "INCRBY"), ks: InitSlot}
}

func (b *SBuilder) Incrby() SIncrby {
	return SIncrby{cs: append(b.get(), "INCRBY"), ks: InitSlot}
}

func (c Incrby) Key(key string) IncrbyKey {
	c.cs = append(c.cs, key)
	return (IncrbyKey)(c)
}

func (c SIncrby) Key(key string) SIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SIncrbyKey)(c)
}

type IncrbyIncrement Completed

type SIncrbyIncrement SCompleted

func (c IncrbyIncrement) Build() Completed {
	return Completed(c)
}

func (c SIncrbyIncrement) Build() SCompleted {
	return SCompleted(c)
}

type IncrbyKey Completed

type SIncrbyKey SCompleted

func (c IncrbyKey) Increment(increment int64) IncrbyIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (IncrbyIncrement)(c)
}

func (c SIncrbyKey) Increment(increment int64) SIncrbyIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (SIncrbyIncrement)(c)
}

type Incrbyfloat Completed

type SIncrbyfloat SCompleted

func (b *Builder) Incrbyfloat() Incrbyfloat {
	return Incrbyfloat{cs: append(b.get(), "INCRBYFLOAT"), ks: InitSlot}
}

func (b *SBuilder) Incrbyfloat() SIncrbyfloat {
	return SIncrbyfloat{cs: append(b.get(), "INCRBYFLOAT"), ks: InitSlot}
}

func (c Incrbyfloat) Key(key string) IncrbyfloatKey {
	c.cs = append(c.cs, key)
	return (IncrbyfloatKey)(c)
}

func (c SIncrbyfloat) Key(key string) SIncrbyfloatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SIncrbyfloatKey)(c)
}

type IncrbyfloatIncrement Completed

type SIncrbyfloatIncrement SCompleted

func (c IncrbyfloatIncrement) Build() Completed {
	return Completed(c)
}

func (c SIncrbyfloatIncrement) Build() SCompleted {
	return SCompleted(c)
}

type IncrbyfloatKey Completed

type SIncrbyfloatKey SCompleted

func (c IncrbyfloatKey) Increment(increment float64) IncrbyfloatIncrement {
	c.cs = append(c.cs, strconv.FormatFloat(increment, 'f', -1, 64))
	return (IncrbyfloatIncrement)(c)
}

func (c SIncrbyfloatKey) Increment(increment float64) SIncrbyfloatIncrement {
	c.cs = append(c.cs, strconv.FormatFloat(increment, 'f', -1, 64))
	return (SIncrbyfloatIncrement)(c)
}

type Info Completed

type SInfo SCompleted

func (b *Builder) Info() Info {
	return Info{cs: append(b.get(), "INFO"), ks: InitSlot}
}

func (b *SBuilder) Info() SInfo {
	return SInfo{cs: append(b.get(), "INFO"), ks: InitSlot}
}

func (c Info) Section(section string) InfoSection {
	c.cs = append(c.cs, section)
	return (InfoSection)(c)
}

func (c SInfo) Section(section string) SInfoSection {
	c.cs = append(c.cs, section)
	return (SInfoSection)(c)
}

func (c Info) Build() Completed {
	return Completed(c)
}

func (c SInfo) Build() SCompleted {
	return SCompleted(c)
}

type InfoSection Completed

type SInfoSection SCompleted

func (c InfoSection) Build() Completed {
	return Completed(c)
}

func (c SInfoSection) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrappend Completed

type SJsonArrappend SCompleted

func (b *Builder) JsonArrappend() JsonArrappend {
	return JsonArrappend{cs: append(b.get(), "JSON.ARRAPPEND"), ks: InitSlot}
}

func (b *SBuilder) JsonArrappend() SJsonArrappend {
	return SJsonArrappend{cs: append(b.get(), "JSON.ARRAPPEND"), ks: InitSlot}
}

func (c JsonArrappend) Key(key string) JsonArrappendKey {
	c.cs = append(c.cs, key)
	return (JsonArrappendKey)(c)
}

func (c SJsonArrappend) Key(key string) SJsonArrappendKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonArrappendKey)(c)
}

type JsonArrappendKey Completed

type SJsonArrappendKey SCompleted

func (c JsonArrappendKey) Path(path string) JsonArrappendPath {
	c.cs = append(c.cs, path)
	return (JsonArrappendPath)(c)
}

func (c SJsonArrappendKey) Path(path string) SJsonArrappendPath {
	c.cs = append(c.cs, path)
	return (SJsonArrappendPath)(c)
}

func (c JsonArrappendKey) Value(value ...string) JsonArrappendValue {
	c.cs = append(c.cs, value...)
	return (JsonArrappendValue)(c)
}

func (c SJsonArrappendKey) Value(value ...string) SJsonArrappendValue {
	c.cs = append(c.cs, value...)
	return (SJsonArrappendValue)(c)
}

type JsonArrappendPath Completed

type SJsonArrappendPath SCompleted

func (c JsonArrappendPath) Value(value ...string) JsonArrappendValue {
	c.cs = append(c.cs, value...)
	return (JsonArrappendValue)(c)
}

func (c SJsonArrappendPath) Value(value ...string) SJsonArrappendValue {
	c.cs = append(c.cs, value...)
	return (SJsonArrappendValue)(c)
}

type JsonArrappendValue Completed

type SJsonArrappendValue SCompleted

func (c JsonArrappendValue) Value(value ...string) JsonArrappendValue {
	c.cs = append(c.cs, value...)
	return c
}

func (c SJsonArrappendValue) Value(value ...string) SJsonArrappendValue {
	c.cs = append(c.cs, value...)
	return c
}

func (c JsonArrappendValue) Build() Completed {
	return Completed(c)
}

func (c SJsonArrappendValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrindex Completed

type SJsonArrindex SCompleted

func (b *Builder) JsonArrindex() JsonArrindex {
	return JsonArrindex{cs: append(b.get(), "JSON.ARRINDEX"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonArrindex() SJsonArrindex {
	return SJsonArrindex{cs: append(b.get(), "JSON.ARRINDEX"), ks: InitSlot, cf: readonly}
}

func (c JsonArrindex) Key(key string) JsonArrindexKey {
	c.cs = append(c.cs, key)
	return (JsonArrindexKey)(c)
}

func (c SJsonArrindex) Key(key string) SJsonArrindexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonArrindexKey)(c)
}

type JsonArrindexKey Completed

type SJsonArrindexKey SCompleted

func (c JsonArrindexKey) Path(path string) JsonArrindexPath {
	c.cs = append(c.cs, path)
	return (JsonArrindexPath)(c)
}

func (c SJsonArrindexKey) Path(path string) SJsonArrindexPath {
	c.cs = append(c.cs, path)
	return (SJsonArrindexPath)(c)
}

type JsonArrindexPath Completed

type SJsonArrindexPath SCompleted

func (c JsonArrindexPath) Value(value string) JsonArrindexValue {
	c.cs = append(c.cs, value)
	return (JsonArrindexValue)(c)
}

func (c SJsonArrindexPath) Value(value string) SJsonArrindexValue {
	c.cs = append(c.cs, value)
	return (SJsonArrindexValue)(c)
}

type JsonArrindexStartStart Completed

type SJsonArrindexStartStart SCompleted

func (c JsonArrindexStartStart) Stop(stop int64) JsonArrindexStartStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (JsonArrindexStartStop)(c)
}

func (c SJsonArrindexStartStart) Stop(stop int64) SJsonArrindexStartStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (SJsonArrindexStartStop)(c)
}

func (c JsonArrindexStartStart) Build() Completed {
	return Completed(c)
}

func (c SJsonArrindexStartStart) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrindexStartStart) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrindexStartStart) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrindexStartStop Completed

type SJsonArrindexStartStop SCompleted

func (c JsonArrindexStartStop) Build() Completed {
	return Completed(c)
}

func (c SJsonArrindexStartStop) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrindexStartStop) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrindexStartStop) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrindexValue Completed

type SJsonArrindexValue SCompleted

func (c JsonArrindexValue) Start(start int64) JsonArrindexStartStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (JsonArrindexStartStart)(c)
}

func (c SJsonArrindexValue) Start(start int64) SJsonArrindexStartStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SJsonArrindexStartStart)(c)
}

func (c JsonArrindexValue) Build() Completed {
	return Completed(c)
}

func (c SJsonArrindexValue) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrindexValue) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrindexValue) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrinsert Completed

type SJsonArrinsert SCompleted

func (b *Builder) JsonArrinsert() JsonArrinsert {
	return JsonArrinsert{cs: append(b.get(), "JSON.ARRINSERT"), ks: InitSlot}
}

func (b *SBuilder) JsonArrinsert() SJsonArrinsert {
	return SJsonArrinsert{cs: append(b.get(), "JSON.ARRINSERT"), ks: InitSlot}
}

func (c JsonArrinsert) Key(key string) JsonArrinsertKey {
	c.cs = append(c.cs, key)
	return (JsonArrinsertKey)(c)
}

func (c SJsonArrinsert) Key(key string) SJsonArrinsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonArrinsertKey)(c)
}

type JsonArrinsertIndex Completed

type SJsonArrinsertIndex SCompleted

func (c JsonArrinsertIndex) Value(value ...string) JsonArrinsertValue {
	c.cs = append(c.cs, value...)
	return (JsonArrinsertValue)(c)
}

func (c SJsonArrinsertIndex) Value(value ...string) SJsonArrinsertValue {
	c.cs = append(c.cs, value...)
	return (SJsonArrinsertValue)(c)
}

type JsonArrinsertKey Completed

type SJsonArrinsertKey SCompleted

func (c JsonArrinsertKey) Path(path string) JsonArrinsertPath {
	c.cs = append(c.cs, path)
	return (JsonArrinsertPath)(c)
}

func (c SJsonArrinsertKey) Path(path string) SJsonArrinsertPath {
	c.cs = append(c.cs, path)
	return (SJsonArrinsertPath)(c)
}

type JsonArrinsertPath Completed

type SJsonArrinsertPath SCompleted

func (c JsonArrinsertPath) Index(index int64) JsonArrinsertIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (JsonArrinsertIndex)(c)
}

func (c SJsonArrinsertPath) Index(index int64) SJsonArrinsertIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (SJsonArrinsertIndex)(c)
}

type JsonArrinsertValue Completed

type SJsonArrinsertValue SCompleted

func (c JsonArrinsertValue) Value(value ...string) JsonArrinsertValue {
	c.cs = append(c.cs, value...)
	return c
}

func (c SJsonArrinsertValue) Value(value ...string) SJsonArrinsertValue {
	c.cs = append(c.cs, value...)
	return c
}

func (c JsonArrinsertValue) Build() Completed {
	return Completed(c)
}

func (c SJsonArrinsertValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrlen Completed

type SJsonArrlen SCompleted

func (b *Builder) JsonArrlen() JsonArrlen {
	return JsonArrlen{cs: append(b.get(), "JSON.ARRLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonArrlen() SJsonArrlen {
	return SJsonArrlen{cs: append(b.get(), "JSON.ARRLEN"), ks: InitSlot, cf: readonly}
}

func (c JsonArrlen) Key(key string) JsonArrlenKey {
	c.cs = append(c.cs, key)
	return (JsonArrlenKey)(c)
}

func (c SJsonArrlen) Key(key string) SJsonArrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonArrlenKey)(c)
}

type JsonArrlenKey Completed

type SJsonArrlenKey SCompleted

func (c JsonArrlenKey) Path(path ...string) JsonArrlenPath {
	c.cs = append(c.cs, path...)
	return (JsonArrlenPath)(c)
}

func (c SJsonArrlenKey) Path(path ...string) SJsonArrlenPath {
	c.cs = append(c.cs, path...)
	return (SJsonArrlenPath)(c)
}

type JsonArrlenPath Completed

type SJsonArrlenPath SCompleted

func (c JsonArrlenPath) Path(path ...string) JsonArrlenPath {
	c.cs = append(c.cs, path...)
	return c
}

func (c SJsonArrlenPath) Path(path ...string) SJsonArrlenPath {
	c.cs = append(c.cs, path...)
	return c
}

func (c JsonArrlenPath) Build() Completed {
	return Completed(c)
}

func (c SJsonArrlenPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrlenPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrlenPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrpop Completed

type SJsonArrpop SCompleted

func (b *Builder) JsonArrpop() JsonArrpop {
	return JsonArrpop{cs: append(b.get(), "JSON.ARRPOP"), ks: InitSlot}
}

func (b *SBuilder) JsonArrpop() SJsonArrpop {
	return SJsonArrpop{cs: append(b.get(), "JSON.ARRPOP"), ks: InitSlot}
}

func (c JsonArrpop) Key(key string) JsonArrpopKey {
	c.cs = append(c.cs, key)
	return (JsonArrpopKey)(c)
}

func (c SJsonArrpop) Key(key string) SJsonArrpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonArrpopKey)(c)
}

type JsonArrpopKey Completed

type SJsonArrpopKey SCompleted

func (c JsonArrpopKey) Path(path string) JsonArrpopPathPath {
	c.cs = append(c.cs, path)
	return (JsonArrpopPathPath)(c)
}

func (c SJsonArrpopKey) Path(path string) SJsonArrpopPathPath {
	c.cs = append(c.cs, path)
	return (SJsonArrpopPathPath)(c)
}

func (c JsonArrpopKey) Build() Completed {
	return Completed(c)
}

func (c SJsonArrpopKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrpopPathIndex Completed

type SJsonArrpopPathIndex SCompleted

func (c JsonArrpopPathIndex) Build() Completed {
	return Completed(c)
}

func (c SJsonArrpopPathIndex) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrpopPathPath Completed

type SJsonArrpopPathPath SCompleted

func (c JsonArrpopPathPath) Index(index int64) JsonArrpopPathIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (JsonArrpopPathIndex)(c)
}

func (c SJsonArrpopPathPath) Index(index int64) SJsonArrpopPathIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (SJsonArrpopPathIndex)(c)
}

func (c JsonArrpopPathPath) Build() Completed {
	return Completed(c)
}

func (c SJsonArrpopPathPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrtrim Completed

type SJsonArrtrim SCompleted

func (b *Builder) JsonArrtrim() JsonArrtrim {
	return JsonArrtrim{cs: append(b.get(), "JSON.ARRTRIM"), ks: InitSlot}
}

func (b *SBuilder) JsonArrtrim() SJsonArrtrim {
	return SJsonArrtrim{cs: append(b.get(), "JSON.ARRTRIM"), ks: InitSlot}
}

func (c JsonArrtrim) Key(key string) JsonArrtrimKey {
	c.cs = append(c.cs, key)
	return (JsonArrtrimKey)(c)
}

func (c SJsonArrtrim) Key(key string) SJsonArrtrimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonArrtrimKey)(c)
}

type JsonArrtrimKey Completed

type SJsonArrtrimKey SCompleted

func (c JsonArrtrimKey) Path(path string) JsonArrtrimPath {
	c.cs = append(c.cs, path)
	return (JsonArrtrimPath)(c)
}

func (c SJsonArrtrimKey) Path(path string) SJsonArrtrimPath {
	c.cs = append(c.cs, path)
	return (SJsonArrtrimPath)(c)
}

type JsonArrtrimPath Completed

type SJsonArrtrimPath SCompleted

func (c JsonArrtrimPath) Start(start int64) JsonArrtrimStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (JsonArrtrimStart)(c)
}

func (c SJsonArrtrimPath) Start(start int64) SJsonArrtrimStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SJsonArrtrimStart)(c)
}

type JsonArrtrimStart Completed

type SJsonArrtrimStart SCompleted

func (c JsonArrtrimStart) Stop(stop int64) JsonArrtrimStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (JsonArrtrimStop)(c)
}

func (c SJsonArrtrimStart) Stop(stop int64) SJsonArrtrimStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (SJsonArrtrimStop)(c)
}

type JsonArrtrimStop Completed

type SJsonArrtrimStop SCompleted

func (c JsonArrtrimStop) Build() Completed {
	return Completed(c)
}

func (c SJsonArrtrimStop) Build() SCompleted {
	return SCompleted(c)
}

type JsonClear Completed

type SJsonClear SCompleted

func (b *Builder) JsonClear() JsonClear {
	return JsonClear{cs: append(b.get(), "JSON.CLEAR"), ks: InitSlot}
}

func (b *SBuilder) JsonClear() SJsonClear {
	return SJsonClear{cs: append(b.get(), "JSON.CLEAR"), ks: InitSlot}
}

func (c JsonClear) Key(key string) JsonClearKey {
	c.cs = append(c.cs, key)
	return (JsonClearKey)(c)
}

func (c SJsonClear) Key(key string) SJsonClearKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonClearKey)(c)
}

type JsonClearKey Completed

type SJsonClearKey SCompleted

func (c JsonClearKey) Path(path string) JsonClearPath {
	c.cs = append(c.cs, path)
	return (JsonClearPath)(c)
}

func (c SJsonClearKey) Path(path string) SJsonClearPath {
	c.cs = append(c.cs, path)
	return (SJsonClearPath)(c)
}

func (c JsonClearKey) Build() Completed {
	return Completed(c)
}

func (c SJsonClearKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonClearPath Completed

type SJsonClearPath SCompleted

func (c JsonClearPath) Build() Completed {
	return Completed(c)
}

func (c SJsonClearPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonDel Completed

type SJsonDel SCompleted

func (b *Builder) JsonDel() JsonDel {
	return JsonDel{cs: append(b.get(), "JSON.DEL"), ks: InitSlot}
}

func (b *SBuilder) JsonDel() SJsonDel {
	return SJsonDel{cs: append(b.get(), "JSON.DEL"), ks: InitSlot}
}

func (c JsonDel) Key(key string) JsonDelKey {
	c.cs = append(c.cs, key)
	return (JsonDelKey)(c)
}

func (c SJsonDel) Key(key string) SJsonDelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonDelKey)(c)
}

type JsonDelKey Completed

type SJsonDelKey SCompleted

func (c JsonDelKey) Path(path string) JsonDelPath {
	c.cs = append(c.cs, path)
	return (JsonDelPath)(c)
}

func (c SJsonDelKey) Path(path string) SJsonDelPath {
	c.cs = append(c.cs, path)
	return (SJsonDelPath)(c)
}

func (c JsonDelKey) Build() Completed {
	return Completed(c)
}

func (c SJsonDelKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonDelPath Completed

type SJsonDelPath SCompleted

func (c JsonDelPath) Build() Completed {
	return Completed(c)
}

func (c SJsonDelPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonGet Completed

type SJsonGet SCompleted

func (b *Builder) JsonGet() JsonGet {
	return JsonGet{cs: append(b.get(), "JSON.GET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonGet() SJsonGet {
	return SJsonGet{cs: append(b.get(), "JSON.GET"), ks: InitSlot, cf: readonly}
}

func (c JsonGet) Key(key string) JsonGetKey {
	c.cs = append(c.cs, key)
	return (JsonGetKey)(c)
}

func (c SJsonGet) Key(key string) SJsonGetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonGetKey)(c)
}

type JsonGetIndent Completed

type SJsonGetIndent SCompleted

func (c JsonGetIndent) Newline(newline string) JsonGetNewline {
	c.cs = append(c.cs, "NEWLINE", newline)
	return (JsonGetNewline)(c)
}

func (c SJsonGetIndent) Newline(newline string) SJsonGetNewline {
	c.cs = append(c.cs, "NEWLINE", newline)
	return (SJsonGetNewline)(c)
}

func (c JsonGetIndent) Space(space string) JsonGetSpace {
	c.cs = append(c.cs, "SPACE", space)
	return (JsonGetSpace)(c)
}

func (c SJsonGetIndent) Space(space string) SJsonGetSpace {
	c.cs = append(c.cs, "SPACE", space)
	return (SJsonGetSpace)(c)
}

func (c JsonGetIndent) Paths(paths ...string) JsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetIndent) Paths(paths ...string) SJsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetIndent) Build() Completed {
	return Completed(c)
}

func (c SJsonGetIndent) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetIndent) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetIndent) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetKey Completed

type SJsonGetKey SCompleted

func (c JsonGetKey) Indent(indent string) JsonGetIndent {
	c.cs = append(c.cs, "INDENT", indent)
	return (JsonGetIndent)(c)
}

func (c SJsonGetKey) Indent(indent string) SJsonGetIndent {
	c.cs = append(c.cs, "INDENT", indent)
	return (SJsonGetIndent)(c)
}

func (c JsonGetKey) Newline(newline string) JsonGetNewline {
	c.cs = append(c.cs, "NEWLINE", newline)
	return (JsonGetNewline)(c)
}

func (c SJsonGetKey) Newline(newline string) SJsonGetNewline {
	c.cs = append(c.cs, "NEWLINE", newline)
	return (SJsonGetNewline)(c)
}

func (c JsonGetKey) Space(space string) JsonGetSpace {
	c.cs = append(c.cs, "SPACE", space)
	return (JsonGetSpace)(c)
}

func (c SJsonGetKey) Space(space string) SJsonGetSpace {
	c.cs = append(c.cs, "SPACE", space)
	return (SJsonGetSpace)(c)
}

func (c JsonGetKey) Paths(paths ...string) JsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetKey) Paths(paths ...string) SJsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetKey) Build() Completed {
	return Completed(c)
}

func (c SJsonGetKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetNewline Completed

type SJsonGetNewline SCompleted

func (c JsonGetNewline) Space(space string) JsonGetSpace {
	c.cs = append(c.cs, "SPACE", space)
	return (JsonGetSpace)(c)
}

func (c SJsonGetNewline) Space(space string) SJsonGetSpace {
	c.cs = append(c.cs, "SPACE", space)
	return (SJsonGetSpace)(c)
}

func (c JsonGetNewline) Paths(paths ...string) JsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetNewline) Paths(paths ...string) SJsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetNewline) Build() Completed {
	return Completed(c)
}

func (c SJsonGetNewline) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetNewline) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetNewline) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetPaths Completed

type SJsonGetPaths SCompleted

func (c JsonGetPaths) Paths(paths ...string) JsonGetPaths {
	c.cs = append(c.cs, paths...)
	return c
}

func (c SJsonGetPaths) Paths(paths ...string) SJsonGetPaths {
	c.cs = append(c.cs, paths...)
	return c
}

func (c JsonGetPaths) Build() Completed {
	return Completed(c)
}

func (c SJsonGetPaths) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetPaths) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetPaths) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetSpace Completed

type SJsonGetSpace SCompleted

func (c JsonGetSpace) Paths(paths ...string) JsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetSpace) Paths(paths ...string) SJsonGetPaths {
	c.cs = append(c.cs, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetSpace) Build() Completed {
	return Completed(c)
}

func (c SJsonGetSpace) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetSpace) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetSpace) Cache() SCacheable {
	return SCacheable(c)
}

type JsonMget Completed

type SJsonMget SCompleted

func (b *Builder) JsonMget() JsonMget {
	return JsonMget{cs: append(b.get(), "JSON.MGET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonMget() SJsonMget {
	return SJsonMget{cs: append(b.get(), "JSON.MGET"), ks: InitSlot, cf: readonly}
}

func (c JsonMget) Key(key ...string) JsonMgetKey {
	c.cs = append(c.cs, key...)
	return (JsonMgetKey)(c)
}

func (c SJsonMget) Key(key ...string) SJsonMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SJsonMgetKey)(c)
}

type JsonMgetKey Completed

type SJsonMgetKey SCompleted

func (c JsonMgetKey) Key(key ...string) JsonMgetKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SJsonMgetKey) Key(key ...string) SJsonMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c JsonMgetKey) Path(path string) JsonMgetPath {
	c.cs = append(c.cs, path)
	return (JsonMgetPath)(c)
}

func (c SJsonMgetKey) Path(path string) SJsonMgetPath {
	c.cs = append(c.cs, path)
	return (SJsonMgetPath)(c)
}

type JsonMgetPath Completed

type SJsonMgetPath SCompleted

func (c JsonMgetPath) Build() Completed {
	return Completed(c)
}

func (c SJsonMgetPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonNumincrby Completed

type SJsonNumincrby SCompleted

func (b *Builder) JsonNumincrby() JsonNumincrby {
	return JsonNumincrby{cs: append(b.get(), "JSON.NUMINCRBY"), ks: InitSlot}
}

func (b *SBuilder) JsonNumincrby() SJsonNumincrby {
	return SJsonNumincrby{cs: append(b.get(), "JSON.NUMINCRBY"), ks: InitSlot}
}

func (c JsonNumincrby) Key(key string) JsonNumincrbyKey {
	c.cs = append(c.cs, key)
	return (JsonNumincrbyKey)(c)
}

func (c SJsonNumincrby) Key(key string) SJsonNumincrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonNumincrbyKey)(c)
}

type JsonNumincrbyKey Completed

type SJsonNumincrbyKey SCompleted

func (c JsonNumincrbyKey) Path(path string) JsonNumincrbyPath {
	c.cs = append(c.cs, path)
	return (JsonNumincrbyPath)(c)
}

func (c SJsonNumincrbyKey) Path(path string) SJsonNumincrbyPath {
	c.cs = append(c.cs, path)
	return (SJsonNumincrbyPath)(c)
}

type JsonNumincrbyPath Completed

type SJsonNumincrbyPath SCompleted

func (c JsonNumincrbyPath) Value(value float64) JsonNumincrbyValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (JsonNumincrbyValue)(c)
}

func (c SJsonNumincrbyPath) Value(value float64) SJsonNumincrbyValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (SJsonNumincrbyValue)(c)
}

type JsonNumincrbyValue Completed

type SJsonNumincrbyValue SCompleted

func (c JsonNumincrbyValue) Build() Completed {
	return Completed(c)
}

func (c SJsonNumincrbyValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonObjkeys Completed

type SJsonObjkeys SCompleted

func (b *Builder) JsonObjkeys() JsonObjkeys {
	return JsonObjkeys{cs: append(b.get(), "JSON.OBJKEYS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonObjkeys() SJsonObjkeys {
	return SJsonObjkeys{cs: append(b.get(), "JSON.OBJKEYS"), ks: InitSlot, cf: readonly}
}

func (c JsonObjkeys) Key(key string) JsonObjkeysKey {
	c.cs = append(c.cs, key)
	return (JsonObjkeysKey)(c)
}

func (c SJsonObjkeys) Key(key string) SJsonObjkeysKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonObjkeysKey)(c)
}

type JsonObjkeysKey Completed

type SJsonObjkeysKey SCompleted

func (c JsonObjkeysKey) Path(path string) JsonObjkeysPath {
	c.cs = append(c.cs, path)
	return (JsonObjkeysPath)(c)
}

func (c SJsonObjkeysKey) Path(path string) SJsonObjkeysPath {
	c.cs = append(c.cs, path)
	return (SJsonObjkeysPath)(c)
}

func (c JsonObjkeysKey) Build() Completed {
	return Completed(c)
}

func (c SJsonObjkeysKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjkeysKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjkeysKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonObjkeysPath Completed

type SJsonObjkeysPath SCompleted

func (c JsonObjkeysPath) Build() Completed {
	return Completed(c)
}

func (c SJsonObjkeysPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjkeysPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjkeysPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonObjlen Completed

type SJsonObjlen SCompleted

func (b *Builder) JsonObjlen() JsonObjlen {
	return JsonObjlen{cs: append(b.get(), "JSON.OBJLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonObjlen() SJsonObjlen {
	return SJsonObjlen{cs: append(b.get(), "JSON.OBJLEN"), ks: InitSlot, cf: readonly}
}

func (c JsonObjlen) Key(key string) JsonObjlenKey {
	c.cs = append(c.cs, key)
	return (JsonObjlenKey)(c)
}

func (c SJsonObjlen) Key(key string) SJsonObjlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonObjlenKey)(c)
}

type JsonObjlenKey Completed

type SJsonObjlenKey SCompleted

func (c JsonObjlenKey) Path(path string) JsonObjlenPath {
	c.cs = append(c.cs, path)
	return (JsonObjlenPath)(c)
}

func (c SJsonObjlenKey) Path(path string) SJsonObjlenPath {
	c.cs = append(c.cs, path)
	return (SJsonObjlenPath)(c)
}

func (c JsonObjlenKey) Build() Completed {
	return Completed(c)
}

func (c SJsonObjlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonObjlenPath Completed

type SJsonObjlenPath SCompleted

func (c JsonObjlenPath) Build() Completed {
	return Completed(c)
}

func (c SJsonObjlenPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjlenPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjlenPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonResp Completed

type SJsonResp SCompleted

func (b *Builder) JsonResp() JsonResp {
	return JsonResp{cs: append(b.get(), "JSON.RESP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonResp() SJsonResp {
	return SJsonResp{cs: append(b.get(), "JSON.RESP"), ks: InitSlot, cf: readonly}
}

func (c JsonResp) Key(key string) JsonRespKey {
	c.cs = append(c.cs, key)
	return (JsonRespKey)(c)
}

func (c SJsonResp) Key(key string) SJsonRespKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonRespKey)(c)
}

type JsonRespKey Completed

type SJsonRespKey SCompleted

func (c JsonRespKey) Path(path string) JsonRespPath {
	c.cs = append(c.cs, path)
	return (JsonRespPath)(c)
}

func (c SJsonRespKey) Path(path string) SJsonRespPath {
	c.cs = append(c.cs, path)
	return (SJsonRespPath)(c)
}

func (c JsonRespKey) Build() Completed {
	return Completed(c)
}

func (c SJsonRespKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonRespKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonRespKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonRespPath Completed

type SJsonRespPath SCompleted

func (c JsonRespPath) Build() Completed {
	return Completed(c)
}

func (c SJsonRespPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonRespPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonRespPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonSet Completed

type SJsonSet SCompleted

func (b *Builder) JsonSet() JsonSet {
	return JsonSet{cs: append(b.get(), "JSON.SET"), ks: InitSlot}
}

func (b *SBuilder) JsonSet() SJsonSet {
	return SJsonSet{cs: append(b.get(), "JSON.SET"), ks: InitSlot}
}

func (c JsonSet) Key(key string) JsonSetKey {
	c.cs = append(c.cs, key)
	return (JsonSetKey)(c)
}

func (c SJsonSet) Key(key string) SJsonSetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonSetKey)(c)
}

type JsonSetConditionNx Completed

type SJsonSetConditionNx SCompleted

func (c JsonSetConditionNx) Build() Completed {
	return Completed(c)
}

func (c SJsonSetConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type JsonSetConditionXx Completed

type SJsonSetConditionXx SCompleted

func (c JsonSetConditionXx) Build() Completed {
	return Completed(c)
}

func (c SJsonSetConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type JsonSetKey Completed

type SJsonSetKey SCompleted

func (c JsonSetKey) Path(path string) JsonSetPath {
	c.cs = append(c.cs, path)
	return (JsonSetPath)(c)
}

func (c SJsonSetKey) Path(path string) SJsonSetPath {
	c.cs = append(c.cs, path)
	return (SJsonSetPath)(c)
}

type JsonSetPath Completed

type SJsonSetPath SCompleted

func (c JsonSetPath) Value(value string) JsonSetValue {
	c.cs = append(c.cs, value)
	return (JsonSetValue)(c)
}

func (c SJsonSetPath) Value(value string) SJsonSetValue {
	c.cs = append(c.cs, value)
	return (SJsonSetValue)(c)
}

type JsonSetValue Completed

type SJsonSetValue SCompleted

func (c JsonSetValue) Nx() JsonSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (JsonSetConditionNx)(c)
}

func (c SJsonSetValue) Nx() SJsonSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SJsonSetConditionNx)(c)
}

func (c JsonSetValue) Xx() JsonSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (JsonSetConditionXx)(c)
}

func (c SJsonSetValue) Xx() SJsonSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SJsonSetConditionXx)(c)
}

func (c JsonSetValue) Build() Completed {
	return Completed(c)
}

func (c SJsonSetValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonStrappend Completed

type SJsonStrappend SCompleted

func (b *Builder) JsonStrappend() JsonStrappend {
	return JsonStrappend{cs: append(b.get(), "JSON.STRAPPEND"), ks: InitSlot}
}

func (b *SBuilder) JsonStrappend() SJsonStrappend {
	return SJsonStrappend{cs: append(b.get(), "JSON.STRAPPEND"), ks: InitSlot}
}

func (c JsonStrappend) Key(key string) JsonStrappendKey {
	c.cs = append(c.cs, key)
	return (JsonStrappendKey)(c)
}

func (c SJsonStrappend) Key(key string) SJsonStrappendKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonStrappendKey)(c)
}

type JsonStrappendKey Completed

type SJsonStrappendKey SCompleted

func (c JsonStrappendKey) Path(path string) JsonStrappendPath {
	c.cs = append(c.cs, path)
	return (JsonStrappendPath)(c)
}

func (c SJsonStrappendKey) Path(path string) SJsonStrappendPath {
	c.cs = append(c.cs, path)
	return (SJsonStrappendPath)(c)
}

func (c JsonStrappendKey) Value(value string) JsonStrappendValue {
	c.cs = append(c.cs, value)
	return (JsonStrappendValue)(c)
}

func (c SJsonStrappendKey) Value(value string) SJsonStrappendValue {
	c.cs = append(c.cs, value)
	return (SJsonStrappendValue)(c)
}

type JsonStrappendPath Completed

type SJsonStrappendPath SCompleted

func (c JsonStrappendPath) Value(value string) JsonStrappendValue {
	c.cs = append(c.cs, value)
	return (JsonStrappendValue)(c)
}

func (c SJsonStrappendPath) Value(value string) SJsonStrappendValue {
	c.cs = append(c.cs, value)
	return (SJsonStrappendValue)(c)
}

type JsonStrappendValue Completed

type SJsonStrappendValue SCompleted

func (c JsonStrappendValue) Build() Completed {
	return Completed(c)
}

func (c SJsonStrappendValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonStrlen Completed

type SJsonStrlen SCompleted

func (b *Builder) JsonStrlen() JsonStrlen {
	return JsonStrlen{cs: append(b.get(), "JSON.STRLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonStrlen() SJsonStrlen {
	return SJsonStrlen{cs: append(b.get(), "JSON.STRLEN"), ks: InitSlot, cf: readonly}
}

func (c JsonStrlen) Key(key string) JsonStrlenKey {
	c.cs = append(c.cs, key)
	return (JsonStrlenKey)(c)
}

func (c SJsonStrlen) Key(key string) SJsonStrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonStrlenKey)(c)
}

type JsonStrlenKey Completed

type SJsonStrlenKey SCompleted

func (c JsonStrlenKey) Path(path string) JsonStrlenPath {
	c.cs = append(c.cs, path)
	return (JsonStrlenPath)(c)
}

func (c SJsonStrlenKey) Path(path string) SJsonStrlenPath {
	c.cs = append(c.cs, path)
	return (SJsonStrlenPath)(c)
}

func (c JsonStrlenKey) Build() Completed {
	return Completed(c)
}

func (c SJsonStrlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonStrlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonStrlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonStrlenPath Completed

type SJsonStrlenPath SCompleted

func (c JsonStrlenPath) Build() Completed {
	return Completed(c)
}

func (c SJsonStrlenPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonStrlenPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonStrlenPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonToggle Completed

type SJsonToggle SCompleted

func (b *Builder) JsonToggle() JsonToggle {
	return JsonToggle{cs: append(b.get(), "JSON.TOGGLE"), ks: InitSlot}
}

func (b *SBuilder) JsonToggle() SJsonToggle {
	return SJsonToggle{cs: append(b.get(), "JSON.TOGGLE"), ks: InitSlot}
}

func (c JsonToggle) Key(key string) JsonToggleKey {
	c.cs = append(c.cs, key)
	return (JsonToggleKey)(c)
}

func (c SJsonToggle) Key(key string) SJsonToggleKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonToggleKey)(c)
}

type JsonToggleKey Completed

type SJsonToggleKey SCompleted

func (c JsonToggleKey) Path(path string) JsonTogglePath {
	c.cs = append(c.cs, path)
	return (JsonTogglePath)(c)
}

func (c SJsonToggleKey) Path(path string) SJsonTogglePath {
	c.cs = append(c.cs, path)
	return (SJsonTogglePath)(c)
}

func (c JsonToggleKey) Build() Completed {
	return Completed(c)
}

func (c SJsonToggleKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonTogglePath Completed

type SJsonTogglePath SCompleted

func (c JsonTogglePath) Build() Completed {
	return Completed(c)
}

func (c SJsonTogglePath) Build() SCompleted {
	return SCompleted(c)
}

type JsonType Completed

type SJsonType SCompleted

func (b *Builder) JsonType() JsonType {
	return JsonType{cs: append(b.get(), "JSON.TYPE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) JsonType() SJsonType {
	return SJsonType{cs: append(b.get(), "JSON.TYPE"), ks: InitSlot, cf: readonly}
}

func (c JsonType) Key(key string) JsonTypeKey {
	c.cs = append(c.cs, key)
	return (JsonTypeKey)(c)
}

func (c SJsonType) Key(key string) SJsonTypeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SJsonTypeKey)(c)
}

type JsonTypeKey Completed

type SJsonTypeKey SCompleted

func (c JsonTypeKey) Path(path string) JsonTypePath {
	c.cs = append(c.cs, path)
	return (JsonTypePath)(c)
}

func (c SJsonTypeKey) Path(path string) SJsonTypePath {
	c.cs = append(c.cs, path)
	return (SJsonTypePath)(c)
}

func (c JsonTypeKey) Build() Completed {
	return Completed(c)
}

func (c SJsonTypeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonTypeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonTypeKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonTypePath Completed

type SJsonTypePath SCompleted

func (c JsonTypePath) Build() Completed {
	return Completed(c)
}

func (c SJsonTypePath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonTypePath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonTypePath) Cache() SCacheable {
	return SCacheable(c)
}

type Keys Completed

type SKeys SCompleted

func (b *Builder) Keys() Keys {
	return Keys{cs: append(b.get(), "KEYS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Keys() SKeys {
	return SKeys{cs: append(b.get(), "KEYS"), ks: InitSlot, cf: readonly}
}

func (c Keys) Pattern(pattern string) KeysPattern {
	c.cs = append(c.cs, pattern)
	return (KeysPattern)(c)
}

func (c SKeys) Pattern(pattern string) SKeysPattern {
	c.cs = append(c.cs, pattern)
	return (SKeysPattern)(c)
}

type KeysPattern Completed

type SKeysPattern SCompleted

func (c KeysPattern) Build() Completed {
	return Completed(c)
}

func (c SKeysPattern) Build() SCompleted {
	return SCompleted(c)
}

type Lastsave Completed

type SLastsave SCompleted

func (b *Builder) Lastsave() Lastsave {
	return Lastsave{cs: append(b.get(), "LASTSAVE"), ks: InitSlot}
}

func (b *SBuilder) Lastsave() SLastsave {
	return SLastsave{cs: append(b.get(), "LASTSAVE"), ks: InitSlot}
}

func (c Lastsave) Build() Completed {
	return Completed(c)
}

func (c SLastsave) Build() SCompleted {
	return SCompleted(c)
}

type LatencyDoctor Completed

type SLatencyDoctor SCompleted

func (b *Builder) LatencyDoctor() LatencyDoctor {
	return LatencyDoctor{cs: append(b.get(), "LATENCY", "DOCTOR"), ks: InitSlot}
}

func (b *SBuilder) LatencyDoctor() SLatencyDoctor {
	return SLatencyDoctor{cs: append(b.get(), "LATENCY", "DOCTOR"), ks: InitSlot}
}

func (c LatencyDoctor) Build() Completed {
	return Completed(c)
}

func (c SLatencyDoctor) Build() SCompleted {
	return SCompleted(c)
}

type LatencyGraph Completed

type SLatencyGraph SCompleted

func (b *Builder) LatencyGraph() LatencyGraph {
	return LatencyGraph{cs: append(b.get(), "LATENCY", "GRAPH"), ks: InitSlot}
}

func (b *SBuilder) LatencyGraph() SLatencyGraph {
	return SLatencyGraph{cs: append(b.get(), "LATENCY", "GRAPH"), ks: InitSlot}
}

func (c LatencyGraph) Event(event string) LatencyGraphEvent {
	c.cs = append(c.cs, event)
	return (LatencyGraphEvent)(c)
}

func (c SLatencyGraph) Event(event string) SLatencyGraphEvent {
	c.cs = append(c.cs, event)
	return (SLatencyGraphEvent)(c)
}

type LatencyGraphEvent Completed

type SLatencyGraphEvent SCompleted

func (c LatencyGraphEvent) Build() Completed {
	return Completed(c)
}

func (c SLatencyGraphEvent) Build() SCompleted {
	return SCompleted(c)
}

type LatencyHelp Completed

type SLatencyHelp SCompleted

func (b *Builder) LatencyHelp() LatencyHelp {
	return LatencyHelp{cs: append(b.get(), "LATENCY", "HELP"), ks: InitSlot}
}

func (b *SBuilder) LatencyHelp() SLatencyHelp {
	return SLatencyHelp{cs: append(b.get(), "LATENCY", "HELP"), ks: InitSlot}
}

func (c LatencyHelp) Build() Completed {
	return Completed(c)
}

func (c SLatencyHelp) Build() SCompleted {
	return SCompleted(c)
}

type LatencyHistory Completed

type SLatencyHistory SCompleted

func (b *Builder) LatencyHistory() LatencyHistory {
	return LatencyHistory{cs: append(b.get(), "LATENCY", "HISTORY"), ks: InitSlot}
}

func (b *SBuilder) LatencyHistory() SLatencyHistory {
	return SLatencyHistory{cs: append(b.get(), "LATENCY", "HISTORY"), ks: InitSlot}
}

func (c LatencyHistory) Event(event string) LatencyHistoryEvent {
	c.cs = append(c.cs, event)
	return (LatencyHistoryEvent)(c)
}

func (c SLatencyHistory) Event(event string) SLatencyHistoryEvent {
	c.cs = append(c.cs, event)
	return (SLatencyHistoryEvent)(c)
}

type LatencyHistoryEvent Completed

type SLatencyHistoryEvent SCompleted

func (c LatencyHistoryEvent) Build() Completed {
	return Completed(c)
}

func (c SLatencyHistoryEvent) Build() SCompleted {
	return SCompleted(c)
}

type LatencyLatest Completed

type SLatencyLatest SCompleted

func (b *Builder) LatencyLatest() LatencyLatest {
	return LatencyLatest{cs: append(b.get(), "LATENCY", "LATEST"), ks: InitSlot}
}

func (b *SBuilder) LatencyLatest() SLatencyLatest {
	return SLatencyLatest{cs: append(b.get(), "LATENCY", "LATEST"), ks: InitSlot}
}

func (c LatencyLatest) Build() Completed {
	return Completed(c)
}

func (c SLatencyLatest) Build() SCompleted {
	return SCompleted(c)
}

type LatencyReset Completed

type SLatencyReset SCompleted

func (b *Builder) LatencyReset() LatencyReset {
	return LatencyReset{cs: append(b.get(), "LATENCY", "RESET"), ks: InitSlot}
}

func (b *SBuilder) LatencyReset() SLatencyReset {
	return SLatencyReset{cs: append(b.get(), "LATENCY", "RESET"), ks: InitSlot}
}

func (c LatencyReset) Event(event ...string) LatencyResetEvent {
	c.cs = append(c.cs, event...)
	return (LatencyResetEvent)(c)
}

func (c SLatencyReset) Event(event ...string) SLatencyResetEvent {
	c.cs = append(c.cs, event...)
	return (SLatencyResetEvent)(c)
}

func (c LatencyReset) Build() Completed {
	return Completed(c)
}

func (c SLatencyReset) Build() SCompleted {
	return SCompleted(c)
}

type LatencyResetEvent Completed

type SLatencyResetEvent SCompleted

func (c LatencyResetEvent) Event(event ...string) LatencyResetEvent {
	c.cs = append(c.cs, event...)
	return c
}

func (c SLatencyResetEvent) Event(event ...string) SLatencyResetEvent {
	c.cs = append(c.cs, event...)
	return c
}

func (c LatencyResetEvent) Build() Completed {
	return Completed(c)
}

func (c SLatencyResetEvent) Build() SCompleted {
	return SCompleted(c)
}

type Lcs Completed

type SLcs SCompleted

func (b *Builder) Lcs() Lcs {
	return Lcs{cs: append(b.get(), "LCS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Lcs() SLcs {
	return SLcs{cs: append(b.get(), "LCS"), ks: InitSlot, cf: readonly}
}

func (c Lcs) Key1(key1 string) LcsKey1 {
	c.cs = append(c.cs, key1)
	return (LcsKey1)(c)
}

func (c SLcs) Key1(key1 string) SLcsKey1 {
	c.ks = checkSlot(c.ks, slot(key1))
	c.cs = append(c.cs, key1)
	return (SLcsKey1)(c)
}

type LcsIdx Completed

type SLcsIdx SCompleted

func (c LcsIdx) Minmatchlen(len int64) LcsMinmatchlen {
	c.cs = append(c.cs, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (LcsMinmatchlen)(c)
}

func (c SLcsIdx) Minmatchlen(len int64) SLcsMinmatchlen {
	c.cs = append(c.cs, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (SLcsMinmatchlen)(c)
}

func (c LcsIdx) Withmatchlen() LcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsIdx) Withmatchlen() SLcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsIdx) Build() Completed {
	return Completed(c)
}

func (c SLcsIdx) Build() SCompleted {
	return SCompleted(c)
}

type LcsKey1 Completed

type SLcsKey1 SCompleted

func (c LcsKey1) Key2(key2 string) LcsKey2 {
	c.cs = append(c.cs, key2)
	return (LcsKey2)(c)
}

func (c SLcsKey1) Key2(key2 string) SLcsKey2 {
	c.ks = checkSlot(c.ks, slot(key2))
	c.cs = append(c.cs, key2)
	return (SLcsKey2)(c)
}

type LcsKey2 Completed

type SLcsKey2 SCompleted

func (c LcsKey2) Len() LcsLen {
	c.cs = append(c.cs, "LEN")
	return (LcsLen)(c)
}

func (c SLcsKey2) Len() SLcsLen {
	c.cs = append(c.cs, "LEN")
	return (SLcsLen)(c)
}

func (c LcsKey2) Idx() LcsIdx {
	c.cs = append(c.cs, "IDX")
	return (LcsIdx)(c)
}

func (c SLcsKey2) Idx() SLcsIdx {
	c.cs = append(c.cs, "IDX")
	return (SLcsIdx)(c)
}

func (c LcsKey2) Minmatchlen(len int64) LcsMinmatchlen {
	c.cs = append(c.cs, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (LcsMinmatchlen)(c)
}

func (c SLcsKey2) Minmatchlen(len int64) SLcsMinmatchlen {
	c.cs = append(c.cs, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (SLcsMinmatchlen)(c)
}

func (c LcsKey2) Withmatchlen() LcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsKey2) Withmatchlen() SLcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsKey2) Build() Completed {
	return Completed(c)
}

func (c SLcsKey2) Build() SCompleted {
	return SCompleted(c)
}

type LcsLen Completed

type SLcsLen SCompleted

func (c LcsLen) Idx() LcsIdx {
	c.cs = append(c.cs, "IDX")
	return (LcsIdx)(c)
}

func (c SLcsLen) Idx() SLcsIdx {
	c.cs = append(c.cs, "IDX")
	return (SLcsIdx)(c)
}

func (c LcsLen) Minmatchlen(len int64) LcsMinmatchlen {
	c.cs = append(c.cs, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (LcsMinmatchlen)(c)
}

func (c SLcsLen) Minmatchlen(len int64) SLcsMinmatchlen {
	c.cs = append(c.cs, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (SLcsMinmatchlen)(c)
}

func (c LcsLen) Withmatchlen() LcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsLen) Withmatchlen() SLcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsLen) Build() Completed {
	return Completed(c)
}

func (c SLcsLen) Build() SCompleted {
	return SCompleted(c)
}

type LcsMinmatchlen Completed

type SLcsMinmatchlen SCompleted

func (c LcsMinmatchlen) Withmatchlen() LcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsMinmatchlen) Withmatchlen() SLcsWithmatchlen {
	c.cs = append(c.cs, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsMinmatchlen) Build() Completed {
	return Completed(c)
}

func (c SLcsMinmatchlen) Build() SCompleted {
	return SCompleted(c)
}

type LcsWithmatchlen Completed

type SLcsWithmatchlen SCompleted

func (c LcsWithmatchlen) Build() Completed {
	return Completed(c)
}

func (c SLcsWithmatchlen) Build() SCompleted {
	return SCompleted(c)
}

type Lindex Completed

type SLindex SCompleted

func (b *Builder) Lindex() Lindex {
	return Lindex{cs: append(b.get(), "LINDEX"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Lindex() SLindex {
	return SLindex{cs: append(b.get(), "LINDEX"), ks: InitSlot, cf: readonly}
}

func (c Lindex) Key(key string) LindexKey {
	c.cs = append(c.cs, key)
	return (LindexKey)(c)
}

func (c SLindex) Key(key string) SLindexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLindexKey)(c)
}

type LindexIndex Completed

type SLindexIndex SCompleted

func (c LindexIndex) Build() Completed {
	return Completed(c)
}

func (c SLindexIndex) Build() SCompleted {
	return SCompleted(c)
}

func (c LindexIndex) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLindexIndex) Cache() SCacheable {
	return SCacheable(c)
}

type LindexKey Completed

type SLindexKey SCompleted

func (c LindexKey) Index(index int64) LindexIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (LindexIndex)(c)
}

func (c SLindexKey) Index(index int64) SLindexIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (SLindexIndex)(c)
}

type Linsert Completed

type SLinsert SCompleted

func (b *Builder) Linsert() Linsert {
	return Linsert{cs: append(b.get(), "LINSERT"), ks: InitSlot}
}

func (b *SBuilder) Linsert() SLinsert {
	return SLinsert{cs: append(b.get(), "LINSERT"), ks: InitSlot}
}

func (c Linsert) Key(key string) LinsertKey {
	c.cs = append(c.cs, key)
	return (LinsertKey)(c)
}

func (c SLinsert) Key(key string) SLinsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLinsertKey)(c)
}

type LinsertElement Completed

type SLinsertElement SCompleted

func (c LinsertElement) Build() Completed {
	return Completed(c)
}

func (c SLinsertElement) Build() SCompleted {
	return SCompleted(c)
}

type LinsertKey Completed

type SLinsertKey SCompleted

func (c LinsertKey) Before() LinsertWhereBefore {
	c.cs = append(c.cs, "BEFORE")
	return (LinsertWhereBefore)(c)
}

func (c SLinsertKey) Before() SLinsertWhereBefore {
	c.cs = append(c.cs, "BEFORE")
	return (SLinsertWhereBefore)(c)
}

func (c LinsertKey) After() LinsertWhereAfter {
	c.cs = append(c.cs, "AFTER")
	return (LinsertWhereAfter)(c)
}

func (c SLinsertKey) After() SLinsertWhereAfter {
	c.cs = append(c.cs, "AFTER")
	return (SLinsertWhereAfter)(c)
}

type LinsertPivot Completed

type SLinsertPivot SCompleted

func (c LinsertPivot) Element(element string) LinsertElement {
	c.cs = append(c.cs, element)
	return (LinsertElement)(c)
}

func (c SLinsertPivot) Element(element string) SLinsertElement {
	c.cs = append(c.cs, element)
	return (SLinsertElement)(c)
}

type LinsertWhereAfter Completed

type SLinsertWhereAfter SCompleted

func (c LinsertWhereAfter) Pivot(pivot string) LinsertPivot {
	c.cs = append(c.cs, pivot)
	return (LinsertPivot)(c)
}

func (c SLinsertWhereAfter) Pivot(pivot string) SLinsertPivot {
	c.cs = append(c.cs, pivot)
	return (SLinsertPivot)(c)
}

type LinsertWhereBefore Completed

type SLinsertWhereBefore SCompleted

func (c LinsertWhereBefore) Pivot(pivot string) LinsertPivot {
	c.cs = append(c.cs, pivot)
	return (LinsertPivot)(c)
}

func (c SLinsertWhereBefore) Pivot(pivot string) SLinsertPivot {
	c.cs = append(c.cs, pivot)
	return (SLinsertPivot)(c)
}

type Llen Completed

type SLlen SCompleted

func (b *Builder) Llen() Llen {
	return Llen{cs: append(b.get(), "LLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Llen() SLlen {
	return SLlen{cs: append(b.get(), "LLEN"), ks: InitSlot, cf: readonly}
}

func (c Llen) Key(key string) LlenKey {
	c.cs = append(c.cs, key)
	return (LlenKey)(c)
}

func (c SLlen) Key(key string) SLlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLlenKey)(c)
}

type LlenKey Completed

type SLlenKey SCompleted

func (c LlenKey) Build() Completed {
	return Completed(c)
}

func (c SLlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c LlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type Lmove Completed

type SLmove SCompleted

func (b *Builder) Lmove() Lmove {
	return Lmove{cs: append(b.get(), "LMOVE"), ks: InitSlot}
}

func (b *SBuilder) Lmove() SLmove {
	return SLmove{cs: append(b.get(), "LMOVE"), ks: InitSlot}
}

func (c Lmove) Source(source string) LmoveSource {
	c.cs = append(c.cs, source)
	return (LmoveSource)(c)
}

func (c SLmove) Source(source string) SLmoveSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SLmoveSource)(c)
}

type LmoveDestination Completed

type SLmoveDestination SCompleted

func (c LmoveDestination) Left() LmoveWherefromLeft {
	c.cs = append(c.cs, "LEFT")
	return (LmoveWherefromLeft)(c)
}

func (c SLmoveDestination) Left() SLmoveWherefromLeft {
	c.cs = append(c.cs, "LEFT")
	return (SLmoveWherefromLeft)(c)
}

func (c LmoveDestination) Right() LmoveWherefromRight {
	c.cs = append(c.cs, "RIGHT")
	return (LmoveWherefromRight)(c)
}

func (c SLmoveDestination) Right() SLmoveWherefromRight {
	c.cs = append(c.cs, "RIGHT")
	return (SLmoveWherefromRight)(c)
}

type LmoveSource Completed

type SLmoveSource SCompleted

func (c LmoveSource) Destination(destination string) LmoveDestination {
	c.cs = append(c.cs, destination)
	return (LmoveDestination)(c)
}

func (c SLmoveSource) Destination(destination string) SLmoveDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SLmoveDestination)(c)
}

type LmoveWherefromLeft Completed

type SLmoveWherefromLeft SCompleted

func (c LmoveWherefromLeft) Left() LmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (LmoveWheretoLeft)(c)
}

func (c SLmoveWherefromLeft) Left() SLmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (SLmoveWheretoLeft)(c)
}

func (c LmoveWherefromLeft) Right() LmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (LmoveWheretoRight)(c)
}

func (c SLmoveWherefromLeft) Right() SLmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (SLmoveWheretoRight)(c)
}

type LmoveWherefromRight Completed

type SLmoveWherefromRight SCompleted

func (c LmoveWherefromRight) Left() LmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (LmoveWheretoLeft)(c)
}

func (c SLmoveWherefromRight) Left() SLmoveWheretoLeft {
	c.cs = append(c.cs, "LEFT")
	return (SLmoveWheretoLeft)(c)
}

func (c LmoveWherefromRight) Right() LmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (LmoveWheretoRight)(c)
}

func (c SLmoveWherefromRight) Right() SLmoveWheretoRight {
	c.cs = append(c.cs, "RIGHT")
	return (SLmoveWheretoRight)(c)
}

type LmoveWheretoLeft Completed

type SLmoveWheretoLeft SCompleted

func (c LmoveWheretoLeft) Build() Completed {
	return Completed(c)
}

func (c SLmoveWheretoLeft) Build() SCompleted {
	return SCompleted(c)
}

type LmoveWheretoRight Completed

type SLmoveWheretoRight SCompleted

func (c LmoveWheretoRight) Build() Completed {
	return Completed(c)
}

func (c SLmoveWheretoRight) Build() SCompleted {
	return SCompleted(c)
}

type Lmpop Completed

type SLmpop SCompleted

func (b *Builder) Lmpop() Lmpop {
	return Lmpop{cs: append(b.get(), "LMPOP"), ks: InitSlot}
}

func (b *SBuilder) Lmpop() SLmpop {
	return SLmpop{cs: append(b.get(), "LMPOP"), ks: InitSlot}
}

func (c Lmpop) Numkeys(numkeys int64) LmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (LmpopNumkeys)(c)
}

func (c SLmpop) Numkeys(numkeys int64) SLmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SLmpopNumkeys)(c)
}

type LmpopCount Completed

type SLmpopCount SCompleted

func (c LmpopCount) Build() Completed {
	return Completed(c)
}

func (c SLmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type LmpopKey Completed

type SLmpopKey SCompleted

func (c LmpopKey) Key(key ...string) LmpopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SLmpopKey) Key(key ...string) SLmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c LmpopKey) Left() LmpopWhereLeft {
	c.cs = append(c.cs, "LEFT")
	return (LmpopWhereLeft)(c)
}

func (c SLmpopKey) Left() SLmpopWhereLeft {
	c.cs = append(c.cs, "LEFT")
	return (SLmpopWhereLeft)(c)
}

func (c LmpopKey) Right() LmpopWhereRight {
	c.cs = append(c.cs, "RIGHT")
	return (LmpopWhereRight)(c)
}

func (c SLmpopKey) Right() SLmpopWhereRight {
	c.cs = append(c.cs, "RIGHT")
	return (SLmpopWhereRight)(c)
}

type LmpopNumkeys Completed

type SLmpopNumkeys SCompleted

func (c LmpopNumkeys) Key(key ...string) LmpopKey {
	c.cs = append(c.cs, key...)
	return (LmpopKey)(c)
}

func (c SLmpopNumkeys) Key(key ...string) SLmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SLmpopKey)(c)
}

type LmpopWhereLeft Completed

type SLmpopWhereLeft SCompleted

func (c LmpopWhereLeft) Count(count int64) LmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (LmpopCount)(c)
}

func (c SLmpopWhereLeft) Count(count int64) SLmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SLmpopCount)(c)
}

func (c LmpopWhereLeft) Build() Completed {
	return Completed(c)
}

func (c SLmpopWhereLeft) Build() SCompleted {
	return SCompleted(c)
}

type LmpopWhereRight Completed

type SLmpopWhereRight SCompleted

func (c LmpopWhereRight) Count(count int64) LmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (LmpopCount)(c)
}

func (c SLmpopWhereRight) Count(count int64) SLmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SLmpopCount)(c)
}

func (c LmpopWhereRight) Build() Completed {
	return Completed(c)
}

func (c SLmpopWhereRight) Build() SCompleted {
	return SCompleted(c)
}

type Lolwut Completed

type SLolwut SCompleted

func (b *Builder) Lolwut() Lolwut {
	return Lolwut{cs: append(b.get(), "LOLWUT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Lolwut() SLolwut {
	return SLolwut{cs: append(b.get(), "LOLWUT"), ks: InitSlot, cf: readonly}
}

func (c Lolwut) Version(version int64) LolwutVersion {
	c.cs = append(c.cs, "VERSION", strconv.FormatInt(version, 10))
	return (LolwutVersion)(c)
}

func (c SLolwut) Version(version int64) SLolwutVersion {
	c.cs = append(c.cs, "VERSION", strconv.FormatInt(version, 10))
	return (SLolwutVersion)(c)
}

func (c Lolwut) Build() Completed {
	return Completed(c)
}

func (c SLolwut) Build() SCompleted {
	return SCompleted(c)
}

type LolwutVersion Completed

type SLolwutVersion SCompleted

func (c LolwutVersion) Build() Completed {
	return Completed(c)
}

func (c SLolwutVersion) Build() SCompleted {
	return SCompleted(c)
}

type Lpop Completed

type SLpop SCompleted

func (b *Builder) Lpop() Lpop {
	return Lpop{cs: append(b.get(), "LPOP"), ks: InitSlot}
}

func (b *SBuilder) Lpop() SLpop {
	return SLpop{cs: append(b.get(), "LPOP"), ks: InitSlot}
}

func (c Lpop) Key(key string) LpopKey {
	c.cs = append(c.cs, key)
	return (LpopKey)(c)
}

func (c SLpop) Key(key string) SLpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLpopKey)(c)
}

type LpopCount Completed

type SLpopCount SCompleted

func (c LpopCount) Build() Completed {
	return Completed(c)
}

func (c SLpopCount) Build() SCompleted {
	return SCompleted(c)
}

type LpopKey Completed

type SLpopKey SCompleted

func (c LpopKey) Count(count int64) LpopCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (LpopCount)(c)
}

func (c SLpopKey) Count(count int64) SLpopCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SLpopCount)(c)
}

func (c LpopKey) Build() Completed {
	return Completed(c)
}

func (c SLpopKey) Build() SCompleted {
	return SCompleted(c)
}

type Lpos Completed

type SLpos SCompleted

func (b *Builder) Lpos() Lpos {
	return Lpos{cs: append(b.get(), "LPOS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Lpos() SLpos {
	return SLpos{cs: append(b.get(), "LPOS"), ks: InitSlot, cf: readonly}
}

func (c Lpos) Key(key string) LposKey {
	c.cs = append(c.cs, key)
	return (LposKey)(c)
}

func (c SLpos) Key(key string) SLposKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLposKey)(c)
}

type LposCount Completed

type SLposCount SCompleted

func (c LposCount) Maxlen(len int64) LposMaxlen {
	c.cs = append(c.cs, "MAXLEN", strconv.FormatInt(len, 10))
	return (LposMaxlen)(c)
}

func (c SLposCount) Maxlen(len int64) SLposMaxlen {
	c.cs = append(c.cs, "MAXLEN", strconv.FormatInt(len, 10))
	return (SLposMaxlen)(c)
}

func (c LposCount) Build() Completed {
	return Completed(c)
}

func (c SLposCount) Build() SCompleted {
	return SCompleted(c)
}

func (c LposCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposCount) Cache() SCacheable {
	return SCacheable(c)
}

type LposElement Completed

type SLposElement SCompleted

func (c LposElement) Rank(rank int64) LposRank {
	c.cs = append(c.cs, "RANK", strconv.FormatInt(rank, 10))
	return (LposRank)(c)
}

func (c SLposElement) Rank(rank int64) SLposRank {
	c.cs = append(c.cs, "RANK", strconv.FormatInt(rank, 10))
	return (SLposRank)(c)
}

func (c LposElement) Count(numMatches int64) LposCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(numMatches, 10))
	return (LposCount)(c)
}

func (c SLposElement) Count(numMatches int64) SLposCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(numMatches, 10))
	return (SLposCount)(c)
}

func (c LposElement) Maxlen(len int64) LposMaxlen {
	c.cs = append(c.cs, "MAXLEN", strconv.FormatInt(len, 10))
	return (LposMaxlen)(c)
}

func (c SLposElement) Maxlen(len int64) SLposMaxlen {
	c.cs = append(c.cs, "MAXLEN", strconv.FormatInt(len, 10))
	return (SLposMaxlen)(c)
}

func (c LposElement) Build() Completed {
	return Completed(c)
}

func (c SLposElement) Build() SCompleted {
	return SCompleted(c)
}

func (c LposElement) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposElement) Cache() SCacheable {
	return SCacheable(c)
}

type LposKey Completed

type SLposKey SCompleted

func (c LposKey) Element(element string) LposElement {
	c.cs = append(c.cs, element)
	return (LposElement)(c)
}

func (c SLposKey) Element(element string) SLposElement {
	c.cs = append(c.cs, element)
	return (SLposElement)(c)
}

type LposMaxlen Completed

type SLposMaxlen SCompleted

func (c LposMaxlen) Build() Completed {
	return Completed(c)
}

func (c SLposMaxlen) Build() SCompleted {
	return SCompleted(c)
}

func (c LposMaxlen) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposMaxlen) Cache() SCacheable {
	return SCacheable(c)
}

type LposRank Completed

type SLposRank SCompleted

func (c LposRank) Count(numMatches int64) LposCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(numMatches, 10))
	return (LposCount)(c)
}

func (c SLposRank) Count(numMatches int64) SLposCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(numMatches, 10))
	return (SLposCount)(c)
}

func (c LposRank) Maxlen(len int64) LposMaxlen {
	c.cs = append(c.cs, "MAXLEN", strconv.FormatInt(len, 10))
	return (LposMaxlen)(c)
}

func (c SLposRank) Maxlen(len int64) SLposMaxlen {
	c.cs = append(c.cs, "MAXLEN", strconv.FormatInt(len, 10))
	return (SLposMaxlen)(c)
}

func (c LposRank) Build() Completed {
	return Completed(c)
}

func (c SLposRank) Build() SCompleted {
	return SCompleted(c)
}

func (c LposRank) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposRank) Cache() SCacheable {
	return SCacheable(c)
}

type Lpush Completed

type SLpush SCompleted

func (b *Builder) Lpush() Lpush {
	return Lpush{cs: append(b.get(), "LPUSH"), ks: InitSlot}
}

func (b *SBuilder) Lpush() SLpush {
	return SLpush{cs: append(b.get(), "LPUSH"), ks: InitSlot}
}

func (c Lpush) Key(key string) LpushKey {
	c.cs = append(c.cs, key)
	return (LpushKey)(c)
}

func (c SLpush) Key(key string) SLpushKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLpushKey)(c)
}

type LpushElement Completed

type SLpushElement SCompleted

func (c LpushElement) Element(element ...string) LpushElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c SLpushElement) Element(element ...string) SLpushElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c LpushElement) Build() Completed {
	return Completed(c)
}

func (c SLpushElement) Build() SCompleted {
	return SCompleted(c)
}

type LpushKey Completed

type SLpushKey SCompleted

func (c LpushKey) Element(element ...string) LpushElement {
	c.cs = append(c.cs, element...)
	return (LpushElement)(c)
}

func (c SLpushKey) Element(element ...string) SLpushElement {
	c.cs = append(c.cs, element...)
	return (SLpushElement)(c)
}

type Lpushx Completed

type SLpushx SCompleted

func (b *Builder) Lpushx() Lpushx {
	return Lpushx{cs: append(b.get(), "LPUSHX"), ks: InitSlot}
}

func (b *SBuilder) Lpushx() SLpushx {
	return SLpushx{cs: append(b.get(), "LPUSHX"), ks: InitSlot}
}

func (c Lpushx) Key(key string) LpushxKey {
	c.cs = append(c.cs, key)
	return (LpushxKey)(c)
}

func (c SLpushx) Key(key string) SLpushxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLpushxKey)(c)
}

type LpushxElement Completed

type SLpushxElement SCompleted

func (c LpushxElement) Element(element ...string) LpushxElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c SLpushxElement) Element(element ...string) SLpushxElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c LpushxElement) Build() Completed {
	return Completed(c)
}

func (c SLpushxElement) Build() SCompleted {
	return SCompleted(c)
}

type LpushxKey Completed

type SLpushxKey SCompleted

func (c LpushxKey) Element(element ...string) LpushxElement {
	c.cs = append(c.cs, element...)
	return (LpushxElement)(c)
}

func (c SLpushxKey) Element(element ...string) SLpushxElement {
	c.cs = append(c.cs, element...)
	return (SLpushxElement)(c)
}

type Lrange Completed

type SLrange SCompleted

func (b *Builder) Lrange() Lrange {
	return Lrange{cs: append(b.get(), "LRANGE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Lrange() SLrange {
	return SLrange{cs: append(b.get(), "LRANGE"), ks: InitSlot, cf: readonly}
}

func (c Lrange) Key(key string) LrangeKey {
	c.cs = append(c.cs, key)
	return (LrangeKey)(c)
}

func (c SLrange) Key(key string) SLrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLrangeKey)(c)
}

type LrangeKey Completed

type SLrangeKey SCompleted

func (c LrangeKey) Start(start int64) LrangeStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (LrangeStart)(c)
}

func (c SLrangeKey) Start(start int64) SLrangeStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SLrangeStart)(c)
}

type LrangeStart Completed

type SLrangeStart SCompleted

func (c LrangeStart) Stop(stop int64) LrangeStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (LrangeStop)(c)
}

func (c SLrangeStart) Stop(stop int64) SLrangeStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (SLrangeStop)(c)
}

type LrangeStop Completed

type SLrangeStop SCompleted

func (c LrangeStop) Build() Completed {
	return Completed(c)
}

func (c SLrangeStop) Build() SCompleted {
	return SCompleted(c)
}

func (c LrangeStop) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLrangeStop) Cache() SCacheable {
	return SCacheable(c)
}

type Lrem Completed

type SLrem SCompleted

func (b *Builder) Lrem() Lrem {
	return Lrem{cs: append(b.get(), "LREM"), ks: InitSlot}
}

func (b *SBuilder) Lrem() SLrem {
	return SLrem{cs: append(b.get(), "LREM"), ks: InitSlot}
}

func (c Lrem) Key(key string) LremKey {
	c.cs = append(c.cs, key)
	return (LremKey)(c)
}

func (c SLrem) Key(key string) SLremKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLremKey)(c)
}

type LremCount Completed

type SLremCount SCompleted

func (c LremCount) Element(element string) LremElement {
	c.cs = append(c.cs, element)
	return (LremElement)(c)
}

func (c SLremCount) Element(element string) SLremElement {
	c.cs = append(c.cs, element)
	return (SLremElement)(c)
}

type LremElement Completed

type SLremElement SCompleted

func (c LremElement) Build() Completed {
	return Completed(c)
}

func (c SLremElement) Build() SCompleted {
	return SCompleted(c)
}

type LremKey Completed

type SLremKey SCompleted

func (c LremKey) Count(count int64) LremCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (LremCount)(c)
}

func (c SLremKey) Count(count int64) SLremCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SLremCount)(c)
}

type Lset Completed

type SLset SCompleted

func (b *Builder) Lset() Lset {
	return Lset{cs: append(b.get(), "LSET"), ks: InitSlot}
}

func (b *SBuilder) Lset() SLset {
	return SLset{cs: append(b.get(), "LSET"), ks: InitSlot}
}

func (c Lset) Key(key string) LsetKey {
	c.cs = append(c.cs, key)
	return (LsetKey)(c)
}

func (c SLset) Key(key string) SLsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLsetKey)(c)
}

type LsetElement Completed

type SLsetElement SCompleted

func (c LsetElement) Build() Completed {
	return Completed(c)
}

func (c SLsetElement) Build() SCompleted {
	return SCompleted(c)
}

type LsetIndex Completed

type SLsetIndex SCompleted

func (c LsetIndex) Element(element string) LsetElement {
	c.cs = append(c.cs, element)
	return (LsetElement)(c)
}

func (c SLsetIndex) Element(element string) SLsetElement {
	c.cs = append(c.cs, element)
	return (SLsetElement)(c)
}

type LsetKey Completed

type SLsetKey SCompleted

func (c LsetKey) Index(index int64) LsetIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (LsetIndex)(c)
}

func (c SLsetKey) Index(index int64) SLsetIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (SLsetIndex)(c)
}

type Ltrim Completed

type SLtrim SCompleted

func (b *Builder) Ltrim() Ltrim {
	return Ltrim{cs: append(b.get(), "LTRIM"), ks: InitSlot}
}

func (b *SBuilder) Ltrim() SLtrim {
	return SLtrim{cs: append(b.get(), "LTRIM"), ks: InitSlot}
}

func (c Ltrim) Key(key string) LtrimKey {
	c.cs = append(c.cs, key)
	return (LtrimKey)(c)
}

func (c SLtrim) Key(key string) SLtrimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SLtrimKey)(c)
}

type LtrimKey Completed

type SLtrimKey SCompleted

func (c LtrimKey) Start(start int64) LtrimStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (LtrimStart)(c)
}

func (c SLtrimKey) Start(start int64) SLtrimStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SLtrimStart)(c)
}

type LtrimStart Completed

type SLtrimStart SCompleted

func (c LtrimStart) Stop(stop int64) LtrimStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (LtrimStop)(c)
}

func (c SLtrimStart) Stop(stop int64) SLtrimStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (SLtrimStop)(c)
}

type LtrimStop Completed

type SLtrimStop SCompleted

func (c LtrimStop) Build() Completed {
	return Completed(c)
}

func (c SLtrimStop) Build() SCompleted {
	return SCompleted(c)
}

type MemoryDoctor Completed

type SMemoryDoctor SCompleted

func (b *Builder) MemoryDoctor() MemoryDoctor {
	return MemoryDoctor{cs: append(b.get(), "MEMORY", "DOCTOR"), ks: InitSlot}
}

func (b *SBuilder) MemoryDoctor() SMemoryDoctor {
	return SMemoryDoctor{cs: append(b.get(), "MEMORY", "DOCTOR"), ks: InitSlot}
}

func (c MemoryDoctor) Build() Completed {
	return Completed(c)
}

func (c SMemoryDoctor) Build() SCompleted {
	return SCompleted(c)
}

type MemoryHelp Completed

type SMemoryHelp SCompleted

func (b *Builder) MemoryHelp() MemoryHelp {
	return MemoryHelp{cs: append(b.get(), "MEMORY", "HELP"), ks: InitSlot}
}

func (b *SBuilder) MemoryHelp() SMemoryHelp {
	return SMemoryHelp{cs: append(b.get(), "MEMORY", "HELP"), ks: InitSlot}
}

func (c MemoryHelp) Build() Completed {
	return Completed(c)
}

func (c SMemoryHelp) Build() SCompleted {
	return SCompleted(c)
}

type MemoryMallocStats Completed

type SMemoryMallocStats SCompleted

func (b *Builder) MemoryMallocStats() MemoryMallocStats {
	return MemoryMallocStats{cs: append(b.get(), "MEMORY", "MALLOC-STATS"), ks: InitSlot}
}

func (b *SBuilder) MemoryMallocStats() SMemoryMallocStats {
	return SMemoryMallocStats{cs: append(b.get(), "MEMORY", "MALLOC-STATS"), ks: InitSlot}
}

func (c MemoryMallocStats) Build() Completed {
	return Completed(c)
}

func (c SMemoryMallocStats) Build() SCompleted {
	return SCompleted(c)
}

type MemoryPurge Completed

type SMemoryPurge SCompleted

func (b *Builder) MemoryPurge() MemoryPurge {
	return MemoryPurge{cs: append(b.get(), "MEMORY", "PURGE"), ks: InitSlot}
}

func (b *SBuilder) MemoryPurge() SMemoryPurge {
	return SMemoryPurge{cs: append(b.get(), "MEMORY", "PURGE"), ks: InitSlot}
}

func (c MemoryPurge) Build() Completed {
	return Completed(c)
}

func (c SMemoryPurge) Build() SCompleted {
	return SCompleted(c)
}

type MemoryStats Completed

type SMemoryStats SCompleted

func (b *Builder) MemoryStats() MemoryStats {
	return MemoryStats{cs: append(b.get(), "MEMORY", "STATS"), ks: InitSlot}
}

func (b *SBuilder) MemoryStats() SMemoryStats {
	return SMemoryStats{cs: append(b.get(), "MEMORY", "STATS"), ks: InitSlot}
}

func (c MemoryStats) Build() Completed {
	return Completed(c)
}

func (c SMemoryStats) Build() SCompleted {
	return SCompleted(c)
}

type MemoryUsage Completed

type SMemoryUsage SCompleted

func (b *Builder) MemoryUsage() MemoryUsage {
	return MemoryUsage{cs: append(b.get(), "MEMORY", "USAGE"), ks: InitSlot}
}

func (b *SBuilder) MemoryUsage() SMemoryUsage {
	return SMemoryUsage{cs: append(b.get(), "MEMORY", "USAGE"), ks: InitSlot}
}

func (c MemoryUsage) Key(key string) MemoryUsageKey {
	c.cs = append(c.cs, key)
	return (MemoryUsageKey)(c)
}

func (c SMemoryUsage) Key(key string) SMemoryUsageKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SMemoryUsageKey)(c)
}

type MemoryUsageKey Completed

type SMemoryUsageKey SCompleted

func (c MemoryUsageKey) Samples(count int64) MemoryUsageSamples {
	c.cs = append(c.cs, "SAMPLES", strconv.FormatInt(count, 10))
	return (MemoryUsageSamples)(c)
}

func (c SMemoryUsageKey) Samples(count int64) SMemoryUsageSamples {
	c.cs = append(c.cs, "SAMPLES", strconv.FormatInt(count, 10))
	return (SMemoryUsageSamples)(c)
}

func (c MemoryUsageKey) Build() Completed {
	return Completed(c)
}

func (c SMemoryUsageKey) Build() SCompleted {
	return SCompleted(c)
}

type MemoryUsageSamples Completed

type SMemoryUsageSamples SCompleted

func (c MemoryUsageSamples) Build() Completed {
	return Completed(c)
}

func (c SMemoryUsageSamples) Build() SCompleted {
	return SCompleted(c)
}

type Mget Completed

type SMget SCompleted

func (b *Builder) Mget() Mget {
	return Mget{cs: append(b.get(), "MGET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Mget() SMget {
	return SMget{cs: append(b.get(), "MGET"), ks: InitSlot, cf: readonly}
}

func (c Mget) Key(key ...string) MgetKey {
	c.cs = append(c.cs, key...)
	return (MgetKey)(c)
}

func (c SMget) Key(key ...string) SMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SMgetKey)(c)
}

type MgetKey Completed

type SMgetKey SCompleted

func (c MgetKey) Key(key ...string) MgetKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SMgetKey) Key(key ...string) SMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c MgetKey) Build() Completed {
	return Completed(c)
}

func (c SMgetKey) Build() SCompleted {
	return SCompleted(c)
}

type Migrate Completed

type SMigrate SCompleted

func (b *Builder) Migrate() Migrate {
	return Migrate{cs: append(b.get(), "MIGRATE"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Migrate() SMigrate {
	return SMigrate{cs: append(b.get(), "MIGRATE"), ks: InitSlot, cf: blockTag}
}

func (c Migrate) Host(host string) MigrateHost {
	c.cs = append(c.cs, host)
	return (MigrateHost)(c)
}

func (c SMigrate) Host(host string) SMigrateHost {
	c.cs = append(c.cs, host)
	return (SMigrateHost)(c)
}

type MigrateAuth Completed

type SMigrateAuth SCompleted

func (c MigrateAuth) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateAuth) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateAuth) Keys(key ...string) MigrateKeys {
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateAuth) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateAuth) Build() Completed {
	return Completed(c)
}

func (c SMigrateAuth) Build() SCompleted {
	return SCompleted(c)
}

type MigrateAuth2 Completed

type SMigrateAuth2 SCompleted

func (c MigrateAuth2) Keys(key ...string) MigrateKeys {
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateAuth2) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateAuth2) Build() Completed {
	return Completed(c)
}

func (c SMigrateAuth2) Build() SCompleted {
	return SCompleted(c)
}

type MigrateCopy Completed

type SMigrateCopy SCompleted

func (c MigrateCopy) Replace() MigrateReplace {
	c.cs = append(c.cs, "REPLACE")
	return (MigrateReplace)(c)
}

func (c SMigrateCopy) Replace() SMigrateReplace {
	c.cs = append(c.cs, "REPLACE")
	return (SMigrateReplace)(c)
}

func (c MigrateCopy) Auth(password string) MigrateAuth {
	c.cs = append(c.cs, "AUTH", password)
	return (MigrateAuth)(c)
}

func (c SMigrateCopy) Auth(password string) SMigrateAuth {
	c.cs = append(c.cs, "AUTH", password)
	return (SMigrateAuth)(c)
}

func (c MigrateCopy) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateCopy) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateCopy) Keys(key ...string) MigrateKeys {
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateCopy) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateCopy) Build() Completed {
	return Completed(c)
}

func (c SMigrateCopy) Build() SCompleted {
	return SCompleted(c)
}

type MigrateDestinationDb Completed

type SMigrateDestinationDb SCompleted

func (c MigrateDestinationDb) Timeout(timeout int64) MigrateTimeout {
	c.cs = append(c.cs, strconv.FormatInt(timeout, 10))
	return (MigrateTimeout)(c)
}

func (c SMigrateDestinationDb) Timeout(timeout int64) SMigrateTimeout {
	c.cs = append(c.cs, strconv.FormatInt(timeout, 10))
	return (SMigrateTimeout)(c)
}

type MigrateHost Completed

type SMigrateHost SCompleted

func (c MigrateHost) Port(port string) MigratePort {
	c.cs = append(c.cs, port)
	return (MigratePort)(c)
}

func (c SMigrateHost) Port(port string) SMigratePort {
	c.cs = append(c.cs, port)
	return (SMigratePort)(c)
}

type MigrateKey Completed

type SMigrateKey SCompleted

func (c MigrateKey) DestinationDb(destinationDb int64) MigrateDestinationDb {
	c.cs = append(c.cs, strconv.FormatInt(destinationDb, 10))
	return (MigrateDestinationDb)(c)
}

func (c SMigrateKey) DestinationDb(destinationDb int64) SMigrateDestinationDb {
	c.cs = append(c.cs, strconv.FormatInt(destinationDb, 10))
	return (SMigrateDestinationDb)(c)
}

type MigrateKeyEmpty Completed

type SMigrateKeyEmpty SCompleted

func (c MigrateKeyEmpty) DestinationDb(destinationDb int64) MigrateDestinationDb {
	c.cs = append(c.cs, strconv.FormatInt(destinationDb, 10))
	return (MigrateDestinationDb)(c)
}

func (c SMigrateKeyEmpty) DestinationDb(destinationDb int64) SMigrateDestinationDb {
	c.cs = append(c.cs, strconv.FormatInt(destinationDb, 10))
	return (SMigrateDestinationDb)(c)
}

type MigrateKeys Completed

type SMigrateKeys SCompleted

func (c MigrateKeys) Keys(key ...string) MigrateKeys {
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return c
}

func (c SMigrateKeys) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return c
}

func (c MigrateKeys) Build() Completed {
	return Completed(c)
}

func (c SMigrateKeys) Build() SCompleted {
	return SCompleted(c)
}

type MigratePort Completed

type SMigratePort SCompleted

func (c MigratePort) Key() MigrateKey {
	c.cs = append(c.cs, "key")
	return (MigrateKey)(c)
}

func (c SMigratePort) Key() SMigrateKey {
	c.cs = append(c.cs, "key")
	return (SMigrateKey)(c)
}

func (c MigratePort) Empty() MigrateKeyEmpty {
	c.cs = append(c.cs, "")
	return (MigrateKeyEmpty)(c)
}

func (c SMigratePort) Empty() SMigrateKeyEmpty {
	c.cs = append(c.cs, "")
	return (SMigrateKeyEmpty)(c)
}

type MigrateReplace Completed

type SMigrateReplace SCompleted

func (c MigrateReplace) Auth(password string) MigrateAuth {
	c.cs = append(c.cs, "AUTH", password)
	return (MigrateAuth)(c)
}

func (c SMigrateReplace) Auth(password string) SMigrateAuth {
	c.cs = append(c.cs, "AUTH", password)
	return (SMigrateAuth)(c)
}

func (c MigrateReplace) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateReplace) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateReplace) Keys(key ...string) MigrateKeys {
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateReplace) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateReplace) Build() Completed {
	return Completed(c)
}

func (c SMigrateReplace) Build() SCompleted {
	return SCompleted(c)
}

type MigrateTimeout Completed

type SMigrateTimeout SCompleted

func (c MigrateTimeout) Copy() MigrateCopy {
	c.cs = append(c.cs, "COPY")
	return (MigrateCopy)(c)
}

func (c SMigrateTimeout) Copy() SMigrateCopy {
	c.cs = append(c.cs, "COPY")
	return (SMigrateCopy)(c)
}

func (c MigrateTimeout) Replace() MigrateReplace {
	c.cs = append(c.cs, "REPLACE")
	return (MigrateReplace)(c)
}

func (c SMigrateTimeout) Replace() SMigrateReplace {
	c.cs = append(c.cs, "REPLACE")
	return (SMigrateReplace)(c)
}

func (c MigrateTimeout) Auth(password string) MigrateAuth {
	c.cs = append(c.cs, "AUTH", password)
	return (MigrateAuth)(c)
}

func (c SMigrateTimeout) Auth(password string) SMigrateAuth {
	c.cs = append(c.cs, "AUTH", password)
	return (SMigrateAuth)(c)
}

func (c MigrateTimeout) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateTimeout) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs = append(c.cs, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateTimeout) Keys(key ...string) MigrateKeys {
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateTimeout) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, "KEYS")
	c.cs = append(c.cs, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateTimeout) Build() Completed {
	return Completed(c)
}

func (c SMigrateTimeout) Build() SCompleted {
	return SCompleted(c)
}

type ModuleList Completed

type SModuleList SCompleted

func (b *Builder) ModuleList() ModuleList {
	return ModuleList{cs: append(b.get(), "MODULE", "LIST"), ks: InitSlot}
}

func (b *SBuilder) ModuleList() SModuleList {
	return SModuleList{cs: append(b.get(), "MODULE", "LIST"), ks: InitSlot}
}

func (c ModuleList) Build() Completed {
	return Completed(c)
}

func (c SModuleList) Build() SCompleted {
	return SCompleted(c)
}

type ModuleLoad Completed

type SModuleLoad SCompleted

func (b *Builder) ModuleLoad() ModuleLoad {
	return ModuleLoad{cs: append(b.get(), "MODULE", "LOAD"), ks: InitSlot}
}

func (b *SBuilder) ModuleLoad() SModuleLoad {
	return SModuleLoad{cs: append(b.get(), "MODULE", "LOAD"), ks: InitSlot}
}

func (c ModuleLoad) Path(path string) ModuleLoadPath {
	c.cs = append(c.cs, path)
	return (ModuleLoadPath)(c)
}

func (c SModuleLoad) Path(path string) SModuleLoadPath {
	c.cs = append(c.cs, path)
	return (SModuleLoadPath)(c)
}

type ModuleLoadArg Completed

type SModuleLoadArg SCompleted

func (c ModuleLoadArg) Arg(arg ...string) ModuleLoadArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c SModuleLoadArg) Arg(arg ...string) SModuleLoadArg {
	c.cs = append(c.cs, arg...)
	return c
}

func (c ModuleLoadArg) Build() Completed {
	return Completed(c)
}

func (c SModuleLoadArg) Build() SCompleted {
	return SCompleted(c)
}

type ModuleLoadPath Completed

type SModuleLoadPath SCompleted

func (c ModuleLoadPath) Arg(arg ...string) ModuleLoadArg {
	c.cs = append(c.cs, arg...)
	return (ModuleLoadArg)(c)
}

func (c SModuleLoadPath) Arg(arg ...string) SModuleLoadArg {
	c.cs = append(c.cs, arg...)
	return (SModuleLoadArg)(c)
}

func (c ModuleLoadPath) Build() Completed {
	return Completed(c)
}

func (c SModuleLoadPath) Build() SCompleted {
	return SCompleted(c)
}

type ModuleUnload Completed

type SModuleUnload SCompleted

func (b *Builder) ModuleUnload() ModuleUnload {
	return ModuleUnload{cs: append(b.get(), "MODULE", "UNLOAD"), ks: InitSlot}
}

func (b *SBuilder) ModuleUnload() SModuleUnload {
	return SModuleUnload{cs: append(b.get(), "MODULE", "UNLOAD"), ks: InitSlot}
}

func (c ModuleUnload) Name(name string) ModuleUnloadName {
	c.cs = append(c.cs, name)
	return (ModuleUnloadName)(c)
}

func (c SModuleUnload) Name(name string) SModuleUnloadName {
	c.cs = append(c.cs, name)
	return (SModuleUnloadName)(c)
}

type ModuleUnloadName Completed

type SModuleUnloadName SCompleted

func (c ModuleUnloadName) Build() Completed {
	return Completed(c)
}

func (c SModuleUnloadName) Build() SCompleted {
	return SCompleted(c)
}

type Monitor Completed

type SMonitor SCompleted

func (b *Builder) Monitor() Monitor {
	return Monitor{cs: append(b.get(), "MONITOR"), ks: InitSlot}
}

func (b *SBuilder) Monitor() SMonitor {
	return SMonitor{cs: append(b.get(), "MONITOR"), ks: InitSlot}
}

func (c Monitor) Build() Completed {
	return Completed(c)
}

func (c SMonitor) Build() SCompleted {
	return SCompleted(c)
}

type Move Completed

type SMove SCompleted

func (b *Builder) Move() Move {
	return Move{cs: append(b.get(), "MOVE"), ks: InitSlot}
}

func (b *SBuilder) Move() SMove {
	return SMove{cs: append(b.get(), "MOVE"), ks: InitSlot}
}

func (c Move) Key(key string) MoveKey {
	c.cs = append(c.cs, key)
	return (MoveKey)(c)
}

func (c SMove) Key(key string) SMoveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SMoveKey)(c)
}

type MoveDb Completed

type SMoveDb SCompleted

func (c MoveDb) Build() Completed {
	return Completed(c)
}

func (c SMoveDb) Build() SCompleted {
	return SCompleted(c)
}

type MoveKey Completed

type SMoveKey SCompleted

func (c MoveKey) Db(db int64) MoveDb {
	c.cs = append(c.cs, strconv.FormatInt(db, 10))
	return (MoveDb)(c)
}

func (c SMoveKey) Db(db int64) SMoveDb {
	c.cs = append(c.cs, strconv.FormatInt(db, 10))
	return (SMoveDb)(c)
}

type Mset Completed

type SMset SCompleted

func (b *Builder) Mset() Mset {
	return Mset{cs: append(b.get(), "MSET"), ks: InitSlot}
}

func (b *SBuilder) Mset() SMset {
	return SMset{cs: append(b.get(), "MSET"), ks: InitSlot}
}

func (c Mset) KeyValue() MsetKeyValue {
	return (MsetKeyValue)(c)
}

func (c SMset) KeyValue() SMsetKeyValue {
	return (SMsetKeyValue)(c)
}

type MsetKeyValue Completed

type SMsetKeyValue SCompleted

func (c MsetKeyValue) KeyValue(key string, value string) MsetKeyValue {
	c.cs = append(c.cs, key, value)
	return c
}

func (c SMsetKeyValue) KeyValue(key string, value string) SMsetKeyValue {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key, value)
	return c
}

func (c MsetKeyValue) Build() Completed {
	return Completed(c)
}

func (c SMsetKeyValue) Build() SCompleted {
	return SCompleted(c)
}

type Msetnx Completed

type SMsetnx SCompleted

func (b *Builder) Msetnx() Msetnx {
	return Msetnx{cs: append(b.get(), "MSETNX"), ks: InitSlot}
}

func (b *SBuilder) Msetnx() SMsetnx {
	return SMsetnx{cs: append(b.get(), "MSETNX"), ks: InitSlot}
}

func (c Msetnx) KeyValue() MsetnxKeyValue {
	return (MsetnxKeyValue)(c)
}

func (c SMsetnx) KeyValue() SMsetnxKeyValue {
	return (SMsetnxKeyValue)(c)
}

type MsetnxKeyValue Completed

type SMsetnxKeyValue SCompleted

func (c MsetnxKeyValue) KeyValue(key string, value string) MsetnxKeyValue {
	c.cs = append(c.cs, key, value)
	return c
}

func (c SMsetnxKeyValue) KeyValue(key string, value string) SMsetnxKeyValue {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key, value)
	return c
}

func (c MsetnxKeyValue) Build() Completed {
	return Completed(c)
}

func (c SMsetnxKeyValue) Build() SCompleted {
	return SCompleted(c)
}

type Multi Completed

type SMulti SCompleted

func (b *Builder) Multi() Multi {
	return Multi{cs: append(b.get(), "MULTI"), ks: InitSlot}
}

func (b *SBuilder) Multi() SMulti {
	return SMulti{cs: append(b.get(), "MULTI"), ks: InitSlot}
}

func (c Multi) Build() Completed {
	return Completed(c)
}

func (c SMulti) Build() SCompleted {
	return SCompleted(c)
}

type ObjectEncoding Completed

type SObjectEncoding SCompleted

func (b *Builder) ObjectEncoding() ObjectEncoding {
	return ObjectEncoding{cs: append(b.get(), "OBJECT", "ENCODING"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) ObjectEncoding() SObjectEncoding {
	return SObjectEncoding{cs: append(b.get(), "OBJECT", "ENCODING"), ks: InitSlot, cf: readonly}
}

func (c ObjectEncoding) Key(key string) ObjectEncodingKey {
	c.cs = append(c.cs, key)
	return (ObjectEncodingKey)(c)
}

func (c SObjectEncoding) Key(key string) SObjectEncodingKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SObjectEncodingKey)(c)
}

type ObjectEncodingKey Completed

type SObjectEncodingKey SCompleted

func (c ObjectEncodingKey) Build() Completed {
	return Completed(c)
}

func (c SObjectEncodingKey) Build() SCompleted {
	return SCompleted(c)
}

type ObjectFreq Completed

type SObjectFreq SCompleted

func (b *Builder) ObjectFreq() ObjectFreq {
	return ObjectFreq{cs: append(b.get(), "OBJECT", "FREQ"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) ObjectFreq() SObjectFreq {
	return SObjectFreq{cs: append(b.get(), "OBJECT", "FREQ"), ks: InitSlot, cf: readonly}
}

func (c ObjectFreq) Key(key string) ObjectFreqKey {
	c.cs = append(c.cs, key)
	return (ObjectFreqKey)(c)
}

func (c SObjectFreq) Key(key string) SObjectFreqKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SObjectFreqKey)(c)
}

type ObjectFreqKey Completed

type SObjectFreqKey SCompleted

func (c ObjectFreqKey) Build() Completed {
	return Completed(c)
}

func (c SObjectFreqKey) Build() SCompleted {
	return SCompleted(c)
}

type ObjectHelp Completed

type SObjectHelp SCompleted

func (b *Builder) ObjectHelp() ObjectHelp {
	return ObjectHelp{cs: append(b.get(), "OBJECT", "HELP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) ObjectHelp() SObjectHelp {
	return SObjectHelp{cs: append(b.get(), "OBJECT", "HELP"), ks: InitSlot, cf: readonly}
}

func (c ObjectHelp) Build() Completed {
	return Completed(c)
}

func (c SObjectHelp) Build() SCompleted {
	return SCompleted(c)
}

type ObjectIdletime Completed

type SObjectIdletime SCompleted

func (b *Builder) ObjectIdletime() ObjectIdletime {
	return ObjectIdletime{cs: append(b.get(), "OBJECT", "IDLETIME"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) ObjectIdletime() SObjectIdletime {
	return SObjectIdletime{cs: append(b.get(), "OBJECT", "IDLETIME"), ks: InitSlot, cf: readonly}
}

func (c ObjectIdletime) Key(key string) ObjectIdletimeKey {
	c.cs = append(c.cs, key)
	return (ObjectIdletimeKey)(c)
}

func (c SObjectIdletime) Key(key string) SObjectIdletimeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SObjectIdletimeKey)(c)
}

type ObjectIdletimeKey Completed

type SObjectIdletimeKey SCompleted

func (c ObjectIdletimeKey) Build() Completed {
	return Completed(c)
}

func (c SObjectIdletimeKey) Build() SCompleted {
	return SCompleted(c)
}

type ObjectRefcount Completed

type SObjectRefcount SCompleted

func (b *Builder) ObjectRefcount() ObjectRefcount {
	return ObjectRefcount{cs: append(b.get(), "OBJECT", "REFCOUNT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) ObjectRefcount() SObjectRefcount {
	return SObjectRefcount{cs: append(b.get(), "OBJECT", "REFCOUNT"), ks: InitSlot, cf: readonly}
}

func (c ObjectRefcount) Key(key string) ObjectRefcountKey {
	c.cs = append(c.cs, key)
	return (ObjectRefcountKey)(c)
}

func (c SObjectRefcount) Key(key string) SObjectRefcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SObjectRefcountKey)(c)
}

type ObjectRefcountKey Completed

type SObjectRefcountKey SCompleted

func (c ObjectRefcountKey) Build() Completed {
	return Completed(c)
}

func (c SObjectRefcountKey) Build() SCompleted {
	return SCompleted(c)
}

type Persist Completed

type SPersist SCompleted

func (b *Builder) Persist() Persist {
	return Persist{cs: append(b.get(), "PERSIST"), ks: InitSlot}
}

func (b *SBuilder) Persist() SPersist {
	return SPersist{cs: append(b.get(), "PERSIST"), ks: InitSlot}
}

func (c Persist) Key(key string) PersistKey {
	c.cs = append(c.cs, key)
	return (PersistKey)(c)
}

func (c SPersist) Key(key string) SPersistKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPersistKey)(c)
}

type PersistKey Completed

type SPersistKey SCompleted

func (c PersistKey) Build() Completed {
	return Completed(c)
}

func (c SPersistKey) Build() SCompleted {
	return SCompleted(c)
}

type Pexpire Completed

type SPexpire SCompleted

func (b *Builder) Pexpire() Pexpire {
	return Pexpire{cs: append(b.get(), "PEXPIRE"), ks: InitSlot}
}

func (b *SBuilder) Pexpire() SPexpire {
	return SPexpire{cs: append(b.get(), "PEXPIRE"), ks: InitSlot}
}

func (c Pexpire) Key(key string) PexpireKey {
	c.cs = append(c.cs, key)
	return (PexpireKey)(c)
}

func (c SPexpire) Key(key string) SPexpireKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPexpireKey)(c)
}

type PexpireConditionGt Completed

type SPexpireConditionGt SCompleted

func (c PexpireConditionGt) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireConditionLt Completed

type SPexpireConditionLt SCompleted

func (c PexpireConditionLt) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireConditionNx Completed

type SPexpireConditionNx SCompleted

func (c PexpireConditionNx) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireConditionXx Completed

type SPexpireConditionXx SCompleted

func (c PexpireConditionXx) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireKey Completed

type SPexpireKey SCompleted

func (c PexpireKey) Milliseconds(milliseconds int64) PexpireMilliseconds {
	c.cs = append(c.cs, strconv.FormatInt(milliseconds, 10))
	return (PexpireMilliseconds)(c)
}

func (c SPexpireKey) Milliseconds(milliseconds int64) SPexpireMilliseconds {
	c.cs = append(c.cs, strconv.FormatInt(milliseconds, 10))
	return (SPexpireMilliseconds)(c)
}

type PexpireMilliseconds Completed

type SPexpireMilliseconds SCompleted

func (c PexpireMilliseconds) Nx() PexpireConditionNx {
	c.cs = append(c.cs, "NX")
	return (PexpireConditionNx)(c)
}

func (c SPexpireMilliseconds) Nx() SPexpireConditionNx {
	c.cs = append(c.cs, "NX")
	return (SPexpireConditionNx)(c)
}

func (c PexpireMilliseconds) Xx() PexpireConditionXx {
	c.cs = append(c.cs, "XX")
	return (PexpireConditionXx)(c)
}

func (c SPexpireMilliseconds) Xx() SPexpireConditionXx {
	c.cs = append(c.cs, "XX")
	return (SPexpireConditionXx)(c)
}

func (c PexpireMilliseconds) Gt() PexpireConditionGt {
	c.cs = append(c.cs, "GT")
	return (PexpireConditionGt)(c)
}

func (c SPexpireMilliseconds) Gt() SPexpireConditionGt {
	c.cs = append(c.cs, "GT")
	return (SPexpireConditionGt)(c)
}

func (c PexpireMilliseconds) Lt() PexpireConditionLt {
	c.cs = append(c.cs, "LT")
	return (PexpireConditionLt)(c)
}

func (c SPexpireMilliseconds) Lt() SPexpireConditionLt {
	c.cs = append(c.cs, "LT")
	return (SPexpireConditionLt)(c)
}

func (c PexpireMilliseconds) Build() Completed {
	return Completed(c)
}

func (c SPexpireMilliseconds) Build() SCompleted {
	return SCompleted(c)
}

type Pexpireat Completed

type SPexpireat SCompleted

func (b *Builder) Pexpireat() Pexpireat {
	return Pexpireat{cs: append(b.get(), "PEXPIREAT"), ks: InitSlot}
}

func (b *SBuilder) Pexpireat() SPexpireat {
	return SPexpireat{cs: append(b.get(), "PEXPIREAT"), ks: InitSlot}
}

func (c Pexpireat) Key(key string) PexpireatKey {
	c.cs = append(c.cs, key)
	return (PexpireatKey)(c)
}

func (c SPexpireat) Key(key string) SPexpireatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPexpireatKey)(c)
}

type PexpireatConditionGt Completed

type SPexpireatConditionGt SCompleted

func (c PexpireatConditionGt) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatConditionLt Completed

type SPexpireatConditionLt SCompleted

func (c PexpireatConditionLt) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatConditionNx Completed

type SPexpireatConditionNx SCompleted

func (c PexpireatConditionNx) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatConditionXx Completed

type SPexpireatConditionXx SCompleted

func (c PexpireatConditionXx) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatKey Completed

type SPexpireatKey SCompleted

func (c PexpireatKey) MillisecondsTimestamp(millisecondsTimestamp int64) PexpireatMillisecondsTimestamp {
	c.cs = append(c.cs, strconv.FormatInt(millisecondsTimestamp, 10))
	return (PexpireatMillisecondsTimestamp)(c)
}

func (c SPexpireatKey) MillisecondsTimestamp(millisecondsTimestamp int64) SPexpireatMillisecondsTimestamp {
	c.cs = append(c.cs, strconv.FormatInt(millisecondsTimestamp, 10))
	return (SPexpireatMillisecondsTimestamp)(c)
}

type PexpireatMillisecondsTimestamp Completed

type SPexpireatMillisecondsTimestamp SCompleted

func (c PexpireatMillisecondsTimestamp) Nx() PexpireatConditionNx {
	c.cs = append(c.cs, "NX")
	return (PexpireatConditionNx)(c)
}

func (c SPexpireatMillisecondsTimestamp) Nx() SPexpireatConditionNx {
	c.cs = append(c.cs, "NX")
	return (SPexpireatConditionNx)(c)
}

func (c PexpireatMillisecondsTimestamp) Xx() PexpireatConditionXx {
	c.cs = append(c.cs, "XX")
	return (PexpireatConditionXx)(c)
}

func (c SPexpireatMillisecondsTimestamp) Xx() SPexpireatConditionXx {
	c.cs = append(c.cs, "XX")
	return (SPexpireatConditionXx)(c)
}

func (c PexpireatMillisecondsTimestamp) Gt() PexpireatConditionGt {
	c.cs = append(c.cs, "GT")
	return (PexpireatConditionGt)(c)
}

func (c SPexpireatMillisecondsTimestamp) Gt() SPexpireatConditionGt {
	c.cs = append(c.cs, "GT")
	return (SPexpireatConditionGt)(c)
}

func (c PexpireatMillisecondsTimestamp) Lt() PexpireatConditionLt {
	c.cs = append(c.cs, "LT")
	return (PexpireatConditionLt)(c)
}

func (c SPexpireatMillisecondsTimestamp) Lt() SPexpireatConditionLt {
	c.cs = append(c.cs, "LT")
	return (SPexpireatConditionLt)(c)
}

func (c PexpireatMillisecondsTimestamp) Build() Completed {
	return Completed(c)
}

func (c SPexpireatMillisecondsTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type Pexpiretime Completed

type SPexpiretime SCompleted

func (b *Builder) Pexpiretime() Pexpiretime {
	return Pexpiretime{cs: append(b.get(), "PEXPIRETIME"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Pexpiretime() SPexpiretime {
	return SPexpiretime{cs: append(b.get(), "PEXPIRETIME"), ks: InitSlot, cf: readonly}
}

func (c Pexpiretime) Key(key string) PexpiretimeKey {
	c.cs = append(c.cs, key)
	return (PexpiretimeKey)(c)
}

func (c SPexpiretime) Key(key string) SPexpiretimeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPexpiretimeKey)(c)
}

type PexpiretimeKey Completed

type SPexpiretimeKey SCompleted

func (c PexpiretimeKey) Build() Completed {
	return Completed(c)
}

func (c SPexpiretimeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c PexpiretimeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SPexpiretimeKey) Cache() SCacheable {
	return SCacheable(c)
}

type Pfadd Completed

type SPfadd SCompleted

func (b *Builder) Pfadd() Pfadd {
	return Pfadd{cs: append(b.get(), "PFADD"), ks: InitSlot}
}

func (b *SBuilder) Pfadd() SPfadd {
	return SPfadd{cs: append(b.get(), "PFADD"), ks: InitSlot}
}

func (c Pfadd) Key(key string) PfaddKey {
	c.cs = append(c.cs, key)
	return (PfaddKey)(c)
}

func (c SPfadd) Key(key string) SPfaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPfaddKey)(c)
}

type PfaddElement Completed

type SPfaddElement SCompleted

func (c PfaddElement) Element(element ...string) PfaddElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c SPfaddElement) Element(element ...string) SPfaddElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c PfaddElement) Build() Completed {
	return Completed(c)
}

func (c SPfaddElement) Build() SCompleted {
	return SCompleted(c)
}

type PfaddKey Completed

type SPfaddKey SCompleted

func (c PfaddKey) Element(element ...string) PfaddElement {
	c.cs = append(c.cs, element...)
	return (PfaddElement)(c)
}

func (c SPfaddKey) Element(element ...string) SPfaddElement {
	c.cs = append(c.cs, element...)
	return (SPfaddElement)(c)
}

func (c PfaddKey) Build() Completed {
	return Completed(c)
}

func (c SPfaddKey) Build() SCompleted {
	return SCompleted(c)
}

type Pfcount Completed

type SPfcount SCompleted

func (b *Builder) Pfcount() Pfcount {
	return Pfcount{cs: append(b.get(), "PFCOUNT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Pfcount() SPfcount {
	return SPfcount{cs: append(b.get(), "PFCOUNT"), ks: InitSlot, cf: readonly}
}

func (c Pfcount) Key(key ...string) PfcountKey {
	c.cs = append(c.cs, key...)
	return (PfcountKey)(c)
}

func (c SPfcount) Key(key ...string) SPfcountKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SPfcountKey)(c)
}

type PfcountKey Completed

type SPfcountKey SCompleted

func (c PfcountKey) Key(key ...string) PfcountKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SPfcountKey) Key(key ...string) SPfcountKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c PfcountKey) Build() Completed {
	return Completed(c)
}

func (c SPfcountKey) Build() SCompleted {
	return SCompleted(c)
}

type Pfmerge Completed

type SPfmerge SCompleted

func (b *Builder) Pfmerge() Pfmerge {
	return Pfmerge{cs: append(b.get(), "PFMERGE"), ks: InitSlot}
}

func (b *SBuilder) Pfmerge() SPfmerge {
	return SPfmerge{cs: append(b.get(), "PFMERGE"), ks: InitSlot}
}

func (c Pfmerge) Destkey(destkey string) PfmergeDestkey {
	c.cs = append(c.cs, destkey)
	return (PfmergeDestkey)(c)
}

func (c SPfmerge) Destkey(destkey string) SPfmergeDestkey {
	c.ks = checkSlot(c.ks, slot(destkey))
	c.cs = append(c.cs, destkey)
	return (SPfmergeDestkey)(c)
}

type PfmergeDestkey Completed

type SPfmergeDestkey SCompleted

func (c PfmergeDestkey) Sourcekey(sourcekey ...string) PfmergeSourcekey {
	c.cs = append(c.cs, sourcekey...)
	return (PfmergeSourcekey)(c)
}

func (c SPfmergeDestkey) Sourcekey(sourcekey ...string) SPfmergeSourcekey {
	for _, k := range sourcekey {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, sourcekey...)
	return (SPfmergeSourcekey)(c)
}

type PfmergeSourcekey Completed

type SPfmergeSourcekey SCompleted

func (c PfmergeSourcekey) Sourcekey(sourcekey ...string) PfmergeSourcekey {
	c.cs = append(c.cs, sourcekey...)
	return c
}

func (c SPfmergeSourcekey) Sourcekey(sourcekey ...string) SPfmergeSourcekey {
	for _, k := range sourcekey {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, sourcekey...)
	return c
}

func (c PfmergeSourcekey) Build() Completed {
	return Completed(c)
}

func (c SPfmergeSourcekey) Build() SCompleted {
	return SCompleted(c)
}

type Ping Completed

type SPing SCompleted

func (b *Builder) Ping() Ping {
	return Ping{cs: append(b.get(), "PING"), ks: InitSlot}
}

func (b *SBuilder) Ping() SPing {
	return SPing{cs: append(b.get(), "PING"), ks: InitSlot}
}

func (c Ping) Message(message string) PingMessage {
	c.cs = append(c.cs, message)
	return (PingMessage)(c)
}

func (c SPing) Message(message string) SPingMessage {
	c.cs = append(c.cs, message)
	return (SPingMessage)(c)
}

func (c Ping) Build() Completed {
	return Completed(c)
}

func (c SPing) Build() SCompleted {
	return SCompleted(c)
}

type PingMessage Completed

type SPingMessage SCompleted

func (c PingMessage) Build() Completed {
	return Completed(c)
}

func (c SPingMessage) Build() SCompleted {
	return SCompleted(c)
}

type Psetex Completed

type SPsetex SCompleted

func (b *Builder) Psetex() Psetex {
	return Psetex{cs: append(b.get(), "PSETEX"), ks: InitSlot}
}

func (b *SBuilder) Psetex() SPsetex {
	return SPsetex{cs: append(b.get(), "PSETEX"), ks: InitSlot}
}

func (c Psetex) Key(key string) PsetexKey {
	c.cs = append(c.cs, key)
	return (PsetexKey)(c)
}

func (c SPsetex) Key(key string) SPsetexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPsetexKey)(c)
}

type PsetexKey Completed

type SPsetexKey SCompleted

func (c PsetexKey) Milliseconds(milliseconds int64) PsetexMilliseconds {
	c.cs = append(c.cs, strconv.FormatInt(milliseconds, 10))
	return (PsetexMilliseconds)(c)
}

func (c SPsetexKey) Milliseconds(milliseconds int64) SPsetexMilliseconds {
	c.cs = append(c.cs, strconv.FormatInt(milliseconds, 10))
	return (SPsetexMilliseconds)(c)
}

type PsetexMilliseconds Completed

type SPsetexMilliseconds SCompleted

func (c PsetexMilliseconds) Value(value string) PsetexValue {
	c.cs = append(c.cs, value)
	return (PsetexValue)(c)
}

func (c SPsetexMilliseconds) Value(value string) SPsetexValue {
	c.cs = append(c.cs, value)
	return (SPsetexValue)(c)
}

type PsetexValue Completed

type SPsetexValue SCompleted

func (c PsetexValue) Build() Completed {
	return Completed(c)
}

func (c SPsetexValue) Build() SCompleted {
	return SCompleted(c)
}

type Psubscribe Completed

type SPsubscribe SCompleted

func (b *Builder) Psubscribe() Psubscribe {
	return Psubscribe{cs: append(b.get(), "PSUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (b *SBuilder) Psubscribe() SPsubscribe {
	return SPsubscribe{cs: append(b.get(), "PSUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (c Psubscribe) Pattern(pattern ...string) PsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return (PsubscribePattern)(c)
}

func (c SPsubscribe) Pattern(pattern ...string) SPsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return (SPsubscribePattern)(c)
}

type PsubscribePattern Completed

type SPsubscribePattern SCompleted

func (c PsubscribePattern) Pattern(pattern ...string) PsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return c
}

func (c SPsubscribePattern) Pattern(pattern ...string) SPsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return c
}

func (c PsubscribePattern) Build() Completed {
	return Completed(c)
}

func (c SPsubscribePattern) Build() SCompleted {
	return SCompleted(c)
}

type Psync Completed

type SPsync SCompleted

func (b *Builder) Psync() Psync {
	return Psync{cs: append(b.get(), "PSYNC"), ks: InitSlot}
}

func (b *SBuilder) Psync() SPsync {
	return SPsync{cs: append(b.get(), "PSYNC"), ks: InitSlot}
}

func (c Psync) Replicationid(replicationid int64) PsyncReplicationid {
	c.cs = append(c.cs, strconv.FormatInt(replicationid, 10))
	return (PsyncReplicationid)(c)
}

func (c SPsync) Replicationid(replicationid int64) SPsyncReplicationid {
	c.cs = append(c.cs, strconv.FormatInt(replicationid, 10))
	return (SPsyncReplicationid)(c)
}

type PsyncOffset Completed

type SPsyncOffset SCompleted

func (c PsyncOffset) Build() Completed {
	return Completed(c)
}

func (c SPsyncOffset) Build() SCompleted {
	return SCompleted(c)
}

type PsyncReplicationid Completed

type SPsyncReplicationid SCompleted

func (c PsyncReplicationid) Offset(offset int64) PsyncOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (PsyncOffset)(c)
}

func (c SPsyncReplicationid) Offset(offset int64) SPsyncOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (SPsyncOffset)(c)
}

type Pttl Completed

type SPttl SCompleted

func (b *Builder) Pttl() Pttl {
	return Pttl{cs: append(b.get(), "PTTL"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Pttl() SPttl {
	return SPttl{cs: append(b.get(), "PTTL"), ks: InitSlot, cf: readonly}
}

func (c Pttl) Key(key string) PttlKey {
	c.cs = append(c.cs, key)
	return (PttlKey)(c)
}

func (c SPttl) Key(key string) SPttlKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SPttlKey)(c)
}

type PttlKey Completed

type SPttlKey SCompleted

func (c PttlKey) Build() Completed {
	return Completed(c)
}

func (c SPttlKey) Build() SCompleted {
	return SCompleted(c)
}

func (c PttlKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SPttlKey) Cache() SCacheable {
	return SCacheable(c)
}

type Publish Completed

type SPublish SCompleted

func (b *Builder) Publish() Publish {
	return Publish{cs: append(b.get(), "PUBLISH"), ks: InitSlot}
}

func (b *SBuilder) Publish() SPublish {
	return SPublish{cs: append(b.get(), "PUBLISH"), ks: InitSlot}
}

func (c Publish) Channel(channel string) PublishChannel {
	c.cs = append(c.cs, channel)
	return (PublishChannel)(c)
}

func (c SPublish) Channel(channel string) SPublishChannel {
	c.cs = append(c.cs, channel)
	return (SPublishChannel)(c)
}

type PublishChannel Completed

type SPublishChannel SCompleted

func (c PublishChannel) Message(message string) PublishMessage {
	c.cs = append(c.cs, message)
	return (PublishMessage)(c)
}

func (c SPublishChannel) Message(message string) SPublishMessage {
	c.cs = append(c.cs, message)
	return (SPublishMessage)(c)
}

type PublishMessage Completed

type SPublishMessage SCompleted

func (c PublishMessage) Build() Completed {
	return Completed(c)
}

func (c SPublishMessage) Build() SCompleted {
	return SCompleted(c)
}

type PubsubChannels Completed

type SPubsubChannels SCompleted

func (b *Builder) PubsubChannels() PubsubChannels {
	return PubsubChannels{cs: append(b.get(), "PUBSUB", "CHANNELS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) PubsubChannels() SPubsubChannels {
	return SPubsubChannels{cs: append(b.get(), "PUBSUB", "CHANNELS"), ks: InitSlot, cf: readonly}
}

func (c PubsubChannels) Pattern(pattern string) PubsubChannelsPattern {
	c.cs = append(c.cs, pattern)
	return (PubsubChannelsPattern)(c)
}

func (c SPubsubChannels) Pattern(pattern string) SPubsubChannelsPattern {
	c.cs = append(c.cs, pattern)
	return (SPubsubChannelsPattern)(c)
}

func (c PubsubChannels) Build() Completed {
	return Completed(c)
}

func (c SPubsubChannels) Build() SCompleted {
	return SCompleted(c)
}

type PubsubChannelsPattern Completed

type SPubsubChannelsPattern SCompleted

func (c PubsubChannelsPattern) Build() Completed {
	return Completed(c)
}

func (c SPubsubChannelsPattern) Build() SCompleted {
	return SCompleted(c)
}

type PubsubHelp Completed

type SPubsubHelp SCompleted

func (b *Builder) PubsubHelp() PubsubHelp {
	return PubsubHelp{cs: append(b.get(), "PUBSUB", "HELP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) PubsubHelp() SPubsubHelp {
	return SPubsubHelp{cs: append(b.get(), "PUBSUB", "HELP"), ks: InitSlot, cf: readonly}
}

func (c PubsubHelp) Build() Completed {
	return Completed(c)
}

func (c SPubsubHelp) Build() SCompleted {
	return SCompleted(c)
}

type PubsubNumpat Completed

type SPubsubNumpat SCompleted

func (b *Builder) PubsubNumpat() PubsubNumpat {
	return PubsubNumpat{cs: append(b.get(), "PUBSUB", "NUMPAT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) PubsubNumpat() SPubsubNumpat {
	return SPubsubNumpat{cs: append(b.get(), "PUBSUB", "NUMPAT"), ks: InitSlot, cf: readonly}
}

func (c PubsubNumpat) Build() Completed {
	return Completed(c)
}

func (c SPubsubNumpat) Build() SCompleted {
	return SCompleted(c)
}

type PubsubNumsub Completed

type SPubsubNumsub SCompleted

func (b *Builder) PubsubNumsub() PubsubNumsub {
	return PubsubNumsub{cs: append(b.get(), "PUBSUB", "NUMSUB"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) PubsubNumsub() SPubsubNumsub {
	return SPubsubNumsub{cs: append(b.get(), "PUBSUB", "NUMSUB"), ks: InitSlot, cf: readonly}
}

func (c PubsubNumsub) Channel(channel ...string) PubsubNumsubChannel {
	c.cs = append(c.cs, channel...)
	return (PubsubNumsubChannel)(c)
}

func (c SPubsubNumsub) Channel(channel ...string) SPubsubNumsubChannel {
	c.cs = append(c.cs, channel...)
	return (SPubsubNumsubChannel)(c)
}

func (c PubsubNumsub) Build() Completed {
	return Completed(c)
}

func (c SPubsubNumsub) Build() SCompleted {
	return SCompleted(c)
}

type PubsubNumsubChannel Completed

type SPubsubNumsubChannel SCompleted

func (c PubsubNumsubChannel) Channel(channel ...string) PubsubNumsubChannel {
	c.cs = append(c.cs, channel...)
	return c
}

func (c SPubsubNumsubChannel) Channel(channel ...string) SPubsubNumsubChannel {
	c.cs = append(c.cs, channel...)
	return c
}

func (c PubsubNumsubChannel) Build() Completed {
	return Completed(c)
}

func (c SPubsubNumsubChannel) Build() SCompleted {
	return SCompleted(c)
}

type Punsubscribe Completed

type SPunsubscribe SCompleted

func (b *Builder) Punsubscribe() Punsubscribe {
	return Punsubscribe{cs: append(b.get(), "PUNSUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (b *SBuilder) Punsubscribe() SPunsubscribe {
	return SPunsubscribe{cs: append(b.get(), "PUNSUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (c Punsubscribe) Pattern(pattern ...string) PunsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return (PunsubscribePattern)(c)
}

func (c SPunsubscribe) Pattern(pattern ...string) SPunsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return (SPunsubscribePattern)(c)
}

func (c Punsubscribe) Build() Completed {
	return Completed(c)
}

func (c SPunsubscribe) Build() SCompleted {
	return SCompleted(c)
}

type PunsubscribePattern Completed

type SPunsubscribePattern SCompleted

func (c PunsubscribePattern) Pattern(pattern ...string) PunsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return c
}

func (c SPunsubscribePattern) Pattern(pattern ...string) SPunsubscribePattern {
	c.cs = append(c.cs, pattern...)
	return c
}

func (c PunsubscribePattern) Build() Completed {
	return Completed(c)
}

func (c SPunsubscribePattern) Build() SCompleted {
	return SCompleted(c)
}

type Quit Completed

type SQuit SCompleted

func (b *Builder) Quit() Quit {
	return Quit{cs: append(b.get(), "QUIT"), ks: InitSlot}
}

func (b *SBuilder) Quit() SQuit {
	return SQuit{cs: append(b.get(), "QUIT"), ks: InitSlot}
}

func (c Quit) Build() Completed {
	return Completed(c)
}

func (c SQuit) Build() SCompleted {
	return SCompleted(c)
}

type Randomkey Completed

type SRandomkey SCompleted

func (b *Builder) Randomkey() Randomkey {
	return Randomkey{cs: append(b.get(), "RANDOMKEY"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Randomkey() SRandomkey {
	return SRandomkey{cs: append(b.get(), "RANDOMKEY"), ks: InitSlot, cf: readonly}
}

func (c Randomkey) Build() Completed {
	return Completed(c)
}

func (c SRandomkey) Build() SCompleted {
	return SCompleted(c)
}

type Readonly Completed

type SReadonly SCompleted

func (b *Builder) Readonly() Readonly {
	return Readonly{cs: append(b.get(), "READONLY"), ks: InitSlot}
}

func (b *SBuilder) Readonly() SReadonly {
	return SReadonly{cs: append(b.get(), "READONLY"), ks: InitSlot}
}

func (c Readonly) Build() Completed {
	return Completed(c)
}

func (c SReadonly) Build() SCompleted {
	return SCompleted(c)
}

type Readwrite Completed

type SReadwrite SCompleted

func (b *Builder) Readwrite() Readwrite {
	return Readwrite{cs: append(b.get(), "READWRITE"), ks: InitSlot}
}

func (b *SBuilder) Readwrite() SReadwrite {
	return SReadwrite{cs: append(b.get(), "READWRITE"), ks: InitSlot}
}

func (c Readwrite) Build() Completed {
	return Completed(c)
}

func (c SReadwrite) Build() SCompleted {
	return SCompleted(c)
}

type Rename Completed

type SRename SCompleted

func (b *Builder) Rename() Rename {
	return Rename{cs: append(b.get(), "RENAME"), ks: InitSlot}
}

func (b *SBuilder) Rename() SRename {
	return SRename{cs: append(b.get(), "RENAME"), ks: InitSlot}
}

func (c Rename) Key(key string) RenameKey {
	c.cs = append(c.cs, key)
	return (RenameKey)(c)
}

func (c SRename) Key(key string) SRenameKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SRenameKey)(c)
}

type RenameKey Completed

type SRenameKey SCompleted

func (c RenameKey) Newkey(newkey string) RenameNewkey {
	c.cs = append(c.cs, newkey)
	return (RenameNewkey)(c)
}

func (c SRenameKey) Newkey(newkey string) SRenameNewkey {
	c.ks = checkSlot(c.ks, slot(newkey))
	c.cs = append(c.cs, newkey)
	return (SRenameNewkey)(c)
}

type RenameNewkey Completed

type SRenameNewkey SCompleted

func (c RenameNewkey) Build() Completed {
	return Completed(c)
}

func (c SRenameNewkey) Build() SCompleted {
	return SCompleted(c)
}

type Renamenx Completed

type SRenamenx SCompleted

func (b *Builder) Renamenx() Renamenx {
	return Renamenx{cs: append(b.get(), "RENAMENX"), ks: InitSlot}
}

func (b *SBuilder) Renamenx() SRenamenx {
	return SRenamenx{cs: append(b.get(), "RENAMENX"), ks: InitSlot}
}

func (c Renamenx) Key(key string) RenamenxKey {
	c.cs = append(c.cs, key)
	return (RenamenxKey)(c)
}

func (c SRenamenx) Key(key string) SRenamenxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SRenamenxKey)(c)
}

type RenamenxKey Completed

type SRenamenxKey SCompleted

func (c RenamenxKey) Newkey(newkey string) RenamenxNewkey {
	c.cs = append(c.cs, newkey)
	return (RenamenxNewkey)(c)
}

func (c SRenamenxKey) Newkey(newkey string) SRenamenxNewkey {
	c.ks = checkSlot(c.ks, slot(newkey))
	c.cs = append(c.cs, newkey)
	return (SRenamenxNewkey)(c)
}

type RenamenxNewkey Completed

type SRenamenxNewkey SCompleted

func (c RenamenxNewkey) Build() Completed {
	return Completed(c)
}

func (c SRenamenxNewkey) Build() SCompleted {
	return SCompleted(c)
}

type Replicaof Completed

type SReplicaof SCompleted

func (b *Builder) Replicaof() Replicaof {
	return Replicaof{cs: append(b.get(), "REPLICAOF"), ks: InitSlot}
}

func (b *SBuilder) Replicaof() SReplicaof {
	return SReplicaof{cs: append(b.get(), "REPLICAOF"), ks: InitSlot}
}

func (c Replicaof) Host(host string) ReplicaofHost {
	c.cs = append(c.cs, host)
	return (ReplicaofHost)(c)
}

func (c SReplicaof) Host(host string) SReplicaofHost {
	c.cs = append(c.cs, host)
	return (SReplicaofHost)(c)
}

type ReplicaofHost Completed

type SReplicaofHost SCompleted

func (c ReplicaofHost) Port(port string) ReplicaofPort {
	c.cs = append(c.cs, port)
	return (ReplicaofPort)(c)
}

func (c SReplicaofHost) Port(port string) SReplicaofPort {
	c.cs = append(c.cs, port)
	return (SReplicaofPort)(c)
}

type ReplicaofPort Completed

type SReplicaofPort SCompleted

func (c ReplicaofPort) Build() Completed {
	return Completed(c)
}

func (c SReplicaofPort) Build() SCompleted {
	return SCompleted(c)
}

type Reset Completed

type SReset SCompleted

func (b *Builder) Reset() Reset {
	return Reset{cs: append(b.get(), "RESET"), ks: InitSlot}
}

func (b *SBuilder) Reset() SReset {
	return SReset{cs: append(b.get(), "RESET"), ks: InitSlot}
}

func (c Reset) Build() Completed {
	return Completed(c)
}

func (c SReset) Build() SCompleted {
	return SCompleted(c)
}

type Restore Completed

type SRestore SCompleted

func (b *Builder) Restore() Restore {
	return Restore{cs: append(b.get(), "RESTORE"), ks: InitSlot}
}

func (b *SBuilder) Restore() SRestore {
	return SRestore{cs: append(b.get(), "RESTORE"), ks: InitSlot}
}

func (c Restore) Key(key string) RestoreKey {
	c.cs = append(c.cs, key)
	return (RestoreKey)(c)
}

func (c SRestore) Key(key string) SRestoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SRestoreKey)(c)
}

type RestoreAbsttl Completed

type SRestoreAbsttl SCompleted

func (c RestoreAbsttl) Idletime(seconds int64) RestoreIdletime {
	c.cs = append(c.cs, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (RestoreIdletime)(c)
}

func (c SRestoreAbsttl) Idletime(seconds int64) SRestoreIdletime {
	c.cs = append(c.cs, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (SRestoreIdletime)(c)
}

func (c RestoreAbsttl) Freq(frequency int64) RestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreAbsttl) Freq(frequency int64) SRestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreAbsttl) Build() Completed {
	return Completed(c)
}

func (c SRestoreAbsttl) Build() SCompleted {
	return SCompleted(c)
}

type RestoreFreq Completed

type SRestoreFreq SCompleted

func (c RestoreFreq) Build() Completed {
	return Completed(c)
}

func (c SRestoreFreq) Build() SCompleted {
	return SCompleted(c)
}

type RestoreIdletime Completed

type SRestoreIdletime SCompleted

func (c RestoreIdletime) Freq(frequency int64) RestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreIdletime) Freq(frequency int64) SRestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreIdletime) Build() Completed {
	return Completed(c)
}

func (c SRestoreIdletime) Build() SCompleted {
	return SCompleted(c)
}

type RestoreKey Completed

type SRestoreKey SCompleted

func (c RestoreKey) Ttl(ttl int64) RestoreTtl {
	c.cs = append(c.cs, strconv.FormatInt(ttl, 10))
	return (RestoreTtl)(c)
}

func (c SRestoreKey) Ttl(ttl int64) SRestoreTtl {
	c.cs = append(c.cs, strconv.FormatInt(ttl, 10))
	return (SRestoreTtl)(c)
}

type RestoreReplace Completed

type SRestoreReplace SCompleted

func (c RestoreReplace) Absttl() RestoreAbsttl {
	c.cs = append(c.cs, "ABSTTL")
	return (RestoreAbsttl)(c)
}

func (c SRestoreReplace) Absttl() SRestoreAbsttl {
	c.cs = append(c.cs, "ABSTTL")
	return (SRestoreAbsttl)(c)
}

func (c RestoreReplace) Idletime(seconds int64) RestoreIdletime {
	c.cs = append(c.cs, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (RestoreIdletime)(c)
}

func (c SRestoreReplace) Idletime(seconds int64) SRestoreIdletime {
	c.cs = append(c.cs, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (SRestoreIdletime)(c)
}

func (c RestoreReplace) Freq(frequency int64) RestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreReplace) Freq(frequency int64) SRestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreReplace) Build() Completed {
	return Completed(c)
}

func (c SRestoreReplace) Build() SCompleted {
	return SCompleted(c)
}

type RestoreSerializedValue Completed

type SRestoreSerializedValue SCompleted

func (c RestoreSerializedValue) Replace() RestoreReplace {
	c.cs = append(c.cs, "REPLACE")
	return (RestoreReplace)(c)
}

func (c SRestoreSerializedValue) Replace() SRestoreReplace {
	c.cs = append(c.cs, "REPLACE")
	return (SRestoreReplace)(c)
}

func (c RestoreSerializedValue) Absttl() RestoreAbsttl {
	c.cs = append(c.cs, "ABSTTL")
	return (RestoreAbsttl)(c)
}

func (c SRestoreSerializedValue) Absttl() SRestoreAbsttl {
	c.cs = append(c.cs, "ABSTTL")
	return (SRestoreAbsttl)(c)
}

func (c RestoreSerializedValue) Idletime(seconds int64) RestoreIdletime {
	c.cs = append(c.cs, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (RestoreIdletime)(c)
}

func (c SRestoreSerializedValue) Idletime(seconds int64) SRestoreIdletime {
	c.cs = append(c.cs, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (SRestoreIdletime)(c)
}

func (c RestoreSerializedValue) Freq(frequency int64) RestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreSerializedValue) Freq(frequency int64) SRestoreFreq {
	c.cs = append(c.cs, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreSerializedValue) Build() Completed {
	return Completed(c)
}

func (c SRestoreSerializedValue) Build() SCompleted {
	return SCompleted(c)
}

type RestoreTtl Completed

type SRestoreTtl SCompleted

func (c RestoreTtl) SerializedValue(serializedValue string) RestoreSerializedValue {
	c.cs = append(c.cs, serializedValue)
	return (RestoreSerializedValue)(c)
}

func (c SRestoreTtl) SerializedValue(serializedValue string) SRestoreSerializedValue {
	c.cs = append(c.cs, serializedValue)
	return (SRestoreSerializedValue)(c)
}

type Role Completed

type SRole SCompleted

func (b *Builder) Role() Role {
	return Role{cs: append(b.get(), "ROLE"), ks: InitSlot}
}

func (b *SBuilder) Role() SRole {
	return SRole{cs: append(b.get(), "ROLE"), ks: InitSlot}
}

func (c Role) Build() Completed {
	return Completed(c)
}

func (c SRole) Build() SCompleted {
	return SCompleted(c)
}

type Rpop Completed

type SRpop SCompleted

func (b *Builder) Rpop() Rpop {
	return Rpop{cs: append(b.get(), "RPOP"), ks: InitSlot}
}

func (b *SBuilder) Rpop() SRpop {
	return SRpop{cs: append(b.get(), "RPOP"), ks: InitSlot}
}

func (c Rpop) Key(key string) RpopKey {
	c.cs = append(c.cs, key)
	return (RpopKey)(c)
}

func (c SRpop) Key(key string) SRpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SRpopKey)(c)
}

type RpopCount Completed

type SRpopCount SCompleted

func (c RpopCount) Build() Completed {
	return Completed(c)
}

func (c SRpopCount) Build() SCompleted {
	return SCompleted(c)
}

type RpopKey Completed

type SRpopKey SCompleted

func (c RpopKey) Count(count int64) RpopCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (RpopCount)(c)
}

func (c SRpopKey) Count(count int64) SRpopCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SRpopCount)(c)
}

func (c RpopKey) Build() Completed {
	return Completed(c)
}

func (c SRpopKey) Build() SCompleted {
	return SCompleted(c)
}

type Rpoplpush Completed

type SRpoplpush SCompleted

func (b *Builder) Rpoplpush() Rpoplpush {
	return Rpoplpush{cs: append(b.get(), "RPOPLPUSH"), ks: InitSlot}
}

func (b *SBuilder) Rpoplpush() SRpoplpush {
	return SRpoplpush{cs: append(b.get(), "RPOPLPUSH"), ks: InitSlot}
}

func (c Rpoplpush) Source(source string) RpoplpushSource {
	c.cs = append(c.cs, source)
	return (RpoplpushSource)(c)
}

func (c SRpoplpush) Source(source string) SRpoplpushSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SRpoplpushSource)(c)
}

type RpoplpushDestination Completed

type SRpoplpushDestination SCompleted

func (c RpoplpushDestination) Build() Completed {
	return Completed(c)
}

func (c SRpoplpushDestination) Build() SCompleted {
	return SCompleted(c)
}

type RpoplpushSource Completed

type SRpoplpushSource SCompleted

func (c RpoplpushSource) Destination(destination string) RpoplpushDestination {
	c.cs = append(c.cs, destination)
	return (RpoplpushDestination)(c)
}

func (c SRpoplpushSource) Destination(destination string) SRpoplpushDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SRpoplpushDestination)(c)
}

type Rpush Completed

type SRpush SCompleted

func (b *Builder) Rpush() Rpush {
	return Rpush{cs: append(b.get(), "RPUSH"), ks: InitSlot}
}

func (b *SBuilder) Rpush() SRpush {
	return SRpush{cs: append(b.get(), "RPUSH"), ks: InitSlot}
}

func (c Rpush) Key(key string) RpushKey {
	c.cs = append(c.cs, key)
	return (RpushKey)(c)
}

func (c SRpush) Key(key string) SRpushKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SRpushKey)(c)
}

type RpushElement Completed

type SRpushElement SCompleted

func (c RpushElement) Element(element ...string) RpushElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c SRpushElement) Element(element ...string) SRpushElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c RpushElement) Build() Completed {
	return Completed(c)
}

func (c SRpushElement) Build() SCompleted {
	return SCompleted(c)
}

type RpushKey Completed

type SRpushKey SCompleted

func (c RpushKey) Element(element ...string) RpushElement {
	c.cs = append(c.cs, element...)
	return (RpushElement)(c)
}

func (c SRpushKey) Element(element ...string) SRpushElement {
	c.cs = append(c.cs, element...)
	return (SRpushElement)(c)
}

type Rpushx Completed

type SRpushx SCompleted

func (b *Builder) Rpushx() Rpushx {
	return Rpushx{cs: append(b.get(), "RPUSHX"), ks: InitSlot}
}

func (b *SBuilder) Rpushx() SRpushx {
	return SRpushx{cs: append(b.get(), "RPUSHX"), ks: InitSlot}
}

func (c Rpushx) Key(key string) RpushxKey {
	c.cs = append(c.cs, key)
	return (RpushxKey)(c)
}

func (c SRpushx) Key(key string) SRpushxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SRpushxKey)(c)
}

type RpushxElement Completed

type SRpushxElement SCompleted

func (c RpushxElement) Element(element ...string) RpushxElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c SRpushxElement) Element(element ...string) SRpushxElement {
	c.cs = append(c.cs, element...)
	return c
}

func (c RpushxElement) Build() Completed {
	return Completed(c)
}

func (c SRpushxElement) Build() SCompleted {
	return SCompleted(c)
}

type RpushxKey Completed

type SRpushxKey SCompleted

func (c RpushxKey) Element(element ...string) RpushxElement {
	c.cs = append(c.cs, element...)
	return (RpushxElement)(c)
}

func (c SRpushxKey) Element(element ...string) SRpushxElement {
	c.cs = append(c.cs, element...)
	return (SRpushxElement)(c)
}

type Sadd Completed

type SSadd SCompleted

func (b *Builder) Sadd() Sadd {
	return Sadd{cs: append(b.get(), "SADD"), ks: InitSlot}
}

func (b *SBuilder) Sadd() SSadd {
	return SSadd{cs: append(b.get(), "SADD"), ks: InitSlot}
}

func (c Sadd) Key(key string) SaddKey {
	c.cs = append(c.cs, key)
	return (SaddKey)(c)
}

func (c SSadd) Key(key string) SSaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSaddKey)(c)
}

type SaddKey Completed

type SSaddKey SCompleted

func (c SaddKey) Member(member ...string) SaddMember {
	c.cs = append(c.cs, member...)
	return (SaddMember)(c)
}

func (c SSaddKey) Member(member ...string) SSaddMember {
	c.cs = append(c.cs, member...)
	return (SSaddMember)(c)
}

type SaddMember Completed

type SSaddMember SCompleted

func (c SaddMember) Member(member ...string) SaddMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SSaddMember) Member(member ...string) SSaddMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SaddMember) Build() Completed {
	return Completed(c)
}

func (c SSaddMember) Build() SCompleted {
	return SCompleted(c)
}

type Save Completed

type SSave SCompleted

func (b *Builder) Save() Save {
	return Save{cs: append(b.get(), "SAVE"), ks: InitSlot}
}

func (b *SBuilder) Save() SSave {
	return SSave{cs: append(b.get(), "SAVE"), ks: InitSlot}
}

func (c Save) Build() Completed {
	return Completed(c)
}

func (c SSave) Build() SCompleted {
	return SCompleted(c)
}

type Scan Completed

type SScan SCompleted

func (b *Builder) Scan() Scan {
	return Scan{cs: append(b.get(), "SCAN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Scan() SScan {
	return SScan{cs: append(b.get(), "SCAN"), ks: InitSlot, cf: readonly}
}

func (c Scan) Cursor(cursor int64) ScanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (ScanCursor)(c)
}

func (c SScan) Cursor(cursor int64) SScanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (SScanCursor)(c)
}

type ScanCount Completed

type SScanCount SCompleted

func (c ScanCount) Type(typ string) ScanType {
	c.cs = append(c.cs, "TYPE", typ)
	return (ScanType)(c)
}

func (c SScanCount) Type(typ string) SScanType {
	c.cs = append(c.cs, "TYPE", typ)
	return (SScanType)(c)
}

func (c ScanCount) Build() Completed {
	return Completed(c)
}

func (c SScanCount) Build() SCompleted {
	return SCompleted(c)
}

type ScanCursor Completed

type SScanCursor SCompleted

func (c ScanCursor) Match(pattern string) ScanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (ScanMatch)(c)
}

func (c SScanCursor) Match(pattern string) SScanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (SScanMatch)(c)
}

func (c ScanCursor) Count(count int64) ScanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (ScanCount)(c)
}

func (c SScanCursor) Count(count int64) SScanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SScanCount)(c)
}

func (c ScanCursor) Type(typ string) ScanType {
	c.cs = append(c.cs, "TYPE", typ)
	return (ScanType)(c)
}

func (c SScanCursor) Type(typ string) SScanType {
	c.cs = append(c.cs, "TYPE", typ)
	return (SScanType)(c)
}

func (c ScanCursor) Build() Completed {
	return Completed(c)
}

func (c SScanCursor) Build() SCompleted {
	return SCompleted(c)
}

type ScanMatch Completed

type SScanMatch SCompleted

func (c ScanMatch) Count(count int64) ScanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (ScanCount)(c)
}

func (c SScanMatch) Count(count int64) SScanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SScanCount)(c)
}

func (c ScanMatch) Type(typ string) ScanType {
	c.cs = append(c.cs, "TYPE", typ)
	return (ScanType)(c)
}

func (c SScanMatch) Type(typ string) SScanType {
	c.cs = append(c.cs, "TYPE", typ)
	return (SScanType)(c)
}

func (c ScanMatch) Build() Completed {
	return Completed(c)
}

func (c SScanMatch) Build() SCompleted {
	return SCompleted(c)
}

type ScanType Completed

type SScanType SCompleted

func (c ScanType) Build() Completed {
	return Completed(c)
}

func (c SScanType) Build() SCompleted {
	return SCompleted(c)
}

type Scard Completed

type SScard SCompleted

func (b *Builder) Scard() Scard {
	return Scard{cs: append(b.get(), "SCARD"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Scard() SScard {
	return SScard{cs: append(b.get(), "SCARD"), ks: InitSlot, cf: readonly}
}

func (c Scard) Key(key string) ScardKey {
	c.cs = append(c.cs, key)
	return (ScardKey)(c)
}

func (c SScard) Key(key string) SScardKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SScardKey)(c)
}

type ScardKey Completed

type SScardKey SCompleted

func (c ScardKey) Build() Completed {
	return Completed(c)
}

func (c SScardKey) Build() SCompleted {
	return SCompleted(c)
}

func (c ScardKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SScardKey) Cache() SCacheable {
	return SCacheable(c)
}

type ScriptDebug Completed

type SScriptDebug SCompleted

func (b *Builder) ScriptDebug() ScriptDebug {
	return ScriptDebug{cs: append(b.get(), "SCRIPT", "DEBUG"), ks: InitSlot}
}

func (b *SBuilder) ScriptDebug() SScriptDebug {
	return SScriptDebug{cs: append(b.get(), "SCRIPT", "DEBUG"), ks: InitSlot}
}

func (c ScriptDebug) Yes() ScriptDebugModeYes {
	c.cs = append(c.cs, "YES")
	return (ScriptDebugModeYes)(c)
}

func (c SScriptDebug) Yes() SScriptDebugModeYes {
	c.cs = append(c.cs, "YES")
	return (SScriptDebugModeYes)(c)
}

func (c ScriptDebug) Sync() ScriptDebugModeSync {
	c.cs = append(c.cs, "SYNC")
	return (ScriptDebugModeSync)(c)
}

func (c SScriptDebug) Sync() SScriptDebugModeSync {
	c.cs = append(c.cs, "SYNC")
	return (SScriptDebugModeSync)(c)
}

func (c ScriptDebug) No() ScriptDebugModeNo {
	c.cs = append(c.cs, "NO")
	return (ScriptDebugModeNo)(c)
}

func (c SScriptDebug) No() SScriptDebugModeNo {
	c.cs = append(c.cs, "NO")
	return (SScriptDebugModeNo)(c)
}

type ScriptDebugModeNo Completed

type SScriptDebugModeNo SCompleted

func (c ScriptDebugModeNo) Build() Completed {
	return Completed(c)
}

func (c SScriptDebugModeNo) Build() SCompleted {
	return SCompleted(c)
}

type ScriptDebugModeSync Completed

type SScriptDebugModeSync SCompleted

func (c ScriptDebugModeSync) Build() Completed {
	return Completed(c)
}

func (c SScriptDebugModeSync) Build() SCompleted {
	return SCompleted(c)
}

type ScriptDebugModeYes Completed

type SScriptDebugModeYes SCompleted

func (c ScriptDebugModeYes) Build() Completed {
	return Completed(c)
}

func (c SScriptDebugModeYes) Build() SCompleted {
	return SCompleted(c)
}

type ScriptExists Completed

type SScriptExists SCompleted

func (b *Builder) ScriptExists() ScriptExists {
	return ScriptExists{cs: append(b.get(), "SCRIPT", "EXISTS"), ks: InitSlot}
}

func (b *SBuilder) ScriptExists() SScriptExists {
	return SScriptExists{cs: append(b.get(), "SCRIPT", "EXISTS"), ks: InitSlot}
}

func (c ScriptExists) Sha1(sha1 ...string) ScriptExistsSha1 {
	c.cs = append(c.cs, sha1...)
	return (ScriptExistsSha1)(c)
}

func (c SScriptExists) Sha1(sha1 ...string) SScriptExistsSha1 {
	c.cs = append(c.cs, sha1...)
	return (SScriptExistsSha1)(c)
}

type ScriptExistsSha1 Completed

type SScriptExistsSha1 SCompleted

func (c ScriptExistsSha1) Sha1(sha1 ...string) ScriptExistsSha1 {
	c.cs = append(c.cs, sha1...)
	return c
}

func (c SScriptExistsSha1) Sha1(sha1 ...string) SScriptExistsSha1 {
	c.cs = append(c.cs, sha1...)
	return c
}

func (c ScriptExistsSha1) Build() Completed {
	return Completed(c)
}

func (c SScriptExistsSha1) Build() SCompleted {
	return SCompleted(c)
}

type ScriptFlush Completed

type SScriptFlush SCompleted

func (b *Builder) ScriptFlush() ScriptFlush {
	return ScriptFlush{cs: append(b.get(), "SCRIPT", "FLUSH"), ks: InitSlot}
}

func (b *SBuilder) ScriptFlush() SScriptFlush {
	return SScriptFlush{cs: append(b.get(), "SCRIPT", "FLUSH"), ks: InitSlot}
}

func (c ScriptFlush) Async() ScriptFlushAsync {
	c.cs = append(c.cs, "ASYNC")
	return (ScriptFlushAsync)(c)
}

func (c SScriptFlush) Async() SScriptFlushAsync {
	c.cs = append(c.cs, "ASYNC")
	return (SScriptFlushAsync)(c)
}

func (c ScriptFlush) Sync() ScriptFlushAsyncSync {
	c.cs = append(c.cs, "SYNC")
	return (ScriptFlushAsyncSync)(c)
}

func (c SScriptFlush) Sync() SScriptFlushAsyncSync {
	c.cs = append(c.cs, "SYNC")
	return (SScriptFlushAsyncSync)(c)
}

func (c ScriptFlush) Build() Completed {
	return Completed(c)
}

func (c SScriptFlush) Build() SCompleted {
	return SCompleted(c)
}

type ScriptFlushAsync Completed

type SScriptFlushAsync SCompleted

func (c ScriptFlushAsync) Build() Completed {
	return Completed(c)
}

func (c SScriptFlushAsync) Build() SCompleted {
	return SCompleted(c)
}

type ScriptFlushAsyncSync Completed

type SScriptFlushAsyncSync SCompleted

func (c ScriptFlushAsyncSync) Build() Completed {
	return Completed(c)
}

func (c SScriptFlushAsyncSync) Build() SCompleted {
	return SCompleted(c)
}

type ScriptKill Completed

type SScriptKill SCompleted

func (b *Builder) ScriptKill() ScriptKill {
	return ScriptKill{cs: append(b.get(), "SCRIPT", "KILL"), ks: InitSlot}
}

func (b *SBuilder) ScriptKill() SScriptKill {
	return SScriptKill{cs: append(b.get(), "SCRIPT", "KILL"), ks: InitSlot}
}

func (c ScriptKill) Build() Completed {
	return Completed(c)
}

func (c SScriptKill) Build() SCompleted {
	return SCompleted(c)
}

type ScriptLoad Completed

type SScriptLoad SCompleted

func (b *Builder) ScriptLoad() ScriptLoad {
	return ScriptLoad{cs: append(b.get(), "SCRIPT", "LOAD"), ks: InitSlot}
}

func (b *SBuilder) ScriptLoad() SScriptLoad {
	return SScriptLoad{cs: append(b.get(), "SCRIPT", "LOAD"), ks: InitSlot}
}

func (c ScriptLoad) Script(script string) ScriptLoadScript {
	c.cs = append(c.cs, script)
	return (ScriptLoadScript)(c)
}

func (c SScriptLoad) Script(script string) SScriptLoadScript {
	c.cs = append(c.cs, script)
	return (SScriptLoadScript)(c)
}

type ScriptLoadScript Completed

type SScriptLoadScript SCompleted

func (c ScriptLoadScript) Build() Completed {
	return Completed(c)
}

func (c SScriptLoadScript) Build() SCompleted {
	return SCompleted(c)
}

type Sdiff Completed

type SSdiff SCompleted

func (b *Builder) Sdiff() Sdiff {
	return Sdiff{cs: append(b.get(), "SDIFF"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Sdiff() SSdiff {
	return SSdiff{cs: append(b.get(), "SDIFF"), ks: InitSlot, cf: readonly}
}

func (c Sdiff) Key(key ...string) SdiffKey {
	c.cs = append(c.cs, key...)
	return (SdiffKey)(c)
}

func (c SSdiff) Key(key ...string) SSdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSdiffKey)(c)
}

type SdiffKey Completed

type SSdiffKey SCompleted

func (c SdiffKey) Key(key ...string) SdiffKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSdiffKey) Key(key ...string) SSdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SdiffKey) Build() Completed {
	return Completed(c)
}

func (c SSdiffKey) Build() SCompleted {
	return SCompleted(c)
}

type Sdiffstore Completed

type SSdiffstore SCompleted

func (b *Builder) Sdiffstore() Sdiffstore {
	return Sdiffstore{cs: append(b.get(), "SDIFFSTORE"), ks: InitSlot}
}

func (b *SBuilder) Sdiffstore() SSdiffstore {
	return SSdiffstore{cs: append(b.get(), "SDIFFSTORE"), ks: InitSlot}
}

func (c Sdiffstore) Destination(destination string) SdiffstoreDestination {
	c.cs = append(c.cs, destination)
	return (SdiffstoreDestination)(c)
}

func (c SSdiffstore) Destination(destination string) SSdiffstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SSdiffstoreDestination)(c)
}

type SdiffstoreDestination Completed

type SSdiffstoreDestination SCompleted

func (c SdiffstoreDestination) Key(key ...string) SdiffstoreKey {
	c.cs = append(c.cs, key...)
	return (SdiffstoreKey)(c)
}

func (c SSdiffstoreDestination) Key(key ...string) SSdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSdiffstoreKey)(c)
}

type SdiffstoreKey Completed

type SSdiffstoreKey SCompleted

func (c SdiffstoreKey) Key(key ...string) SdiffstoreKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSdiffstoreKey) Key(key ...string) SSdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SdiffstoreKey) Build() Completed {
	return Completed(c)
}

func (c SSdiffstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type Select Completed

type SSelect SCompleted

func (b *Builder) Select() Select {
	return Select{cs: append(b.get(), "SELECT"), ks: InitSlot}
}

func (b *SBuilder) Select() SSelect {
	return SSelect{cs: append(b.get(), "SELECT"), ks: InitSlot}
}

func (c Select) Index(index int64) SelectIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (SelectIndex)(c)
}

func (c SSelect) Index(index int64) SSelectIndex {
	c.cs = append(c.cs, strconv.FormatInt(index, 10))
	return (SSelectIndex)(c)
}

type SelectIndex Completed

type SSelectIndex SCompleted

func (c SelectIndex) Build() Completed {
	return Completed(c)
}

func (c SSelectIndex) Build() SCompleted {
	return SCompleted(c)
}

type Set Completed

type SSet SCompleted

func (b *Builder) Set() Set {
	return Set{cs: append(b.get(), "SET"), ks: InitSlot}
}

func (b *SBuilder) Set() SSet {
	return SSet{cs: append(b.get(), "SET"), ks: InitSlot}
}

func (c Set) Key(key string) SetKey {
	c.cs = append(c.cs, key)
	return (SetKey)(c)
}

func (c SSet) Key(key string) SSetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSetKey)(c)
}

type SetConditionNx Completed

type SSetConditionNx SCompleted

func (c SetConditionNx) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetConditionNx) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetConditionNx) Build() Completed {
	return Completed(c)
}

func (c SSetConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type SetConditionXx Completed

type SSetConditionXx SCompleted

func (c SetConditionXx) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetConditionXx) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetConditionXx) Build() Completed {
	return Completed(c)
}

func (c SSetConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationExSeconds Completed

type SSetExpirationExSeconds SCompleted

func (c SetExpirationExSeconds) Nx() SetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationExSeconds) Nx() SSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationExSeconds) Xx() SetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationExSeconds) Xx() SSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationExSeconds) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationExSeconds) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationExSeconds) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationExSeconds) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationExatTimestamp Completed

type SSetExpirationExatTimestamp SCompleted

func (c SetExpirationExatTimestamp) Nx() SetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationExatTimestamp) Nx() SSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationExatTimestamp) Xx() SetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationExatTimestamp) Xx() SSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationExatTimestamp) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationExatTimestamp) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationExatTimestamp) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationExatTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationKeepttl Completed

type SSetExpirationKeepttl SCompleted

func (c SetExpirationKeepttl) Nx() SetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationKeepttl) Nx() SSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationKeepttl) Xx() SetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationKeepttl) Xx() SSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationKeepttl) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationKeepttl) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationKeepttl) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationKeepttl) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationPxMilliseconds Completed

type SSetExpirationPxMilliseconds SCompleted

func (c SetExpirationPxMilliseconds) Nx() SetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationPxMilliseconds) Nx() SSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationPxMilliseconds) Xx() SetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationPxMilliseconds) Xx() SSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationPxMilliseconds) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationPxMilliseconds) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationPxMilliseconds) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationPxMilliseconds) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationPxatMillisecondsTimestamp Completed

type SSetExpirationPxatMillisecondsTimestamp SCompleted

func (c SetExpirationPxatMillisecondsTimestamp) Nx() SetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Nx() SSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationPxatMillisecondsTimestamp) Xx() SetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Xx() SSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationPxatMillisecondsTimestamp) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationPxatMillisecondsTimestamp) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type SetGet Completed

type SSetGet SCompleted

func (c SetGet) Build() Completed {
	return Completed(c)
}

func (c SSetGet) Build() SCompleted {
	return SCompleted(c)
}

type SetKey Completed

type SSetKey SCompleted

func (c SetKey) Value(value string) SetValue {
	c.cs = append(c.cs, value)
	return (SetValue)(c)
}

func (c SSetKey) Value(value string) SSetValue {
	c.cs = append(c.cs, value)
	return (SSetValue)(c)
}

type SetValue Completed

type SSetValue SCompleted

func (c SetValue) ExSeconds(seconds int64) SetExpirationExSeconds {
	c.cs = append(c.cs, "EX", strconv.FormatInt(seconds, 10))
	return (SetExpirationExSeconds)(c)
}

func (c SSetValue) ExSeconds(seconds int64) SSetExpirationExSeconds {
	c.cs = append(c.cs, "EX", strconv.FormatInt(seconds, 10))
	return (SSetExpirationExSeconds)(c)
}

func (c SetValue) PxMilliseconds(milliseconds int64) SetExpirationPxMilliseconds {
	c.cs = append(c.cs, "PX", strconv.FormatInt(milliseconds, 10))
	return (SetExpirationPxMilliseconds)(c)
}

func (c SSetValue) PxMilliseconds(milliseconds int64) SSetExpirationPxMilliseconds {
	c.cs = append(c.cs, "PX", strconv.FormatInt(milliseconds, 10))
	return (SSetExpirationPxMilliseconds)(c)
}

func (c SetValue) ExatTimestamp(timestamp int64) SetExpirationExatTimestamp {
	c.cs = append(c.cs, "EXAT", strconv.FormatInt(timestamp, 10))
	return (SetExpirationExatTimestamp)(c)
}

func (c SSetValue) ExatTimestamp(timestamp int64) SSetExpirationExatTimestamp {
	c.cs = append(c.cs, "EXAT", strconv.FormatInt(timestamp, 10))
	return (SSetExpirationExatTimestamp)(c)
}

func (c SetValue) PxatMillisecondsTimestamp(millisecondsTimestamp int64) SetExpirationPxatMillisecondsTimestamp {
	c.cs = append(c.cs, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (SetExpirationPxatMillisecondsTimestamp)(c)
}

func (c SSetValue) PxatMillisecondsTimestamp(millisecondsTimestamp int64) SSetExpirationPxatMillisecondsTimestamp {
	c.cs = append(c.cs, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (SSetExpirationPxatMillisecondsTimestamp)(c)
}

func (c SetValue) Keepttl() SetExpirationKeepttl {
	c.cs = append(c.cs, "KEEPTTL")
	return (SetExpirationKeepttl)(c)
}

func (c SSetValue) Keepttl() SSetExpirationKeepttl {
	c.cs = append(c.cs, "KEEPTTL")
	return (SSetExpirationKeepttl)(c)
}

func (c SetValue) Nx() SetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SetConditionNx)(c)
}

func (c SSetValue) Nx() SSetConditionNx {
	c.cs = append(c.cs, "NX")
	return (SSetConditionNx)(c)
}

func (c SetValue) Xx() SetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SetConditionXx)(c)
}

func (c SSetValue) Xx() SSetConditionXx {
	c.cs = append(c.cs, "XX")
	return (SSetConditionXx)(c)
}

func (c SetValue) Get() SetGet {
	c.cs = append(c.cs, "GET")
	return (SetGet)(c)
}

func (c SSetValue) Get() SSetGet {
	c.cs = append(c.cs, "GET")
	return (SSetGet)(c)
}

func (c SetValue) Build() Completed {
	return Completed(c)
}

func (c SSetValue) Build() SCompleted {
	return SCompleted(c)
}

type Setbit Completed

type SSetbit SCompleted

func (b *Builder) Setbit() Setbit {
	return Setbit{cs: append(b.get(), "SETBIT"), ks: InitSlot}
}

func (b *SBuilder) Setbit() SSetbit {
	return SSetbit{cs: append(b.get(), "SETBIT"), ks: InitSlot}
}

func (c Setbit) Key(key string) SetbitKey {
	c.cs = append(c.cs, key)
	return (SetbitKey)(c)
}

func (c SSetbit) Key(key string) SSetbitKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSetbitKey)(c)
}

type SetbitKey Completed

type SSetbitKey SCompleted

func (c SetbitKey) Offset(offset int64) SetbitOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (SetbitOffset)(c)
}

func (c SSetbitKey) Offset(offset int64) SSetbitOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (SSetbitOffset)(c)
}

type SetbitOffset Completed

type SSetbitOffset SCompleted

func (c SetbitOffset) Value(value int64) SetbitValue {
	c.cs = append(c.cs, strconv.FormatInt(value, 10))
	return (SetbitValue)(c)
}

func (c SSetbitOffset) Value(value int64) SSetbitValue {
	c.cs = append(c.cs, strconv.FormatInt(value, 10))
	return (SSetbitValue)(c)
}

type SetbitValue Completed

type SSetbitValue SCompleted

func (c SetbitValue) Build() Completed {
	return Completed(c)
}

func (c SSetbitValue) Build() SCompleted {
	return SCompleted(c)
}

type Setex Completed

type SSetex SCompleted

func (b *Builder) Setex() Setex {
	return Setex{cs: append(b.get(), "SETEX"), ks: InitSlot}
}

func (b *SBuilder) Setex() SSetex {
	return SSetex{cs: append(b.get(), "SETEX"), ks: InitSlot}
}

func (c Setex) Key(key string) SetexKey {
	c.cs = append(c.cs, key)
	return (SetexKey)(c)
}

func (c SSetex) Key(key string) SSetexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSetexKey)(c)
}

type SetexKey Completed

type SSetexKey SCompleted

func (c SetexKey) Seconds(seconds int64) SetexSeconds {
	c.cs = append(c.cs, strconv.FormatInt(seconds, 10))
	return (SetexSeconds)(c)
}

func (c SSetexKey) Seconds(seconds int64) SSetexSeconds {
	c.cs = append(c.cs, strconv.FormatInt(seconds, 10))
	return (SSetexSeconds)(c)
}

type SetexSeconds Completed

type SSetexSeconds SCompleted

func (c SetexSeconds) Value(value string) SetexValue {
	c.cs = append(c.cs, value)
	return (SetexValue)(c)
}

func (c SSetexSeconds) Value(value string) SSetexValue {
	c.cs = append(c.cs, value)
	return (SSetexValue)(c)
}

type SetexValue Completed

type SSetexValue SCompleted

func (c SetexValue) Build() Completed {
	return Completed(c)
}

func (c SSetexValue) Build() SCompleted {
	return SCompleted(c)
}

type Setnx Completed

type SSetnx SCompleted

func (b *Builder) Setnx() Setnx {
	return Setnx{cs: append(b.get(), "SETNX"), ks: InitSlot}
}

func (b *SBuilder) Setnx() SSetnx {
	return SSetnx{cs: append(b.get(), "SETNX"), ks: InitSlot}
}

func (c Setnx) Key(key string) SetnxKey {
	c.cs = append(c.cs, key)
	return (SetnxKey)(c)
}

func (c SSetnx) Key(key string) SSetnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSetnxKey)(c)
}

type SetnxKey Completed

type SSetnxKey SCompleted

func (c SetnxKey) Value(value string) SetnxValue {
	c.cs = append(c.cs, value)
	return (SetnxValue)(c)
}

func (c SSetnxKey) Value(value string) SSetnxValue {
	c.cs = append(c.cs, value)
	return (SSetnxValue)(c)
}

type SetnxValue Completed

type SSetnxValue SCompleted

func (c SetnxValue) Build() Completed {
	return Completed(c)
}

func (c SSetnxValue) Build() SCompleted {
	return SCompleted(c)
}

type Setrange Completed

type SSetrange SCompleted

func (b *Builder) Setrange() Setrange {
	return Setrange{cs: append(b.get(), "SETRANGE"), ks: InitSlot}
}

func (b *SBuilder) Setrange() SSetrange {
	return SSetrange{cs: append(b.get(), "SETRANGE"), ks: InitSlot}
}

func (c Setrange) Key(key string) SetrangeKey {
	c.cs = append(c.cs, key)
	return (SetrangeKey)(c)
}

func (c SSetrange) Key(key string) SSetrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSetrangeKey)(c)
}

type SetrangeKey Completed

type SSetrangeKey SCompleted

func (c SetrangeKey) Offset(offset int64) SetrangeOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (SetrangeOffset)(c)
}

func (c SSetrangeKey) Offset(offset int64) SSetrangeOffset {
	c.cs = append(c.cs, strconv.FormatInt(offset, 10))
	return (SSetrangeOffset)(c)
}

type SetrangeOffset Completed

type SSetrangeOffset SCompleted

func (c SetrangeOffset) Value(value string) SetrangeValue {
	c.cs = append(c.cs, value)
	return (SetrangeValue)(c)
}

func (c SSetrangeOffset) Value(value string) SSetrangeValue {
	c.cs = append(c.cs, value)
	return (SSetrangeValue)(c)
}

type SetrangeValue Completed

type SSetrangeValue SCompleted

func (c SetrangeValue) Build() Completed {
	return Completed(c)
}

func (c SSetrangeValue) Build() SCompleted {
	return SCompleted(c)
}

type Shutdown Completed

type SShutdown SCompleted

func (b *Builder) Shutdown() Shutdown {
	return Shutdown{cs: append(b.get(), "SHUTDOWN"), ks: InitSlot}
}

func (b *SBuilder) Shutdown() SShutdown {
	return SShutdown{cs: append(b.get(), "SHUTDOWN"), ks: InitSlot}
}

func (c Shutdown) Nosave() ShutdownSaveModeNosave {
	c.cs = append(c.cs, "NOSAVE")
	return (ShutdownSaveModeNosave)(c)
}

func (c SShutdown) Nosave() SShutdownSaveModeNosave {
	c.cs = append(c.cs, "NOSAVE")
	return (SShutdownSaveModeNosave)(c)
}

func (c Shutdown) Save() ShutdownSaveModeSave {
	c.cs = append(c.cs, "SAVE")
	return (ShutdownSaveModeSave)(c)
}

func (c SShutdown) Save() SShutdownSaveModeSave {
	c.cs = append(c.cs, "SAVE")
	return (SShutdownSaveModeSave)(c)
}

func (c Shutdown) Build() Completed {
	return Completed(c)
}

func (c SShutdown) Build() SCompleted {
	return SCompleted(c)
}

type ShutdownSaveModeNosave Completed

type SShutdownSaveModeNosave SCompleted

func (c ShutdownSaveModeNosave) Build() Completed {
	return Completed(c)
}

func (c SShutdownSaveModeNosave) Build() SCompleted {
	return SCompleted(c)
}

type ShutdownSaveModeSave Completed

type SShutdownSaveModeSave SCompleted

func (c ShutdownSaveModeSave) Build() Completed {
	return Completed(c)
}

func (c SShutdownSaveModeSave) Build() SCompleted {
	return SCompleted(c)
}

type Sinter Completed

type SSinter SCompleted

func (b *Builder) Sinter() Sinter {
	return Sinter{cs: append(b.get(), "SINTER"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Sinter() SSinter {
	return SSinter{cs: append(b.get(), "SINTER"), ks: InitSlot, cf: readonly}
}

func (c Sinter) Key(key ...string) SinterKey {
	c.cs = append(c.cs, key...)
	return (SinterKey)(c)
}

func (c SSinter) Key(key ...string) SSinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSinterKey)(c)
}

type SinterKey Completed

type SSinterKey SCompleted

func (c SinterKey) Key(key ...string) SinterKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSinterKey) Key(key ...string) SSinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SinterKey) Build() Completed {
	return Completed(c)
}

func (c SSinterKey) Build() SCompleted {
	return SCompleted(c)
}

type Sintercard Completed

type SSintercard SCompleted

func (b *Builder) Sintercard() Sintercard {
	return Sintercard{cs: append(b.get(), "SINTERCARD"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Sintercard() SSintercard {
	return SSintercard{cs: append(b.get(), "SINTERCARD"), ks: InitSlot, cf: readonly}
}

func (c Sintercard) Numkeys(numkeys int64) SintercardNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SintercardNumkeys)(c)
}

func (c SSintercard) Numkeys(numkeys int64) SSintercardNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SSintercardNumkeys)(c)
}

type SintercardKey Completed

type SSintercardKey SCompleted

func (c SintercardKey) Key(key ...string) SintercardKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSintercardKey) Key(key ...string) SSintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SintercardKey) Limit(limit int64) SintercardLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(limit, 10))
	return (SintercardLimit)(c)
}

func (c SSintercardKey) Limit(limit int64) SSintercardLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(limit, 10))
	return (SSintercardLimit)(c)
}

func (c SintercardKey) Build() Completed {
	return Completed(c)
}

func (c SSintercardKey) Build() SCompleted {
	return SCompleted(c)
}

type SintercardLimit Completed

type SSintercardLimit SCompleted

func (c SintercardLimit) Build() Completed {
	return Completed(c)
}

func (c SSintercardLimit) Build() SCompleted {
	return SCompleted(c)
}

type SintercardNumkeys Completed

type SSintercardNumkeys SCompleted

func (c SintercardNumkeys) Key(key ...string) SintercardKey {
	c.cs = append(c.cs, key...)
	return (SintercardKey)(c)
}

func (c SSintercardNumkeys) Key(key ...string) SSintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSintercardKey)(c)
}

type Sinterstore Completed

type SSinterstore SCompleted

func (b *Builder) Sinterstore() Sinterstore {
	return Sinterstore{cs: append(b.get(), "SINTERSTORE"), ks: InitSlot}
}

func (b *SBuilder) Sinterstore() SSinterstore {
	return SSinterstore{cs: append(b.get(), "SINTERSTORE"), ks: InitSlot}
}

func (c Sinterstore) Destination(destination string) SinterstoreDestination {
	c.cs = append(c.cs, destination)
	return (SinterstoreDestination)(c)
}

func (c SSinterstore) Destination(destination string) SSinterstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SSinterstoreDestination)(c)
}

type SinterstoreDestination Completed

type SSinterstoreDestination SCompleted

func (c SinterstoreDestination) Key(key ...string) SinterstoreKey {
	c.cs = append(c.cs, key...)
	return (SinterstoreKey)(c)
}

func (c SSinterstoreDestination) Key(key ...string) SSinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSinterstoreKey)(c)
}

type SinterstoreKey Completed

type SSinterstoreKey SCompleted

func (c SinterstoreKey) Key(key ...string) SinterstoreKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSinterstoreKey) Key(key ...string) SSinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SinterstoreKey) Build() Completed {
	return Completed(c)
}

func (c SSinterstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type Sismember Completed

type SSismember SCompleted

func (b *Builder) Sismember() Sismember {
	return Sismember{cs: append(b.get(), "SISMEMBER"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Sismember() SSismember {
	return SSismember{cs: append(b.get(), "SISMEMBER"), ks: InitSlot, cf: readonly}
}

func (c Sismember) Key(key string) SismemberKey {
	c.cs = append(c.cs, key)
	return (SismemberKey)(c)
}

func (c SSismember) Key(key string) SSismemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSismemberKey)(c)
}

type SismemberKey Completed

type SSismemberKey SCompleted

func (c SismemberKey) Member(member string) SismemberMember {
	c.cs = append(c.cs, member)
	return (SismemberMember)(c)
}

func (c SSismemberKey) Member(member string) SSismemberMember {
	c.cs = append(c.cs, member)
	return (SSismemberMember)(c)
}

type SismemberMember Completed

type SSismemberMember SCompleted

func (c SismemberMember) Build() Completed {
	return Completed(c)
}

func (c SSismemberMember) Build() SCompleted {
	return SCompleted(c)
}

func (c SismemberMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSismemberMember) Cache() SCacheable {
	return SCacheable(c)
}

type Slaveof Completed

type SSlaveof SCompleted

func (b *Builder) Slaveof() Slaveof {
	return Slaveof{cs: append(b.get(), "SLAVEOF"), ks: InitSlot}
}

func (b *SBuilder) Slaveof() SSlaveof {
	return SSlaveof{cs: append(b.get(), "SLAVEOF"), ks: InitSlot}
}

func (c Slaveof) Host(host string) SlaveofHost {
	c.cs = append(c.cs, host)
	return (SlaveofHost)(c)
}

func (c SSlaveof) Host(host string) SSlaveofHost {
	c.cs = append(c.cs, host)
	return (SSlaveofHost)(c)
}

type SlaveofHost Completed

type SSlaveofHost SCompleted

func (c SlaveofHost) Port(port string) SlaveofPort {
	c.cs = append(c.cs, port)
	return (SlaveofPort)(c)
}

func (c SSlaveofHost) Port(port string) SSlaveofPort {
	c.cs = append(c.cs, port)
	return (SSlaveofPort)(c)
}

type SlaveofPort Completed

type SSlaveofPort SCompleted

func (c SlaveofPort) Build() Completed {
	return Completed(c)
}

func (c SSlaveofPort) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogGet Completed

type SSlowlogGet SCompleted

func (b *Builder) SlowlogGet() SlowlogGet {
	return SlowlogGet{cs: append(b.get(), "SLOWLOG", "GET"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) SlowlogGet() SSlowlogGet {
	return SSlowlogGet{cs: append(b.get(), "SLOWLOG", "GET"), ks: InitSlot, cf: readonly}
}

func (c SlowlogGet) Count(count int64) SlowlogGetCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SlowlogGetCount)(c)
}

func (c SSlowlogGet) Count(count int64) SSlowlogGetCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SSlowlogGetCount)(c)
}

func (c SlowlogGet) Build() Completed {
	return Completed(c)
}

func (c SSlowlogGet) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogGetCount Completed

type SSlowlogGetCount SCompleted

func (c SlowlogGetCount) Build() Completed {
	return Completed(c)
}

func (c SSlowlogGetCount) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogHelp Completed

type SSlowlogHelp SCompleted

func (b *Builder) SlowlogHelp() SlowlogHelp {
	return SlowlogHelp{cs: append(b.get(), "SLOWLOG", "HELP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) SlowlogHelp() SSlowlogHelp {
	return SSlowlogHelp{cs: append(b.get(), "SLOWLOG", "HELP"), ks: InitSlot, cf: readonly}
}

func (c SlowlogHelp) Build() Completed {
	return Completed(c)
}

func (c SSlowlogHelp) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogLen Completed

type SSlowlogLen SCompleted

func (b *Builder) SlowlogLen() SlowlogLen {
	return SlowlogLen{cs: append(b.get(), "SLOWLOG", "LEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) SlowlogLen() SSlowlogLen {
	return SSlowlogLen{cs: append(b.get(), "SLOWLOG", "LEN"), ks: InitSlot, cf: readonly}
}

func (c SlowlogLen) Build() Completed {
	return Completed(c)
}

func (c SSlowlogLen) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogReset Completed

type SSlowlogReset SCompleted

func (b *Builder) SlowlogReset() SlowlogReset {
	return SlowlogReset{cs: append(b.get(), "SLOWLOG", "RESET"), ks: InitSlot}
}

func (b *SBuilder) SlowlogReset() SSlowlogReset {
	return SSlowlogReset{cs: append(b.get(), "SLOWLOG", "RESET"), ks: InitSlot}
}

func (c SlowlogReset) Build() Completed {
	return Completed(c)
}

func (c SSlowlogReset) Build() SCompleted {
	return SCompleted(c)
}

type Smembers Completed

type SSmembers SCompleted

func (b *Builder) Smembers() Smembers {
	return Smembers{cs: append(b.get(), "SMEMBERS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Smembers() SSmembers {
	return SSmembers{cs: append(b.get(), "SMEMBERS"), ks: InitSlot, cf: readonly}
}

func (c Smembers) Key(key string) SmembersKey {
	c.cs = append(c.cs, key)
	return (SmembersKey)(c)
}

func (c SSmembers) Key(key string) SSmembersKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSmembersKey)(c)
}

type SmembersKey Completed

type SSmembersKey SCompleted

func (c SmembersKey) Build() Completed {
	return Completed(c)
}

func (c SSmembersKey) Build() SCompleted {
	return SCompleted(c)
}

func (c SmembersKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSmembersKey) Cache() SCacheable {
	return SCacheable(c)
}

type Smismember Completed

type SSmismember SCompleted

func (b *Builder) Smismember() Smismember {
	return Smismember{cs: append(b.get(), "SMISMEMBER"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Smismember() SSmismember {
	return SSmismember{cs: append(b.get(), "SMISMEMBER"), ks: InitSlot, cf: readonly}
}

func (c Smismember) Key(key string) SmismemberKey {
	c.cs = append(c.cs, key)
	return (SmismemberKey)(c)
}

func (c SSmismember) Key(key string) SSmismemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSmismemberKey)(c)
}

type SmismemberKey Completed

type SSmismemberKey SCompleted

func (c SmismemberKey) Member(member ...string) SmismemberMember {
	c.cs = append(c.cs, member...)
	return (SmismemberMember)(c)
}

func (c SSmismemberKey) Member(member ...string) SSmismemberMember {
	c.cs = append(c.cs, member...)
	return (SSmismemberMember)(c)
}

type SmismemberMember Completed

type SSmismemberMember SCompleted

func (c SmismemberMember) Member(member ...string) SmismemberMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SSmismemberMember) Member(member ...string) SSmismemberMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SmismemberMember) Build() Completed {
	return Completed(c)
}

func (c SSmismemberMember) Build() SCompleted {
	return SCompleted(c)
}

func (c SmismemberMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSmismemberMember) Cache() SCacheable {
	return SCacheable(c)
}

type Smove Completed

type SSmove SCompleted

func (b *Builder) Smove() Smove {
	return Smove{cs: append(b.get(), "SMOVE"), ks: InitSlot}
}

func (b *SBuilder) Smove() SSmove {
	return SSmove{cs: append(b.get(), "SMOVE"), ks: InitSlot}
}

func (c Smove) Source(source string) SmoveSource {
	c.cs = append(c.cs, source)
	return (SmoveSource)(c)
}

func (c SSmove) Source(source string) SSmoveSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs = append(c.cs, source)
	return (SSmoveSource)(c)
}

type SmoveDestination Completed

type SSmoveDestination SCompleted

func (c SmoveDestination) Member(member string) SmoveMember {
	c.cs = append(c.cs, member)
	return (SmoveMember)(c)
}

func (c SSmoveDestination) Member(member string) SSmoveMember {
	c.cs = append(c.cs, member)
	return (SSmoveMember)(c)
}

type SmoveMember Completed

type SSmoveMember SCompleted

func (c SmoveMember) Build() Completed {
	return Completed(c)
}

func (c SSmoveMember) Build() SCompleted {
	return SCompleted(c)
}

type SmoveSource Completed

type SSmoveSource SCompleted

func (c SmoveSource) Destination(destination string) SmoveDestination {
	c.cs = append(c.cs, destination)
	return (SmoveDestination)(c)
}

func (c SSmoveSource) Destination(destination string) SSmoveDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SSmoveDestination)(c)
}

type Sort Completed

type SSort SCompleted

func (b *Builder) Sort() Sort {
	return Sort{cs: append(b.get(), "SORT"), ks: InitSlot}
}

func (b *SBuilder) Sort() SSort {
	return SSort{cs: append(b.get(), "SORT"), ks: InitSlot}
}

func (c Sort) Key(key string) SortKey {
	c.cs = append(c.cs, key)
	return (SortKey)(c)
}

func (c SSort) Key(key string) SSortKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSortKey)(c)
}

type SortBy Completed

type SSortBy SCompleted

func (c SortBy) Limit(offset int64, count int64) SortLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortLimit)(c)
}

func (c SSortBy) Limit(offset int64, count int64) SSortLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortLimit)(c)
}

func (c SortBy) Get(pattern ...string) SortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SortGet)(c)
}

func (c SSortBy) Get(pattern ...string) SSortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SSortGet)(c)
}

func (c SortBy) Asc() SortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortBy) Asc() SSortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortBy) Desc() SortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortBy) Desc() SSortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortBy) Alpha() SortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortBy) Alpha() SSortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortBy) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortBy) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortBy) Build() Completed {
	return Completed(c)
}

func (c SSortBy) Build() SCompleted {
	return SCompleted(c)
}

type SortGet Completed

type SSortGet SCompleted

func (c SortGet) Get(pattern ...string) SortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return c
}

func (c SSortGet) Get(pattern ...string) SSortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return c
}

func (c SortGet) Asc() SortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortGet) Asc() SSortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortGet) Desc() SortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortGet) Desc() SSortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortGet) Alpha() SortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortGet) Alpha() SSortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortGet) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortGet) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortGet) Build() Completed {
	return Completed(c)
}

func (c SSortGet) Build() SCompleted {
	return SCompleted(c)
}

type SortKey Completed

type SSortKey SCompleted

func (c SortKey) By(pattern string) SortBy {
	c.cs = append(c.cs, "BY", pattern)
	return (SortBy)(c)
}

func (c SSortKey) By(pattern string) SSortBy {
	c.cs = append(c.cs, "BY", pattern)
	return (SSortBy)(c)
}

func (c SortKey) Limit(offset int64, count int64) SortLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortLimit)(c)
}

func (c SSortKey) Limit(offset int64, count int64) SSortLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortLimit)(c)
}

func (c SortKey) Get(pattern ...string) SortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SortGet)(c)
}

func (c SSortKey) Get(pattern ...string) SSortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SSortGet)(c)
}

func (c SortKey) Asc() SortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortKey) Asc() SSortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortKey) Desc() SortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortKey) Desc() SSortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortKey) Alpha() SortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortKey) Alpha() SSortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortKey) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortKey) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortKey) Build() Completed {
	return Completed(c)
}

func (c SSortKey) Build() SCompleted {
	return SCompleted(c)
}

type SortLimit Completed

type SSortLimit SCompleted

func (c SortLimit) Get(pattern ...string) SortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SortGet)(c)
}

func (c SSortLimit) Get(pattern ...string) SSortGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SSortGet)(c)
}

func (c SortLimit) Asc() SortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortLimit) Asc() SSortOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortLimit) Desc() SortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortLimit) Desc() SSortOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortLimit) Alpha() SortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortLimit) Alpha() SSortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortLimit) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortLimit) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortLimit) Build() Completed {
	return Completed(c)
}

func (c SSortLimit) Build() SCompleted {
	return SCompleted(c)
}

type SortOrderAsc Completed

type SSortOrderAsc SCompleted

func (c SortOrderAsc) Alpha() SortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortOrderAsc) Alpha() SSortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortOrderAsc) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortOrderAsc) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SSortOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type SortOrderDesc Completed

type SSortOrderDesc SCompleted

func (c SortOrderDesc) Alpha() SortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortOrderDesc) Alpha() SSortSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortOrderDesc) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortOrderDesc) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SSortOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type SortRo Completed

type SSortRo SCompleted

func (b *Builder) SortRo() SortRo {
	return SortRo{cs: append(b.get(), "SORT_RO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) SortRo() SSortRo {
	return SSortRo{cs: append(b.get(), "SORT_RO"), ks: InitSlot, cf: readonly}
}

func (c SortRo) Key(key string) SortRoKey {
	c.cs = append(c.cs, key)
	return (SortRoKey)(c)
}

func (c SSortRo) Key(key string) SSortRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSortRoKey)(c)
}

type SortRoBy Completed

type SSortRoBy SCompleted

func (c SortRoBy) Limit(offset int64, count int64) SortRoLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortRoLimit)(c)
}

func (c SSortRoBy) Limit(offset int64, count int64) SSortRoLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortRoLimit)(c)
}

func (c SortRoBy) Get(pattern ...string) SortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SortRoGet)(c)
}

func (c SSortRoBy) Get(pattern ...string) SSortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SSortRoGet)(c)
}

func (c SortRoBy) Asc() SortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoBy) Asc() SSortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoBy) Desc() SortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoBy) Desc() SSortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoBy) Alpha() SortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoBy) Alpha() SSortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoBy) Build() Completed {
	return Completed(c)
}

func (c SSortRoBy) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoBy) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoBy) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoGet Completed

type SSortRoGet SCompleted

func (c SortRoGet) Get(pattern ...string) SortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return c
}

func (c SSortRoGet) Get(pattern ...string) SSortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return c
}

func (c SortRoGet) Asc() SortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoGet) Asc() SSortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoGet) Desc() SortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoGet) Desc() SSortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoGet) Alpha() SortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoGet) Alpha() SSortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoGet) Build() Completed {
	return Completed(c)
}

func (c SSortRoGet) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoGet) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoGet) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoKey Completed

type SSortRoKey SCompleted

func (c SortRoKey) By(pattern string) SortRoBy {
	c.cs = append(c.cs, "BY", pattern)
	return (SortRoBy)(c)
}

func (c SSortRoKey) By(pattern string) SSortRoBy {
	c.cs = append(c.cs, "BY", pattern)
	return (SSortRoBy)(c)
}

func (c SortRoKey) Limit(offset int64, count int64) SortRoLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortRoLimit)(c)
}

func (c SSortRoKey) Limit(offset int64, count int64) SSortRoLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortRoLimit)(c)
}

func (c SortRoKey) Get(pattern ...string) SortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SortRoGet)(c)
}

func (c SSortRoKey) Get(pattern ...string) SSortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SSortRoGet)(c)
}

func (c SortRoKey) Asc() SortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoKey) Asc() SSortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoKey) Desc() SortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoKey) Desc() SSortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoKey) Alpha() SortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoKey) Alpha() SSortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoKey) Build() Completed {
	return Completed(c)
}

func (c SSortRoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoKey) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoLimit Completed

type SSortRoLimit SCompleted

func (c SortRoLimit) Get(pattern ...string) SortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SortRoGet)(c)
}

func (c SSortRoLimit) Get(pattern ...string) SSortRoGet {
	c.cs = append(c.cs, "GET")
	c.cs = append(c.cs, pattern...)
	return (SSortRoGet)(c)
}

func (c SortRoLimit) Asc() SortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoLimit) Asc() SSortRoOrderAsc {
	c.cs = append(c.cs, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoLimit) Desc() SortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoLimit) Desc() SSortRoOrderDesc {
	c.cs = append(c.cs, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoLimit) Alpha() SortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoLimit) Alpha() SSortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoLimit) Build() Completed {
	return Completed(c)
}

func (c SSortRoLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoLimit) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoOrderAsc Completed

type SSortRoOrderAsc SCompleted

func (c SortRoOrderAsc) Alpha() SortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoOrderAsc) Alpha() SSortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SSortRoOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoOrderDesc Completed

type SSortRoOrderDesc SCompleted

func (c SortRoOrderDesc) Alpha() SortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoOrderDesc) Alpha() SSortRoSortingAlpha {
	c.cs = append(c.cs, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SSortRoOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoSortingAlpha Completed

type SSortRoSortingAlpha SCompleted

func (c SortRoSortingAlpha) Build() Completed {
	return Completed(c)
}

func (c SSortRoSortingAlpha) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoSortingAlpha) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoSortingAlpha) Cache() SCacheable {
	return SCacheable(c)
}

type SortSortingAlpha Completed

type SSortSortingAlpha SCompleted

func (c SortSortingAlpha) Store(destination string) SortStore {
	c.cs = append(c.cs, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortSortingAlpha) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortSortingAlpha) Build() Completed {
	return Completed(c)
}

func (c SSortSortingAlpha) Build() SCompleted {
	return SCompleted(c)
}

type SortStore Completed

type SSortStore SCompleted

func (c SortStore) Build() Completed {
	return Completed(c)
}

func (c SSortStore) Build() SCompleted {
	return SCompleted(c)
}

type Spop Completed

type SSpop SCompleted

func (b *Builder) Spop() Spop {
	return Spop{cs: append(b.get(), "SPOP"), ks: InitSlot}
}

func (b *SBuilder) Spop() SSpop {
	return SSpop{cs: append(b.get(), "SPOP"), ks: InitSlot}
}

func (c Spop) Key(key string) SpopKey {
	c.cs = append(c.cs, key)
	return (SpopKey)(c)
}

func (c SSpop) Key(key string) SSpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSpopKey)(c)
}

type SpopCount Completed

type SSpopCount SCompleted

func (c SpopCount) Build() Completed {
	return Completed(c)
}

func (c SSpopCount) Build() SCompleted {
	return SCompleted(c)
}

type SpopKey Completed

type SSpopKey SCompleted

func (c SpopKey) Count(count int64) SpopCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SpopCount)(c)
}

func (c SSpopKey) Count(count int64) SSpopCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SSpopCount)(c)
}

func (c SpopKey) Build() Completed {
	return Completed(c)
}

func (c SSpopKey) Build() SCompleted {
	return SCompleted(c)
}

type Srandmember Completed

type SSrandmember SCompleted

func (b *Builder) Srandmember() Srandmember {
	return Srandmember{cs: append(b.get(), "SRANDMEMBER"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Srandmember() SSrandmember {
	return SSrandmember{cs: append(b.get(), "SRANDMEMBER"), ks: InitSlot, cf: readonly}
}

func (c Srandmember) Key(key string) SrandmemberKey {
	c.cs = append(c.cs, key)
	return (SrandmemberKey)(c)
}

func (c SSrandmember) Key(key string) SSrandmemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSrandmemberKey)(c)
}

type SrandmemberCount Completed

type SSrandmemberCount SCompleted

func (c SrandmemberCount) Build() Completed {
	return Completed(c)
}

func (c SSrandmemberCount) Build() SCompleted {
	return SCompleted(c)
}

type SrandmemberKey Completed

type SSrandmemberKey SCompleted

func (c SrandmemberKey) Count(count int64) SrandmemberCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SrandmemberCount)(c)
}

func (c SSrandmemberKey) Count(count int64) SSrandmemberCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SSrandmemberCount)(c)
}

func (c SrandmemberKey) Build() Completed {
	return Completed(c)
}

func (c SSrandmemberKey) Build() SCompleted {
	return SCompleted(c)
}

type Srem Completed

type SSrem SCompleted

func (b *Builder) Srem() Srem {
	return Srem{cs: append(b.get(), "SREM"), ks: InitSlot}
}

func (b *SBuilder) Srem() SSrem {
	return SSrem{cs: append(b.get(), "SREM"), ks: InitSlot}
}

func (c Srem) Key(key string) SremKey {
	c.cs = append(c.cs, key)
	return (SremKey)(c)
}

func (c SSrem) Key(key string) SSremKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSremKey)(c)
}

type SremKey Completed

type SSremKey SCompleted

func (c SremKey) Member(member ...string) SremMember {
	c.cs = append(c.cs, member...)
	return (SremMember)(c)
}

func (c SSremKey) Member(member ...string) SSremMember {
	c.cs = append(c.cs, member...)
	return (SSremMember)(c)
}

type SremMember Completed

type SSremMember SCompleted

func (c SremMember) Member(member ...string) SremMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SSremMember) Member(member ...string) SSremMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SremMember) Build() Completed {
	return Completed(c)
}

func (c SSremMember) Build() SCompleted {
	return SCompleted(c)
}

type Sscan Completed

type SSscan SCompleted

func (b *Builder) Sscan() Sscan {
	return Sscan{cs: append(b.get(), "SSCAN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Sscan() SSscan {
	return SSscan{cs: append(b.get(), "SSCAN"), ks: InitSlot, cf: readonly}
}

func (c Sscan) Key(key string) SscanKey {
	c.cs = append(c.cs, key)
	return (SscanKey)(c)
}

func (c SSscan) Key(key string) SSscanKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SSscanKey)(c)
}

type SscanCount Completed

type SSscanCount SCompleted

func (c SscanCount) Build() Completed {
	return Completed(c)
}

func (c SSscanCount) Build() SCompleted {
	return SCompleted(c)
}

type SscanCursor Completed

type SSscanCursor SCompleted

func (c SscanCursor) Match(pattern string) SscanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (SscanMatch)(c)
}

func (c SSscanCursor) Match(pattern string) SSscanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (SSscanMatch)(c)
}

func (c SscanCursor) Count(count int64) SscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SscanCount)(c)
}

func (c SSscanCursor) Count(count int64) SSscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SSscanCount)(c)
}

func (c SscanCursor) Build() Completed {
	return Completed(c)
}

func (c SSscanCursor) Build() SCompleted {
	return SCompleted(c)
}

type SscanKey Completed

type SSscanKey SCompleted

func (c SscanKey) Cursor(cursor int64) SscanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (SscanCursor)(c)
}

func (c SSscanKey) Cursor(cursor int64) SSscanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (SSscanCursor)(c)
}

type SscanMatch Completed

type SSscanMatch SCompleted

func (c SscanMatch) Count(count int64) SscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SscanCount)(c)
}

func (c SSscanMatch) Count(count int64) SSscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SSscanCount)(c)
}

func (c SscanMatch) Build() Completed {
	return Completed(c)
}

func (c SSscanMatch) Build() SCompleted {
	return SCompleted(c)
}

type Strlen Completed

type SStrlen SCompleted

func (b *Builder) Strlen() Strlen {
	return Strlen{cs: append(b.get(), "STRLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Strlen() SStrlen {
	return SStrlen{cs: append(b.get(), "STRLEN"), ks: InitSlot, cf: readonly}
}

func (c Strlen) Key(key string) StrlenKey {
	c.cs = append(c.cs, key)
	return (StrlenKey)(c)
}

func (c SStrlen) Key(key string) SStrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SStrlenKey)(c)
}

type StrlenKey Completed

type SStrlenKey SCompleted

func (c StrlenKey) Build() Completed {
	return Completed(c)
}

func (c SStrlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c StrlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SStrlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type Subscribe Completed

type SSubscribe SCompleted

func (b *Builder) Subscribe() Subscribe {
	return Subscribe{cs: append(b.get(), "SUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (b *SBuilder) Subscribe() SSubscribe {
	return SSubscribe{cs: append(b.get(), "SUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (c Subscribe) Channel(channel ...string) SubscribeChannel {
	c.cs = append(c.cs, channel...)
	return (SubscribeChannel)(c)
}

func (c SSubscribe) Channel(channel ...string) SSubscribeChannel {
	c.cs = append(c.cs, channel...)
	return (SSubscribeChannel)(c)
}

type SubscribeChannel Completed

type SSubscribeChannel SCompleted

func (c SubscribeChannel) Channel(channel ...string) SubscribeChannel {
	c.cs = append(c.cs, channel...)
	return c
}

func (c SSubscribeChannel) Channel(channel ...string) SSubscribeChannel {
	c.cs = append(c.cs, channel...)
	return c
}

func (c SubscribeChannel) Build() Completed {
	return Completed(c)
}

func (c SSubscribeChannel) Build() SCompleted {
	return SCompleted(c)
}

type Sunion Completed

type SSunion SCompleted

func (b *Builder) Sunion() Sunion {
	return Sunion{cs: append(b.get(), "SUNION"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Sunion() SSunion {
	return SSunion{cs: append(b.get(), "SUNION"), ks: InitSlot, cf: readonly}
}

func (c Sunion) Key(key ...string) SunionKey {
	c.cs = append(c.cs, key...)
	return (SunionKey)(c)
}

func (c SSunion) Key(key ...string) SSunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSunionKey)(c)
}

type SunionKey Completed

type SSunionKey SCompleted

func (c SunionKey) Key(key ...string) SunionKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSunionKey) Key(key ...string) SSunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SunionKey) Build() Completed {
	return Completed(c)
}

func (c SSunionKey) Build() SCompleted {
	return SCompleted(c)
}

type Sunionstore Completed

type SSunionstore SCompleted

func (b *Builder) Sunionstore() Sunionstore {
	return Sunionstore{cs: append(b.get(), "SUNIONSTORE"), ks: InitSlot}
}

func (b *SBuilder) Sunionstore() SSunionstore {
	return SSunionstore{cs: append(b.get(), "SUNIONSTORE"), ks: InitSlot}
}

func (c Sunionstore) Destination(destination string) SunionstoreDestination {
	c.cs = append(c.cs, destination)
	return (SunionstoreDestination)(c)
}

func (c SSunionstore) Destination(destination string) SSunionstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SSunionstoreDestination)(c)
}

type SunionstoreDestination Completed

type SSunionstoreDestination SCompleted

func (c SunionstoreDestination) Key(key ...string) SunionstoreKey {
	c.cs = append(c.cs, key...)
	return (SunionstoreKey)(c)
}

func (c SSunionstoreDestination) Key(key ...string) SSunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SSunionstoreKey)(c)
}

type SunionstoreKey Completed

type SSunionstoreKey SCompleted

func (c SunionstoreKey) Key(key ...string) SunionstoreKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SSunionstoreKey) Key(key ...string) SSunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c SunionstoreKey) Build() Completed {
	return Completed(c)
}

func (c SSunionstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type Swapdb Completed

type SSwapdb SCompleted

func (b *Builder) Swapdb() Swapdb {
	return Swapdb{cs: append(b.get(), "SWAPDB"), ks: InitSlot}
}

func (b *SBuilder) Swapdb() SSwapdb {
	return SSwapdb{cs: append(b.get(), "SWAPDB"), ks: InitSlot}
}

func (c Swapdb) Index1(index1 int64) SwapdbIndex1 {
	c.cs = append(c.cs, strconv.FormatInt(index1, 10))
	return (SwapdbIndex1)(c)
}

func (c SSwapdb) Index1(index1 int64) SSwapdbIndex1 {
	c.cs = append(c.cs, strconv.FormatInt(index1, 10))
	return (SSwapdbIndex1)(c)
}

type SwapdbIndex1 Completed

type SSwapdbIndex1 SCompleted

func (c SwapdbIndex1) Index2(index2 int64) SwapdbIndex2 {
	c.cs = append(c.cs, strconv.FormatInt(index2, 10))
	return (SwapdbIndex2)(c)
}

func (c SSwapdbIndex1) Index2(index2 int64) SSwapdbIndex2 {
	c.cs = append(c.cs, strconv.FormatInt(index2, 10))
	return (SSwapdbIndex2)(c)
}

type SwapdbIndex2 Completed

type SSwapdbIndex2 SCompleted

func (c SwapdbIndex2) Build() Completed {
	return Completed(c)
}

func (c SSwapdbIndex2) Build() SCompleted {
	return SCompleted(c)
}

type Sync Completed

type SSync SCompleted

func (b *Builder) Sync() Sync {
	return Sync{cs: append(b.get(), "SYNC"), ks: InitSlot}
}

func (b *SBuilder) Sync() SSync {
	return SSync{cs: append(b.get(), "SYNC"), ks: InitSlot}
}

func (c Sync) Build() Completed {
	return Completed(c)
}

func (c SSync) Build() SCompleted {
	return SCompleted(c)
}

type TdigestAdd Completed

type STdigestAdd SCompleted

func (b *Builder) TdigestAdd() TdigestAdd {
	return TdigestAdd{cs: append(b.get(), "TDIGEST.ADD"), ks: InitSlot}
}

func (b *SBuilder) TdigestAdd() STdigestAdd {
	return STdigestAdd{cs: append(b.get(), "TDIGEST.ADD"), ks: InitSlot}
}

func (c TdigestAdd) Key(key string) TdigestAddKey {
	c.cs = append(c.cs, key)
	return (TdigestAddKey)(c)
}

func (c STdigestAdd) Key(key string) STdigestAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestAddKey)(c)
}

type TdigestAddKey Completed

type STdigestAddKey SCompleted

func (c TdigestAddKey) Value(value float64) TdigestAddValuesValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (TdigestAddValuesValue)(c)
}

func (c STdigestAddKey) Value(value float64) STdigestAddValuesValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (STdigestAddValuesValue)(c)
}

type TdigestAddValuesValue Completed

type STdigestAddValuesValue SCompleted

func (c TdigestAddValuesValue) Weight(weight float64) TdigestAddValuesWeight {
	c.cs = append(c.cs, strconv.FormatFloat(weight, 'f', -1, 64))
	return (TdigestAddValuesWeight)(c)
}

func (c STdigestAddValuesValue) Weight(weight float64) STdigestAddValuesWeight {
	c.cs = append(c.cs, strconv.FormatFloat(weight, 'f', -1, 64))
	return (STdigestAddValuesWeight)(c)
}

type TdigestAddValuesWeight Completed

type STdigestAddValuesWeight SCompleted

func (c TdigestAddValuesWeight) Value(value float64) TdigestAddValuesValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (TdigestAddValuesValue)(c)
}

func (c STdigestAddValuesWeight) Value(value float64) STdigestAddValuesValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (STdigestAddValuesValue)(c)
}

func (c TdigestAddValuesWeight) Build() Completed {
	return Completed(c)
}

func (c STdigestAddValuesWeight) Build() SCompleted {
	return SCompleted(c)
}

type TdigestCdf Completed

type STdigestCdf SCompleted

func (b *Builder) TdigestCdf() TdigestCdf {
	return TdigestCdf{cs: append(b.get(), "TDIGEST.CDF"), ks: InitSlot}
}

func (b *SBuilder) TdigestCdf() STdigestCdf {
	return STdigestCdf{cs: append(b.get(), "TDIGEST.CDF"), ks: InitSlot}
}

func (c TdigestCdf) Key(key string) TdigestCdfKey {
	c.cs = append(c.cs, key)
	return (TdigestCdfKey)(c)
}

func (c STdigestCdf) Key(key string) STdigestCdfKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestCdfKey)(c)
}

type TdigestCdfKey Completed

type STdigestCdfKey SCompleted

func (c TdigestCdfKey) Value(value float64) TdigestCdfValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (TdigestCdfValue)(c)
}

func (c STdigestCdfKey) Value(value float64) STdigestCdfValue {
	c.cs = append(c.cs, strconv.FormatFloat(value, 'f', -1, 64))
	return (STdigestCdfValue)(c)
}

type TdigestCdfValue Completed

type STdigestCdfValue SCompleted

func (c TdigestCdfValue) Build() Completed {
	return Completed(c)
}

func (c STdigestCdfValue) Build() SCompleted {
	return SCompleted(c)
}

type TdigestCreate Completed

type STdigestCreate SCompleted

func (b *Builder) TdigestCreate() TdigestCreate {
	return TdigestCreate{cs: append(b.get(), "TDIGEST.CREATE"), ks: InitSlot}
}

func (b *SBuilder) TdigestCreate() STdigestCreate {
	return STdigestCreate{cs: append(b.get(), "TDIGEST.CREATE"), ks: InitSlot}
}

func (c TdigestCreate) Key(key string) TdigestCreateKey {
	c.cs = append(c.cs, key)
	return (TdigestCreateKey)(c)
}

func (c STdigestCreate) Key(key string) STdigestCreateKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestCreateKey)(c)
}

type TdigestCreateCompression Completed

type STdigestCreateCompression SCompleted

func (c TdigestCreateCompression) Build() Completed {
	return Completed(c)
}

func (c STdigestCreateCompression) Build() SCompleted {
	return SCompleted(c)
}

type TdigestCreateKey Completed

type STdigestCreateKey SCompleted

func (c TdigestCreateKey) Compression(compression int64) TdigestCreateCompression {
	c.cs = append(c.cs, strconv.FormatInt(compression, 10))
	return (TdigestCreateCompression)(c)
}

func (c STdigestCreateKey) Compression(compression int64) STdigestCreateCompression {
	c.cs = append(c.cs, strconv.FormatInt(compression, 10))
	return (STdigestCreateCompression)(c)
}

type TdigestInfo Completed

type STdigestInfo SCompleted

func (b *Builder) TdigestInfo() TdigestInfo {
	return TdigestInfo{cs: append(b.get(), "TDIGEST.INFO"), ks: InitSlot}
}

func (b *SBuilder) TdigestInfo() STdigestInfo {
	return STdigestInfo{cs: append(b.get(), "TDIGEST.INFO"), ks: InitSlot}
}

func (c TdigestInfo) Key(key string) TdigestInfoKey {
	c.cs = append(c.cs, key)
	return (TdigestInfoKey)(c)
}

func (c STdigestInfo) Key(key string) STdigestInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestInfoKey)(c)
}

type TdigestInfoKey Completed

type STdigestInfoKey SCompleted

func (c TdigestInfoKey) Build() Completed {
	return Completed(c)
}

func (c STdigestInfoKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestMax Completed

type STdigestMax SCompleted

func (b *Builder) TdigestMax() TdigestMax {
	return TdigestMax{cs: append(b.get(), "TDIGEST.MAX"), ks: InitSlot}
}

func (b *SBuilder) TdigestMax() STdigestMax {
	return STdigestMax{cs: append(b.get(), "TDIGEST.MAX"), ks: InitSlot}
}

func (c TdigestMax) Key(key string) TdigestMaxKey {
	c.cs = append(c.cs, key)
	return (TdigestMaxKey)(c)
}

func (c STdigestMax) Key(key string) STdigestMaxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestMaxKey)(c)
}

type TdigestMaxKey Completed

type STdigestMaxKey SCompleted

func (c TdigestMaxKey) Build() Completed {
	return Completed(c)
}

func (c STdigestMaxKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestMerge Completed

type STdigestMerge SCompleted

func (b *Builder) TdigestMerge() TdigestMerge {
	return TdigestMerge{cs: append(b.get(), "TDIGEST.MERGE"), ks: InitSlot}
}

func (b *SBuilder) TdigestMerge() STdigestMerge {
	return STdigestMerge{cs: append(b.get(), "TDIGEST.MERGE"), ks: InitSlot}
}

func (c TdigestMerge) ToKey(toKey string) TdigestMergeToKey {
	c.cs = append(c.cs, toKey)
	return (TdigestMergeToKey)(c)
}

func (c STdigestMerge) ToKey(toKey string) STdigestMergeToKey {
	c.ks = checkSlot(c.ks, slot(toKey))
	c.cs = append(c.cs, toKey)
	return (STdigestMergeToKey)(c)
}

type TdigestMergeFromKey Completed

type STdigestMergeFromKey SCompleted

func (c TdigestMergeFromKey) Build() Completed {
	return Completed(c)
}

func (c STdigestMergeFromKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestMergeToKey Completed

type STdigestMergeToKey SCompleted

func (c TdigestMergeToKey) FromKey(fromKey string) TdigestMergeFromKey {
	c.cs = append(c.cs, fromKey)
	return (TdigestMergeFromKey)(c)
}

func (c STdigestMergeToKey) FromKey(fromKey string) STdigestMergeFromKey {
	c.ks = checkSlot(c.ks, slot(fromKey))
	c.cs = append(c.cs, fromKey)
	return (STdigestMergeFromKey)(c)
}

type TdigestMin Completed

type STdigestMin SCompleted

func (b *Builder) TdigestMin() TdigestMin {
	return TdigestMin{cs: append(b.get(), "TDIGEST.MIN"), ks: InitSlot}
}

func (b *SBuilder) TdigestMin() STdigestMin {
	return STdigestMin{cs: append(b.get(), "TDIGEST.MIN"), ks: InitSlot}
}

func (c TdigestMin) Key(key string) TdigestMinKey {
	c.cs = append(c.cs, key)
	return (TdigestMinKey)(c)
}

func (c STdigestMin) Key(key string) STdigestMinKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestMinKey)(c)
}

type TdigestMinKey Completed

type STdigestMinKey SCompleted

func (c TdigestMinKey) Build() Completed {
	return Completed(c)
}

func (c STdigestMinKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestQuantile Completed

type STdigestQuantile SCompleted

func (b *Builder) TdigestQuantile() TdigestQuantile {
	return TdigestQuantile{cs: append(b.get(), "TDIGEST.QUANTILE"), ks: InitSlot}
}

func (b *SBuilder) TdigestQuantile() STdigestQuantile {
	return STdigestQuantile{cs: append(b.get(), "TDIGEST.QUANTILE"), ks: InitSlot}
}

func (c TdigestQuantile) Key(key string) TdigestQuantileKey {
	c.cs = append(c.cs, key)
	return (TdigestQuantileKey)(c)
}

func (c STdigestQuantile) Key(key string) STdigestQuantileKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestQuantileKey)(c)
}

type TdigestQuantileKey Completed

type STdigestQuantileKey SCompleted

func (c TdigestQuantileKey) Quantile(quantile float64) TdigestQuantileQuantile {
	c.cs = append(c.cs, strconv.FormatFloat(quantile, 'f', -1, 64))
	return (TdigestQuantileQuantile)(c)
}

func (c STdigestQuantileKey) Quantile(quantile float64) STdigestQuantileQuantile {
	c.cs = append(c.cs, strconv.FormatFloat(quantile, 'f', -1, 64))
	return (STdigestQuantileQuantile)(c)
}

type TdigestQuantileQuantile Completed

type STdigestQuantileQuantile SCompleted

func (c TdigestQuantileQuantile) Build() Completed {
	return Completed(c)
}

func (c STdigestQuantileQuantile) Build() SCompleted {
	return SCompleted(c)
}

type TdigestReset Completed

type STdigestReset SCompleted

func (b *Builder) TdigestReset() TdigestReset {
	return TdigestReset{cs: append(b.get(), "TDIGEST.RESET"), ks: InitSlot}
}

func (b *SBuilder) TdigestReset() STdigestReset {
	return STdigestReset{cs: append(b.get(), "TDIGEST.RESET"), ks: InitSlot}
}

func (c TdigestReset) Key(key string) TdigestResetKey {
	c.cs = append(c.cs, key)
	return (TdigestResetKey)(c)
}

func (c STdigestReset) Key(key string) STdigestResetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STdigestResetKey)(c)
}

type TdigestResetKey Completed

type STdigestResetKey SCompleted

func (c TdigestResetKey) Build() Completed {
	return Completed(c)
}

func (c STdigestResetKey) Build() SCompleted {
	return SCompleted(c)
}

type Time Completed

type STime SCompleted

func (b *Builder) Time() Time {
	return Time{cs: append(b.get(), "TIME"), ks: InitSlot}
}

func (b *SBuilder) Time() STime {
	return STime{cs: append(b.get(), "TIME"), ks: InitSlot}
}

func (c Time) Build() Completed {
	return Completed(c)
}

func (c STime) Build() SCompleted {
	return SCompleted(c)
}

type TopkAdd Completed

type STopkAdd SCompleted

func (b *Builder) TopkAdd() TopkAdd {
	return TopkAdd{cs: append(b.get(), "TOPK.ADD"), ks: InitSlot}
}

func (b *SBuilder) TopkAdd() STopkAdd {
	return STopkAdd{cs: append(b.get(), "TOPK.ADD"), ks: InitSlot}
}

func (c TopkAdd) Key(key string) TopkAddKey {
	c.cs = append(c.cs, key)
	return (TopkAddKey)(c)
}

func (c STopkAdd) Key(key string) STopkAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STopkAddKey)(c)
}

type TopkAddItems Completed

type STopkAddItems SCompleted

func (c TopkAddItems) Items(items ...string) TopkAddItems {
	c.cs = append(c.cs, items...)
	return c
}

func (c STopkAddItems) Items(items ...string) STopkAddItems {
	c.cs = append(c.cs, items...)
	return c
}

func (c TopkAddItems) Build() Completed {
	return Completed(c)
}

func (c STopkAddItems) Build() SCompleted {
	return SCompleted(c)
}

type TopkAddKey Completed

type STopkAddKey SCompleted

func (c TopkAddKey) Items(items ...string) TopkAddItems {
	c.cs = append(c.cs, items...)
	return (TopkAddItems)(c)
}

func (c STopkAddKey) Items(items ...string) STopkAddItems {
	c.cs = append(c.cs, items...)
	return (STopkAddItems)(c)
}

type TopkIncrby Completed

type STopkIncrby SCompleted

func (b *Builder) TopkIncrby() TopkIncrby {
	return TopkIncrby{cs: append(b.get(), "TOPK.INCRBY"), ks: InitSlot}
}

func (b *SBuilder) TopkIncrby() STopkIncrby {
	return STopkIncrby{cs: append(b.get(), "TOPK.INCRBY"), ks: InitSlot}
}

func (c TopkIncrby) Key(key string) TopkIncrbyKey {
	c.cs = append(c.cs, key)
	return (TopkIncrbyKey)(c)
}

func (c STopkIncrby) Key(key string) STopkIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STopkIncrbyKey)(c)
}

type TopkIncrbyItemsIncrement Completed

type STopkIncrbyItemsIncrement SCompleted

func (c TopkIncrbyItemsIncrement) Item(item string) TopkIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (TopkIncrbyItemsItem)(c)
}

func (c STopkIncrbyItemsIncrement) Item(item string) STopkIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (STopkIncrbyItemsItem)(c)
}

func (c TopkIncrbyItemsIncrement) Build() Completed {
	return Completed(c)
}

func (c STopkIncrbyItemsIncrement) Build() SCompleted {
	return SCompleted(c)
}

type TopkIncrbyItemsItem Completed

type STopkIncrbyItemsItem SCompleted

func (c TopkIncrbyItemsItem) Increment(increment int64) TopkIncrbyItemsIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (TopkIncrbyItemsIncrement)(c)
}

func (c STopkIncrbyItemsItem) Increment(increment int64) STopkIncrbyItemsIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (STopkIncrbyItemsIncrement)(c)
}

type TopkIncrbyKey Completed

type STopkIncrbyKey SCompleted

func (c TopkIncrbyKey) Item(item string) TopkIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (TopkIncrbyItemsItem)(c)
}

func (c STopkIncrbyKey) Item(item string) STopkIncrbyItemsItem {
	c.cs = append(c.cs, item)
	return (STopkIncrbyItemsItem)(c)
}

type TopkInfo Completed

type STopkInfo SCompleted

func (b *Builder) TopkInfo() TopkInfo {
	return TopkInfo{cs: append(b.get(), "TOPK.INFO"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) TopkInfo() STopkInfo {
	return STopkInfo{cs: append(b.get(), "TOPK.INFO"), ks: InitSlot, cf: readonly}
}

func (c TopkInfo) Key(key string) TopkInfoKey {
	c.cs = append(c.cs, key)
	return (TopkInfoKey)(c)
}

func (c STopkInfo) Key(key string) STopkInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STopkInfoKey)(c)
}

type TopkInfoKey Completed

type STopkInfoKey SCompleted

func (c TopkInfoKey) Build() Completed {
	return Completed(c)
}

func (c STopkInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c TopkInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c STopkInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type TopkList Completed

type STopkList SCompleted

func (b *Builder) TopkList() TopkList {
	return TopkList{cs: append(b.get(), "TOPK.LIST"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) TopkList() STopkList {
	return STopkList{cs: append(b.get(), "TOPK.LIST"), ks: InitSlot, cf: readonly}
}

func (c TopkList) Key(key string) TopkListKey {
	c.cs = append(c.cs, key)
	return (TopkListKey)(c)
}

func (c STopkList) Key(key string) STopkListKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STopkListKey)(c)
}

type TopkListKey Completed

type STopkListKey SCompleted

func (c TopkListKey) Numkeys(numkeys int64) TopkListNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (TopkListNumkeys)(c)
}

func (c STopkListKey) Numkeys(numkeys int64) STopkListNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (STopkListNumkeys)(c)
}

type TopkListNumkeys Completed

type STopkListNumkeys SCompleted

func (c TopkListNumkeys) Withcount() TopkListWithcount {
	c.cs = append(c.cs, "WITHCOUNT")
	return (TopkListWithcount)(c)
}

func (c STopkListNumkeys) Withcount() STopkListWithcount {
	c.cs = append(c.cs, "WITHCOUNT")
	return (STopkListWithcount)(c)
}

type TopkListWithcount Completed

type STopkListWithcount SCompleted

func (c TopkListWithcount) Build() Completed {
	return Completed(c)
}

func (c STopkListWithcount) Build() SCompleted {
	return SCompleted(c)
}

func (c TopkListWithcount) Cache() Cacheable {
	return Cacheable(c)
}

func (c STopkListWithcount) Cache() SCacheable {
	return SCacheable(c)
}

type TopkQuery Completed

type STopkQuery SCompleted

func (b *Builder) TopkQuery() TopkQuery {
	return TopkQuery{cs: append(b.get(), "TOPK.QUERY"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) TopkQuery() STopkQuery {
	return STopkQuery{cs: append(b.get(), "TOPK.QUERY"), ks: InitSlot, cf: readonly}
}

func (c TopkQuery) Key(key string) TopkQueryKey {
	c.cs = append(c.cs, key)
	return (TopkQueryKey)(c)
}

func (c STopkQuery) Key(key string) STopkQueryKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STopkQueryKey)(c)
}

type TopkQueryItem Completed

type STopkQueryItem SCompleted

func (c TopkQueryItem) Item(item ...string) TopkQueryItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c STopkQueryItem) Item(item ...string) STopkQueryItem {
	c.cs = append(c.cs, item...)
	return c
}

func (c TopkQueryItem) Build() Completed {
	return Completed(c)
}

func (c STopkQueryItem) Build() SCompleted {
	return SCompleted(c)
}

func (c TopkQueryItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c STopkQueryItem) Cache() SCacheable {
	return SCacheable(c)
}

type TopkQueryKey Completed

type STopkQueryKey SCompleted

func (c TopkQueryKey) Item(item ...string) TopkQueryItem {
	c.cs = append(c.cs, item...)
	return (TopkQueryItem)(c)
}

func (c STopkQueryKey) Item(item ...string) STopkQueryItem {
	c.cs = append(c.cs, item...)
	return (STopkQueryItem)(c)
}

type TopkReserve Completed

type STopkReserve SCompleted

func (b *Builder) TopkReserve() TopkReserve {
	return TopkReserve{cs: append(b.get(), "TOPK.RESERVE"), ks: InitSlot}
}

func (b *SBuilder) TopkReserve() STopkReserve {
	return STopkReserve{cs: append(b.get(), "TOPK.RESERVE"), ks: InitSlot}
}

func (c TopkReserve) Key(key string) TopkReserveKey {
	c.cs = append(c.cs, key)
	return (TopkReserveKey)(c)
}

func (c STopkReserve) Key(key string) STopkReserveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STopkReserveKey)(c)
}

type TopkReserveKey Completed

type STopkReserveKey SCompleted

func (c TopkReserveKey) Topk(topk int64) TopkReserveTopk {
	c.cs = append(c.cs, strconv.FormatInt(topk, 10))
	return (TopkReserveTopk)(c)
}

func (c STopkReserveKey) Topk(topk int64) STopkReserveTopk {
	c.cs = append(c.cs, strconv.FormatInt(topk, 10))
	return (STopkReserveTopk)(c)
}

type TopkReserveParamsDecay Completed

type STopkReserveParamsDecay SCompleted

func (c TopkReserveParamsDecay) Build() Completed {
	return Completed(c)
}

func (c STopkReserveParamsDecay) Build() SCompleted {
	return SCompleted(c)
}

type TopkReserveParamsDepth Completed

type STopkReserveParamsDepth SCompleted

func (c TopkReserveParamsDepth) Decay(decay float64) TopkReserveParamsDecay {
	c.cs = append(c.cs, strconv.FormatFloat(decay, 'f', -1, 64))
	return (TopkReserveParamsDecay)(c)
}

func (c STopkReserveParamsDepth) Decay(decay float64) STopkReserveParamsDecay {
	c.cs = append(c.cs, strconv.FormatFloat(decay, 'f', -1, 64))
	return (STopkReserveParamsDecay)(c)
}

type TopkReserveParamsWidth Completed

type STopkReserveParamsWidth SCompleted

func (c TopkReserveParamsWidth) Depth(depth int64) TopkReserveParamsDepth {
	c.cs = append(c.cs, strconv.FormatInt(depth, 10))
	return (TopkReserveParamsDepth)(c)
}

func (c STopkReserveParamsWidth) Depth(depth int64) STopkReserveParamsDepth {
	c.cs = append(c.cs, strconv.FormatInt(depth, 10))
	return (STopkReserveParamsDepth)(c)
}

type TopkReserveTopk Completed

type STopkReserveTopk SCompleted

func (c TopkReserveTopk) Width(width int64) TopkReserveParamsWidth {
	c.cs = append(c.cs, strconv.FormatInt(width, 10))
	return (TopkReserveParamsWidth)(c)
}

func (c STopkReserveTopk) Width(width int64) STopkReserveParamsWidth {
	c.cs = append(c.cs, strconv.FormatInt(width, 10))
	return (STopkReserveParamsWidth)(c)
}

func (c TopkReserveTopk) Build() Completed {
	return Completed(c)
}

func (c STopkReserveTopk) Build() SCompleted {
	return SCompleted(c)
}

type Touch Completed

type STouch SCompleted

func (b *Builder) Touch() Touch {
	return Touch{cs: append(b.get(), "TOUCH"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Touch() STouch {
	return STouch{cs: append(b.get(), "TOUCH"), ks: InitSlot, cf: readonly}
}

func (c Touch) Key(key ...string) TouchKey {
	c.cs = append(c.cs, key...)
	return (TouchKey)(c)
}

func (c STouch) Key(key ...string) STouchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (STouchKey)(c)
}

type TouchKey Completed

type STouchKey SCompleted

func (c TouchKey) Key(key ...string) TouchKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c STouchKey) Key(key ...string) STouchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c TouchKey) Build() Completed {
	return Completed(c)
}

func (c STouchKey) Build() SCompleted {
	return SCompleted(c)
}

type Ttl Completed

type STtl SCompleted

func (b *Builder) Ttl() Ttl {
	return Ttl{cs: append(b.get(), "TTL"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Ttl() STtl {
	return STtl{cs: append(b.get(), "TTL"), ks: InitSlot, cf: readonly}
}

func (c Ttl) Key(key string) TtlKey {
	c.cs = append(c.cs, key)
	return (TtlKey)(c)
}

func (c STtl) Key(key string) STtlKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STtlKey)(c)
}

type TtlKey Completed

type STtlKey SCompleted

func (c TtlKey) Build() Completed {
	return Completed(c)
}

func (c STtlKey) Build() SCompleted {
	return SCompleted(c)
}

func (c TtlKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c STtlKey) Cache() SCacheable {
	return SCacheable(c)
}

type Type Completed

type SType SCompleted

func (b *Builder) Type() Type {
	return Type{cs: append(b.get(), "TYPE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Type() SType {
	return SType{cs: append(b.get(), "TYPE"), ks: InitSlot, cf: readonly}
}

func (c Type) Key(key string) TypeKey {
	c.cs = append(c.cs, key)
	return (TypeKey)(c)
}

func (c SType) Key(key string) STypeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (STypeKey)(c)
}

type TypeKey Completed

type STypeKey SCompleted

func (c TypeKey) Build() Completed {
	return Completed(c)
}

func (c STypeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c TypeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c STypeKey) Cache() SCacheable {
	return SCacheable(c)
}

type Unlink Completed

type SUnlink SCompleted

func (b *Builder) Unlink() Unlink {
	return Unlink{cs: append(b.get(), "UNLINK"), ks: InitSlot}
}

func (b *SBuilder) Unlink() SUnlink {
	return SUnlink{cs: append(b.get(), "UNLINK"), ks: InitSlot}
}

func (c Unlink) Key(key ...string) UnlinkKey {
	c.cs = append(c.cs, key...)
	return (UnlinkKey)(c)
}

func (c SUnlink) Key(key ...string) SUnlinkKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SUnlinkKey)(c)
}

type UnlinkKey Completed

type SUnlinkKey SCompleted

func (c UnlinkKey) Key(key ...string) UnlinkKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SUnlinkKey) Key(key ...string) SUnlinkKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c UnlinkKey) Build() Completed {
	return Completed(c)
}

func (c SUnlinkKey) Build() SCompleted {
	return SCompleted(c)
}

type Unsubscribe Completed

type SUnsubscribe SCompleted

func (b *Builder) Unsubscribe() Unsubscribe {
	return Unsubscribe{cs: append(b.get(), "UNSUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (b *SBuilder) Unsubscribe() SUnsubscribe {
	return SUnsubscribe{cs: append(b.get(), "UNSUBSCRIBE"), ks: InitSlot, cf: noRetTag}
}

func (c Unsubscribe) Channel(channel ...string) UnsubscribeChannel {
	c.cs = append(c.cs, channel...)
	return (UnsubscribeChannel)(c)
}

func (c SUnsubscribe) Channel(channel ...string) SUnsubscribeChannel {
	c.cs = append(c.cs, channel...)
	return (SUnsubscribeChannel)(c)
}

func (c Unsubscribe) Build() Completed {
	return Completed(c)
}

func (c SUnsubscribe) Build() SCompleted {
	return SCompleted(c)
}

type UnsubscribeChannel Completed

type SUnsubscribeChannel SCompleted

func (c UnsubscribeChannel) Channel(channel ...string) UnsubscribeChannel {
	c.cs = append(c.cs, channel...)
	return c
}

func (c SUnsubscribeChannel) Channel(channel ...string) SUnsubscribeChannel {
	c.cs = append(c.cs, channel...)
	return c
}

func (c UnsubscribeChannel) Build() Completed {
	return Completed(c)
}

func (c SUnsubscribeChannel) Build() SCompleted {
	return SCompleted(c)
}

type Unwatch Completed

type SUnwatch SCompleted

func (b *Builder) Unwatch() Unwatch {
	return Unwatch{cs: append(b.get(), "UNWATCH"), ks: InitSlot}
}

func (b *SBuilder) Unwatch() SUnwatch {
	return SUnwatch{cs: append(b.get(), "UNWATCH"), ks: InitSlot}
}

func (c Unwatch) Build() Completed {
	return Completed(c)
}

func (c SUnwatch) Build() SCompleted {
	return SCompleted(c)
}

type Wait Completed

type SWait SCompleted

func (b *Builder) Wait() Wait {
	return Wait{cs: append(b.get(), "WAIT"), ks: InitSlot, cf: blockTag}
}

func (b *SBuilder) Wait() SWait {
	return SWait{cs: append(b.get(), "WAIT"), ks: InitSlot, cf: blockTag}
}

func (c Wait) Numreplicas(numreplicas int64) WaitNumreplicas {
	c.cs = append(c.cs, strconv.FormatInt(numreplicas, 10))
	return (WaitNumreplicas)(c)
}

func (c SWait) Numreplicas(numreplicas int64) SWaitNumreplicas {
	c.cs = append(c.cs, strconv.FormatInt(numreplicas, 10))
	return (SWaitNumreplicas)(c)
}

type WaitNumreplicas Completed

type SWaitNumreplicas SCompleted

func (c WaitNumreplicas) Timeout(timeout int64) WaitTimeout {
	c.cs = append(c.cs, strconv.FormatInt(timeout, 10))
	return (WaitTimeout)(c)
}

func (c SWaitNumreplicas) Timeout(timeout int64) SWaitTimeout {
	c.cs = append(c.cs, strconv.FormatInt(timeout, 10))
	return (SWaitTimeout)(c)
}

type WaitTimeout Completed

type SWaitTimeout SCompleted

func (c WaitTimeout) Build() Completed {
	return Completed(c)
}

func (c SWaitTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Watch Completed

type SWatch SCompleted

func (b *Builder) Watch() Watch {
	return Watch{cs: append(b.get(), "WATCH"), ks: InitSlot}
}

func (b *SBuilder) Watch() SWatch {
	return SWatch{cs: append(b.get(), "WATCH"), ks: InitSlot}
}

func (c Watch) Key(key ...string) WatchKey {
	c.cs = append(c.cs, key...)
	return (WatchKey)(c)
}

func (c SWatch) Key(key ...string) SWatchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SWatchKey)(c)
}

type WatchKey Completed

type SWatchKey SCompleted

func (c WatchKey) Key(key ...string) WatchKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SWatchKey) Key(key ...string) SWatchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c WatchKey) Build() Completed {
	return Completed(c)
}

func (c SWatchKey) Build() SCompleted {
	return SCompleted(c)
}

type Xack Completed

type SXack SCompleted

func (b *Builder) Xack() Xack {
	return Xack{cs: append(b.get(), "XACK"), ks: InitSlot}
}

func (b *SBuilder) Xack() SXack {
	return SXack{cs: append(b.get(), "XACK"), ks: InitSlot}
}

func (c Xack) Key(key string) XackKey {
	c.cs = append(c.cs, key)
	return (XackKey)(c)
}

func (c SXack) Key(key string) SXackKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXackKey)(c)
}

type XackGroup Completed

type SXackGroup SCompleted

func (c XackGroup) Id(id ...string) XackId {
	c.cs = append(c.cs, id...)
	return (XackId)(c)
}

func (c SXackGroup) Id(id ...string) SXackId {
	c.cs = append(c.cs, id...)
	return (SXackId)(c)
}

type XackId Completed

type SXackId SCompleted

func (c XackId) Id(id ...string) XackId {
	c.cs = append(c.cs, id...)
	return c
}

func (c SXackId) Id(id ...string) SXackId {
	c.cs = append(c.cs, id...)
	return c
}

func (c XackId) Build() Completed {
	return Completed(c)
}

func (c SXackId) Build() SCompleted {
	return SCompleted(c)
}

type XackKey Completed

type SXackKey SCompleted

func (c XackKey) Group(group string) XackGroup {
	c.cs = append(c.cs, group)
	return (XackGroup)(c)
}

func (c SXackKey) Group(group string) SXackGroup {
	c.cs = append(c.cs, group)
	return (SXackGroup)(c)
}

type Xadd Completed

type SXadd SCompleted

func (b *Builder) Xadd() Xadd {
	return Xadd{cs: append(b.get(), "XADD"), ks: InitSlot}
}

func (b *SBuilder) Xadd() SXadd {
	return SXadd{cs: append(b.get(), "XADD"), ks: InitSlot}
}

func (c Xadd) Key(key string) XaddKey {
	c.cs = append(c.cs, key)
	return (XaddKey)(c)
}

func (c SXadd) Key(key string) SXaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXaddKey)(c)
}

type XaddFieldValue Completed

type SXaddFieldValue SCompleted

func (c XaddFieldValue) FieldValue(field string, value string) XaddFieldValue {
	c.cs = append(c.cs, field, value)
	return c
}

func (c SXaddFieldValue) FieldValue(field string, value string) SXaddFieldValue {
	c.cs = append(c.cs, field, value)
	return c
}

func (c XaddFieldValue) Build() Completed {
	return Completed(c)
}

func (c SXaddFieldValue) Build() SCompleted {
	return SCompleted(c)
}

type XaddId Completed

type SXaddId SCompleted

func (c XaddId) FieldValue() XaddFieldValue {
	return (XaddFieldValue)(c)
}

func (c SXaddId) FieldValue() SXaddFieldValue {
	return (SXaddFieldValue)(c)
}

type XaddKey Completed

type SXaddKey SCompleted

func (c XaddKey) Nomkstream() XaddNomkstream {
	c.cs = append(c.cs, "NOMKSTREAM")
	return (XaddNomkstream)(c)
}

func (c SXaddKey) Nomkstream() SXaddNomkstream {
	c.cs = append(c.cs, "NOMKSTREAM")
	return (SXaddNomkstream)(c)
}

func (c XaddKey) Maxlen() XaddTrimStrategyMaxlen {
	c.cs = append(c.cs, "MAXLEN")
	return (XaddTrimStrategyMaxlen)(c)
}

func (c SXaddKey) Maxlen() SXaddTrimStrategyMaxlen {
	c.cs = append(c.cs, "MAXLEN")
	return (SXaddTrimStrategyMaxlen)(c)
}

func (c XaddKey) Minid() XaddTrimStrategyMinid {
	c.cs = append(c.cs, "MINID")
	return (XaddTrimStrategyMinid)(c)
}

func (c SXaddKey) Minid() SXaddTrimStrategyMinid {
	c.cs = append(c.cs, "MINID")
	return (SXaddTrimStrategyMinid)(c)
}

func (c XaddKey) Id(id string) XaddId {
	c.cs = append(c.cs, id)
	return (XaddId)(c)
}

func (c SXaddKey) Id(id string) SXaddId {
	c.cs = append(c.cs, id)
	return (SXaddId)(c)
}

type XaddNomkstream Completed

type SXaddNomkstream SCompleted

func (c XaddNomkstream) Maxlen() XaddTrimStrategyMaxlen {
	c.cs = append(c.cs, "MAXLEN")
	return (XaddTrimStrategyMaxlen)(c)
}

func (c SXaddNomkstream) Maxlen() SXaddTrimStrategyMaxlen {
	c.cs = append(c.cs, "MAXLEN")
	return (SXaddTrimStrategyMaxlen)(c)
}

func (c XaddNomkstream) Minid() XaddTrimStrategyMinid {
	c.cs = append(c.cs, "MINID")
	return (XaddTrimStrategyMinid)(c)
}

func (c SXaddNomkstream) Minid() SXaddTrimStrategyMinid {
	c.cs = append(c.cs, "MINID")
	return (SXaddTrimStrategyMinid)(c)
}

func (c XaddNomkstream) Id(id string) XaddId {
	c.cs = append(c.cs, id)
	return (XaddId)(c)
}

func (c SXaddNomkstream) Id(id string) SXaddId {
	c.cs = append(c.cs, id)
	return (SXaddId)(c)
}

type XaddTrimLimit Completed

type SXaddTrimLimit SCompleted

func (c XaddTrimLimit) Id(id string) XaddId {
	c.cs = append(c.cs, id)
	return (XaddId)(c)
}

func (c SXaddTrimLimit) Id(id string) SXaddId {
	c.cs = append(c.cs, id)
	return (SXaddId)(c)
}

type XaddTrimOperatorAlmost Completed

type SXaddTrimOperatorAlmost SCompleted

func (c XaddTrimOperatorAlmost) Threshold(threshold string) XaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimOperatorAlmost) Threshold(threshold string) SXaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimOperatorExact Completed

type SXaddTrimOperatorExact SCompleted

func (c XaddTrimOperatorExact) Threshold(threshold string) XaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimOperatorExact) Threshold(threshold string) SXaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimStrategyMaxlen Completed

type SXaddTrimStrategyMaxlen SCompleted

func (c XaddTrimStrategyMaxlen) Exact() XaddTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (XaddTrimOperatorExact)(c)
}

func (c SXaddTrimStrategyMaxlen) Exact() SXaddTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (SXaddTrimOperatorExact)(c)
}

func (c XaddTrimStrategyMaxlen) Almost() XaddTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (XaddTrimOperatorAlmost)(c)
}

func (c SXaddTrimStrategyMaxlen) Almost() SXaddTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (SXaddTrimOperatorAlmost)(c)
}

func (c XaddTrimStrategyMaxlen) Threshold(threshold string) XaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimStrategyMaxlen) Threshold(threshold string) SXaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimStrategyMinid Completed

type SXaddTrimStrategyMinid SCompleted

func (c XaddTrimStrategyMinid) Exact() XaddTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (XaddTrimOperatorExact)(c)
}

func (c SXaddTrimStrategyMinid) Exact() SXaddTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (SXaddTrimOperatorExact)(c)
}

func (c XaddTrimStrategyMinid) Almost() XaddTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (XaddTrimOperatorAlmost)(c)
}

func (c SXaddTrimStrategyMinid) Almost() SXaddTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (SXaddTrimOperatorAlmost)(c)
}

func (c XaddTrimStrategyMinid) Threshold(threshold string) XaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimStrategyMinid) Threshold(threshold string) SXaddTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimThreshold Completed

type SXaddTrimThreshold SCompleted

func (c XaddTrimThreshold) Limit(count int64) XaddTrimLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(count, 10))
	return (XaddTrimLimit)(c)
}

func (c SXaddTrimThreshold) Limit(count int64) SXaddTrimLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(count, 10))
	return (SXaddTrimLimit)(c)
}

func (c XaddTrimThreshold) Id(id string) XaddId {
	c.cs = append(c.cs, id)
	return (XaddId)(c)
}

func (c SXaddTrimThreshold) Id(id string) SXaddId {
	c.cs = append(c.cs, id)
	return (SXaddId)(c)
}

type Xautoclaim Completed

type SXautoclaim SCompleted

func (b *Builder) Xautoclaim() Xautoclaim {
	return Xautoclaim{cs: append(b.get(), "XAUTOCLAIM"), ks: InitSlot}
}

func (b *SBuilder) Xautoclaim() SXautoclaim {
	return SXautoclaim{cs: append(b.get(), "XAUTOCLAIM"), ks: InitSlot}
}

func (c Xautoclaim) Key(key string) XautoclaimKey {
	c.cs = append(c.cs, key)
	return (XautoclaimKey)(c)
}

func (c SXautoclaim) Key(key string) SXautoclaimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXautoclaimKey)(c)
}

type XautoclaimConsumer Completed

type SXautoclaimConsumer SCompleted

func (c XautoclaimConsumer) MinIdleTime(minIdleTime string) XautoclaimMinIdleTime {
	c.cs = append(c.cs, minIdleTime)
	return (XautoclaimMinIdleTime)(c)
}

func (c SXautoclaimConsumer) MinIdleTime(minIdleTime string) SXautoclaimMinIdleTime {
	c.cs = append(c.cs, minIdleTime)
	return (SXautoclaimMinIdleTime)(c)
}

type XautoclaimCount Completed

type SXautoclaimCount SCompleted

func (c XautoclaimCount) Justid() XautoclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XautoclaimJustid)(c)
}

func (c SXautoclaimCount) Justid() SXautoclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXautoclaimJustid)(c)
}

func (c XautoclaimCount) Build() Completed {
	return Completed(c)
}

func (c SXautoclaimCount) Build() SCompleted {
	return SCompleted(c)
}

type XautoclaimGroup Completed

type SXautoclaimGroup SCompleted

func (c XautoclaimGroup) Consumer(consumer string) XautoclaimConsumer {
	c.cs = append(c.cs, consumer)
	return (XautoclaimConsumer)(c)
}

func (c SXautoclaimGroup) Consumer(consumer string) SXautoclaimConsumer {
	c.cs = append(c.cs, consumer)
	return (SXautoclaimConsumer)(c)
}

type XautoclaimJustid Completed

type SXautoclaimJustid SCompleted

func (c XautoclaimJustid) Build() Completed {
	return Completed(c)
}

func (c SXautoclaimJustid) Build() SCompleted {
	return SCompleted(c)
}

type XautoclaimKey Completed

type SXautoclaimKey SCompleted

func (c XautoclaimKey) Group(group string) XautoclaimGroup {
	c.cs = append(c.cs, group)
	return (XautoclaimGroup)(c)
}

func (c SXautoclaimKey) Group(group string) SXautoclaimGroup {
	c.cs = append(c.cs, group)
	return (SXautoclaimGroup)(c)
}

type XautoclaimMinIdleTime Completed

type SXautoclaimMinIdleTime SCompleted

func (c XautoclaimMinIdleTime) Start(start string) XautoclaimStart {
	c.cs = append(c.cs, start)
	return (XautoclaimStart)(c)
}

func (c SXautoclaimMinIdleTime) Start(start string) SXautoclaimStart {
	c.cs = append(c.cs, start)
	return (SXautoclaimStart)(c)
}

type XautoclaimStart Completed

type SXautoclaimStart SCompleted

func (c XautoclaimStart) Count(count int64) XautoclaimCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (XautoclaimCount)(c)
}

func (c SXautoclaimStart) Count(count int64) SXautoclaimCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SXautoclaimCount)(c)
}

func (c XautoclaimStart) Justid() XautoclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XautoclaimJustid)(c)
}

func (c SXautoclaimStart) Justid() SXautoclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXautoclaimJustid)(c)
}

func (c XautoclaimStart) Build() Completed {
	return Completed(c)
}

func (c SXautoclaimStart) Build() SCompleted {
	return SCompleted(c)
}

type Xclaim Completed

type SXclaim SCompleted

func (b *Builder) Xclaim() Xclaim {
	return Xclaim{cs: append(b.get(), "XCLAIM"), ks: InitSlot}
}

func (b *SBuilder) Xclaim() SXclaim {
	return SXclaim{cs: append(b.get(), "XCLAIM"), ks: InitSlot}
}

func (c Xclaim) Key(key string) XclaimKey {
	c.cs = append(c.cs, key)
	return (XclaimKey)(c)
}

func (c SXclaim) Key(key string) SXclaimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXclaimKey)(c)
}

type XclaimConsumer Completed

type SXclaimConsumer SCompleted

func (c XclaimConsumer) MinIdleTime(minIdleTime string) XclaimMinIdleTime {
	c.cs = append(c.cs, minIdleTime)
	return (XclaimMinIdleTime)(c)
}

func (c SXclaimConsumer) MinIdleTime(minIdleTime string) SXclaimMinIdleTime {
	c.cs = append(c.cs, minIdleTime)
	return (SXclaimMinIdleTime)(c)
}

type XclaimForce Completed

type SXclaimForce SCompleted

func (c XclaimForce) Justid() XclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimForce) Justid() SXclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimForce) Build() Completed {
	return Completed(c)
}

func (c SXclaimForce) Build() SCompleted {
	return SCompleted(c)
}

type XclaimGroup Completed

type SXclaimGroup SCompleted

func (c XclaimGroup) Consumer(consumer string) XclaimConsumer {
	c.cs = append(c.cs, consumer)
	return (XclaimConsumer)(c)
}

func (c SXclaimGroup) Consumer(consumer string) SXclaimConsumer {
	c.cs = append(c.cs, consumer)
	return (SXclaimConsumer)(c)
}

type XclaimId Completed

type SXclaimId SCompleted

func (c XclaimId) Id(id ...string) XclaimId {
	c.cs = append(c.cs, id...)
	return c
}

func (c SXclaimId) Id(id ...string) SXclaimId {
	c.cs = append(c.cs, id...)
	return c
}

func (c XclaimId) Idle(ms int64) XclaimIdle {
	c.cs = append(c.cs, "IDLE", strconv.FormatInt(ms, 10))
	return (XclaimIdle)(c)
}

func (c SXclaimId) Idle(ms int64) SXclaimIdle {
	c.cs = append(c.cs, "IDLE", strconv.FormatInt(ms, 10))
	return (SXclaimIdle)(c)
}

func (c XclaimId) Time(msUnixTime int64) XclaimTime {
	c.cs = append(c.cs, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (XclaimTime)(c)
}

func (c SXclaimId) Time(msUnixTime int64) SXclaimTime {
	c.cs = append(c.cs, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (SXclaimTime)(c)
}

func (c XclaimId) Retrycount(count int64) XclaimRetrycount {
	c.cs = append(c.cs, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (XclaimRetrycount)(c)
}

func (c SXclaimId) Retrycount(count int64) SXclaimRetrycount {
	c.cs = append(c.cs, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (SXclaimRetrycount)(c)
}

func (c XclaimId) Force() XclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimId) Force() SXclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimId) Justid() XclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimId) Justid() SXclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimId) Build() Completed {
	return Completed(c)
}

func (c SXclaimId) Build() SCompleted {
	return SCompleted(c)
}

type XclaimIdle Completed

type SXclaimIdle SCompleted

func (c XclaimIdle) Time(msUnixTime int64) XclaimTime {
	c.cs = append(c.cs, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (XclaimTime)(c)
}

func (c SXclaimIdle) Time(msUnixTime int64) SXclaimTime {
	c.cs = append(c.cs, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (SXclaimTime)(c)
}

func (c XclaimIdle) Retrycount(count int64) XclaimRetrycount {
	c.cs = append(c.cs, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (XclaimRetrycount)(c)
}

func (c SXclaimIdle) Retrycount(count int64) SXclaimRetrycount {
	c.cs = append(c.cs, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (SXclaimRetrycount)(c)
}

func (c XclaimIdle) Force() XclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimIdle) Force() SXclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimIdle) Justid() XclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimIdle) Justid() SXclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimIdle) Build() Completed {
	return Completed(c)
}

func (c SXclaimIdle) Build() SCompleted {
	return SCompleted(c)
}

type XclaimJustid Completed

type SXclaimJustid SCompleted

func (c XclaimJustid) Build() Completed {
	return Completed(c)
}

func (c SXclaimJustid) Build() SCompleted {
	return SCompleted(c)
}

type XclaimKey Completed

type SXclaimKey SCompleted

func (c XclaimKey) Group(group string) XclaimGroup {
	c.cs = append(c.cs, group)
	return (XclaimGroup)(c)
}

func (c SXclaimKey) Group(group string) SXclaimGroup {
	c.cs = append(c.cs, group)
	return (SXclaimGroup)(c)
}

type XclaimMinIdleTime Completed

type SXclaimMinIdleTime SCompleted

func (c XclaimMinIdleTime) Id(id ...string) XclaimId {
	c.cs = append(c.cs, id...)
	return (XclaimId)(c)
}

func (c SXclaimMinIdleTime) Id(id ...string) SXclaimId {
	c.cs = append(c.cs, id...)
	return (SXclaimId)(c)
}

type XclaimRetrycount Completed

type SXclaimRetrycount SCompleted

func (c XclaimRetrycount) Force() XclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimRetrycount) Force() SXclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimRetrycount) Justid() XclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimRetrycount) Justid() SXclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimRetrycount) Build() Completed {
	return Completed(c)
}

func (c SXclaimRetrycount) Build() SCompleted {
	return SCompleted(c)
}

type XclaimTime Completed

type SXclaimTime SCompleted

func (c XclaimTime) Retrycount(count int64) XclaimRetrycount {
	c.cs = append(c.cs, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (XclaimRetrycount)(c)
}

func (c SXclaimTime) Retrycount(count int64) SXclaimRetrycount {
	c.cs = append(c.cs, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (SXclaimRetrycount)(c)
}

func (c XclaimTime) Force() XclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimTime) Force() SXclaimForce {
	c.cs = append(c.cs, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimTime) Justid() XclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimTime) Justid() SXclaimJustid {
	c.cs = append(c.cs, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimTime) Build() Completed {
	return Completed(c)
}

func (c SXclaimTime) Build() SCompleted {
	return SCompleted(c)
}

type Xdel Completed

type SXdel SCompleted

func (b *Builder) Xdel() Xdel {
	return Xdel{cs: append(b.get(), "XDEL"), ks: InitSlot}
}

func (b *SBuilder) Xdel() SXdel {
	return SXdel{cs: append(b.get(), "XDEL"), ks: InitSlot}
}

func (c Xdel) Key(key string) XdelKey {
	c.cs = append(c.cs, key)
	return (XdelKey)(c)
}

func (c SXdel) Key(key string) SXdelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXdelKey)(c)
}

type XdelId Completed

type SXdelId SCompleted

func (c XdelId) Id(id ...string) XdelId {
	c.cs = append(c.cs, id...)
	return c
}

func (c SXdelId) Id(id ...string) SXdelId {
	c.cs = append(c.cs, id...)
	return c
}

func (c XdelId) Build() Completed {
	return Completed(c)
}

func (c SXdelId) Build() SCompleted {
	return SCompleted(c)
}

type XdelKey Completed

type SXdelKey SCompleted

func (c XdelKey) Id(id ...string) XdelId {
	c.cs = append(c.cs, id...)
	return (XdelId)(c)
}

func (c SXdelKey) Id(id ...string) SXdelId {
	c.cs = append(c.cs, id...)
	return (SXdelId)(c)
}

type XgroupCreate Completed

type SXgroupCreate SCompleted

func (b *Builder) XgroupCreate() XgroupCreate {
	return XgroupCreate{cs: append(b.get(), "XGROUP", "CREATE"), ks: InitSlot}
}

func (b *SBuilder) XgroupCreate() SXgroupCreate {
	return SXgroupCreate{cs: append(b.get(), "XGROUP", "CREATE"), ks: InitSlot}
}

func (c XgroupCreate) Key(key string) XgroupCreateKey {
	c.cs = append(c.cs, key)
	return (XgroupCreateKey)(c)
}

func (c SXgroupCreate) Key(key string) SXgroupCreateKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXgroupCreateKey)(c)
}

type XgroupCreateGroupname Completed

type SXgroupCreateGroupname SCompleted

func (c XgroupCreateGroupname) Id(id string) XgroupCreateId {
	c.cs = append(c.cs, id)
	return (XgroupCreateId)(c)
}

func (c SXgroupCreateGroupname) Id(id string) SXgroupCreateId {
	c.cs = append(c.cs, id)
	return (SXgroupCreateId)(c)
}

type XgroupCreateId Completed

type SXgroupCreateId SCompleted

func (c XgroupCreateId) Mkstream() XgroupCreateMkstream {
	c.cs = append(c.cs, "MKSTREAM")
	return (XgroupCreateMkstream)(c)
}

func (c SXgroupCreateId) Mkstream() SXgroupCreateMkstream {
	c.cs = append(c.cs, "MKSTREAM")
	return (SXgroupCreateMkstream)(c)
}

func (c XgroupCreateId) Build() Completed {
	return Completed(c)
}

func (c SXgroupCreateId) Build() SCompleted {
	return SCompleted(c)
}

type XgroupCreateKey Completed

type SXgroupCreateKey SCompleted

func (c XgroupCreateKey) Groupname(groupname string) XgroupCreateGroupname {
	c.cs = append(c.cs, groupname)
	return (XgroupCreateGroupname)(c)
}

func (c SXgroupCreateKey) Groupname(groupname string) SXgroupCreateGroupname {
	c.cs = append(c.cs, groupname)
	return (SXgroupCreateGroupname)(c)
}

type XgroupCreateMkstream Completed

type SXgroupCreateMkstream SCompleted

func (c XgroupCreateMkstream) Build() Completed {
	return Completed(c)
}

func (c SXgroupCreateMkstream) Build() SCompleted {
	return SCompleted(c)
}

type XgroupCreateconsumer Completed

type SXgroupCreateconsumer SCompleted

func (b *Builder) XgroupCreateconsumer() XgroupCreateconsumer {
	return XgroupCreateconsumer{cs: append(b.get(), "XGROUP", "CREATECONSUMER"), ks: InitSlot}
}

func (b *SBuilder) XgroupCreateconsumer() SXgroupCreateconsumer {
	return SXgroupCreateconsumer{cs: append(b.get(), "XGROUP", "CREATECONSUMER"), ks: InitSlot}
}

func (c XgroupCreateconsumer) Key(key string) XgroupCreateconsumerKey {
	c.cs = append(c.cs, key)
	return (XgroupCreateconsumerKey)(c)
}

func (c SXgroupCreateconsumer) Key(key string) SXgroupCreateconsumerKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXgroupCreateconsumerKey)(c)
}

type XgroupCreateconsumerConsumername Completed

type SXgroupCreateconsumerConsumername SCompleted

func (c XgroupCreateconsumerConsumername) Build() Completed {
	return Completed(c)
}

func (c SXgroupCreateconsumerConsumername) Build() SCompleted {
	return SCompleted(c)
}

type XgroupCreateconsumerGroupname Completed

type SXgroupCreateconsumerGroupname SCompleted

func (c XgroupCreateconsumerGroupname) Consumername(consumername string) XgroupCreateconsumerConsumername {
	c.cs = append(c.cs, consumername)
	return (XgroupCreateconsumerConsumername)(c)
}

func (c SXgroupCreateconsumerGroupname) Consumername(consumername string) SXgroupCreateconsumerConsumername {
	c.cs = append(c.cs, consumername)
	return (SXgroupCreateconsumerConsumername)(c)
}

type XgroupCreateconsumerKey Completed

type SXgroupCreateconsumerKey SCompleted

func (c XgroupCreateconsumerKey) Groupname(groupname string) XgroupCreateconsumerGroupname {
	c.cs = append(c.cs, groupname)
	return (XgroupCreateconsumerGroupname)(c)
}

func (c SXgroupCreateconsumerKey) Groupname(groupname string) SXgroupCreateconsumerGroupname {
	c.cs = append(c.cs, groupname)
	return (SXgroupCreateconsumerGroupname)(c)
}

type XgroupDelconsumer Completed

type SXgroupDelconsumer SCompleted

func (b *Builder) XgroupDelconsumer() XgroupDelconsumer {
	return XgroupDelconsumer{cs: append(b.get(), "XGROUP", "DELCONSUMER"), ks: InitSlot}
}

func (b *SBuilder) XgroupDelconsumer() SXgroupDelconsumer {
	return SXgroupDelconsumer{cs: append(b.get(), "XGROUP", "DELCONSUMER"), ks: InitSlot}
}

func (c XgroupDelconsumer) Key(key string) XgroupDelconsumerKey {
	c.cs = append(c.cs, key)
	return (XgroupDelconsumerKey)(c)
}

func (c SXgroupDelconsumer) Key(key string) SXgroupDelconsumerKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXgroupDelconsumerKey)(c)
}

type XgroupDelconsumerConsumername Completed

type SXgroupDelconsumerConsumername SCompleted

func (c XgroupDelconsumerConsumername) Build() Completed {
	return Completed(c)
}

func (c SXgroupDelconsumerConsumername) Build() SCompleted {
	return SCompleted(c)
}

type XgroupDelconsumerGroupname Completed

type SXgroupDelconsumerGroupname SCompleted

func (c XgroupDelconsumerGroupname) Consumername(consumername string) XgroupDelconsumerConsumername {
	c.cs = append(c.cs, consumername)
	return (XgroupDelconsumerConsumername)(c)
}

func (c SXgroupDelconsumerGroupname) Consumername(consumername string) SXgroupDelconsumerConsumername {
	c.cs = append(c.cs, consumername)
	return (SXgroupDelconsumerConsumername)(c)
}

type XgroupDelconsumerKey Completed

type SXgroupDelconsumerKey SCompleted

func (c XgroupDelconsumerKey) Groupname(groupname string) XgroupDelconsumerGroupname {
	c.cs = append(c.cs, groupname)
	return (XgroupDelconsumerGroupname)(c)
}

func (c SXgroupDelconsumerKey) Groupname(groupname string) SXgroupDelconsumerGroupname {
	c.cs = append(c.cs, groupname)
	return (SXgroupDelconsumerGroupname)(c)
}

type XgroupDestroy Completed

type SXgroupDestroy SCompleted

func (b *Builder) XgroupDestroy() XgroupDestroy {
	return XgroupDestroy{cs: append(b.get(), "XGROUP", "DESTROY"), ks: InitSlot}
}

func (b *SBuilder) XgroupDestroy() SXgroupDestroy {
	return SXgroupDestroy{cs: append(b.get(), "XGROUP", "DESTROY"), ks: InitSlot}
}

func (c XgroupDestroy) Key(key string) XgroupDestroyKey {
	c.cs = append(c.cs, key)
	return (XgroupDestroyKey)(c)
}

func (c SXgroupDestroy) Key(key string) SXgroupDestroyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXgroupDestroyKey)(c)
}

type XgroupDestroyGroupname Completed

type SXgroupDestroyGroupname SCompleted

func (c XgroupDestroyGroupname) Build() Completed {
	return Completed(c)
}

func (c SXgroupDestroyGroupname) Build() SCompleted {
	return SCompleted(c)
}

type XgroupDestroyKey Completed

type SXgroupDestroyKey SCompleted

func (c XgroupDestroyKey) Groupname(groupname string) XgroupDestroyGroupname {
	c.cs = append(c.cs, groupname)
	return (XgroupDestroyGroupname)(c)
}

func (c SXgroupDestroyKey) Groupname(groupname string) SXgroupDestroyGroupname {
	c.cs = append(c.cs, groupname)
	return (SXgroupDestroyGroupname)(c)
}

type XgroupHelp Completed

type SXgroupHelp SCompleted

func (b *Builder) XgroupHelp() XgroupHelp {
	return XgroupHelp{cs: append(b.get(), "XGROUP", "HELP"), ks: InitSlot}
}

func (b *SBuilder) XgroupHelp() SXgroupHelp {
	return SXgroupHelp{cs: append(b.get(), "XGROUP", "HELP"), ks: InitSlot}
}

func (c XgroupHelp) Build() Completed {
	return Completed(c)
}

func (c SXgroupHelp) Build() SCompleted {
	return SCompleted(c)
}

type XgroupSetid Completed

type SXgroupSetid SCompleted

func (b *Builder) XgroupSetid() XgroupSetid {
	return XgroupSetid{cs: append(b.get(), "XGROUP", "SETID"), ks: InitSlot}
}

func (b *SBuilder) XgroupSetid() SXgroupSetid {
	return SXgroupSetid{cs: append(b.get(), "XGROUP", "SETID"), ks: InitSlot}
}

func (c XgroupSetid) Key(key string) XgroupSetidKey {
	c.cs = append(c.cs, key)
	return (XgroupSetidKey)(c)
}

func (c SXgroupSetid) Key(key string) SXgroupSetidKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXgroupSetidKey)(c)
}

type XgroupSetidGroupname Completed

type SXgroupSetidGroupname SCompleted

func (c XgroupSetidGroupname) Id(id string) XgroupSetidId {
	c.cs = append(c.cs, id)
	return (XgroupSetidId)(c)
}

func (c SXgroupSetidGroupname) Id(id string) SXgroupSetidId {
	c.cs = append(c.cs, id)
	return (SXgroupSetidId)(c)
}

type XgroupSetidId Completed

type SXgroupSetidId SCompleted

func (c XgroupSetidId) Build() Completed {
	return Completed(c)
}

func (c SXgroupSetidId) Build() SCompleted {
	return SCompleted(c)
}

type XgroupSetidKey Completed

type SXgroupSetidKey SCompleted

func (c XgroupSetidKey) Groupname(groupname string) XgroupSetidGroupname {
	c.cs = append(c.cs, groupname)
	return (XgroupSetidGroupname)(c)
}

func (c SXgroupSetidKey) Groupname(groupname string) SXgroupSetidGroupname {
	c.cs = append(c.cs, groupname)
	return (SXgroupSetidGroupname)(c)
}

type XinfoConsumers Completed

type SXinfoConsumers SCompleted

func (b *Builder) XinfoConsumers() XinfoConsumers {
	return XinfoConsumers{cs: append(b.get(), "XINFO", "CONSUMERS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) XinfoConsumers() SXinfoConsumers {
	return SXinfoConsumers{cs: append(b.get(), "XINFO", "CONSUMERS"), ks: InitSlot, cf: readonly}
}

func (c XinfoConsumers) Key(key string) XinfoConsumersKey {
	c.cs = append(c.cs, key)
	return (XinfoConsumersKey)(c)
}

func (c SXinfoConsumers) Key(key string) SXinfoConsumersKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXinfoConsumersKey)(c)
}

type XinfoConsumersGroupname Completed

type SXinfoConsumersGroupname SCompleted

func (c XinfoConsumersGroupname) Build() Completed {
	return Completed(c)
}

func (c SXinfoConsumersGroupname) Build() SCompleted {
	return SCompleted(c)
}

type XinfoConsumersKey Completed

type SXinfoConsumersKey SCompleted

func (c XinfoConsumersKey) Groupname(groupname string) XinfoConsumersGroupname {
	c.cs = append(c.cs, groupname)
	return (XinfoConsumersGroupname)(c)
}

func (c SXinfoConsumersKey) Groupname(groupname string) SXinfoConsumersGroupname {
	c.cs = append(c.cs, groupname)
	return (SXinfoConsumersGroupname)(c)
}

type XinfoGroups Completed

type SXinfoGroups SCompleted

func (b *Builder) XinfoGroups() XinfoGroups {
	return XinfoGroups{cs: append(b.get(), "XINFO", "GROUPS"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) XinfoGroups() SXinfoGroups {
	return SXinfoGroups{cs: append(b.get(), "XINFO", "GROUPS"), ks: InitSlot, cf: readonly}
}

func (c XinfoGroups) Key(key string) XinfoGroupsKey {
	c.cs = append(c.cs, key)
	return (XinfoGroupsKey)(c)
}

func (c SXinfoGroups) Key(key string) SXinfoGroupsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXinfoGroupsKey)(c)
}

type XinfoGroupsKey Completed

type SXinfoGroupsKey SCompleted

func (c XinfoGroupsKey) Build() Completed {
	return Completed(c)
}

func (c SXinfoGroupsKey) Build() SCompleted {
	return SCompleted(c)
}

type XinfoHelp Completed

type SXinfoHelp SCompleted

func (b *Builder) XinfoHelp() XinfoHelp {
	return XinfoHelp{cs: append(b.get(), "XINFO", "HELP"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) XinfoHelp() SXinfoHelp {
	return SXinfoHelp{cs: append(b.get(), "XINFO", "HELP"), ks: InitSlot, cf: readonly}
}

func (c XinfoHelp) Build() Completed {
	return Completed(c)
}

func (c SXinfoHelp) Build() SCompleted {
	return SCompleted(c)
}

type XinfoStream Completed

type SXinfoStream SCompleted

func (b *Builder) XinfoStream() XinfoStream {
	return XinfoStream{cs: append(b.get(), "XINFO", "STREAM"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) XinfoStream() SXinfoStream {
	return SXinfoStream{cs: append(b.get(), "XINFO", "STREAM"), ks: InitSlot, cf: readonly}
}

func (c XinfoStream) Key(key string) XinfoStreamKey {
	c.cs = append(c.cs, key)
	return (XinfoStreamKey)(c)
}

func (c SXinfoStream) Key(key string) SXinfoStreamKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXinfoStreamKey)(c)
}

type XinfoStreamFullCount Completed

type SXinfoStreamFullCount SCompleted

func (c XinfoStreamFullCount) Build() Completed {
	return Completed(c)
}

func (c SXinfoStreamFullCount) Build() SCompleted {
	return SCompleted(c)
}

type XinfoStreamFullFull Completed

type SXinfoStreamFullFull SCompleted

func (c XinfoStreamFullFull) Count(count int64) XinfoStreamFullCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (XinfoStreamFullCount)(c)
}

func (c SXinfoStreamFullFull) Count(count int64) SXinfoStreamFullCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SXinfoStreamFullCount)(c)
}

func (c XinfoStreamFullFull) Build() Completed {
	return Completed(c)
}

func (c SXinfoStreamFullFull) Build() SCompleted {
	return SCompleted(c)
}

type XinfoStreamKey Completed

type SXinfoStreamKey SCompleted

func (c XinfoStreamKey) Full() XinfoStreamFullFull {
	c.cs = append(c.cs, "FULL")
	return (XinfoStreamFullFull)(c)
}

func (c SXinfoStreamKey) Full() SXinfoStreamFullFull {
	c.cs = append(c.cs, "FULL")
	return (SXinfoStreamFullFull)(c)
}

func (c XinfoStreamKey) Build() Completed {
	return Completed(c)
}

func (c SXinfoStreamKey) Build() SCompleted {
	return SCompleted(c)
}

type Xlen Completed

type SXlen SCompleted

func (b *Builder) Xlen() Xlen {
	return Xlen{cs: append(b.get(), "XLEN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Xlen() SXlen {
	return SXlen{cs: append(b.get(), "XLEN"), ks: InitSlot, cf: readonly}
}

func (c Xlen) Key(key string) XlenKey {
	c.cs = append(c.cs, key)
	return (XlenKey)(c)
}

func (c SXlen) Key(key string) SXlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXlenKey)(c)
}

type XlenKey Completed

type SXlenKey SCompleted

func (c XlenKey) Build() Completed {
	return Completed(c)
}

func (c SXlenKey) Build() SCompleted {
	return SCompleted(c)
}

type Xpending Completed

type SXpending SCompleted

func (b *Builder) Xpending() Xpending {
	return Xpending{cs: append(b.get(), "XPENDING"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Xpending() SXpending {
	return SXpending{cs: append(b.get(), "XPENDING"), ks: InitSlot, cf: readonly}
}

func (c Xpending) Key(key string) XpendingKey {
	c.cs = append(c.cs, key)
	return (XpendingKey)(c)
}

func (c SXpending) Key(key string) SXpendingKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXpendingKey)(c)
}

type XpendingFiltersConsumer Completed

type SXpendingFiltersConsumer SCompleted

func (c XpendingFiltersConsumer) Build() Completed {
	return Completed(c)
}

func (c SXpendingFiltersConsumer) Build() SCompleted {
	return SCompleted(c)
}

type XpendingFiltersCount Completed

type SXpendingFiltersCount SCompleted

func (c XpendingFiltersCount) Consumer(consumer string) XpendingFiltersConsumer {
	c.cs = append(c.cs, consumer)
	return (XpendingFiltersConsumer)(c)
}

func (c SXpendingFiltersCount) Consumer(consumer string) SXpendingFiltersConsumer {
	c.cs = append(c.cs, consumer)
	return (SXpendingFiltersConsumer)(c)
}

func (c XpendingFiltersCount) Build() Completed {
	return Completed(c)
}

func (c SXpendingFiltersCount) Build() SCompleted {
	return SCompleted(c)
}

type XpendingFiltersEnd Completed

type SXpendingFiltersEnd SCompleted

func (c XpendingFiltersEnd) Count(count int64) XpendingFiltersCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (XpendingFiltersCount)(c)
}

func (c SXpendingFiltersEnd) Count(count int64) SXpendingFiltersCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SXpendingFiltersCount)(c)
}

type XpendingFiltersIdle Completed

type SXpendingFiltersIdle SCompleted

func (c XpendingFiltersIdle) Start(start string) XpendingFiltersStart {
	c.cs = append(c.cs, start)
	return (XpendingFiltersStart)(c)
}

func (c SXpendingFiltersIdle) Start(start string) SXpendingFiltersStart {
	c.cs = append(c.cs, start)
	return (SXpendingFiltersStart)(c)
}

type XpendingFiltersStart Completed

type SXpendingFiltersStart SCompleted

func (c XpendingFiltersStart) End(end string) XpendingFiltersEnd {
	c.cs = append(c.cs, end)
	return (XpendingFiltersEnd)(c)
}

func (c SXpendingFiltersStart) End(end string) SXpendingFiltersEnd {
	c.cs = append(c.cs, end)
	return (SXpendingFiltersEnd)(c)
}

type XpendingGroup Completed

type SXpendingGroup SCompleted

func (c XpendingGroup) Idle(minIdleTime int64) XpendingFiltersIdle {
	c.cs = append(c.cs, "IDLE", strconv.FormatInt(minIdleTime, 10))
	return (XpendingFiltersIdle)(c)
}

func (c SXpendingGroup) Idle(minIdleTime int64) SXpendingFiltersIdle {
	c.cs = append(c.cs, "IDLE", strconv.FormatInt(minIdleTime, 10))
	return (SXpendingFiltersIdle)(c)
}

func (c XpendingGroup) Build() Completed {
	return Completed(c)
}

func (c SXpendingGroup) Build() SCompleted {
	return SCompleted(c)
}

type XpendingKey Completed

type SXpendingKey SCompleted

func (c XpendingKey) Group(group string) XpendingGroup {
	c.cs = append(c.cs, group)
	return (XpendingGroup)(c)
}

func (c SXpendingKey) Group(group string) SXpendingGroup {
	c.cs = append(c.cs, group)
	return (SXpendingGroup)(c)
}

type Xrange Completed

type SXrange SCompleted

func (b *Builder) Xrange() Xrange {
	return Xrange{cs: append(b.get(), "XRANGE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Xrange() SXrange {
	return SXrange{cs: append(b.get(), "XRANGE"), ks: InitSlot, cf: readonly}
}

func (c Xrange) Key(key string) XrangeKey {
	c.cs = append(c.cs, key)
	return (XrangeKey)(c)
}

func (c SXrange) Key(key string) SXrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXrangeKey)(c)
}

type XrangeCount Completed

type SXrangeCount SCompleted

func (c XrangeCount) Build() Completed {
	return Completed(c)
}

func (c SXrangeCount) Build() SCompleted {
	return SCompleted(c)
}

type XrangeEnd Completed

type SXrangeEnd SCompleted

func (c XrangeEnd) Count(count int64) XrangeCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (XrangeCount)(c)
}

func (c SXrangeEnd) Count(count int64) SXrangeCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SXrangeCount)(c)
}

func (c XrangeEnd) Build() Completed {
	return Completed(c)
}

func (c SXrangeEnd) Build() SCompleted {
	return SCompleted(c)
}

type XrangeKey Completed

type SXrangeKey SCompleted

func (c XrangeKey) Start(start string) XrangeStart {
	c.cs = append(c.cs, start)
	return (XrangeStart)(c)
}

func (c SXrangeKey) Start(start string) SXrangeStart {
	c.cs = append(c.cs, start)
	return (SXrangeStart)(c)
}

type XrangeStart Completed

type SXrangeStart SCompleted

func (c XrangeStart) End(end string) XrangeEnd {
	c.cs = append(c.cs, end)
	return (XrangeEnd)(c)
}

func (c SXrangeStart) End(end string) SXrangeEnd {
	c.cs = append(c.cs, end)
	return (SXrangeEnd)(c)
}

type Xread Completed

type SXread SCompleted

func (b *Builder) Xread() Xread {
	return Xread{cs: append(b.get(), "XREAD"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Xread() SXread {
	return SXread{cs: append(b.get(), "XREAD"), ks: InitSlot, cf: readonly}
}

func (c Xread) Count(count int64) XreadCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (XreadCount)(c)
}

func (c SXread) Count(count int64) SXreadCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SXreadCount)(c)
}

func (c Xread) Block(milliseconds int64) XreadBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadBlock)(c)
}

func (c SXread) Block(milliseconds int64) SXreadBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadBlock)(c)
}

func (c Xread) Streams() XreadStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadStreams)(c)
}

func (c SXread) Streams() SXreadStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadStreams)(c)
}

type XreadBlock Completed

type SXreadBlock SCompleted

func (c XreadBlock) Streams() XreadStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadStreams)(c)
}

func (c SXreadBlock) Streams() SXreadStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadStreams)(c)
}

type XreadCount Completed

type SXreadCount SCompleted

func (c XreadCount) Block(milliseconds int64) XreadBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadBlock)(c)
}

func (c SXreadCount) Block(milliseconds int64) SXreadBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadBlock)(c)
}

func (c XreadCount) Streams() XreadStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadStreams)(c)
}

func (c SXreadCount) Streams() SXreadStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadStreams)(c)
}

type XreadId Completed

type SXreadId SCompleted

func (c XreadId) Id(id ...string) XreadId {
	c.cs = append(c.cs, id...)
	return c
}

func (c SXreadId) Id(id ...string) SXreadId {
	c.cs = append(c.cs, id...)
	return c
}

func (c XreadId) Build() Completed {
	return Completed(c)
}

func (c SXreadId) Build() SCompleted {
	return SCompleted(c)
}

type XreadKey Completed

type SXreadKey SCompleted

func (c XreadKey) Key(key ...string) XreadKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SXreadKey) Key(key ...string) SXreadKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c XreadKey) Id(id ...string) XreadId {
	c.cs = append(c.cs, id...)
	return (XreadId)(c)
}

func (c SXreadKey) Id(id ...string) SXreadId {
	c.cs = append(c.cs, id...)
	return (SXreadId)(c)
}

type XreadStreams Completed

type SXreadStreams SCompleted

func (c XreadStreams) Key(key ...string) XreadKey {
	c.cs = append(c.cs, key...)
	return (XreadKey)(c)
}

func (c SXreadStreams) Key(key ...string) SXreadKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SXreadKey)(c)
}

type Xreadgroup Completed

type SXreadgroup SCompleted

func (b *Builder) Xreadgroup() Xreadgroup {
	return Xreadgroup{cs: append(b.get(), "XREADGROUP"), ks: InitSlot}
}

func (b *SBuilder) Xreadgroup() SXreadgroup {
	return SXreadgroup{cs: append(b.get(), "XREADGROUP"), ks: InitSlot}
}

func (c Xreadgroup) Group(group string, consumer string) XreadgroupGroup {
	c.cs = append(c.cs, "GROUP", group, consumer)
	return (XreadgroupGroup)(c)
}

func (c SXreadgroup) Group(group string, consumer string) SXreadgroupGroup {
	c.cs = append(c.cs, "GROUP", group, consumer)
	return (SXreadgroupGroup)(c)
}

type XreadgroupBlock Completed

type SXreadgroupBlock SCompleted

func (c XreadgroupBlock) Noack() XreadgroupNoack {
	c.cs = append(c.cs, "NOACK")
	return (XreadgroupNoack)(c)
}

func (c SXreadgroupBlock) Noack() SXreadgroupNoack {
	c.cs = append(c.cs, "NOACK")
	return (SXreadgroupNoack)(c)
}

func (c XreadgroupBlock) Streams() XreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupBlock) Streams() SXreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupCount Completed

type SXreadgroupCount SCompleted

func (c XreadgroupCount) Block(milliseconds int64) XreadgroupBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadgroupBlock)(c)
}

func (c SXreadgroupCount) Block(milliseconds int64) SXreadgroupBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadgroupBlock)(c)
}

func (c XreadgroupCount) Noack() XreadgroupNoack {
	c.cs = append(c.cs, "NOACK")
	return (XreadgroupNoack)(c)
}

func (c SXreadgroupCount) Noack() SXreadgroupNoack {
	c.cs = append(c.cs, "NOACK")
	return (SXreadgroupNoack)(c)
}

func (c XreadgroupCount) Streams() XreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupCount) Streams() SXreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupGroup Completed

type SXreadgroupGroup SCompleted

func (c XreadgroupGroup) Count(count int64) XreadgroupCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (XreadgroupCount)(c)
}

func (c SXreadgroupGroup) Count(count int64) SXreadgroupCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SXreadgroupCount)(c)
}

func (c XreadgroupGroup) Block(milliseconds int64) XreadgroupBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadgroupBlock)(c)
}

func (c SXreadgroupGroup) Block(milliseconds int64) SXreadgroupBlock {
	c.cf = blockTag
	c.cs = append(c.cs, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadgroupBlock)(c)
}

func (c XreadgroupGroup) Noack() XreadgroupNoack {
	c.cs = append(c.cs, "NOACK")
	return (XreadgroupNoack)(c)
}

func (c SXreadgroupGroup) Noack() SXreadgroupNoack {
	c.cs = append(c.cs, "NOACK")
	return (SXreadgroupNoack)(c)
}

func (c XreadgroupGroup) Streams() XreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupGroup) Streams() SXreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupId Completed

type SXreadgroupId SCompleted

func (c XreadgroupId) Id(id ...string) XreadgroupId {
	c.cs = append(c.cs, id...)
	return c
}

func (c SXreadgroupId) Id(id ...string) SXreadgroupId {
	c.cs = append(c.cs, id...)
	return c
}

func (c XreadgroupId) Build() Completed {
	return Completed(c)
}

func (c SXreadgroupId) Build() SCompleted {
	return SCompleted(c)
}

type XreadgroupKey Completed

type SXreadgroupKey SCompleted

func (c XreadgroupKey) Key(key ...string) XreadgroupKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SXreadgroupKey) Key(key ...string) SXreadgroupKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c XreadgroupKey) Id(id ...string) XreadgroupId {
	c.cs = append(c.cs, id...)
	return (XreadgroupId)(c)
}

func (c SXreadgroupKey) Id(id ...string) SXreadgroupId {
	c.cs = append(c.cs, id...)
	return (SXreadgroupId)(c)
}

type XreadgroupNoack Completed

type SXreadgroupNoack SCompleted

func (c XreadgroupNoack) Streams() XreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupNoack) Streams() SXreadgroupStreams {
	c.cs = append(c.cs, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupStreams Completed

type SXreadgroupStreams SCompleted

func (c XreadgroupStreams) Key(key ...string) XreadgroupKey {
	c.cs = append(c.cs, key...)
	return (XreadgroupKey)(c)
}

func (c SXreadgroupStreams) Key(key ...string) SXreadgroupKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SXreadgroupKey)(c)
}

type Xrevrange Completed

type SXrevrange SCompleted

func (b *Builder) Xrevrange() Xrevrange {
	return Xrevrange{cs: append(b.get(), "XREVRANGE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Xrevrange() SXrevrange {
	return SXrevrange{cs: append(b.get(), "XREVRANGE"), ks: InitSlot, cf: readonly}
}

func (c Xrevrange) Key(key string) XrevrangeKey {
	c.cs = append(c.cs, key)
	return (XrevrangeKey)(c)
}

func (c SXrevrange) Key(key string) SXrevrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXrevrangeKey)(c)
}

type XrevrangeCount Completed

type SXrevrangeCount SCompleted

func (c XrevrangeCount) Build() Completed {
	return Completed(c)
}

func (c SXrevrangeCount) Build() SCompleted {
	return SCompleted(c)
}

type XrevrangeEnd Completed

type SXrevrangeEnd SCompleted

func (c XrevrangeEnd) Start(start string) XrevrangeStart {
	c.cs = append(c.cs, start)
	return (XrevrangeStart)(c)
}

func (c SXrevrangeEnd) Start(start string) SXrevrangeStart {
	c.cs = append(c.cs, start)
	return (SXrevrangeStart)(c)
}

type XrevrangeKey Completed

type SXrevrangeKey SCompleted

func (c XrevrangeKey) End(end string) XrevrangeEnd {
	c.cs = append(c.cs, end)
	return (XrevrangeEnd)(c)
}

func (c SXrevrangeKey) End(end string) SXrevrangeEnd {
	c.cs = append(c.cs, end)
	return (SXrevrangeEnd)(c)
}

type XrevrangeStart Completed

type SXrevrangeStart SCompleted

func (c XrevrangeStart) Count(count int64) XrevrangeCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (XrevrangeCount)(c)
}

func (c SXrevrangeStart) Count(count int64) SXrevrangeCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SXrevrangeCount)(c)
}

func (c XrevrangeStart) Build() Completed {
	return Completed(c)
}

func (c SXrevrangeStart) Build() SCompleted {
	return SCompleted(c)
}

type Xtrim Completed

type SXtrim SCompleted

func (b *Builder) Xtrim() Xtrim {
	return Xtrim{cs: append(b.get(), "XTRIM"), ks: InitSlot}
}

func (b *SBuilder) Xtrim() SXtrim {
	return SXtrim{cs: append(b.get(), "XTRIM"), ks: InitSlot}
}

func (c Xtrim) Key(key string) XtrimKey {
	c.cs = append(c.cs, key)
	return (XtrimKey)(c)
}

func (c SXtrim) Key(key string) SXtrimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SXtrimKey)(c)
}

type XtrimKey Completed

type SXtrimKey SCompleted

func (c XtrimKey) Maxlen() XtrimTrimStrategyMaxlen {
	c.cs = append(c.cs, "MAXLEN")
	return (XtrimTrimStrategyMaxlen)(c)
}

func (c SXtrimKey) Maxlen() SXtrimTrimStrategyMaxlen {
	c.cs = append(c.cs, "MAXLEN")
	return (SXtrimTrimStrategyMaxlen)(c)
}

func (c XtrimKey) Minid() XtrimTrimStrategyMinid {
	c.cs = append(c.cs, "MINID")
	return (XtrimTrimStrategyMinid)(c)
}

func (c SXtrimKey) Minid() SXtrimTrimStrategyMinid {
	c.cs = append(c.cs, "MINID")
	return (SXtrimTrimStrategyMinid)(c)
}

type XtrimTrimLimit Completed

type SXtrimTrimLimit SCompleted

func (c XtrimTrimLimit) Build() Completed {
	return Completed(c)
}

func (c SXtrimTrimLimit) Build() SCompleted {
	return SCompleted(c)
}

type XtrimTrimOperatorAlmost Completed

type SXtrimTrimOperatorAlmost SCompleted

func (c XtrimTrimOperatorAlmost) Threshold(threshold string) XtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimOperatorAlmost) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimOperatorExact Completed

type SXtrimTrimOperatorExact SCompleted

func (c XtrimTrimOperatorExact) Threshold(threshold string) XtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimOperatorExact) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimStrategyMaxlen Completed

type SXtrimTrimStrategyMaxlen SCompleted

func (c XtrimTrimStrategyMaxlen) Exact() XtrimTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (XtrimTrimOperatorExact)(c)
}

func (c SXtrimTrimStrategyMaxlen) Exact() SXtrimTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (SXtrimTrimOperatorExact)(c)
}

func (c XtrimTrimStrategyMaxlen) Almost() XtrimTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (XtrimTrimOperatorAlmost)(c)
}

func (c SXtrimTrimStrategyMaxlen) Almost() SXtrimTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (SXtrimTrimOperatorAlmost)(c)
}

func (c XtrimTrimStrategyMaxlen) Threshold(threshold string) XtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimStrategyMaxlen) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimStrategyMinid Completed

type SXtrimTrimStrategyMinid SCompleted

func (c XtrimTrimStrategyMinid) Exact() XtrimTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (XtrimTrimOperatorExact)(c)
}

func (c SXtrimTrimStrategyMinid) Exact() SXtrimTrimOperatorExact {
	c.cs = append(c.cs, "=")
	return (SXtrimTrimOperatorExact)(c)
}

func (c XtrimTrimStrategyMinid) Almost() XtrimTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (XtrimTrimOperatorAlmost)(c)
}

func (c SXtrimTrimStrategyMinid) Almost() SXtrimTrimOperatorAlmost {
	c.cs = append(c.cs, "~")
	return (SXtrimTrimOperatorAlmost)(c)
}

func (c XtrimTrimStrategyMinid) Threshold(threshold string) XtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimStrategyMinid) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs = append(c.cs, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimThreshold Completed

type SXtrimTrimThreshold SCompleted

func (c XtrimTrimThreshold) Limit(count int64) XtrimTrimLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(count, 10))
	return (XtrimTrimLimit)(c)
}

func (c SXtrimTrimThreshold) Limit(count int64) SXtrimTrimLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(count, 10))
	return (SXtrimTrimLimit)(c)
}

func (c XtrimTrimThreshold) Build() Completed {
	return Completed(c)
}

func (c SXtrimTrimThreshold) Build() SCompleted {
	return SCompleted(c)
}

type Zadd Completed

type SZadd SCompleted

func (b *Builder) Zadd() Zadd {
	return Zadd{cs: append(b.get(), "ZADD"), ks: InitSlot}
}

func (b *SBuilder) Zadd() SZadd {
	return SZadd{cs: append(b.get(), "ZADD"), ks: InitSlot}
}

func (c Zadd) Key(key string) ZaddKey {
	c.cs = append(c.cs, key)
	return (ZaddKey)(c)
}

func (c SZadd) Key(key string) SZaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZaddKey)(c)
}

type ZaddChangeCh Completed

type SZaddChangeCh SCompleted

func (c ZaddChangeCh) Incr() ZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddChangeCh) Incr() SZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddChangeCh) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddChangeCh) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddComparisonGt Completed

type SZaddComparisonGt SCompleted

func (c ZaddComparisonGt) Ch() ZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddComparisonGt) Ch() SZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddComparisonGt) Incr() ZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddComparisonGt) Incr() SZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddComparisonGt) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddComparisonGt) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddComparisonLt Completed

type SZaddComparisonLt SCompleted

func (c ZaddComparisonLt) Ch() ZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddComparisonLt) Ch() SZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddComparisonLt) Incr() ZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddComparisonLt) Incr() SZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddComparisonLt) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddComparisonLt) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddConditionNx Completed

type SZaddConditionNx SCompleted

func (c ZaddConditionNx) Gt() ZaddComparisonGt {
	c.cs = append(c.cs, "GT")
	return (ZaddComparisonGt)(c)
}

func (c SZaddConditionNx) Gt() SZaddComparisonGt {
	c.cs = append(c.cs, "GT")
	return (SZaddComparisonGt)(c)
}

func (c ZaddConditionNx) Lt() ZaddComparisonLt {
	c.cs = append(c.cs, "LT")
	return (ZaddComparisonLt)(c)
}

func (c SZaddConditionNx) Lt() SZaddComparisonLt {
	c.cs = append(c.cs, "LT")
	return (SZaddComparisonLt)(c)
}

func (c ZaddConditionNx) Ch() ZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddConditionNx) Ch() SZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddConditionNx) Incr() ZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddConditionNx) Incr() SZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddConditionNx) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddConditionNx) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddConditionXx Completed

type SZaddConditionXx SCompleted

func (c ZaddConditionXx) Gt() ZaddComparisonGt {
	c.cs = append(c.cs, "GT")
	return (ZaddComparisonGt)(c)
}

func (c SZaddConditionXx) Gt() SZaddComparisonGt {
	c.cs = append(c.cs, "GT")
	return (SZaddComparisonGt)(c)
}

func (c ZaddConditionXx) Lt() ZaddComparisonLt {
	c.cs = append(c.cs, "LT")
	return (ZaddComparisonLt)(c)
}

func (c SZaddConditionXx) Lt() SZaddComparisonLt {
	c.cs = append(c.cs, "LT")
	return (SZaddComparisonLt)(c)
}

func (c ZaddConditionXx) Ch() ZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddConditionXx) Ch() SZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddConditionXx) Incr() ZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddConditionXx) Incr() SZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddConditionXx) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddConditionXx) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddIncrementIncr Completed

type SZaddIncrementIncr SCompleted

func (c ZaddIncrementIncr) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddIncrementIncr) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddKey Completed

type SZaddKey SCompleted

func (c ZaddKey) Nx() ZaddConditionNx {
	c.cs = append(c.cs, "NX")
	return (ZaddConditionNx)(c)
}

func (c SZaddKey) Nx() SZaddConditionNx {
	c.cs = append(c.cs, "NX")
	return (SZaddConditionNx)(c)
}

func (c ZaddKey) Xx() ZaddConditionXx {
	c.cs = append(c.cs, "XX")
	return (ZaddConditionXx)(c)
}

func (c SZaddKey) Xx() SZaddConditionXx {
	c.cs = append(c.cs, "XX")
	return (SZaddConditionXx)(c)
}

func (c ZaddKey) Gt() ZaddComparisonGt {
	c.cs = append(c.cs, "GT")
	return (ZaddComparisonGt)(c)
}

func (c SZaddKey) Gt() SZaddComparisonGt {
	c.cs = append(c.cs, "GT")
	return (SZaddComparisonGt)(c)
}

func (c ZaddKey) Lt() ZaddComparisonLt {
	c.cs = append(c.cs, "LT")
	return (ZaddComparisonLt)(c)
}

func (c SZaddKey) Lt() SZaddComparisonLt {
	c.cs = append(c.cs, "LT")
	return (SZaddComparisonLt)(c)
}

func (c ZaddKey) Ch() ZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddKey) Ch() SZaddChangeCh {
	c.cs = append(c.cs, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddKey) Incr() ZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddKey) Incr() SZaddIncrementIncr {
	c.cs = append(c.cs, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddKey) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddKey) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddScoreMember Completed

type SZaddScoreMember SCompleted

func (c ZaddScoreMember) ScoreMember(score float64, member string) ZaddScoreMember {
	c.cs = append(c.cs, strconv.FormatFloat(score, 'f', -1, 64), member)
	return c
}

func (c SZaddScoreMember) ScoreMember(score float64, member string) SZaddScoreMember {
	c.cs = append(c.cs, strconv.FormatFloat(score, 'f', -1, 64), member)
	return c
}

func (c ZaddScoreMember) Build() Completed {
	return Completed(c)
}

func (c SZaddScoreMember) Build() SCompleted {
	return SCompleted(c)
}

type Zcard Completed

type SZcard SCompleted

func (b *Builder) Zcard() Zcard {
	return Zcard{cs: append(b.get(), "ZCARD"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zcard() SZcard {
	return SZcard{cs: append(b.get(), "ZCARD"), ks: InitSlot, cf: readonly}
}

func (c Zcard) Key(key string) ZcardKey {
	c.cs = append(c.cs, key)
	return (ZcardKey)(c)
}

func (c SZcard) Key(key string) SZcardKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZcardKey)(c)
}

type ZcardKey Completed

type SZcardKey SCompleted

func (c ZcardKey) Build() Completed {
	return Completed(c)
}

func (c SZcardKey) Build() SCompleted {
	return SCompleted(c)
}

func (c ZcardKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZcardKey) Cache() SCacheable {
	return SCacheable(c)
}

type Zcount Completed

type SZcount SCompleted

func (b *Builder) Zcount() Zcount {
	return Zcount{cs: append(b.get(), "ZCOUNT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zcount() SZcount {
	return SZcount{cs: append(b.get(), "ZCOUNT"), ks: InitSlot, cf: readonly}
}

func (c Zcount) Key(key string) ZcountKey {
	c.cs = append(c.cs, key)
	return (ZcountKey)(c)
}

func (c SZcount) Key(key string) SZcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZcountKey)(c)
}

type ZcountKey Completed

type SZcountKey SCompleted

func (c ZcountKey) Min(min float64) ZcountMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZcountMin)(c)
}

func (c SZcountKey) Min(min float64) SZcountMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZcountMin)(c)
}

type ZcountMax Completed

type SZcountMax SCompleted

func (c ZcountMax) Build() Completed {
	return Completed(c)
}

func (c SZcountMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZcountMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZcountMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZcountMin Completed

type SZcountMin SCompleted

func (c ZcountMin) Max(max float64) ZcountMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZcountMax)(c)
}

func (c SZcountMin) Max(max float64) SZcountMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZcountMax)(c)
}

type Zdiff Completed

type SZdiff SCompleted

func (b *Builder) Zdiff() Zdiff {
	return Zdiff{cs: append(b.get(), "ZDIFF"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zdiff() SZdiff {
	return SZdiff{cs: append(b.get(), "ZDIFF"), ks: InitSlot, cf: readonly}
}

func (c Zdiff) Numkeys(numkeys int64) ZdiffNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZdiffNumkeys)(c)
}

func (c SZdiff) Numkeys(numkeys int64) SZdiffNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZdiffNumkeys)(c)
}

type ZdiffKey Completed

type SZdiffKey SCompleted

func (c ZdiffKey) Key(key ...string) ZdiffKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZdiffKey) Key(key ...string) SZdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZdiffKey) Withscores() ZdiffWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZdiffWithscores)(c)
}

func (c SZdiffKey) Withscores() SZdiffWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZdiffWithscores)(c)
}

func (c ZdiffKey) Build() Completed {
	return Completed(c)
}

func (c SZdiffKey) Build() SCompleted {
	return SCompleted(c)
}

type ZdiffNumkeys Completed

type SZdiffNumkeys SCompleted

func (c ZdiffNumkeys) Key(key ...string) ZdiffKey {
	c.cs = append(c.cs, key...)
	return (ZdiffKey)(c)
}

func (c SZdiffNumkeys) Key(key ...string) SZdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZdiffKey)(c)
}

type ZdiffWithscores Completed

type SZdiffWithscores SCompleted

func (c ZdiffWithscores) Build() Completed {
	return Completed(c)
}

func (c SZdiffWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zdiffstore Completed

type SZdiffstore SCompleted

func (b *Builder) Zdiffstore() Zdiffstore {
	return Zdiffstore{cs: append(b.get(), "ZDIFFSTORE"), ks: InitSlot}
}

func (b *SBuilder) Zdiffstore() SZdiffstore {
	return SZdiffstore{cs: append(b.get(), "ZDIFFSTORE"), ks: InitSlot}
}

func (c Zdiffstore) Destination(destination string) ZdiffstoreDestination {
	c.cs = append(c.cs, destination)
	return (ZdiffstoreDestination)(c)
}

func (c SZdiffstore) Destination(destination string) SZdiffstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SZdiffstoreDestination)(c)
}

type ZdiffstoreDestination Completed

type SZdiffstoreDestination SCompleted

func (c ZdiffstoreDestination) Numkeys(numkeys int64) ZdiffstoreNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZdiffstoreNumkeys)(c)
}

func (c SZdiffstoreDestination) Numkeys(numkeys int64) SZdiffstoreNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZdiffstoreNumkeys)(c)
}

type ZdiffstoreKey Completed

type SZdiffstoreKey SCompleted

func (c ZdiffstoreKey) Key(key ...string) ZdiffstoreKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZdiffstoreKey) Key(key ...string) SZdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZdiffstoreKey) Build() Completed {
	return Completed(c)
}

func (c SZdiffstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type ZdiffstoreNumkeys Completed

type SZdiffstoreNumkeys SCompleted

func (c ZdiffstoreNumkeys) Key(key ...string) ZdiffstoreKey {
	c.cs = append(c.cs, key...)
	return (ZdiffstoreKey)(c)
}

func (c SZdiffstoreNumkeys) Key(key ...string) SZdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZdiffstoreKey)(c)
}

type Zincrby Completed

type SZincrby SCompleted

func (b *Builder) Zincrby() Zincrby {
	return Zincrby{cs: append(b.get(), "ZINCRBY"), ks: InitSlot}
}

func (b *SBuilder) Zincrby() SZincrby {
	return SZincrby{cs: append(b.get(), "ZINCRBY"), ks: InitSlot}
}

func (c Zincrby) Key(key string) ZincrbyKey {
	c.cs = append(c.cs, key)
	return (ZincrbyKey)(c)
}

func (c SZincrby) Key(key string) SZincrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZincrbyKey)(c)
}

type ZincrbyIncrement Completed

type SZincrbyIncrement SCompleted

func (c ZincrbyIncrement) Member(member string) ZincrbyMember {
	c.cs = append(c.cs, member)
	return (ZincrbyMember)(c)
}

func (c SZincrbyIncrement) Member(member string) SZincrbyMember {
	c.cs = append(c.cs, member)
	return (SZincrbyMember)(c)
}

type ZincrbyKey Completed

type SZincrbyKey SCompleted

func (c ZincrbyKey) Increment(increment int64) ZincrbyIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (ZincrbyIncrement)(c)
}

func (c SZincrbyKey) Increment(increment int64) SZincrbyIncrement {
	c.cs = append(c.cs, strconv.FormatInt(increment, 10))
	return (SZincrbyIncrement)(c)
}

type ZincrbyMember Completed

type SZincrbyMember SCompleted

func (c ZincrbyMember) Build() Completed {
	return Completed(c)
}

func (c SZincrbyMember) Build() SCompleted {
	return SCompleted(c)
}

type Zinter Completed

type SZinter SCompleted

func (b *Builder) Zinter() Zinter {
	return Zinter{cs: append(b.get(), "ZINTER"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zinter() SZinter {
	return SZinter{cs: append(b.get(), "ZINTER"), ks: InitSlot, cf: readonly}
}

func (c Zinter) Numkeys(numkeys int64) ZinterNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZinterNumkeys)(c)
}

func (c SZinter) Numkeys(numkeys int64) SZinterNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZinterNumkeys)(c)
}

type ZinterAggregateMax Completed

type SZinterAggregateMax SCompleted

func (c ZinterAggregateMax) Withscores() ZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterAggregateMax) Withscores() SZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZinterAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZinterAggregateMin Completed

type SZinterAggregateMin SCompleted

func (c ZinterAggregateMin) Withscores() ZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterAggregateMin) Withscores() SZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZinterAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZinterAggregateSum Completed

type SZinterAggregateSum SCompleted

func (c ZinterAggregateSum) Withscores() ZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterAggregateSum) Withscores() SZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZinterAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZinterKey Completed

type SZinterKey SCompleted

func (c ZinterKey) Key(key ...string) ZinterKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZinterKey) Key(key ...string) SZinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZinterKey) Weights(weight ...int64) ZinterWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ZinterWeights)(c)
}

func (c SZinterKey) Weights(weight ...int64) SZinterWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SZinterWeights)(c)
}

func (c ZinterKey) AggregateSum() ZinterAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZinterAggregateSum)(c)
}

func (c SZinterKey) AggregateSum() SZinterAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZinterAggregateSum)(c)
}

func (c ZinterKey) AggregateMin() ZinterAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZinterAggregateMin)(c)
}

func (c SZinterKey) AggregateMin() SZinterAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZinterAggregateMin)(c)
}

func (c ZinterKey) AggregateMax() ZinterAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZinterAggregateMax)(c)
}

func (c SZinterKey) AggregateMax() SZinterAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZinterAggregateMax)(c)
}

func (c ZinterKey) Withscores() ZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterKey) Withscores() SZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterKey) Build() Completed {
	return Completed(c)
}

func (c SZinterKey) Build() SCompleted {
	return SCompleted(c)
}

type ZinterNumkeys Completed

type SZinterNumkeys SCompleted

func (c ZinterNumkeys) Key(key ...string) ZinterKey {
	c.cs = append(c.cs, key...)
	return (ZinterKey)(c)
}

func (c SZinterNumkeys) Key(key ...string) SZinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZinterKey)(c)
}

type ZinterWeights Completed

type SZinterWeights SCompleted

func (c ZinterWeights) Weights(weight ...int64) ZinterWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZinterWeights) Weights(weight ...int64) SZinterWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZinterWeights) AggregateSum() ZinterAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZinterAggregateSum)(c)
}

func (c SZinterWeights) AggregateSum() SZinterAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZinterAggregateSum)(c)
}

func (c ZinterWeights) AggregateMin() ZinterAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZinterAggregateMin)(c)
}

func (c SZinterWeights) AggregateMin() SZinterAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZinterAggregateMin)(c)
}

func (c ZinterWeights) AggregateMax() ZinterAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZinterAggregateMax)(c)
}

func (c SZinterWeights) AggregateMax() SZinterAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZinterAggregateMax)(c)
}

func (c ZinterWeights) Withscores() ZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterWeights) Withscores() SZinterWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterWeights) Build() Completed {
	return Completed(c)
}

func (c SZinterWeights) Build() SCompleted {
	return SCompleted(c)
}

type ZinterWithscores Completed

type SZinterWithscores SCompleted

func (c ZinterWithscores) Build() Completed {
	return Completed(c)
}

func (c SZinterWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zintercard Completed

type SZintercard SCompleted

func (b *Builder) Zintercard() Zintercard {
	return Zintercard{cs: append(b.get(), "ZINTERCARD"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zintercard() SZintercard {
	return SZintercard{cs: append(b.get(), "ZINTERCARD"), ks: InitSlot, cf: readonly}
}

func (c Zintercard) Numkeys(numkeys int64) ZintercardNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZintercardNumkeys)(c)
}

func (c SZintercard) Numkeys(numkeys int64) SZintercardNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZintercardNumkeys)(c)
}

type ZintercardKey Completed

type SZintercardKey SCompleted

func (c ZintercardKey) Key(key ...string) ZintercardKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZintercardKey) Key(key ...string) SZintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZintercardKey) Limit(limit int64) ZintercardLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(limit, 10))
	return (ZintercardLimit)(c)
}

func (c SZintercardKey) Limit(limit int64) SZintercardLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(limit, 10))
	return (SZintercardLimit)(c)
}

func (c ZintercardKey) Build() Completed {
	return Completed(c)
}

func (c SZintercardKey) Build() SCompleted {
	return SCompleted(c)
}

type ZintercardLimit Completed

type SZintercardLimit SCompleted

func (c ZintercardLimit) Build() Completed {
	return Completed(c)
}

func (c SZintercardLimit) Build() SCompleted {
	return SCompleted(c)
}

type ZintercardNumkeys Completed

type SZintercardNumkeys SCompleted

func (c ZintercardNumkeys) Key(key ...string) ZintercardKey {
	c.cs = append(c.cs, key...)
	return (ZintercardKey)(c)
}

func (c SZintercardNumkeys) Key(key ...string) SZintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZintercardKey)(c)
}

type Zinterstore Completed

type SZinterstore SCompleted

func (b *Builder) Zinterstore() Zinterstore {
	return Zinterstore{cs: append(b.get(), "ZINTERSTORE"), ks: InitSlot}
}

func (b *SBuilder) Zinterstore() SZinterstore {
	return SZinterstore{cs: append(b.get(), "ZINTERSTORE"), ks: InitSlot}
}

func (c Zinterstore) Destination(destination string) ZinterstoreDestination {
	c.cs = append(c.cs, destination)
	return (ZinterstoreDestination)(c)
}

func (c SZinterstore) Destination(destination string) SZinterstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SZinterstoreDestination)(c)
}

type ZinterstoreAggregateMax Completed

type SZinterstoreAggregateMax SCompleted

func (c ZinterstoreAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreAggregateMin Completed

type SZinterstoreAggregateMin SCompleted

func (c ZinterstoreAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreAggregateSum Completed

type SZinterstoreAggregateSum SCompleted

func (c ZinterstoreAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreDestination Completed

type SZinterstoreDestination SCompleted

func (c ZinterstoreDestination) Numkeys(numkeys int64) ZinterstoreNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZinterstoreNumkeys)(c)
}

func (c SZinterstoreDestination) Numkeys(numkeys int64) SZinterstoreNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZinterstoreNumkeys)(c)
}

type ZinterstoreKey Completed

type SZinterstoreKey SCompleted

func (c ZinterstoreKey) Key(key ...string) ZinterstoreKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZinterstoreKey) Key(key ...string) SZinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZinterstoreKey) Weights(weight ...int64) ZinterstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ZinterstoreWeights)(c)
}

func (c SZinterstoreKey) Weights(weight ...int64) SZinterstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SZinterstoreWeights)(c)
}

func (c ZinterstoreKey) AggregateSum() ZinterstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZinterstoreAggregateSum)(c)
}

func (c SZinterstoreKey) AggregateSum() SZinterstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZinterstoreAggregateSum)(c)
}

func (c ZinterstoreKey) AggregateMin() ZinterstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZinterstoreAggregateMin)(c)
}

func (c SZinterstoreKey) AggregateMin() SZinterstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZinterstoreAggregateMin)(c)
}

func (c ZinterstoreKey) AggregateMax() ZinterstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZinterstoreAggregateMax)(c)
}

func (c SZinterstoreKey) AggregateMax() SZinterstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZinterstoreAggregateMax)(c)
}

func (c ZinterstoreKey) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreNumkeys Completed

type SZinterstoreNumkeys SCompleted

func (c ZinterstoreNumkeys) Key(key ...string) ZinterstoreKey {
	c.cs = append(c.cs, key...)
	return (ZinterstoreKey)(c)
}

func (c SZinterstoreNumkeys) Key(key ...string) SZinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZinterstoreKey)(c)
}

type ZinterstoreWeights Completed

type SZinterstoreWeights SCompleted

func (c ZinterstoreWeights) Weights(weight ...int64) ZinterstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZinterstoreWeights) Weights(weight ...int64) SZinterstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZinterstoreWeights) AggregateSum() ZinterstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZinterstoreAggregateSum)(c)
}

func (c SZinterstoreWeights) AggregateSum() SZinterstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZinterstoreAggregateSum)(c)
}

func (c ZinterstoreWeights) AggregateMin() ZinterstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZinterstoreAggregateMin)(c)
}

func (c SZinterstoreWeights) AggregateMin() SZinterstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZinterstoreAggregateMin)(c)
}

func (c ZinterstoreWeights) AggregateMax() ZinterstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZinterstoreAggregateMax)(c)
}

func (c SZinterstoreWeights) AggregateMax() SZinterstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZinterstoreAggregateMax)(c)
}

func (c ZinterstoreWeights) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreWeights) Build() SCompleted {
	return SCompleted(c)
}

type Zlexcount Completed

type SZlexcount SCompleted

func (b *Builder) Zlexcount() Zlexcount {
	return Zlexcount{cs: append(b.get(), "ZLEXCOUNT"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zlexcount() SZlexcount {
	return SZlexcount{cs: append(b.get(), "ZLEXCOUNT"), ks: InitSlot, cf: readonly}
}

func (c Zlexcount) Key(key string) ZlexcountKey {
	c.cs = append(c.cs, key)
	return (ZlexcountKey)(c)
}

func (c SZlexcount) Key(key string) SZlexcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZlexcountKey)(c)
}

type ZlexcountKey Completed

type SZlexcountKey SCompleted

func (c ZlexcountKey) Min(min string) ZlexcountMin {
	c.cs = append(c.cs, min)
	return (ZlexcountMin)(c)
}

func (c SZlexcountKey) Min(min string) SZlexcountMin {
	c.cs = append(c.cs, min)
	return (SZlexcountMin)(c)
}

type ZlexcountMax Completed

type SZlexcountMax SCompleted

func (c ZlexcountMax) Build() Completed {
	return Completed(c)
}

func (c SZlexcountMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZlexcountMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZlexcountMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZlexcountMin Completed

type SZlexcountMin SCompleted

func (c ZlexcountMin) Max(max string) ZlexcountMax {
	c.cs = append(c.cs, max)
	return (ZlexcountMax)(c)
}

func (c SZlexcountMin) Max(max string) SZlexcountMax {
	c.cs = append(c.cs, max)
	return (SZlexcountMax)(c)
}

type Zmpop Completed

type SZmpop SCompleted

func (b *Builder) Zmpop() Zmpop {
	return Zmpop{cs: append(b.get(), "ZMPOP"), ks: InitSlot}
}

func (b *SBuilder) Zmpop() SZmpop {
	return SZmpop{cs: append(b.get(), "ZMPOP"), ks: InitSlot}
}

func (c Zmpop) Numkeys(numkeys int64) ZmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZmpopNumkeys)(c)
}

func (c SZmpop) Numkeys(numkeys int64) SZmpopNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZmpopNumkeys)(c)
}

type ZmpopCount Completed

type SZmpopCount SCompleted

func (c ZmpopCount) Build() Completed {
	return Completed(c)
}

func (c SZmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type ZmpopKey Completed

type SZmpopKey SCompleted

func (c ZmpopKey) Key(key ...string) ZmpopKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZmpopKey) Key(key ...string) SZmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZmpopKey) Min() ZmpopWhereMin {
	c.cs = append(c.cs, "MIN")
	return (ZmpopWhereMin)(c)
}

func (c SZmpopKey) Min() SZmpopWhereMin {
	c.cs = append(c.cs, "MIN")
	return (SZmpopWhereMin)(c)
}

func (c ZmpopKey) Max() ZmpopWhereMax {
	c.cs = append(c.cs, "MAX")
	return (ZmpopWhereMax)(c)
}

func (c SZmpopKey) Max() SZmpopWhereMax {
	c.cs = append(c.cs, "MAX")
	return (SZmpopWhereMax)(c)
}

type ZmpopNumkeys Completed

type SZmpopNumkeys SCompleted

func (c ZmpopNumkeys) Key(key ...string) ZmpopKey {
	c.cs = append(c.cs, key...)
	return (ZmpopKey)(c)
}

func (c SZmpopNumkeys) Key(key ...string) SZmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZmpopKey)(c)
}

type ZmpopWhereMax Completed

type SZmpopWhereMax SCompleted

func (c ZmpopWhereMax) Count(count int64) ZmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (ZmpopCount)(c)
}

func (c SZmpopWhereMax) Count(count int64) SZmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SZmpopCount)(c)
}

func (c ZmpopWhereMax) Build() Completed {
	return Completed(c)
}

func (c SZmpopWhereMax) Build() SCompleted {
	return SCompleted(c)
}

type ZmpopWhereMin Completed

type SZmpopWhereMin SCompleted

func (c ZmpopWhereMin) Count(count int64) ZmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (ZmpopCount)(c)
}

func (c SZmpopWhereMin) Count(count int64) SZmpopCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SZmpopCount)(c)
}

func (c ZmpopWhereMin) Build() Completed {
	return Completed(c)
}

func (c SZmpopWhereMin) Build() SCompleted {
	return SCompleted(c)
}

type Zmscore Completed

type SZmscore SCompleted

func (b *Builder) Zmscore() Zmscore {
	return Zmscore{cs: append(b.get(), "ZMSCORE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zmscore() SZmscore {
	return SZmscore{cs: append(b.get(), "ZMSCORE"), ks: InitSlot, cf: readonly}
}

func (c Zmscore) Key(key string) ZmscoreKey {
	c.cs = append(c.cs, key)
	return (ZmscoreKey)(c)
}

func (c SZmscore) Key(key string) SZmscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZmscoreKey)(c)
}

type ZmscoreKey Completed

type SZmscoreKey SCompleted

func (c ZmscoreKey) Member(member ...string) ZmscoreMember {
	c.cs = append(c.cs, member...)
	return (ZmscoreMember)(c)
}

func (c SZmscoreKey) Member(member ...string) SZmscoreMember {
	c.cs = append(c.cs, member...)
	return (SZmscoreMember)(c)
}

type ZmscoreMember Completed

type SZmscoreMember SCompleted

func (c ZmscoreMember) Member(member ...string) ZmscoreMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SZmscoreMember) Member(member ...string) SZmscoreMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c ZmscoreMember) Build() Completed {
	return Completed(c)
}

func (c SZmscoreMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZmscoreMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZmscoreMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zpopmax Completed

type SZpopmax SCompleted

func (b *Builder) Zpopmax() Zpopmax {
	return Zpopmax{cs: append(b.get(), "ZPOPMAX"), ks: InitSlot}
}

func (b *SBuilder) Zpopmax() SZpopmax {
	return SZpopmax{cs: append(b.get(), "ZPOPMAX"), ks: InitSlot}
}

func (c Zpopmax) Key(key string) ZpopmaxKey {
	c.cs = append(c.cs, key)
	return (ZpopmaxKey)(c)
}

func (c SZpopmax) Key(key string) SZpopmaxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZpopmaxKey)(c)
}

type ZpopmaxCount Completed

type SZpopmaxCount SCompleted

func (c ZpopmaxCount) Build() Completed {
	return Completed(c)
}

func (c SZpopmaxCount) Build() SCompleted {
	return SCompleted(c)
}

type ZpopmaxKey Completed

type SZpopmaxKey SCompleted

func (c ZpopmaxKey) Count(count int64) ZpopmaxCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (ZpopmaxCount)(c)
}

func (c SZpopmaxKey) Count(count int64) SZpopmaxCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SZpopmaxCount)(c)
}

func (c ZpopmaxKey) Build() Completed {
	return Completed(c)
}

func (c SZpopmaxKey) Build() SCompleted {
	return SCompleted(c)
}

type Zpopmin Completed

type SZpopmin SCompleted

func (b *Builder) Zpopmin() Zpopmin {
	return Zpopmin{cs: append(b.get(), "ZPOPMIN"), ks: InitSlot}
}

func (b *SBuilder) Zpopmin() SZpopmin {
	return SZpopmin{cs: append(b.get(), "ZPOPMIN"), ks: InitSlot}
}

func (c Zpopmin) Key(key string) ZpopminKey {
	c.cs = append(c.cs, key)
	return (ZpopminKey)(c)
}

func (c SZpopmin) Key(key string) SZpopminKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZpopminKey)(c)
}

type ZpopminCount Completed

type SZpopminCount SCompleted

func (c ZpopminCount) Build() Completed {
	return Completed(c)
}

func (c SZpopminCount) Build() SCompleted {
	return SCompleted(c)
}

type ZpopminKey Completed

type SZpopminKey SCompleted

func (c ZpopminKey) Count(count int64) ZpopminCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (ZpopminCount)(c)
}

func (c SZpopminKey) Count(count int64) SZpopminCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SZpopminCount)(c)
}

func (c ZpopminKey) Build() Completed {
	return Completed(c)
}

func (c SZpopminKey) Build() SCompleted {
	return SCompleted(c)
}

type Zrandmember Completed

type SZrandmember SCompleted

func (b *Builder) Zrandmember() Zrandmember {
	return Zrandmember{cs: append(b.get(), "ZRANDMEMBER"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrandmember() SZrandmember {
	return SZrandmember{cs: append(b.get(), "ZRANDMEMBER"), ks: InitSlot, cf: readonly}
}

func (c Zrandmember) Key(key string) ZrandmemberKey {
	c.cs = append(c.cs, key)
	return (ZrandmemberKey)(c)
}

func (c SZrandmember) Key(key string) SZrandmemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrandmemberKey)(c)
}

type ZrandmemberKey Completed

type SZrandmemberKey SCompleted

func (c ZrandmemberKey) Count(count int64) ZrandmemberOptionsCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (ZrandmemberOptionsCount)(c)
}

func (c SZrandmemberKey) Count(count int64) SZrandmemberOptionsCount {
	c.cs = append(c.cs, strconv.FormatInt(count, 10))
	return (SZrandmemberOptionsCount)(c)
}

func (c ZrandmemberKey) Build() Completed {
	return Completed(c)
}

func (c SZrandmemberKey) Build() SCompleted {
	return SCompleted(c)
}

type ZrandmemberOptionsCount Completed

type SZrandmemberOptionsCount SCompleted

func (c ZrandmemberOptionsCount) Withscores() ZrandmemberOptionsWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrandmemberOptionsWithscores)(c)
}

func (c SZrandmemberOptionsCount) Withscores() SZrandmemberOptionsWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrandmemberOptionsWithscores)(c)
}

func (c ZrandmemberOptionsCount) Build() Completed {
	return Completed(c)
}

func (c SZrandmemberOptionsCount) Build() SCompleted {
	return SCompleted(c)
}

type ZrandmemberOptionsWithscores Completed

type SZrandmemberOptionsWithscores SCompleted

func (c ZrandmemberOptionsWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrandmemberOptionsWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zrange Completed

type SZrange SCompleted

func (b *Builder) Zrange() Zrange {
	return Zrange{cs: append(b.get(), "ZRANGE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrange() SZrange {
	return SZrange{cs: append(b.get(), "ZRANGE"), ks: InitSlot, cf: readonly}
}

func (c Zrange) Key(key string) ZrangeKey {
	c.cs = append(c.cs, key)
	return (ZrangeKey)(c)
}

func (c SZrange) Key(key string) SZrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrangeKey)(c)
}

type ZrangeKey Completed

type SZrangeKey SCompleted

func (c ZrangeKey) Min(min string) ZrangeMin {
	c.cs = append(c.cs, min)
	return (ZrangeMin)(c)
}

func (c SZrangeKey) Min(min string) SZrangeMin {
	c.cs = append(c.cs, min)
	return (SZrangeMin)(c)
}

type ZrangeLimit Completed

type SZrangeLimit SCompleted

func (c ZrangeLimit) Withscores() ZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeLimit) Withscores() SZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangeLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeMax Completed

type SZrangeMax SCompleted

func (c ZrangeMax) Byscore() ZrangeSortbyByscore {
	c.cs = append(c.cs, "BYSCORE")
	return (ZrangeSortbyByscore)(c)
}

func (c SZrangeMax) Byscore() SZrangeSortbyByscore {
	c.cs = append(c.cs, "BYSCORE")
	return (SZrangeSortbyByscore)(c)
}

func (c ZrangeMax) Bylex() ZrangeSortbyBylex {
	c.cs = append(c.cs, "BYLEX")
	return (ZrangeSortbyBylex)(c)
}

func (c SZrangeMax) Bylex() SZrangeSortbyBylex {
	c.cs = append(c.cs, "BYLEX")
	return (SZrangeSortbyBylex)(c)
}

func (c ZrangeMax) Rev() ZrangeRev {
	c.cs = append(c.cs, "REV")
	return (ZrangeRev)(c)
}

func (c SZrangeMax) Rev() SZrangeRev {
	c.cs = append(c.cs, "REV")
	return (SZrangeRev)(c)
}

func (c ZrangeMax) Limit(offset int64, count int64) ZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeMax) Limit(offset int64, count int64) SZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeMax) Withscores() ZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeMax) Withscores() SZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeMax) Build() Completed {
	return Completed(c)
}

func (c SZrangeMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeMin Completed

type SZrangeMin SCompleted

func (c ZrangeMin) Max(max string) ZrangeMax {
	c.cs = append(c.cs, max)
	return (ZrangeMax)(c)
}

func (c SZrangeMin) Max(max string) SZrangeMax {
	c.cs = append(c.cs, max)
	return (SZrangeMax)(c)
}

type ZrangeRev Completed

type SZrangeRev SCompleted

func (c ZrangeRev) Limit(offset int64, count int64) ZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeRev) Limit(offset int64, count int64) SZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeRev) Withscores() ZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeRev) Withscores() SZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeRev) Build() Completed {
	return Completed(c)
}

func (c SZrangeRev) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeRev) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeRev) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeSortbyBylex Completed

type SZrangeSortbyBylex SCompleted

func (c ZrangeSortbyBylex) Rev() ZrangeRev {
	c.cs = append(c.cs, "REV")
	return (ZrangeRev)(c)
}

func (c SZrangeSortbyBylex) Rev() SZrangeRev {
	c.cs = append(c.cs, "REV")
	return (SZrangeRev)(c)
}

func (c ZrangeSortbyBylex) Limit(offset int64, count int64) ZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeSortbyBylex) Limit(offset int64, count int64) SZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeSortbyBylex) Withscores() ZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeSortbyBylex) Withscores() SZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeSortbyBylex) Build() Completed {
	return Completed(c)
}

func (c SZrangeSortbyBylex) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeSortbyBylex) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeSortbyBylex) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeSortbyByscore Completed

type SZrangeSortbyByscore SCompleted

func (c ZrangeSortbyByscore) Rev() ZrangeRev {
	c.cs = append(c.cs, "REV")
	return (ZrangeRev)(c)
}

func (c SZrangeSortbyByscore) Rev() SZrangeRev {
	c.cs = append(c.cs, "REV")
	return (SZrangeRev)(c)
}

func (c ZrangeSortbyByscore) Limit(offset int64, count int64) ZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeSortbyByscore) Limit(offset int64, count int64) SZrangeLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeSortbyByscore) Withscores() ZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeSortbyByscore) Withscores() SZrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeSortbyByscore) Build() Completed {
	return Completed(c)
}

func (c SZrangeSortbyByscore) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeSortbyByscore) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeSortbyByscore) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeWithscores Completed

type SZrangeWithscores SCompleted

func (c ZrangeWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrangeWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrangebylex Completed

type SZrangebylex SCompleted

func (b *Builder) Zrangebylex() Zrangebylex {
	return Zrangebylex{cs: append(b.get(), "ZRANGEBYLEX"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrangebylex() SZrangebylex {
	return SZrangebylex{cs: append(b.get(), "ZRANGEBYLEX"), ks: InitSlot, cf: readonly}
}

func (c Zrangebylex) Key(key string) ZrangebylexKey {
	c.cs = append(c.cs, key)
	return (ZrangebylexKey)(c)
}

func (c SZrangebylex) Key(key string) SZrangebylexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrangebylexKey)(c)
}

type ZrangebylexKey Completed

type SZrangebylexKey SCompleted

func (c ZrangebylexKey) Min(min string) ZrangebylexMin {
	c.cs = append(c.cs, min)
	return (ZrangebylexMin)(c)
}

func (c SZrangebylexKey) Min(min string) SZrangebylexMin {
	c.cs = append(c.cs, min)
	return (SZrangebylexMin)(c)
}

type ZrangebylexLimit Completed

type SZrangebylexLimit SCompleted

func (c ZrangebylexLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangebylexLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebylexLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebylexLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebylexMax Completed

type SZrangebylexMax SCompleted

func (c ZrangebylexMax) Limit(offset int64, count int64) ZrangebylexLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangebylexLimit)(c)
}

func (c SZrangebylexMax) Limit(offset int64, count int64) SZrangebylexLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangebylexLimit)(c)
}

func (c ZrangebylexMax) Build() Completed {
	return Completed(c)
}

func (c SZrangebylexMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebylexMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebylexMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebylexMin Completed

type SZrangebylexMin SCompleted

func (c ZrangebylexMin) Max(max string) ZrangebylexMax {
	c.cs = append(c.cs, max)
	return (ZrangebylexMax)(c)
}

func (c SZrangebylexMin) Max(max string) SZrangebylexMax {
	c.cs = append(c.cs, max)
	return (SZrangebylexMax)(c)
}

type Zrangebyscore Completed

type SZrangebyscore SCompleted

func (b *Builder) Zrangebyscore() Zrangebyscore {
	return Zrangebyscore{cs: append(b.get(), "ZRANGEBYSCORE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrangebyscore() SZrangebyscore {
	return SZrangebyscore{cs: append(b.get(), "ZRANGEBYSCORE"), ks: InitSlot, cf: readonly}
}

func (c Zrangebyscore) Key(key string) ZrangebyscoreKey {
	c.cs = append(c.cs, key)
	return (ZrangebyscoreKey)(c)
}

func (c SZrangebyscore) Key(key string) SZrangebyscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrangebyscoreKey)(c)
}

type ZrangebyscoreKey Completed

type SZrangebyscoreKey SCompleted

func (c ZrangebyscoreKey) Min(min float64) ZrangebyscoreMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZrangebyscoreMin)(c)
}

func (c SZrangebyscoreKey) Min(min float64) SZrangebyscoreMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZrangebyscoreMin)(c)
}

type ZrangebyscoreLimit Completed

type SZrangebyscoreLimit SCompleted

func (c ZrangebyscoreLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangebyscoreLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebyscoreLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebyscoreLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebyscoreMax Completed

type SZrangebyscoreMax SCompleted

func (c ZrangebyscoreMax) Withscores() ZrangebyscoreWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrangebyscoreWithscores)(c)
}

func (c SZrangebyscoreMax) Withscores() SZrangebyscoreWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrangebyscoreWithscores)(c)
}

func (c ZrangebyscoreMax) Limit(offset int64, count int64) ZrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangebyscoreLimit)(c)
}

func (c SZrangebyscoreMax) Limit(offset int64, count int64) SZrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangebyscoreLimit)(c)
}

func (c ZrangebyscoreMax) Build() Completed {
	return Completed(c)
}

func (c SZrangebyscoreMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebyscoreMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebyscoreMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebyscoreMin Completed

type SZrangebyscoreMin SCompleted

func (c ZrangebyscoreMin) Max(max float64) ZrangebyscoreMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZrangebyscoreMax)(c)
}

func (c SZrangebyscoreMin) Max(max float64) SZrangebyscoreMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZrangebyscoreMax)(c)
}

type ZrangebyscoreWithscores Completed

type SZrangebyscoreWithscores SCompleted

func (c ZrangebyscoreWithscores) Limit(offset int64, count int64) ZrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangebyscoreLimit)(c)
}

func (c SZrangebyscoreWithscores) Limit(offset int64, count int64) SZrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangebyscoreLimit)(c)
}

func (c ZrangebyscoreWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrangebyscoreWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebyscoreWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebyscoreWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrangestore Completed

type SZrangestore SCompleted

func (b *Builder) Zrangestore() Zrangestore {
	return Zrangestore{cs: append(b.get(), "ZRANGESTORE"), ks: InitSlot}
}

func (b *SBuilder) Zrangestore() SZrangestore {
	return SZrangestore{cs: append(b.get(), "ZRANGESTORE"), ks: InitSlot}
}

func (c Zrangestore) Dst(dst string) ZrangestoreDst {
	c.cs = append(c.cs, dst)
	return (ZrangestoreDst)(c)
}

func (c SZrangestore) Dst(dst string) SZrangestoreDst {
	c.ks = checkSlot(c.ks, slot(dst))
	c.cs = append(c.cs, dst)
	return (SZrangestoreDst)(c)
}

type ZrangestoreDst Completed

type SZrangestoreDst SCompleted

func (c ZrangestoreDst) Src(src string) ZrangestoreSrc {
	c.cs = append(c.cs, src)
	return (ZrangestoreSrc)(c)
}

func (c SZrangestoreDst) Src(src string) SZrangestoreSrc {
	c.ks = checkSlot(c.ks, slot(src))
	c.cs = append(c.cs, src)
	return (SZrangestoreSrc)(c)
}

type ZrangestoreLimit Completed

type SZrangestoreLimit SCompleted

func (c ZrangestoreLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreLimit) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreMax Completed

type SZrangestoreMax SCompleted

func (c ZrangestoreMax) Byscore() ZrangestoreSortbyByscore {
	c.cs = append(c.cs, "BYSCORE")
	return (ZrangestoreSortbyByscore)(c)
}

func (c SZrangestoreMax) Byscore() SZrangestoreSortbyByscore {
	c.cs = append(c.cs, "BYSCORE")
	return (SZrangestoreSortbyByscore)(c)
}

func (c ZrangestoreMax) Bylex() ZrangestoreSortbyBylex {
	c.cs = append(c.cs, "BYLEX")
	return (ZrangestoreSortbyBylex)(c)
}

func (c SZrangestoreMax) Bylex() SZrangestoreSortbyBylex {
	c.cs = append(c.cs, "BYLEX")
	return (SZrangestoreSortbyBylex)(c)
}

func (c ZrangestoreMax) Rev() ZrangestoreRev {
	c.cs = append(c.cs, "REV")
	return (ZrangestoreRev)(c)
}

func (c SZrangestoreMax) Rev() SZrangestoreRev {
	c.cs = append(c.cs, "REV")
	return (SZrangestoreRev)(c)
}

func (c ZrangestoreMax) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreMax) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreMax) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreMax) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreMin Completed

type SZrangestoreMin SCompleted

func (c ZrangestoreMin) Max(max string) ZrangestoreMax {
	c.cs = append(c.cs, max)
	return (ZrangestoreMax)(c)
}

func (c SZrangestoreMin) Max(max string) SZrangestoreMax {
	c.cs = append(c.cs, max)
	return (SZrangestoreMax)(c)
}

type ZrangestoreRev Completed

type SZrangestoreRev SCompleted

func (c ZrangestoreRev) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreRev) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreRev) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreRev) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreSortbyBylex Completed

type SZrangestoreSortbyBylex SCompleted

func (c ZrangestoreSortbyBylex) Rev() ZrangestoreRev {
	c.cs = append(c.cs, "REV")
	return (ZrangestoreRev)(c)
}

func (c SZrangestoreSortbyBylex) Rev() SZrangestoreRev {
	c.cs = append(c.cs, "REV")
	return (SZrangestoreRev)(c)
}

func (c ZrangestoreSortbyBylex) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreSortbyBylex) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreSortbyBylex) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreSortbyBylex) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreSortbyByscore Completed

type SZrangestoreSortbyByscore SCompleted

func (c ZrangestoreSortbyByscore) Rev() ZrangestoreRev {
	c.cs = append(c.cs, "REV")
	return (ZrangestoreRev)(c)
}

func (c SZrangestoreSortbyByscore) Rev() SZrangestoreRev {
	c.cs = append(c.cs, "REV")
	return (SZrangestoreRev)(c)
}

func (c ZrangestoreSortbyByscore) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreSortbyByscore) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreSortbyByscore) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreSortbyByscore) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreSrc Completed

type SZrangestoreSrc SCompleted

func (c ZrangestoreSrc) Min(min string) ZrangestoreMin {
	c.cs = append(c.cs, min)
	return (ZrangestoreMin)(c)
}

func (c SZrangestoreSrc) Min(min string) SZrangestoreMin {
	c.cs = append(c.cs, min)
	return (SZrangestoreMin)(c)
}

type Zrank Completed

type SZrank SCompleted

func (b *Builder) Zrank() Zrank {
	return Zrank{cs: append(b.get(), "ZRANK"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrank() SZrank {
	return SZrank{cs: append(b.get(), "ZRANK"), ks: InitSlot, cf: readonly}
}

func (c Zrank) Key(key string) ZrankKey {
	c.cs = append(c.cs, key)
	return (ZrankKey)(c)
}

func (c SZrank) Key(key string) SZrankKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrankKey)(c)
}

type ZrankKey Completed

type SZrankKey SCompleted

func (c ZrankKey) Member(member string) ZrankMember {
	c.cs = append(c.cs, member)
	return (ZrankMember)(c)
}

func (c SZrankKey) Member(member string) SZrankMember {
	c.cs = append(c.cs, member)
	return (SZrankMember)(c)
}

type ZrankMember Completed

type SZrankMember SCompleted

func (c ZrankMember) Build() Completed {
	return Completed(c)
}

func (c SZrankMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrankMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrankMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zrem Completed

type SZrem SCompleted

func (b *Builder) Zrem() Zrem {
	return Zrem{cs: append(b.get(), "ZREM"), ks: InitSlot}
}

func (b *SBuilder) Zrem() SZrem {
	return SZrem{cs: append(b.get(), "ZREM"), ks: InitSlot}
}

func (c Zrem) Key(key string) ZremKey {
	c.cs = append(c.cs, key)
	return (ZremKey)(c)
}

func (c SZrem) Key(key string) SZremKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZremKey)(c)
}

type ZremKey Completed

type SZremKey SCompleted

func (c ZremKey) Member(member ...string) ZremMember {
	c.cs = append(c.cs, member...)
	return (ZremMember)(c)
}

func (c SZremKey) Member(member ...string) SZremMember {
	c.cs = append(c.cs, member...)
	return (SZremMember)(c)
}

type ZremMember Completed

type SZremMember SCompleted

func (c ZremMember) Member(member ...string) ZremMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c SZremMember) Member(member ...string) SZremMember {
	c.cs = append(c.cs, member...)
	return c
}

func (c ZremMember) Build() Completed {
	return Completed(c)
}

func (c SZremMember) Build() SCompleted {
	return SCompleted(c)
}

type Zremrangebylex Completed

type SZremrangebylex SCompleted

func (b *Builder) Zremrangebylex() Zremrangebylex {
	return Zremrangebylex{cs: append(b.get(), "ZREMRANGEBYLEX"), ks: InitSlot}
}

func (b *SBuilder) Zremrangebylex() SZremrangebylex {
	return SZremrangebylex{cs: append(b.get(), "ZREMRANGEBYLEX"), ks: InitSlot}
}

func (c Zremrangebylex) Key(key string) ZremrangebylexKey {
	c.cs = append(c.cs, key)
	return (ZremrangebylexKey)(c)
}

func (c SZremrangebylex) Key(key string) SZremrangebylexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZremrangebylexKey)(c)
}

type ZremrangebylexKey Completed

type SZremrangebylexKey SCompleted

func (c ZremrangebylexKey) Min(min string) ZremrangebylexMin {
	c.cs = append(c.cs, min)
	return (ZremrangebylexMin)(c)
}

func (c SZremrangebylexKey) Min(min string) SZremrangebylexMin {
	c.cs = append(c.cs, min)
	return (SZremrangebylexMin)(c)
}

type ZremrangebylexMax Completed

type SZremrangebylexMax SCompleted

func (c ZremrangebylexMax) Build() Completed {
	return Completed(c)
}

func (c SZremrangebylexMax) Build() SCompleted {
	return SCompleted(c)
}

type ZremrangebylexMin Completed

type SZremrangebylexMin SCompleted

func (c ZremrangebylexMin) Max(max string) ZremrangebylexMax {
	c.cs = append(c.cs, max)
	return (ZremrangebylexMax)(c)
}

func (c SZremrangebylexMin) Max(max string) SZremrangebylexMax {
	c.cs = append(c.cs, max)
	return (SZremrangebylexMax)(c)
}

type Zremrangebyrank Completed

type SZremrangebyrank SCompleted

func (b *Builder) Zremrangebyrank() Zremrangebyrank {
	return Zremrangebyrank{cs: append(b.get(), "ZREMRANGEBYRANK"), ks: InitSlot}
}

func (b *SBuilder) Zremrangebyrank() SZremrangebyrank {
	return SZremrangebyrank{cs: append(b.get(), "ZREMRANGEBYRANK"), ks: InitSlot}
}

func (c Zremrangebyrank) Key(key string) ZremrangebyrankKey {
	c.cs = append(c.cs, key)
	return (ZremrangebyrankKey)(c)
}

func (c SZremrangebyrank) Key(key string) SZremrangebyrankKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZremrangebyrankKey)(c)
}

type ZremrangebyrankKey Completed

type SZremrangebyrankKey SCompleted

func (c ZremrangebyrankKey) Start(start int64) ZremrangebyrankStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (ZremrangebyrankStart)(c)
}

func (c SZremrangebyrankKey) Start(start int64) SZremrangebyrankStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SZremrangebyrankStart)(c)
}

type ZremrangebyrankStart Completed

type SZremrangebyrankStart SCompleted

func (c ZremrangebyrankStart) Stop(stop int64) ZremrangebyrankStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (ZremrangebyrankStop)(c)
}

func (c SZremrangebyrankStart) Stop(stop int64) SZremrangebyrankStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (SZremrangebyrankStop)(c)
}

type ZremrangebyrankStop Completed

type SZremrangebyrankStop SCompleted

func (c ZremrangebyrankStop) Build() Completed {
	return Completed(c)
}

func (c SZremrangebyrankStop) Build() SCompleted {
	return SCompleted(c)
}

type Zremrangebyscore Completed

type SZremrangebyscore SCompleted

func (b *Builder) Zremrangebyscore() Zremrangebyscore {
	return Zremrangebyscore{cs: append(b.get(), "ZREMRANGEBYSCORE"), ks: InitSlot}
}

func (b *SBuilder) Zremrangebyscore() SZremrangebyscore {
	return SZremrangebyscore{cs: append(b.get(), "ZREMRANGEBYSCORE"), ks: InitSlot}
}

func (c Zremrangebyscore) Key(key string) ZremrangebyscoreKey {
	c.cs = append(c.cs, key)
	return (ZremrangebyscoreKey)(c)
}

func (c SZremrangebyscore) Key(key string) SZremrangebyscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZremrangebyscoreKey)(c)
}

type ZremrangebyscoreKey Completed

type SZremrangebyscoreKey SCompleted

func (c ZremrangebyscoreKey) Min(min float64) ZremrangebyscoreMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZremrangebyscoreMin)(c)
}

func (c SZremrangebyscoreKey) Min(min float64) SZremrangebyscoreMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZremrangebyscoreMin)(c)
}

type ZremrangebyscoreMax Completed

type SZremrangebyscoreMax SCompleted

func (c ZremrangebyscoreMax) Build() Completed {
	return Completed(c)
}

func (c SZremrangebyscoreMax) Build() SCompleted {
	return SCompleted(c)
}

type ZremrangebyscoreMin Completed

type SZremrangebyscoreMin SCompleted

func (c ZremrangebyscoreMin) Max(max float64) ZremrangebyscoreMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZremrangebyscoreMax)(c)
}

func (c SZremrangebyscoreMin) Max(max float64) SZremrangebyscoreMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZremrangebyscoreMax)(c)
}

type Zrevrange Completed

type SZrevrange SCompleted

func (b *Builder) Zrevrange() Zrevrange {
	return Zrevrange{cs: append(b.get(), "ZREVRANGE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrevrange() SZrevrange {
	return SZrevrange{cs: append(b.get(), "ZREVRANGE"), ks: InitSlot, cf: readonly}
}

func (c Zrevrange) Key(key string) ZrevrangeKey {
	c.cs = append(c.cs, key)
	return (ZrevrangeKey)(c)
}

func (c SZrevrange) Key(key string) SZrevrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrevrangeKey)(c)
}

type ZrevrangeKey Completed

type SZrevrangeKey SCompleted

func (c ZrevrangeKey) Start(start int64) ZrevrangeStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (ZrevrangeStart)(c)
}

func (c SZrevrangeKey) Start(start int64) SZrevrangeStart {
	c.cs = append(c.cs, strconv.FormatInt(start, 10))
	return (SZrevrangeStart)(c)
}

type ZrevrangeStart Completed

type SZrevrangeStart SCompleted

func (c ZrevrangeStart) Stop(stop int64) ZrevrangeStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (ZrevrangeStop)(c)
}

func (c SZrevrangeStart) Stop(stop int64) SZrevrangeStop {
	c.cs = append(c.cs, strconv.FormatInt(stop, 10))
	return (SZrevrangeStop)(c)
}

type ZrevrangeStop Completed

type SZrevrangeStop SCompleted

func (c ZrevrangeStop) Withscores() ZrevrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrevrangeWithscores)(c)
}

func (c SZrevrangeStop) Withscores() SZrevrangeWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrevrangeWithscores)(c)
}

func (c ZrevrangeStop) Build() Completed {
	return Completed(c)
}

func (c SZrevrangeStop) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangeStop) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangeStop) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangeWithscores Completed

type SZrevrangeWithscores SCompleted

func (c ZrevrangeWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrevrangeWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangeWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangeWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrevrangebylex Completed

type SZrevrangebylex SCompleted

func (b *Builder) Zrevrangebylex() Zrevrangebylex {
	return Zrevrangebylex{cs: append(b.get(), "ZREVRANGEBYLEX"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrevrangebylex() SZrevrangebylex {
	return SZrevrangebylex{cs: append(b.get(), "ZREVRANGEBYLEX"), ks: InitSlot, cf: readonly}
}

func (c Zrevrangebylex) Key(key string) ZrevrangebylexKey {
	c.cs = append(c.cs, key)
	return (ZrevrangebylexKey)(c)
}

func (c SZrevrangebylex) Key(key string) SZrevrangebylexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrevrangebylexKey)(c)
}

type ZrevrangebylexKey Completed

type SZrevrangebylexKey SCompleted

func (c ZrevrangebylexKey) Max(max string) ZrevrangebylexMax {
	c.cs = append(c.cs, max)
	return (ZrevrangebylexMax)(c)
}

func (c SZrevrangebylexKey) Max(max string) SZrevrangebylexMax {
	c.cs = append(c.cs, max)
	return (SZrevrangebylexMax)(c)
}

type ZrevrangebylexLimit Completed

type SZrevrangebylexLimit SCompleted

func (c ZrevrangebylexLimit) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebylexLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebylexLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebylexLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangebylexMax Completed

type SZrevrangebylexMax SCompleted

func (c ZrevrangebylexMax) Min(min string) ZrevrangebylexMin {
	c.cs = append(c.cs, min)
	return (ZrevrangebylexMin)(c)
}

func (c SZrevrangebylexMax) Min(min string) SZrevrangebylexMin {
	c.cs = append(c.cs, min)
	return (SZrevrangebylexMin)(c)
}

type ZrevrangebylexMin Completed

type SZrevrangebylexMin SCompleted

func (c ZrevrangebylexMin) Limit(offset int64, count int64) ZrevrangebylexLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrevrangebylexLimit)(c)
}

func (c SZrevrangebylexMin) Limit(offset int64, count int64) SZrevrangebylexLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrevrangebylexLimit)(c)
}

func (c ZrevrangebylexMin) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebylexMin) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebylexMin) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebylexMin) Cache() SCacheable {
	return SCacheable(c)
}

type Zrevrangebyscore Completed

type SZrevrangebyscore SCompleted

func (b *Builder) Zrevrangebyscore() Zrevrangebyscore {
	return Zrevrangebyscore{cs: append(b.get(), "ZREVRANGEBYSCORE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrevrangebyscore() SZrevrangebyscore {
	return SZrevrangebyscore{cs: append(b.get(), "ZREVRANGEBYSCORE"), ks: InitSlot, cf: readonly}
}

func (c Zrevrangebyscore) Key(key string) ZrevrangebyscoreKey {
	c.cs = append(c.cs, key)
	return (ZrevrangebyscoreKey)(c)
}

func (c SZrevrangebyscore) Key(key string) SZrevrangebyscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrevrangebyscoreKey)(c)
}

type ZrevrangebyscoreKey Completed

type SZrevrangebyscoreKey SCompleted

func (c ZrevrangebyscoreKey) Max(max float64) ZrevrangebyscoreMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZrevrangebyscoreMax)(c)
}

func (c SZrevrangebyscoreKey) Max(max float64) SZrevrangebyscoreMax {
	c.cs = append(c.cs, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZrevrangebyscoreMax)(c)
}

type ZrevrangebyscoreLimit Completed

type SZrevrangebyscoreLimit SCompleted

func (c ZrevrangebyscoreLimit) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebyscoreLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebyscoreLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebyscoreLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangebyscoreMax Completed

type SZrevrangebyscoreMax SCompleted

func (c ZrevrangebyscoreMax) Min(min float64) ZrevrangebyscoreMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZrevrangebyscoreMin)(c)
}

func (c SZrevrangebyscoreMax) Min(min float64) SZrevrangebyscoreMin {
	c.cs = append(c.cs, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZrevrangebyscoreMin)(c)
}

type ZrevrangebyscoreMin Completed

type SZrevrangebyscoreMin SCompleted

func (c ZrevrangebyscoreMin) Withscores() ZrevrangebyscoreWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZrevrangebyscoreWithscores)(c)
}

func (c SZrevrangebyscoreMin) Withscores() SZrevrangebyscoreWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZrevrangebyscoreWithscores)(c)
}

func (c ZrevrangebyscoreMin) Limit(offset int64, count int64) ZrevrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrevrangebyscoreLimit)(c)
}

func (c SZrevrangebyscoreMin) Limit(offset int64, count int64) SZrevrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrevrangebyscoreLimit)(c)
}

func (c ZrevrangebyscoreMin) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebyscoreMin) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebyscoreMin) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebyscoreMin) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangebyscoreWithscores Completed

type SZrevrangebyscoreWithscores SCompleted

func (c ZrevrangebyscoreWithscores) Limit(offset int64, count int64) ZrevrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrevrangebyscoreLimit)(c)
}

func (c SZrevrangebyscoreWithscores) Limit(offset int64, count int64) SZrevrangebyscoreLimit {
	c.cs = append(c.cs, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrevrangebyscoreLimit)(c)
}

func (c ZrevrangebyscoreWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebyscoreWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebyscoreWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebyscoreWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrevrank Completed

type SZrevrank SCompleted

func (b *Builder) Zrevrank() Zrevrank {
	return Zrevrank{cs: append(b.get(), "ZREVRANK"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zrevrank() SZrevrank {
	return SZrevrank{cs: append(b.get(), "ZREVRANK"), ks: InitSlot, cf: readonly}
}

func (c Zrevrank) Key(key string) ZrevrankKey {
	c.cs = append(c.cs, key)
	return (ZrevrankKey)(c)
}

func (c SZrevrank) Key(key string) SZrevrankKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZrevrankKey)(c)
}

type ZrevrankKey Completed

type SZrevrankKey SCompleted

func (c ZrevrankKey) Member(member string) ZrevrankMember {
	c.cs = append(c.cs, member)
	return (ZrevrankMember)(c)
}

func (c SZrevrankKey) Member(member string) SZrevrankMember {
	c.cs = append(c.cs, member)
	return (SZrevrankMember)(c)
}

type ZrevrankMember Completed

type SZrevrankMember SCompleted

func (c ZrevrankMember) Build() Completed {
	return Completed(c)
}

func (c SZrevrankMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrankMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrankMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zscan Completed

type SZscan SCompleted

func (b *Builder) Zscan() Zscan {
	return Zscan{cs: append(b.get(), "ZSCAN"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zscan() SZscan {
	return SZscan{cs: append(b.get(), "ZSCAN"), ks: InitSlot, cf: readonly}
}

func (c Zscan) Key(key string) ZscanKey {
	c.cs = append(c.cs, key)
	return (ZscanKey)(c)
}

func (c SZscan) Key(key string) SZscanKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZscanKey)(c)
}

type ZscanCount Completed

type SZscanCount SCompleted

func (c ZscanCount) Build() Completed {
	return Completed(c)
}

func (c SZscanCount) Build() SCompleted {
	return SCompleted(c)
}

type ZscanCursor Completed

type SZscanCursor SCompleted

func (c ZscanCursor) Match(pattern string) ZscanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (ZscanMatch)(c)
}

func (c SZscanCursor) Match(pattern string) SZscanMatch {
	c.cs = append(c.cs, "MATCH", pattern)
	return (SZscanMatch)(c)
}

func (c ZscanCursor) Count(count int64) ZscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (ZscanCount)(c)
}

func (c SZscanCursor) Count(count int64) SZscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SZscanCount)(c)
}

func (c ZscanCursor) Build() Completed {
	return Completed(c)
}

func (c SZscanCursor) Build() SCompleted {
	return SCompleted(c)
}

type ZscanKey Completed

type SZscanKey SCompleted

func (c ZscanKey) Cursor(cursor int64) ZscanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (ZscanCursor)(c)
}

func (c SZscanKey) Cursor(cursor int64) SZscanCursor {
	c.cs = append(c.cs, strconv.FormatInt(cursor, 10))
	return (SZscanCursor)(c)
}

type ZscanMatch Completed

type SZscanMatch SCompleted

func (c ZscanMatch) Count(count int64) ZscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (ZscanCount)(c)
}

func (c SZscanMatch) Count(count int64) SZscanCount {
	c.cs = append(c.cs, "COUNT", strconv.FormatInt(count, 10))
	return (SZscanCount)(c)
}

func (c ZscanMatch) Build() Completed {
	return Completed(c)
}

func (c SZscanMatch) Build() SCompleted {
	return SCompleted(c)
}

type Zscore Completed

type SZscore SCompleted

func (b *Builder) Zscore() Zscore {
	return Zscore{cs: append(b.get(), "ZSCORE"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zscore() SZscore {
	return SZscore{cs: append(b.get(), "ZSCORE"), ks: InitSlot, cf: readonly}
}

func (c Zscore) Key(key string) ZscoreKey {
	c.cs = append(c.cs, key)
	return (ZscoreKey)(c)
}

func (c SZscore) Key(key string) SZscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs = append(c.cs, key)
	return (SZscoreKey)(c)
}

type ZscoreKey Completed

type SZscoreKey SCompleted

func (c ZscoreKey) Member(member string) ZscoreMember {
	c.cs = append(c.cs, member)
	return (ZscoreMember)(c)
}

func (c SZscoreKey) Member(member string) SZscoreMember {
	c.cs = append(c.cs, member)
	return (SZscoreMember)(c)
}

type ZscoreMember Completed

type SZscoreMember SCompleted

func (c ZscoreMember) Build() Completed {
	return Completed(c)
}

func (c SZscoreMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZscoreMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZscoreMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zunion Completed

type SZunion SCompleted

func (b *Builder) Zunion() Zunion {
	return Zunion{cs: append(b.get(), "ZUNION"), ks: InitSlot, cf: readonly}
}

func (b *SBuilder) Zunion() SZunion {
	return SZunion{cs: append(b.get(), "ZUNION"), ks: InitSlot, cf: readonly}
}

func (c Zunion) Numkeys(numkeys int64) ZunionNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZunionNumkeys)(c)
}

func (c SZunion) Numkeys(numkeys int64) SZunionNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZunionNumkeys)(c)
}

type ZunionAggregateMax Completed

type SZunionAggregateMax SCompleted

func (c ZunionAggregateMax) Withscores() ZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionAggregateMax) Withscores() SZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZunionAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZunionAggregateMin Completed

type SZunionAggregateMin SCompleted

func (c ZunionAggregateMin) Withscores() ZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionAggregateMin) Withscores() SZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZunionAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZunionAggregateSum Completed

type SZunionAggregateSum SCompleted

func (c ZunionAggregateSum) Withscores() ZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionAggregateSum) Withscores() SZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZunionAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZunionKey Completed

type SZunionKey SCompleted

func (c ZunionKey) Key(key ...string) ZunionKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZunionKey) Key(key ...string) SZunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZunionKey) Weights(weight ...int64) ZunionWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ZunionWeights)(c)
}

func (c SZunionKey) Weights(weight ...int64) SZunionWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SZunionWeights)(c)
}

func (c ZunionKey) AggregateSum() ZunionAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZunionAggregateSum)(c)
}

func (c SZunionKey) AggregateSum() SZunionAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZunionAggregateSum)(c)
}

func (c ZunionKey) AggregateMin() ZunionAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZunionAggregateMin)(c)
}

func (c SZunionKey) AggregateMin() SZunionAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZunionAggregateMin)(c)
}

func (c ZunionKey) AggregateMax() ZunionAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZunionAggregateMax)(c)
}

func (c SZunionKey) AggregateMax() SZunionAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZunionAggregateMax)(c)
}

func (c ZunionKey) Withscores() ZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionKey) Withscores() SZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionKey) Build() Completed {
	return Completed(c)
}

func (c SZunionKey) Build() SCompleted {
	return SCompleted(c)
}

type ZunionNumkeys Completed

type SZunionNumkeys SCompleted

func (c ZunionNumkeys) Key(key ...string) ZunionKey {
	c.cs = append(c.cs, key...)
	return (ZunionKey)(c)
}

func (c SZunionNumkeys) Key(key ...string) SZunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZunionKey)(c)
}

type ZunionWeights Completed

type SZunionWeights SCompleted

func (c ZunionWeights) Weights(weight ...int64) ZunionWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZunionWeights) Weights(weight ...int64) SZunionWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZunionWeights) AggregateSum() ZunionAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZunionAggregateSum)(c)
}

func (c SZunionWeights) AggregateSum() SZunionAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZunionAggregateSum)(c)
}

func (c ZunionWeights) AggregateMin() ZunionAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZunionAggregateMin)(c)
}

func (c SZunionWeights) AggregateMin() SZunionAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZunionAggregateMin)(c)
}

func (c ZunionWeights) AggregateMax() ZunionAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZunionAggregateMax)(c)
}

func (c SZunionWeights) AggregateMax() SZunionAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZunionAggregateMax)(c)
}

func (c ZunionWeights) Withscores() ZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionWeights) Withscores() SZunionWithscores {
	c.cs = append(c.cs, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionWeights) Build() Completed {
	return Completed(c)
}

func (c SZunionWeights) Build() SCompleted {
	return SCompleted(c)
}

type ZunionWithscores Completed

type SZunionWithscores SCompleted

func (c ZunionWithscores) Build() Completed {
	return Completed(c)
}

func (c SZunionWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zunionstore Completed

type SZunionstore SCompleted

func (b *Builder) Zunionstore() Zunionstore {
	return Zunionstore{cs: append(b.get(), "ZUNIONSTORE"), ks: InitSlot}
}

func (b *SBuilder) Zunionstore() SZunionstore {
	return SZunionstore{cs: append(b.get(), "ZUNIONSTORE"), ks: InitSlot}
}

func (c Zunionstore) Destination(destination string) ZunionstoreDestination {
	c.cs = append(c.cs, destination)
	return (ZunionstoreDestination)(c)
}

func (c SZunionstore) Destination(destination string) SZunionstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs = append(c.cs, destination)
	return (SZunionstoreDestination)(c)
}

type ZunionstoreAggregateMax Completed

type SZunionstoreAggregateMax SCompleted

func (c ZunionstoreAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreAggregateMin Completed

type SZunionstoreAggregateMin SCompleted

func (c ZunionstoreAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreAggregateSum Completed

type SZunionstoreAggregateSum SCompleted

func (c ZunionstoreAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreDestination Completed

type SZunionstoreDestination SCompleted

func (c ZunionstoreDestination) Numkeys(numkeys int64) ZunionstoreNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (ZunionstoreNumkeys)(c)
}

func (c SZunionstoreDestination) Numkeys(numkeys int64) SZunionstoreNumkeys {
	c.cs = append(c.cs, strconv.FormatInt(numkeys, 10))
	return (SZunionstoreNumkeys)(c)
}

type ZunionstoreKey Completed

type SZunionstoreKey SCompleted

func (c ZunionstoreKey) Key(key ...string) ZunionstoreKey {
	c.cs = append(c.cs, key...)
	return c
}

func (c SZunionstoreKey) Key(key ...string) SZunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return c
}

func (c ZunionstoreKey) Weights(weight ...int64) ZunionstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (ZunionstoreWeights)(c)
}

func (c SZunionstoreKey) Weights(weight ...int64) SZunionstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return (SZunionstoreWeights)(c)
}

func (c ZunionstoreKey) AggregateSum() ZunionstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZunionstoreAggregateSum)(c)
}

func (c SZunionstoreKey) AggregateSum() SZunionstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZunionstoreAggregateSum)(c)
}

func (c ZunionstoreKey) AggregateMin() ZunionstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZunionstoreAggregateMin)(c)
}

func (c SZunionstoreKey) AggregateMin() SZunionstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZunionstoreAggregateMin)(c)
}

func (c ZunionstoreKey) AggregateMax() ZunionstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZunionstoreAggregateMax)(c)
}

func (c SZunionstoreKey) AggregateMax() SZunionstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZunionstoreAggregateMax)(c)
}

func (c ZunionstoreKey) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreNumkeys Completed

type SZunionstoreNumkeys SCompleted

func (c ZunionstoreNumkeys) Key(key ...string) ZunionstoreKey {
	c.cs = append(c.cs, key...)
	return (ZunionstoreKey)(c)
}

func (c SZunionstoreNumkeys) Key(key ...string) SZunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs = append(c.cs, key...)
	return (SZunionstoreKey)(c)
}

type ZunionstoreWeights Completed

type SZunionstoreWeights SCompleted

func (c ZunionstoreWeights) Weights(weight ...int64) ZunionstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZunionstoreWeights) Weights(weight ...int64) SZunionstoreWeights {
	c.cs = append(c.cs, "WEIGHTS")
	for _, n := range weight {
		c.cs = append(c.cs, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZunionstoreWeights) AggregateSum() ZunionstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (ZunionstoreAggregateSum)(c)
}

func (c SZunionstoreWeights) AggregateSum() SZunionstoreAggregateSum {
	c.cs = append(c.cs, "AGGREGATE", "SUM")
	return (SZunionstoreAggregateSum)(c)
}

func (c ZunionstoreWeights) AggregateMin() ZunionstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (ZunionstoreAggregateMin)(c)
}

func (c SZunionstoreWeights) AggregateMin() SZunionstoreAggregateMin {
	c.cs = append(c.cs, "AGGREGATE", "MIN")
	return (SZunionstoreAggregateMin)(c)
}

func (c ZunionstoreWeights) AggregateMax() ZunionstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (ZunionstoreAggregateMax)(c)
}

func (c SZunionstoreWeights) AggregateMax() SZunionstoreAggregateMax {
	c.cs = append(c.cs, "AGGREGATE", "MAX")
	return (SZunionstoreAggregateMax)(c)
}

func (c ZunionstoreWeights) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreWeights) Build() SCompleted {
	return SCompleted(c)
}

