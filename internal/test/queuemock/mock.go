// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rueian/rueidis/internal/queue (interfaces: Queue)

// Package queuemock is a generated GoMock package.
package queuemock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/rueian/rueidis/internal/proto"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// NextCmd mocks base method.
func (m *MockQueue) NextCmd() [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextCmd")
	ret0, _ := ret[0].([][]string)
	return ret0
}

// NextCmd indicates an expected call of NextCmd.
func (mr *MockQueueMockRecorder) NextCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextCmd", reflect.TypeOf((*MockQueue)(nil).NextCmd))
}

// NextResultCh mocks base method.
func (m *MockQueue) NextResultCh() ([][]string, chan proto.Result) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextResultCh")
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(chan proto.Result)
	return ret0, ret1
}

// NextResultCh indicates an expected call of NextResultCh.
func (mr *MockQueueMockRecorder) NextResultCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextResultCh", reflect.TypeOf((*MockQueue)(nil).NextResultCh))
}

// PutOne mocks base method.
func (m *MockQueue) PutOne(arg0 []string) chan proto.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOne", arg0)
	ret0, _ := ret[0].(chan proto.Result)
	return ret0
}

// PutOne indicates an expected call of PutOne.
func (mr *MockQueueMockRecorder) PutOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOne", reflect.TypeOf((*MockQueue)(nil).PutOne), arg0)
}
