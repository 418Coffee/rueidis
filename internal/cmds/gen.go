// Code generated DO NOT EDIT

package cmds

import "strconv"

type AclCat Completed

type SAclCat SCompleted

func (b *Builder) AclCat() (c AclCat) {
	c = AclCat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "CAT")
	return c
}

func (b *SBuilder) AclCat() (c SAclCat) {
	c = SAclCat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "CAT")
	return c
}

func (c AclCat) Categoryname(categoryname string) AclCatCategoryname {
	c.cs.s = append(c.cs.s, categoryname)
	return (AclCatCategoryname)(c)
}

func (c SAclCat) Categoryname(categoryname string) SAclCatCategoryname {
	c.cs.s = append(c.cs.s, categoryname)
	return (SAclCatCategoryname)(c)
}

func (c AclCat) Build() Completed {
	return Completed(c)
}

func (c SAclCat) Build() SCompleted {
	return SCompleted(c)
}

type AclCatCategoryname Completed

type SAclCatCategoryname SCompleted

func (c AclCatCategoryname) Build() Completed {
	return Completed(c)
}

func (c SAclCatCategoryname) Build() SCompleted {
	return SCompleted(c)
}

type AclDeluser Completed

type SAclDeluser SCompleted

func (b *Builder) AclDeluser() (c AclDeluser) {
	c = AclDeluser{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "DELUSER")
	return c
}

func (b *SBuilder) AclDeluser() (c SAclDeluser) {
	c = SAclDeluser{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "DELUSER")
	return c
}

func (c AclDeluser) Username(username ...string) AclDeluserUsername {
	c.cs.s = append(c.cs.s, username...)
	return (AclDeluserUsername)(c)
}

func (c SAclDeluser) Username(username ...string) SAclDeluserUsername {
	c.cs.s = append(c.cs.s, username...)
	return (SAclDeluserUsername)(c)
}

type AclDeluserUsername Completed

type SAclDeluserUsername SCompleted

func (c AclDeluserUsername) Username(username ...string) AclDeluserUsername {
	c.cs.s = append(c.cs.s, username...)
	return c
}

func (c SAclDeluserUsername) Username(username ...string) SAclDeluserUsername {
	c.cs.s = append(c.cs.s, username...)
	return c
}

func (c AclDeluserUsername) Build() Completed {
	return Completed(c)
}

func (c SAclDeluserUsername) Build() SCompleted {
	return SCompleted(c)
}

type AclGenpass Completed

type SAclGenpass SCompleted

func (b *Builder) AclGenpass() (c AclGenpass) {
	c = AclGenpass{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "GENPASS")
	return c
}

func (b *SBuilder) AclGenpass() (c SAclGenpass) {
	c = SAclGenpass{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "GENPASS")
	return c
}

func (c AclGenpass) Bits(bits int64) AclGenpassBits {
	c.cs.s = append(c.cs.s, strconv.FormatInt(bits, 10))
	return (AclGenpassBits)(c)
}

func (c SAclGenpass) Bits(bits int64) SAclGenpassBits {
	c.cs.s = append(c.cs.s, strconv.FormatInt(bits, 10))
	return (SAclGenpassBits)(c)
}

func (c AclGenpass) Build() Completed {
	return Completed(c)
}

func (c SAclGenpass) Build() SCompleted {
	return SCompleted(c)
}

type AclGenpassBits Completed

type SAclGenpassBits SCompleted

func (c AclGenpassBits) Build() Completed {
	return Completed(c)
}

func (c SAclGenpassBits) Build() SCompleted {
	return SCompleted(c)
}

type AclGetuser Completed

type SAclGetuser SCompleted

func (b *Builder) AclGetuser() (c AclGetuser) {
	c = AclGetuser{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "GETUSER")
	return c
}

func (b *SBuilder) AclGetuser() (c SAclGetuser) {
	c = SAclGetuser{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "GETUSER")
	return c
}

func (c AclGetuser) Username(username string) AclGetuserUsername {
	c.cs.s = append(c.cs.s, username)
	return (AclGetuserUsername)(c)
}

func (c SAclGetuser) Username(username string) SAclGetuserUsername {
	c.cs.s = append(c.cs.s, username)
	return (SAclGetuserUsername)(c)
}

type AclGetuserUsername Completed

type SAclGetuserUsername SCompleted

func (c AclGetuserUsername) Build() Completed {
	return Completed(c)
}

func (c SAclGetuserUsername) Build() SCompleted {
	return SCompleted(c)
}

type AclHelp Completed

type SAclHelp SCompleted

func (b *Builder) AclHelp() (c AclHelp) {
	c = AclHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "HELP")
	return c
}

func (b *SBuilder) AclHelp() (c SAclHelp) {
	c = SAclHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "HELP")
	return c
}

func (c AclHelp) Build() Completed {
	return Completed(c)
}

func (c SAclHelp) Build() SCompleted {
	return SCompleted(c)
}

type AclList Completed

type SAclList SCompleted

func (b *Builder) AclList() (c AclList) {
	c = AclList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "LIST")
	return c
}

func (b *SBuilder) AclList() (c SAclList) {
	c = SAclList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "LIST")
	return c
}

func (c AclList) Build() Completed {
	return Completed(c)
}

func (c SAclList) Build() SCompleted {
	return SCompleted(c)
}

type AclLoad Completed

type SAclLoad SCompleted

func (b *Builder) AclLoad() (c AclLoad) {
	c = AclLoad{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "LOAD")
	return c
}

func (b *SBuilder) AclLoad() (c SAclLoad) {
	c = SAclLoad{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "LOAD")
	return c
}

func (c AclLoad) Build() Completed {
	return Completed(c)
}

func (c SAclLoad) Build() SCompleted {
	return SCompleted(c)
}

type AclLog Completed

type SAclLog SCompleted

func (b *Builder) AclLog() (c AclLog) {
	c = AclLog{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "LOG")
	return c
}

func (b *SBuilder) AclLog() (c SAclLog) {
	c = SAclLog{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "LOG")
	return c
}

func (c AclLog) CountOrReset(countOrReset string) AclLogCountOrReset {
	c.cs.s = append(c.cs.s, countOrReset)
	return (AclLogCountOrReset)(c)
}

func (c SAclLog) CountOrReset(countOrReset string) SAclLogCountOrReset {
	c.cs.s = append(c.cs.s, countOrReset)
	return (SAclLogCountOrReset)(c)
}

func (c AclLog) Build() Completed {
	return Completed(c)
}

func (c SAclLog) Build() SCompleted {
	return SCompleted(c)
}

type AclLogCountOrReset Completed

type SAclLogCountOrReset SCompleted

func (c AclLogCountOrReset) Build() Completed {
	return Completed(c)
}

func (c SAclLogCountOrReset) Build() SCompleted {
	return SCompleted(c)
}

type AclSave Completed

type SAclSave SCompleted

func (b *Builder) AclSave() (c AclSave) {
	c = AclSave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "SAVE")
	return c
}

func (b *SBuilder) AclSave() (c SAclSave) {
	c = SAclSave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "SAVE")
	return c
}

func (c AclSave) Build() Completed {
	return Completed(c)
}

func (c SAclSave) Build() SCompleted {
	return SCompleted(c)
}

type AclSetuser Completed

type SAclSetuser SCompleted

func (b *Builder) AclSetuser() (c AclSetuser) {
	c = AclSetuser{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "SETUSER")
	return c
}

func (b *SBuilder) AclSetuser() (c SAclSetuser) {
	c = SAclSetuser{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "SETUSER")
	return c
}

func (c AclSetuser) Username(username string) AclSetuserUsername {
	c.cs.s = append(c.cs.s, username)
	return (AclSetuserUsername)(c)
}

func (c SAclSetuser) Username(username string) SAclSetuserUsername {
	c.cs.s = append(c.cs.s, username)
	return (SAclSetuserUsername)(c)
}

type AclSetuserRule Completed

type SAclSetuserRule SCompleted

func (c AclSetuserRule) Rule(rule ...string) AclSetuserRule {
	c.cs.s = append(c.cs.s, rule...)
	return c
}

func (c SAclSetuserRule) Rule(rule ...string) SAclSetuserRule {
	c.cs.s = append(c.cs.s, rule...)
	return c
}

func (c AclSetuserRule) Build() Completed {
	return Completed(c)
}

func (c SAclSetuserRule) Build() SCompleted {
	return SCompleted(c)
}

type AclSetuserUsername Completed

type SAclSetuserUsername SCompleted

func (c AclSetuserUsername) Rule(rule ...string) AclSetuserRule {
	c.cs.s = append(c.cs.s, rule...)
	return (AclSetuserRule)(c)
}

func (c SAclSetuserUsername) Rule(rule ...string) SAclSetuserRule {
	c.cs.s = append(c.cs.s, rule...)
	return (SAclSetuserRule)(c)
}

func (c AclSetuserUsername) Build() Completed {
	return Completed(c)
}

func (c SAclSetuserUsername) Build() SCompleted {
	return SCompleted(c)
}

type AclUsers Completed

type SAclUsers SCompleted

func (b *Builder) AclUsers() (c AclUsers) {
	c = AclUsers{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "USERS")
	return c
}

func (b *SBuilder) AclUsers() (c SAclUsers) {
	c = SAclUsers{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "USERS")
	return c
}

func (c AclUsers) Build() Completed {
	return Completed(c)
}

func (c SAclUsers) Build() SCompleted {
	return SCompleted(c)
}

type AclWhoami Completed

type SAclWhoami SCompleted

func (b *Builder) AclWhoami() (c AclWhoami) {
	c = AclWhoami{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "WHOAMI")
	return c
}

func (b *SBuilder) AclWhoami() (c SAclWhoami) {
	c = SAclWhoami{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ACL", "WHOAMI")
	return c
}

func (c AclWhoami) Build() Completed {
	return Completed(c)
}

func (c SAclWhoami) Build() SCompleted {
	return SCompleted(c)
}

type Append Completed

type SAppend SCompleted

func (b *Builder) Append() (c Append) {
	c = Append{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "APPEND")
	return c
}

func (b *SBuilder) Append() (c SAppend) {
	c = SAppend{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "APPEND")
	return c
}

func (c Append) Key(key string) AppendKey {
	c.cs.s = append(c.cs.s, key)
	return (AppendKey)(c)
}

func (c SAppend) Key(key string) SAppendKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SAppendKey)(c)
}

type AppendKey Completed

type SAppendKey SCompleted

func (c AppendKey) Value(value string) AppendValue {
	c.cs.s = append(c.cs.s, value)
	return (AppendValue)(c)
}

func (c SAppendKey) Value(value string) SAppendValue {
	c.cs.s = append(c.cs.s, value)
	return (SAppendValue)(c)
}

type AppendValue Completed

type SAppendValue SCompleted

func (c AppendValue) Build() Completed {
	return Completed(c)
}

func (c SAppendValue) Build() SCompleted {
	return SCompleted(c)
}

type Asking Completed

type SAsking SCompleted

func (b *Builder) Asking() (c Asking) {
	c = Asking{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ASKING")
	return c
}

func (b *SBuilder) Asking() (c SAsking) {
	c = SAsking{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ASKING")
	return c
}

func (c Asking) Build() Completed {
	return Completed(c)
}

func (c SAsking) Build() SCompleted {
	return SCompleted(c)
}

type Auth Completed

type SAuth SCompleted

func (b *Builder) Auth() (c Auth) {
	c = Auth{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "AUTH")
	return c
}

func (b *SBuilder) Auth() (c SAuth) {
	c = SAuth{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "AUTH")
	return c
}

func (c Auth) Username(username string) AuthUsername {
	c.cs.s = append(c.cs.s, username)
	return (AuthUsername)(c)
}

func (c SAuth) Username(username string) SAuthUsername {
	c.cs.s = append(c.cs.s, username)
	return (SAuthUsername)(c)
}

func (c Auth) Password(password string) AuthPassword {
	c.cs.s = append(c.cs.s, password)
	return (AuthPassword)(c)
}

func (c SAuth) Password(password string) SAuthPassword {
	c.cs.s = append(c.cs.s, password)
	return (SAuthPassword)(c)
}

type AuthPassword Completed

type SAuthPassword SCompleted

func (c AuthPassword) Build() Completed {
	return Completed(c)
}

func (c SAuthPassword) Build() SCompleted {
	return SCompleted(c)
}

type AuthUsername Completed

type SAuthUsername SCompleted

func (c AuthUsername) Password(password string) AuthPassword {
	c.cs.s = append(c.cs.s, password)
	return (AuthPassword)(c)
}

func (c SAuthUsername) Password(password string) SAuthPassword {
	c.cs.s = append(c.cs.s, password)
	return (SAuthPassword)(c)
}

type BfAdd Completed

type SBfAdd SCompleted

func (b *Builder) BfAdd() (c BfAdd) {
	c = BfAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.ADD")
	return c
}

func (b *SBuilder) BfAdd() (c SBfAdd) {
	c = SBfAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.ADD")
	return c
}

func (c BfAdd) Key(key string) BfAddKey {
	c.cs.s = append(c.cs.s, key)
	return (BfAddKey)(c)
}

func (c SBfAdd) Key(key string) SBfAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfAddKey)(c)
}

type BfAddItem Completed

type SBfAddItem SCompleted

func (c BfAddItem) Build() Completed {
	return Completed(c)
}

func (c SBfAddItem) Build() SCompleted {
	return SCompleted(c)
}

type BfAddKey Completed

type SBfAddKey SCompleted

func (c BfAddKey) Item(item string) BfAddItem {
	c.cs.s = append(c.cs.s, item)
	return (BfAddItem)(c)
}

func (c SBfAddKey) Item(item string) SBfAddItem {
	c.cs.s = append(c.cs.s, item)
	return (SBfAddItem)(c)
}

type BfExists Completed

type SBfExists SCompleted

func (b *Builder) BfExists() (c BfExists) {
	c = BfExists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.EXISTS")
	return c
}

func (b *SBuilder) BfExists() (c SBfExists) {
	c = SBfExists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.EXISTS")
	return c
}

func (c BfExists) Key(key string) BfExistsKey {
	c.cs.s = append(c.cs.s, key)
	return (BfExistsKey)(c)
}

func (c SBfExists) Key(key string) SBfExistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfExistsKey)(c)
}

type BfExistsItem Completed

type SBfExistsItem SCompleted

func (c BfExistsItem) Build() Completed {
	return Completed(c)
}

func (c SBfExistsItem) Build() SCompleted {
	return SCompleted(c)
}

func (c BfExistsItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBfExistsItem) Cache() SCacheable {
	return SCacheable(c)
}

type BfExistsKey Completed

type SBfExistsKey SCompleted

func (c BfExistsKey) Item(item string) BfExistsItem {
	c.cs.s = append(c.cs.s, item)
	return (BfExistsItem)(c)
}

func (c SBfExistsKey) Item(item string) SBfExistsItem {
	c.cs.s = append(c.cs.s, item)
	return (SBfExistsItem)(c)
}

type BfInfo Completed

type SBfInfo SCompleted

func (b *Builder) BfInfo() (c BfInfo) {
	c = BfInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.INFO")
	return c
}

func (b *SBuilder) BfInfo() (c SBfInfo) {
	c = SBfInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.INFO")
	return c
}

func (c BfInfo) Key(key string) BfInfoKey {
	c.cs.s = append(c.cs.s, key)
	return (BfInfoKey)(c)
}

func (c SBfInfo) Key(key string) SBfInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfInfoKey)(c)
}

type BfInfoKey Completed

type SBfInfoKey SCompleted

func (c BfInfoKey) Build() Completed {
	return Completed(c)
}

func (c SBfInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c BfInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBfInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type BfInsert Completed

type SBfInsert SCompleted

func (b *Builder) BfInsert() (c BfInsert) {
	c = BfInsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.INSERT")
	return c
}

func (b *SBuilder) BfInsert() (c SBfInsert) {
	c = SBfInsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.INSERT")
	return c
}

func (c BfInsert) Key(key string) BfInsertKey {
	c.cs.s = append(c.cs.s, key)
	return (BfInsertKey)(c)
}

func (c SBfInsert) Key(key string) SBfInsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfInsertKey)(c)
}

type BfInsertCapacity Completed

type SBfInsertCapacity SCompleted

func (c BfInsertCapacity) Error(error float64) BfInsertError {
	c.cs.s = append(c.cs.s, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (BfInsertError)(c)
}

func (c SBfInsertCapacity) Error(error float64) SBfInsertError {
	c.cs.s = append(c.cs.s, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (SBfInsertError)(c)
}

func (c BfInsertCapacity) Expansion(expansion int64) BfInsertExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfInsertExpansion)(c)
}

func (c SBfInsertCapacity) Expansion(expansion int64) SBfInsertExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfInsertExpansion)(c)
}

func (c BfInsertCapacity) Nocreate() BfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertCapacity) Nocreate() SBfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertCapacity) Nonscaling() BfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertCapacity) Nonscaling() SBfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertCapacity) Items() BfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertCapacity) Items() SBfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertError Completed

type SBfInsertError SCompleted

func (c BfInsertError) Expansion(expansion int64) BfInsertExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfInsertExpansion)(c)
}

func (c SBfInsertError) Expansion(expansion int64) SBfInsertExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfInsertExpansion)(c)
}

func (c BfInsertError) Nocreate() BfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertError) Nocreate() SBfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertError) Nonscaling() BfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertError) Nonscaling() SBfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertError) Items() BfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertError) Items() SBfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertExpansion Completed

type SBfInsertExpansion SCompleted

func (c BfInsertExpansion) Nocreate() BfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertExpansion) Nocreate() SBfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertExpansion) Nonscaling() BfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertExpansion) Nonscaling() SBfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertExpansion) Items() BfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertExpansion) Items() SBfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertItem Completed

type SBfInsertItem SCompleted

func (c BfInsertItem) Item(item ...string) BfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SBfInsertItem) Item(item ...string) SBfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c BfInsertItem) Build() Completed {
	return Completed(c)
}

func (c SBfInsertItem) Build() SCompleted {
	return SCompleted(c)
}

type BfInsertItems Completed

type SBfInsertItems SCompleted

func (c BfInsertItems) Item(item ...string) BfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return (BfInsertItem)(c)
}

func (c SBfInsertItems) Item(item ...string) SBfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return (SBfInsertItem)(c)
}

type BfInsertKey Completed

type SBfInsertKey SCompleted

func (c BfInsertKey) Capacity(capacity int64) BfInsertCapacity {
	c.cs.s = append(c.cs.s, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (BfInsertCapacity)(c)
}

func (c SBfInsertKey) Capacity(capacity int64) SBfInsertCapacity {
	c.cs.s = append(c.cs.s, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (SBfInsertCapacity)(c)
}

func (c BfInsertKey) Error(error float64) BfInsertError {
	c.cs.s = append(c.cs.s, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (BfInsertError)(c)
}

func (c SBfInsertKey) Error(error float64) SBfInsertError {
	c.cs.s = append(c.cs.s, "ERROR", strconv.FormatFloat(error, 'f', -1, 64))
	return (SBfInsertError)(c)
}

func (c BfInsertKey) Expansion(expansion int64) BfInsertExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfInsertExpansion)(c)
}

func (c SBfInsertKey) Expansion(expansion int64) SBfInsertExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfInsertExpansion)(c)
}

func (c BfInsertKey) Nocreate() BfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (BfInsertNocreate)(c)
}

func (c SBfInsertKey) Nocreate() SBfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SBfInsertNocreate)(c)
}

func (c BfInsertKey) Nonscaling() BfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertKey) Nonscaling() SBfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertKey) Items() BfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertKey) Items() SBfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertNocreate Completed

type SBfInsertNocreate SCompleted

func (c BfInsertNocreate) Nonscaling() BfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfInsertNonscaling)(c)
}

func (c SBfInsertNocreate) Nonscaling() SBfInsertNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfInsertNonscaling)(c)
}

func (c BfInsertNocreate) Items() BfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertNocreate) Items() SBfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfInsertNonscaling Completed

type SBfInsertNonscaling SCompleted

func (c BfInsertNonscaling) Items() BfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (BfInsertItems)(c)
}

func (c SBfInsertNonscaling) Items() SBfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SBfInsertItems)(c)
}

type BfLoadchunk Completed

type SBfLoadchunk SCompleted

func (b *Builder) BfLoadchunk() (c BfLoadchunk) {
	c = BfLoadchunk{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.LOADCHUNK")
	return c
}

func (b *SBuilder) BfLoadchunk() (c SBfLoadchunk) {
	c = SBfLoadchunk{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.LOADCHUNK")
	return c
}

func (c BfLoadchunk) Key(key string) BfLoadchunkKey {
	c.cs.s = append(c.cs.s, key)
	return (BfLoadchunkKey)(c)
}

func (c SBfLoadchunk) Key(key string) SBfLoadchunkKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfLoadchunkKey)(c)
}

type BfLoadchunkData Completed

type SBfLoadchunkData SCompleted

func (c BfLoadchunkData) Build() Completed {
	return Completed(c)
}

func (c SBfLoadchunkData) Build() SCompleted {
	return SCompleted(c)
}

type BfLoadchunkIterator Completed

type SBfLoadchunkIterator SCompleted

func (c BfLoadchunkIterator) Data(data string) BfLoadchunkData {
	c.cs.s = append(c.cs.s, data)
	return (BfLoadchunkData)(c)
}

func (c SBfLoadchunkIterator) Data(data string) SBfLoadchunkData {
	c.cs.s = append(c.cs.s, data)
	return (SBfLoadchunkData)(c)
}

type BfLoadchunkKey Completed

type SBfLoadchunkKey SCompleted

func (c BfLoadchunkKey) Iterator(iterator int64) BfLoadchunkIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (BfLoadchunkIterator)(c)
}

func (c SBfLoadchunkKey) Iterator(iterator int64) SBfLoadchunkIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (SBfLoadchunkIterator)(c)
}

type BfMadd Completed

type SBfMadd SCompleted

func (b *Builder) BfMadd() (c BfMadd) {
	c = BfMadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.MADD")
	return c
}

func (b *SBuilder) BfMadd() (c SBfMadd) {
	c = SBfMadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.MADD")
	return c
}

func (c BfMadd) Key(key string) BfMaddKey {
	c.cs.s = append(c.cs.s, key)
	return (BfMaddKey)(c)
}

func (c SBfMadd) Key(key string) SBfMaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfMaddKey)(c)
}

type BfMaddItem Completed

type SBfMaddItem SCompleted

func (c BfMaddItem) Item(item ...string) BfMaddItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SBfMaddItem) Item(item ...string) SBfMaddItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c BfMaddItem) Build() Completed {
	return Completed(c)
}

func (c SBfMaddItem) Build() SCompleted {
	return SCompleted(c)
}

type BfMaddKey Completed

type SBfMaddKey SCompleted

func (c BfMaddKey) Item(item ...string) BfMaddItem {
	c.cs.s = append(c.cs.s, item...)
	return (BfMaddItem)(c)
}

func (c SBfMaddKey) Item(item ...string) SBfMaddItem {
	c.cs.s = append(c.cs.s, item...)
	return (SBfMaddItem)(c)
}

type BfMexists Completed

type SBfMexists SCompleted

func (b *Builder) BfMexists() (c BfMexists) {
	c = BfMexists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.MEXISTS")
	return c
}

func (b *SBuilder) BfMexists() (c SBfMexists) {
	c = SBfMexists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.MEXISTS")
	return c
}

func (c BfMexists) Key(key string) BfMexistsKey {
	c.cs.s = append(c.cs.s, key)
	return (BfMexistsKey)(c)
}

func (c SBfMexists) Key(key string) SBfMexistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfMexistsKey)(c)
}

type BfMexistsItem Completed

type SBfMexistsItem SCompleted

func (c BfMexistsItem) Item(item ...string) BfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SBfMexistsItem) Item(item ...string) SBfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c BfMexistsItem) Build() Completed {
	return Completed(c)
}

func (c SBfMexistsItem) Build() SCompleted {
	return SCompleted(c)
}

type BfMexistsKey Completed

type SBfMexistsKey SCompleted

func (c BfMexistsKey) Item(item ...string) BfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return (BfMexistsItem)(c)
}

func (c SBfMexistsKey) Item(item ...string) SBfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return (SBfMexistsItem)(c)
}

type BfReserve Completed

type SBfReserve SCompleted

func (b *Builder) BfReserve() (c BfReserve) {
	c = BfReserve{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.RESERVE")
	return c
}

func (b *SBuilder) BfReserve() (c SBfReserve) {
	c = SBfReserve{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BF.RESERVE")
	return c
}

func (c BfReserve) Key(key string) BfReserveKey {
	c.cs.s = append(c.cs.s, key)
	return (BfReserveKey)(c)
}

func (c SBfReserve) Key(key string) SBfReserveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfReserveKey)(c)
}

type BfReserveCapacity Completed

type SBfReserveCapacity SCompleted

func (c BfReserveCapacity) Expansion(expansion int64) BfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (BfReserveExpansion)(c)
}

func (c SBfReserveCapacity) Expansion(expansion int64) SBfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SBfReserveExpansion)(c)
}

func (c BfReserveCapacity) Nonscaling() BfReserveNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfReserveNonscaling)(c)
}

func (c SBfReserveCapacity) Nonscaling() SBfReserveNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfReserveNonscaling)(c)
}

func (c BfReserveCapacity) Build() Completed {
	return Completed(c)
}

func (c SBfReserveCapacity) Build() SCompleted {
	return SCompleted(c)
}

type BfReserveErrorRate Completed

type SBfReserveErrorRate SCompleted

func (c BfReserveErrorRate) Capacity(capacity int64) BfReserveCapacity {
	c.cs.s = append(c.cs.s, strconv.FormatInt(capacity, 10))
	return (BfReserveCapacity)(c)
}

func (c SBfReserveErrorRate) Capacity(capacity int64) SBfReserveCapacity {
	c.cs.s = append(c.cs.s, strconv.FormatInt(capacity, 10))
	return (SBfReserveCapacity)(c)
}

type BfReserveExpansion Completed

type SBfReserveExpansion SCompleted

func (c BfReserveExpansion) Nonscaling() BfReserveNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (BfReserveNonscaling)(c)
}

func (c SBfReserveExpansion) Nonscaling() SBfReserveNonscaling {
	c.cs.s = append(c.cs.s, "NONSCALING")
	return (SBfReserveNonscaling)(c)
}

func (c BfReserveExpansion) Build() Completed {
	return Completed(c)
}

func (c SBfReserveExpansion) Build() SCompleted {
	return SCompleted(c)
}

type BfReserveKey Completed

type SBfReserveKey SCompleted

func (c BfReserveKey) ErrorRate(errorRate float64) BfReserveErrorRate {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(errorRate, 'f', -1, 64))
	return (BfReserveErrorRate)(c)
}

func (c SBfReserveKey) ErrorRate(errorRate float64) SBfReserveErrorRate {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(errorRate, 'f', -1, 64))
	return (SBfReserveErrorRate)(c)
}

type BfReserveNonscaling Completed

type SBfReserveNonscaling SCompleted

func (c BfReserveNonscaling) Build() Completed {
	return Completed(c)
}

func (c SBfReserveNonscaling) Build() SCompleted {
	return SCompleted(c)
}

type BfScandump Completed

type SBfScandump SCompleted

func (b *Builder) BfScandump() (c BfScandump) {
	c = BfScandump{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.SCANDUMP")
	return c
}

func (b *SBuilder) BfScandump() (c SBfScandump) {
	c = SBfScandump{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BF.SCANDUMP")
	return c
}

func (c BfScandump) Key(key string) BfScandumpKey {
	c.cs.s = append(c.cs.s, key)
	return (BfScandumpKey)(c)
}

func (c SBfScandump) Key(key string) SBfScandumpKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBfScandumpKey)(c)
}

type BfScandumpIterator Completed

type SBfScandumpIterator SCompleted

func (c BfScandumpIterator) Build() Completed {
	return Completed(c)
}

func (c SBfScandumpIterator) Build() SCompleted {
	return SCompleted(c)
}

type BfScandumpKey Completed

type SBfScandumpKey SCompleted

func (c BfScandumpKey) Iterator(iterator int64) BfScandumpIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (BfScandumpIterator)(c)
}

func (c SBfScandumpKey) Iterator(iterator int64) SBfScandumpIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (SBfScandumpIterator)(c)
}

type Bgrewriteaof Completed

type SBgrewriteaof SCompleted

func (b *Builder) Bgrewriteaof() (c Bgrewriteaof) {
	c = Bgrewriteaof{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BGREWRITEAOF")
	return c
}

func (b *SBuilder) Bgrewriteaof() (c SBgrewriteaof) {
	c = SBgrewriteaof{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BGREWRITEAOF")
	return c
}

func (c Bgrewriteaof) Build() Completed {
	return Completed(c)
}

func (c SBgrewriteaof) Build() SCompleted {
	return SCompleted(c)
}

type Bgsave Completed

type SBgsave SCompleted

func (b *Builder) Bgsave() (c Bgsave) {
	c = Bgsave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BGSAVE")
	return c
}

func (b *SBuilder) Bgsave() (c SBgsave) {
	c = SBgsave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BGSAVE")
	return c
}

func (c Bgsave) Schedule() BgsaveSchedule {
	c.cs.s = append(c.cs.s, "SCHEDULE")
	return (BgsaveSchedule)(c)
}

func (c SBgsave) Schedule() SBgsaveSchedule {
	c.cs.s = append(c.cs.s, "SCHEDULE")
	return (SBgsaveSchedule)(c)
}

func (c Bgsave) Build() Completed {
	return Completed(c)
}

func (c SBgsave) Build() SCompleted {
	return SCompleted(c)
}

type BgsaveSchedule Completed

type SBgsaveSchedule SCompleted

func (c BgsaveSchedule) Build() Completed {
	return Completed(c)
}

func (c SBgsaveSchedule) Build() SCompleted {
	return SCompleted(c)
}

type Bitcount Completed

type SBitcount SCompleted

func (b *Builder) Bitcount() (c Bitcount) {
	c = Bitcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BITCOUNT")
	return c
}

func (b *SBuilder) Bitcount() (c SBitcount) {
	c = SBitcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BITCOUNT")
	return c
}

func (c Bitcount) Key(key string) BitcountKey {
	c.cs.s = append(c.cs.s, key)
	return (BitcountKey)(c)
}

func (c SBitcount) Key(key string) SBitcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBitcountKey)(c)
}

type BitcountIndexEnd Completed

type SBitcountIndexEnd SCompleted

func (c BitcountIndexEnd) Byte() BitcountIndexIndexUnitByte {
	c.cs.s = append(c.cs.s, "BYTE")
	return (BitcountIndexIndexUnitByte)(c)
}

func (c SBitcountIndexEnd) Byte() SBitcountIndexIndexUnitByte {
	c.cs.s = append(c.cs.s, "BYTE")
	return (SBitcountIndexIndexUnitByte)(c)
}

func (c BitcountIndexEnd) Bit() BitcountIndexIndexUnitBit {
	c.cs.s = append(c.cs.s, "BIT")
	return (BitcountIndexIndexUnitBit)(c)
}

func (c SBitcountIndexEnd) Bit() SBitcountIndexIndexUnitBit {
	c.cs.s = append(c.cs.s, "BIT")
	return (SBitcountIndexIndexUnitBit)(c)
}

func (c BitcountIndexEnd) Build() Completed {
	return Completed(c)
}

func (c SBitcountIndexEnd) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountIndexEnd) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountIndexEnd) Cache() SCacheable {
	return SCacheable(c)
}

type BitcountIndexIndexUnitBit Completed

type SBitcountIndexIndexUnitBit SCompleted

func (c BitcountIndexIndexUnitBit) Build() Completed {
	return Completed(c)
}

func (c SBitcountIndexIndexUnitBit) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountIndexIndexUnitBit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountIndexIndexUnitBit) Cache() SCacheable {
	return SCacheable(c)
}

type BitcountIndexIndexUnitByte Completed

type SBitcountIndexIndexUnitByte SCompleted

func (c BitcountIndexIndexUnitByte) Build() Completed {
	return Completed(c)
}

func (c SBitcountIndexIndexUnitByte) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountIndexIndexUnitByte) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountIndexIndexUnitByte) Cache() SCacheable {
	return SCacheable(c)
}

type BitcountIndexStart Completed

type SBitcountIndexStart SCompleted

func (c BitcountIndexStart) End(end int64) BitcountIndexEnd {
	c.cs.s = append(c.cs.s, strconv.FormatInt(end, 10))
	return (BitcountIndexEnd)(c)
}

func (c SBitcountIndexStart) End(end int64) SBitcountIndexEnd {
	c.cs.s = append(c.cs.s, strconv.FormatInt(end, 10))
	return (SBitcountIndexEnd)(c)
}

type BitcountKey Completed

type SBitcountKey SCompleted

func (c BitcountKey) Start(start int64) BitcountIndexStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (BitcountIndexStart)(c)
}

func (c SBitcountKey) Start(start int64) SBitcountIndexStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SBitcountIndexStart)(c)
}

func (c BitcountKey) Build() Completed {
	return Completed(c)
}

func (c SBitcountKey) Build() SCompleted {
	return SCompleted(c)
}

func (c BitcountKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitcountKey) Cache() SCacheable {
	return SCacheable(c)
}

type Bitfield Completed

type SBitfield SCompleted

func (b *Builder) Bitfield() (c Bitfield) {
	c = Bitfield{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BITFIELD")
	return c
}

func (b *SBuilder) Bitfield() (c SBitfield) {
	c = SBitfield{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BITFIELD")
	return c
}

func (c Bitfield) Key(key string) BitfieldKey {
	c.cs.s = append(c.cs.s, key)
	return (BitfieldKey)(c)
}

func (c SBitfield) Key(key string) SBitfieldKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBitfieldKey)(c)
}

type BitfieldGet Completed

type SBitfieldGet SCompleted

func (c BitfieldGet) Set(encoding string, offset int64, value int64) BitfieldSet {
	c.cs.s = append(c.cs.s, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (BitfieldSet)(c)
}

func (c SBitfieldGet) Set(encoding string, offset int64, value int64) SBitfieldSet {
	c.cs.s = append(c.cs.s, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (SBitfieldSet)(c)
}

func (c BitfieldGet) Incrby(encoding string, offset int64, increment int64) BitfieldIncrby {
	c.cs.s = append(c.cs.s, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (BitfieldIncrby)(c)
}

func (c SBitfieldGet) Incrby(encoding string, offset int64, increment int64) SBitfieldIncrby {
	c.cs.s = append(c.cs.s, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (SBitfieldIncrby)(c)
}

func (c BitfieldGet) OverflowWrap() BitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldGet) OverflowWrap() SBitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldGet) OverflowSat() BitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldGet) OverflowSat() SBitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldGet) OverflowFail() BitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldGet) OverflowFail() SBitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldGet) Build() Completed {
	return Completed(c)
}

func (c SBitfieldGet) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldIncrby Completed

type SBitfieldIncrby SCompleted

func (c BitfieldIncrby) OverflowWrap() BitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldIncrby) OverflowWrap() SBitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldIncrby) OverflowSat() BitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldIncrby) OverflowSat() SBitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldIncrby) OverflowFail() BitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldIncrby) OverflowFail() SBitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldIncrby) Build() Completed {
	return Completed(c)
}

func (c SBitfieldIncrby) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldKey Completed

type SBitfieldKey SCompleted

func (c BitfieldKey) Get(encoding string, offset int64) BitfieldGet {
	c.cs.s = append(c.cs.s, "GET", encoding, strconv.FormatInt(offset, 10))
	return (BitfieldGet)(c)
}

func (c SBitfieldKey) Get(encoding string, offset int64) SBitfieldGet {
	c.cs.s = append(c.cs.s, "GET", encoding, strconv.FormatInt(offset, 10))
	return (SBitfieldGet)(c)
}

func (c BitfieldKey) Set(encoding string, offset int64, value int64) BitfieldSet {
	c.cs.s = append(c.cs.s, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (BitfieldSet)(c)
}

func (c SBitfieldKey) Set(encoding string, offset int64, value int64) SBitfieldSet {
	c.cs.s = append(c.cs.s, "SET", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(value, 10))
	return (SBitfieldSet)(c)
}

func (c BitfieldKey) Incrby(encoding string, offset int64, increment int64) BitfieldIncrby {
	c.cs.s = append(c.cs.s, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (BitfieldIncrby)(c)
}

func (c SBitfieldKey) Incrby(encoding string, offset int64, increment int64) SBitfieldIncrby {
	c.cs.s = append(c.cs.s, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (SBitfieldIncrby)(c)
}

func (c BitfieldKey) OverflowWrap() BitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldKey) OverflowWrap() SBitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldKey) OverflowSat() BitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldKey) OverflowSat() SBitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldKey) OverflowFail() BitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldKey) OverflowFail() SBitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldKey) Build() Completed {
	return Completed(c)
}

func (c SBitfieldKey) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldOverflowFail Completed

type SBitfieldOverflowFail SCompleted

func (c BitfieldOverflowFail) Build() Completed {
	return Completed(c)
}

func (c SBitfieldOverflowFail) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldOverflowSat Completed

type SBitfieldOverflowSat SCompleted

func (c BitfieldOverflowSat) Build() Completed {
	return Completed(c)
}

func (c SBitfieldOverflowSat) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldOverflowWrap Completed

type SBitfieldOverflowWrap SCompleted

func (c BitfieldOverflowWrap) Build() Completed {
	return Completed(c)
}

func (c SBitfieldOverflowWrap) Build() SCompleted {
	return SCompleted(c)
}

type BitfieldRo Completed

type SBitfieldRo SCompleted

func (b *Builder) BitfieldRo() (c BitfieldRo) {
	c = BitfieldRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BITFIELD_RO")
	return c
}

func (b *SBuilder) BitfieldRo() (c SBitfieldRo) {
	c = SBitfieldRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BITFIELD_RO")
	return c
}

func (c BitfieldRo) Key(key string) BitfieldRoKey {
	c.cs.s = append(c.cs.s, key)
	return (BitfieldRoKey)(c)
}

func (c SBitfieldRo) Key(key string) SBitfieldRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBitfieldRoKey)(c)
}

type BitfieldRoGet Completed

type SBitfieldRoGet SCompleted

func (c BitfieldRoGet) Build() Completed {
	return Completed(c)
}

func (c SBitfieldRoGet) Build() SCompleted {
	return SCompleted(c)
}

func (c BitfieldRoGet) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitfieldRoGet) Cache() SCacheable {
	return SCacheable(c)
}

type BitfieldRoKey Completed

type SBitfieldRoKey SCompleted

func (c BitfieldRoKey) Get(encoding string, offset int64) BitfieldRoGet {
	c.cs.s = append(c.cs.s, "GET", encoding, strconv.FormatInt(offset, 10))
	return (BitfieldRoGet)(c)
}

func (c SBitfieldRoKey) Get(encoding string, offset int64) SBitfieldRoGet {
	c.cs.s = append(c.cs.s, "GET", encoding, strconv.FormatInt(offset, 10))
	return (SBitfieldRoGet)(c)
}

type BitfieldSet Completed

type SBitfieldSet SCompleted

func (c BitfieldSet) Incrby(encoding string, offset int64, increment int64) BitfieldIncrby {
	c.cs.s = append(c.cs.s, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (BitfieldIncrby)(c)
}

func (c SBitfieldSet) Incrby(encoding string, offset int64, increment int64) SBitfieldIncrby {
	c.cs.s = append(c.cs.s, "INCRBY", encoding, strconv.FormatInt(offset, 10), strconv.FormatInt(increment, 10))
	return (SBitfieldIncrby)(c)
}

func (c BitfieldSet) OverflowWrap() BitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (BitfieldOverflowWrap)(c)
}

func (c SBitfieldSet) OverflowWrap() SBitfieldOverflowWrap {
	c.cs.s = append(c.cs.s, "OVERFLOW", "WRAP")
	return (SBitfieldOverflowWrap)(c)
}

func (c BitfieldSet) OverflowSat() BitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (BitfieldOverflowSat)(c)
}

func (c SBitfieldSet) OverflowSat() SBitfieldOverflowSat {
	c.cs.s = append(c.cs.s, "OVERFLOW", "SAT")
	return (SBitfieldOverflowSat)(c)
}

func (c BitfieldSet) OverflowFail() BitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (BitfieldOverflowFail)(c)
}

func (c SBitfieldSet) OverflowFail() SBitfieldOverflowFail {
	c.cs.s = append(c.cs.s, "OVERFLOW", "FAIL")
	return (SBitfieldOverflowFail)(c)
}

func (c BitfieldSet) Build() Completed {
	return Completed(c)
}

func (c SBitfieldSet) Build() SCompleted {
	return SCompleted(c)
}

type Bitop Completed

type SBitop SCompleted

func (b *Builder) Bitop() (c Bitop) {
	c = Bitop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BITOP")
	return c
}

func (b *SBuilder) Bitop() (c SBitop) {
	c = SBitop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "BITOP")
	return c
}

func (c Bitop) Operation(operation string) BitopOperation {
	c.cs.s = append(c.cs.s, operation)
	return (BitopOperation)(c)
}

func (c SBitop) Operation(operation string) SBitopOperation {
	c.cs.s = append(c.cs.s, operation)
	return (SBitopOperation)(c)
}

type BitopDestkey Completed

type SBitopDestkey SCompleted

func (c BitopDestkey) Key(key ...string) BitopKey {
	c.cs.s = append(c.cs.s, key...)
	return (BitopKey)(c)
}

func (c SBitopDestkey) Key(key ...string) SBitopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBitopKey)(c)
}

type BitopKey Completed

type SBitopKey SCompleted

func (c BitopKey) Key(key ...string) BitopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBitopKey) Key(key ...string) SBitopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BitopKey) Build() Completed {
	return Completed(c)
}

func (c SBitopKey) Build() SCompleted {
	return SCompleted(c)
}

type BitopOperation Completed

type SBitopOperation SCompleted

func (c BitopOperation) Destkey(destkey string) BitopDestkey {
	c.cs.s = append(c.cs.s, destkey)
	return (BitopDestkey)(c)
}

func (c SBitopOperation) Destkey(destkey string) SBitopDestkey {
	c.ks = checkSlot(c.ks, slot(destkey))
	c.cs.s = append(c.cs.s, destkey)
	return (SBitopDestkey)(c)
}

type Bitpos Completed

type SBitpos SCompleted

func (b *Builder) Bitpos() (c Bitpos) {
	c = Bitpos{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BITPOS")
	return c
}

func (b *SBuilder) Bitpos() (c SBitpos) {
	c = SBitpos{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "BITPOS")
	return c
}

func (c Bitpos) Key(key string) BitposKey {
	c.cs.s = append(c.cs.s, key)
	return (BitposKey)(c)
}

func (c SBitpos) Key(key string) SBitposKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SBitposKey)(c)
}

type BitposBit Completed

type SBitposBit SCompleted

func (c BitposBit) Start(start int64) BitposIndexStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (BitposIndexStart)(c)
}

func (c SBitposBit) Start(start int64) SBitposIndexStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SBitposIndexStart)(c)
}

func (c BitposBit) Build() Completed {
	return Completed(c)
}

func (c SBitposBit) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposBit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposBit) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexEndIndexEnd Completed

type SBitposIndexEndIndexEnd SCompleted

func (c BitposIndexEndIndexEnd) Byte() BitposIndexEndIndexIndexUnitByte {
	c.cs.s = append(c.cs.s, "BYTE")
	return (BitposIndexEndIndexIndexUnitByte)(c)
}

func (c SBitposIndexEndIndexEnd) Byte() SBitposIndexEndIndexIndexUnitByte {
	c.cs.s = append(c.cs.s, "BYTE")
	return (SBitposIndexEndIndexIndexUnitByte)(c)
}

func (c BitposIndexEndIndexEnd) Bit() BitposIndexEndIndexIndexUnitBit {
	c.cs.s = append(c.cs.s, "BIT")
	return (BitposIndexEndIndexIndexUnitBit)(c)
}

func (c SBitposIndexEndIndexEnd) Bit() SBitposIndexEndIndexIndexUnitBit {
	c.cs.s = append(c.cs.s, "BIT")
	return (SBitposIndexEndIndexIndexUnitBit)(c)
}

func (c BitposIndexEndIndexEnd) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexEndIndexEnd) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexEndIndexEnd) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexEndIndexEnd) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexEndIndexIndexUnitBit Completed

type SBitposIndexEndIndexIndexUnitBit SCompleted

func (c BitposIndexEndIndexIndexUnitBit) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexEndIndexIndexUnitBit) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexEndIndexIndexUnitBit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexEndIndexIndexUnitBit) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexEndIndexIndexUnitByte Completed

type SBitposIndexEndIndexIndexUnitByte SCompleted

func (c BitposIndexEndIndexIndexUnitByte) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexEndIndexIndexUnitByte) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexEndIndexIndexUnitByte) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexEndIndexIndexUnitByte) Cache() SCacheable {
	return SCacheable(c)
}

type BitposIndexStart Completed

type SBitposIndexStart SCompleted

func (c BitposIndexStart) End(end int64) BitposIndexEndIndexEnd {
	c.cs.s = append(c.cs.s, strconv.FormatInt(end, 10))
	return (BitposIndexEndIndexEnd)(c)
}

func (c SBitposIndexStart) End(end int64) SBitposIndexEndIndexEnd {
	c.cs.s = append(c.cs.s, strconv.FormatInt(end, 10))
	return (SBitposIndexEndIndexEnd)(c)
}

func (c BitposIndexStart) Build() Completed {
	return Completed(c)
}

func (c SBitposIndexStart) Build() SCompleted {
	return SCompleted(c)
}

func (c BitposIndexStart) Cache() Cacheable {
	return Cacheable(c)
}

func (c SBitposIndexStart) Cache() SCacheable {
	return SCacheable(c)
}

type BitposKey Completed

type SBitposKey SCompleted

func (c BitposKey) Bit(bit int64) BitposBit {
	c.cs.s = append(c.cs.s, strconv.FormatInt(bit, 10))
	return (BitposBit)(c)
}

func (c SBitposKey) Bit(bit int64) SBitposBit {
	c.cs.s = append(c.cs.s, strconv.FormatInt(bit, 10))
	return (SBitposBit)(c)
}

type Blmove Completed

type SBlmove SCompleted

func (b *Builder) Blmove() (c Blmove) {
	c = Blmove{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BLMOVE")
	return c
}

func (b *SBuilder) Blmove() (c SBlmove) {
	c = SBlmove{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BLMOVE")
	return c
}

func (c Blmove) Source(source string) BlmoveSource {
	c.cs.s = append(c.cs.s, source)
	return (BlmoveSource)(c)
}

func (c SBlmove) Source(source string) SBlmoveSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SBlmoveSource)(c)
}

type BlmoveDestination Completed

type SBlmoveDestination SCompleted

func (c BlmoveDestination) Left() BlmoveWherefromLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (BlmoveWherefromLeft)(c)
}

func (c SBlmoveDestination) Left() SBlmoveWherefromLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SBlmoveWherefromLeft)(c)
}

func (c BlmoveDestination) Right() BlmoveWherefromRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (BlmoveWherefromRight)(c)
}

func (c SBlmoveDestination) Right() SBlmoveWherefromRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SBlmoveWherefromRight)(c)
}

type BlmoveSource Completed

type SBlmoveSource SCompleted

func (c BlmoveSource) Destination(destination string) BlmoveDestination {
	c.cs.s = append(c.cs.s, destination)
	return (BlmoveDestination)(c)
}

func (c SBlmoveSource) Destination(destination string) SBlmoveDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SBlmoveDestination)(c)
}

type BlmoveTimeout Completed

type SBlmoveTimeout SCompleted

func (c BlmoveTimeout) Build() Completed {
	return Completed(c)
}

func (c SBlmoveTimeout) Build() SCompleted {
	return SCompleted(c)
}

type BlmoveWherefromLeft Completed

type SBlmoveWherefromLeft SCompleted

func (c BlmoveWherefromLeft) Left() BlmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (BlmoveWheretoLeft)(c)
}

func (c SBlmoveWherefromLeft) Left() SBlmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SBlmoveWheretoLeft)(c)
}

func (c BlmoveWherefromLeft) Right() BlmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (BlmoveWheretoRight)(c)
}

func (c SBlmoveWherefromLeft) Right() SBlmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SBlmoveWheretoRight)(c)
}

type BlmoveWherefromRight Completed

type SBlmoveWherefromRight SCompleted

func (c BlmoveWherefromRight) Left() BlmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (BlmoveWheretoLeft)(c)
}

func (c SBlmoveWherefromRight) Left() SBlmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SBlmoveWheretoLeft)(c)
}

func (c BlmoveWherefromRight) Right() BlmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (BlmoveWheretoRight)(c)
}

func (c SBlmoveWherefromRight) Right() SBlmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SBlmoveWheretoRight)(c)
}

type BlmoveWheretoLeft Completed

type SBlmoveWheretoLeft SCompleted

func (c BlmoveWheretoLeft) Timeout(timeout float64) BlmoveTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlmoveTimeout)(c)
}

func (c SBlmoveWheretoLeft) Timeout(timeout float64) SBlmoveTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlmoveTimeout)(c)
}

type BlmoveWheretoRight Completed

type SBlmoveWheretoRight SCompleted

func (c BlmoveWheretoRight) Timeout(timeout float64) BlmoveTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlmoveTimeout)(c)
}

func (c SBlmoveWheretoRight) Timeout(timeout float64) SBlmoveTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlmoveTimeout)(c)
}

type Blmpop Completed

type SBlmpop SCompleted

func (b *Builder) Blmpop() (c Blmpop) {
	c = Blmpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BLMPOP")
	return c
}

func (b *SBuilder) Blmpop() (c SBlmpop) {
	c = SBlmpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BLMPOP")
	return c
}

func (c Blmpop) Timeout(timeout float64) BlmpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlmpopTimeout)(c)
}

func (c SBlmpop) Timeout(timeout float64) SBlmpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlmpopTimeout)(c)
}

type BlmpopCount Completed

type SBlmpopCount SCompleted

func (c BlmpopCount) Build() Completed {
	return Completed(c)
}

func (c SBlmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type BlmpopKey Completed

type SBlmpopKey SCompleted

func (c BlmpopKey) Key(key ...string) BlmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBlmpopKey) Key(key ...string) SBlmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BlmpopKey) Left() BlmpopWhereLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (BlmpopWhereLeft)(c)
}

func (c SBlmpopKey) Left() SBlmpopWhereLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SBlmpopWhereLeft)(c)
}

func (c BlmpopKey) Right() BlmpopWhereRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (BlmpopWhereRight)(c)
}

func (c SBlmpopKey) Right() SBlmpopWhereRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SBlmpopWhereRight)(c)
}

type BlmpopNumkeys Completed

type SBlmpopNumkeys SCompleted

func (c BlmpopNumkeys) Key(key ...string) BlmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return (BlmpopKey)(c)
}

func (c SBlmpopNumkeys) Key(key ...string) SBlmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBlmpopKey)(c)
}

type BlmpopTimeout Completed

type SBlmpopTimeout SCompleted

func (c BlmpopTimeout) Numkeys(numkeys int64) BlmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (BlmpopNumkeys)(c)
}

func (c SBlmpopTimeout) Numkeys(numkeys int64) SBlmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SBlmpopNumkeys)(c)
}

type BlmpopWhereLeft Completed

type SBlmpopWhereLeft SCompleted

func (c BlmpopWhereLeft) Count(count int64) BlmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (BlmpopCount)(c)
}

func (c SBlmpopWhereLeft) Count(count int64) SBlmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SBlmpopCount)(c)
}

func (c BlmpopWhereLeft) Build() Completed {
	return Completed(c)
}

func (c SBlmpopWhereLeft) Build() SCompleted {
	return SCompleted(c)
}

type BlmpopWhereRight Completed

type SBlmpopWhereRight SCompleted

func (c BlmpopWhereRight) Count(count int64) BlmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (BlmpopCount)(c)
}

func (c SBlmpopWhereRight) Count(count int64) SBlmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SBlmpopCount)(c)
}

func (c BlmpopWhereRight) Build() Completed {
	return Completed(c)
}

func (c SBlmpopWhereRight) Build() SCompleted {
	return SCompleted(c)
}

type Blpop Completed

type SBlpop SCompleted

func (b *Builder) Blpop() (c Blpop) {
	c = Blpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BLPOP")
	return c
}

func (b *SBuilder) Blpop() (c SBlpop) {
	c = SBlpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BLPOP")
	return c
}

func (c Blpop) Key(key ...string) BlpopKey {
	c.cs.s = append(c.cs.s, key...)
	return (BlpopKey)(c)
}

func (c SBlpop) Key(key ...string) SBlpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBlpopKey)(c)
}

type BlpopKey Completed

type SBlpopKey SCompleted

func (c BlpopKey) Key(key ...string) BlpopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBlpopKey) Key(key ...string) SBlpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BlpopKey) Timeout(timeout float64) BlpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BlpopTimeout)(c)
}

func (c SBlpopKey) Timeout(timeout float64) SBlpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBlpopTimeout)(c)
}

type BlpopTimeout Completed

type SBlpopTimeout SCompleted

func (c BlpopTimeout) Build() Completed {
	return Completed(c)
}

func (c SBlpopTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Brpop Completed

type SBrpop SCompleted

func (b *Builder) Brpop() (c Brpop) {
	c = Brpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BRPOP")
	return c
}

func (b *SBuilder) Brpop() (c SBrpop) {
	c = SBrpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BRPOP")
	return c
}

func (c Brpop) Key(key ...string) BrpopKey {
	c.cs.s = append(c.cs.s, key...)
	return (BrpopKey)(c)
}

func (c SBrpop) Key(key ...string) SBrpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBrpopKey)(c)
}

type BrpopKey Completed

type SBrpopKey SCompleted

func (c BrpopKey) Key(key ...string) BrpopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBrpopKey) Key(key ...string) SBrpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BrpopKey) Timeout(timeout float64) BrpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BrpopTimeout)(c)
}

func (c SBrpopKey) Timeout(timeout float64) SBrpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBrpopTimeout)(c)
}

type BrpopTimeout Completed

type SBrpopTimeout SCompleted

func (c BrpopTimeout) Build() Completed {
	return Completed(c)
}

func (c SBrpopTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Brpoplpush Completed

type SBrpoplpush SCompleted

func (b *Builder) Brpoplpush() (c Brpoplpush) {
	c = Brpoplpush{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BRPOPLPUSH")
	return c
}

func (b *SBuilder) Brpoplpush() (c SBrpoplpush) {
	c = SBrpoplpush{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BRPOPLPUSH")
	return c
}

func (c Brpoplpush) Source(source string) BrpoplpushSource {
	c.cs.s = append(c.cs.s, source)
	return (BrpoplpushSource)(c)
}

func (c SBrpoplpush) Source(source string) SBrpoplpushSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SBrpoplpushSource)(c)
}

type BrpoplpushDestination Completed

type SBrpoplpushDestination SCompleted

func (c BrpoplpushDestination) Timeout(timeout float64) BrpoplpushTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BrpoplpushTimeout)(c)
}

func (c SBrpoplpushDestination) Timeout(timeout float64) SBrpoplpushTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBrpoplpushTimeout)(c)
}

type BrpoplpushSource Completed

type SBrpoplpushSource SCompleted

func (c BrpoplpushSource) Destination(destination string) BrpoplpushDestination {
	c.cs.s = append(c.cs.s, destination)
	return (BrpoplpushDestination)(c)
}

func (c SBrpoplpushSource) Destination(destination string) SBrpoplpushDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SBrpoplpushDestination)(c)
}

type BrpoplpushTimeout Completed

type SBrpoplpushTimeout SCompleted

func (c BrpoplpushTimeout) Build() Completed {
	return Completed(c)
}

func (c SBrpoplpushTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Bzmpop Completed

type SBzmpop SCompleted

func (b *Builder) Bzmpop() (c Bzmpop) {
	c = Bzmpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BZMPOP")
	return c
}

func (b *SBuilder) Bzmpop() (c SBzmpop) {
	c = SBzmpop{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BZMPOP")
	return c
}

func (c Bzmpop) Timeout(timeout float64) BzmpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BzmpopTimeout)(c)
}

func (c SBzmpop) Timeout(timeout float64) SBzmpopTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBzmpopTimeout)(c)
}

type BzmpopCount Completed

type SBzmpopCount SCompleted

func (c BzmpopCount) Build() Completed {
	return Completed(c)
}

func (c SBzmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type BzmpopKey Completed

type SBzmpopKey SCompleted

func (c BzmpopKey) Key(key ...string) BzmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBzmpopKey) Key(key ...string) SBzmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BzmpopKey) Min() BzmpopWhereMin {
	c.cs.s = append(c.cs.s, "MIN")
	return (BzmpopWhereMin)(c)
}

func (c SBzmpopKey) Min() SBzmpopWhereMin {
	c.cs.s = append(c.cs.s, "MIN")
	return (SBzmpopWhereMin)(c)
}

func (c BzmpopKey) Max() BzmpopWhereMax {
	c.cs.s = append(c.cs.s, "MAX")
	return (BzmpopWhereMax)(c)
}

func (c SBzmpopKey) Max() SBzmpopWhereMax {
	c.cs.s = append(c.cs.s, "MAX")
	return (SBzmpopWhereMax)(c)
}

type BzmpopNumkeys Completed

type SBzmpopNumkeys SCompleted

func (c BzmpopNumkeys) Key(key ...string) BzmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return (BzmpopKey)(c)
}

func (c SBzmpopNumkeys) Key(key ...string) SBzmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBzmpopKey)(c)
}

type BzmpopTimeout Completed

type SBzmpopTimeout SCompleted

func (c BzmpopTimeout) Numkeys(numkeys int64) BzmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (BzmpopNumkeys)(c)
}

func (c SBzmpopTimeout) Numkeys(numkeys int64) SBzmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SBzmpopNumkeys)(c)
}

type BzmpopWhereMax Completed

type SBzmpopWhereMax SCompleted

func (c BzmpopWhereMax) Count(count int64) BzmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (BzmpopCount)(c)
}

func (c SBzmpopWhereMax) Count(count int64) SBzmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SBzmpopCount)(c)
}

func (c BzmpopWhereMax) Build() Completed {
	return Completed(c)
}

func (c SBzmpopWhereMax) Build() SCompleted {
	return SCompleted(c)
}

type BzmpopWhereMin Completed

type SBzmpopWhereMin SCompleted

func (c BzmpopWhereMin) Count(count int64) BzmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (BzmpopCount)(c)
}

func (c SBzmpopWhereMin) Count(count int64) SBzmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SBzmpopCount)(c)
}

func (c BzmpopWhereMin) Build() Completed {
	return Completed(c)
}

func (c SBzmpopWhereMin) Build() SCompleted {
	return SCompleted(c)
}

type Bzpopmax Completed

type SBzpopmax SCompleted

func (b *Builder) Bzpopmax() (c Bzpopmax) {
	c = Bzpopmax{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BZPOPMAX")
	return c
}

func (b *SBuilder) Bzpopmax() (c SBzpopmax) {
	c = SBzpopmax{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BZPOPMAX")
	return c
}

func (c Bzpopmax) Key(key ...string) BzpopmaxKey {
	c.cs.s = append(c.cs.s, key...)
	return (BzpopmaxKey)(c)
}

func (c SBzpopmax) Key(key ...string) SBzpopmaxKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBzpopmaxKey)(c)
}

type BzpopmaxKey Completed

type SBzpopmaxKey SCompleted

func (c BzpopmaxKey) Key(key ...string) BzpopmaxKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBzpopmaxKey) Key(key ...string) SBzpopmaxKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BzpopmaxKey) Timeout(timeout float64) BzpopmaxTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BzpopmaxTimeout)(c)
}

func (c SBzpopmaxKey) Timeout(timeout float64) SBzpopmaxTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBzpopmaxTimeout)(c)
}

type BzpopmaxTimeout Completed

type SBzpopmaxTimeout SCompleted

func (c BzpopmaxTimeout) Build() Completed {
	return Completed(c)
}

func (c SBzpopmaxTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Bzpopmin Completed

type SBzpopmin SCompleted

func (b *Builder) Bzpopmin() (c Bzpopmin) {
	c = Bzpopmin{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BZPOPMIN")
	return c
}

func (b *SBuilder) Bzpopmin() (c SBzpopmin) {
	c = SBzpopmin{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "BZPOPMIN")
	return c
}

func (c Bzpopmin) Key(key ...string) BzpopminKey {
	c.cs.s = append(c.cs.s, key...)
	return (BzpopminKey)(c)
}

func (c SBzpopmin) Key(key ...string) SBzpopminKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SBzpopminKey)(c)
}

type BzpopminKey Completed

type SBzpopminKey SCompleted

func (c BzpopminKey) Key(key ...string) BzpopminKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SBzpopminKey) Key(key ...string) SBzpopminKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c BzpopminKey) Timeout(timeout float64) BzpopminTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (BzpopminTimeout)(c)
}

func (c SBzpopminKey) Timeout(timeout float64) SBzpopminTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(timeout, 'f', -1, 64))
	return (SBzpopminTimeout)(c)
}

type BzpopminTimeout Completed

type SBzpopminTimeout SCompleted

func (c BzpopminTimeout) Build() Completed {
	return Completed(c)
}

func (c SBzpopminTimeout) Build() SCompleted {
	return SCompleted(c)
}

type CfAdd Completed

type SCfAdd SCompleted

func (b *Builder) CfAdd() (c CfAdd) {
	c = CfAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.ADD")
	return c
}

func (b *SBuilder) CfAdd() (c SCfAdd) {
	c = SCfAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.ADD")
	return c
}

func (c CfAdd) Key(key string) CfAddKey {
	c.cs.s = append(c.cs.s, key)
	return (CfAddKey)(c)
}

func (c SCfAdd) Key(key string) SCfAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfAddKey)(c)
}

type CfAddItem Completed

type SCfAddItem SCompleted

func (c CfAddItem) Build() Completed {
	return Completed(c)
}

func (c SCfAddItem) Build() SCompleted {
	return SCompleted(c)
}

type CfAddKey Completed

type SCfAddKey SCompleted

func (c CfAddKey) Item(item string) CfAddItem {
	c.cs.s = append(c.cs.s, item)
	return (CfAddItem)(c)
}

func (c SCfAddKey) Item(item string) SCfAddItem {
	c.cs.s = append(c.cs.s, item)
	return (SCfAddItem)(c)
}

type CfAddnx Completed

type SCfAddnx SCompleted

func (b *Builder) CfAddnx() (c CfAddnx) {
	c = CfAddnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.ADDNX")
	return c
}

func (b *SBuilder) CfAddnx() (c SCfAddnx) {
	c = SCfAddnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.ADDNX")
	return c
}

func (c CfAddnx) Key(key string) CfAddnxKey {
	c.cs.s = append(c.cs.s, key)
	return (CfAddnxKey)(c)
}

func (c SCfAddnx) Key(key string) SCfAddnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfAddnxKey)(c)
}

type CfAddnxItem Completed

type SCfAddnxItem SCompleted

func (c CfAddnxItem) Item(item ...string) CfAddnxItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SCfAddnxItem) Item(item ...string) SCfAddnxItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c CfAddnxItem) Build() Completed {
	return Completed(c)
}

func (c SCfAddnxItem) Build() SCompleted {
	return SCompleted(c)
}

type CfAddnxKey Completed

type SCfAddnxKey SCompleted

func (c CfAddnxKey) Item(item ...string) CfAddnxItem {
	c.cs.s = append(c.cs.s, item...)
	return (CfAddnxItem)(c)
}

func (c SCfAddnxKey) Item(item ...string) SCfAddnxItem {
	c.cs.s = append(c.cs.s, item...)
	return (SCfAddnxItem)(c)
}

type CfCount Completed

type SCfCount SCompleted

func (b *Builder) CfCount() (c CfCount) {
	c = CfCount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.COUNT")
	return c
}

func (b *SBuilder) CfCount() (c SCfCount) {
	c = SCfCount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.COUNT")
	return c
}

func (c CfCount) Key(key string) CfCountKey {
	c.cs.s = append(c.cs.s, key)
	return (CfCountKey)(c)
}

func (c SCfCount) Key(key string) SCfCountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfCountKey)(c)
}

type CfCountItem Completed

type SCfCountItem SCompleted

func (c CfCountItem) Build() Completed {
	return Completed(c)
}

func (c SCfCountItem) Build() SCompleted {
	return SCompleted(c)
}

func (c CfCountItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCfCountItem) Cache() SCacheable {
	return SCacheable(c)
}

type CfCountKey Completed

type SCfCountKey SCompleted

func (c CfCountKey) Item(item string) CfCountItem {
	c.cs.s = append(c.cs.s, item)
	return (CfCountItem)(c)
}

func (c SCfCountKey) Item(item string) SCfCountItem {
	c.cs.s = append(c.cs.s, item)
	return (SCfCountItem)(c)
}

type CfDel Completed

type SCfDel SCompleted

func (b *Builder) CfDel() (c CfDel) {
	c = CfDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.DEL")
	return c
}

func (b *SBuilder) CfDel() (c SCfDel) {
	c = SCfDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.DEL")
	return c
}

func (c CfDel) Key(key string) CfDelKey {
	c.cs.s = append(c.cs.s, key)
	return (CfDelKey)(c)
}

func (c SCfDel) Key(key string) SCfDelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfDelKey)(c)
}

type CfDelItem Completed

type SCfDelItem SCompleted

func (c CfDelItem) Build() Completed {
	return Completed(c)
}

func (c SCfDelItem) Build() SCompleted {
	return SCompleted(c)
}

type CfDelKey Completed

type SCfDelKey SCompleted

func (c CfDelKey) Item(item string) CfDelItem {
	c.cs.s = append(c.cs.s, item)
	return (CfDelItem)(c)
}

func (c SCfDelKey) Item(item string) SCfDelItem {
	c.cs.s = append(c.cs.s, item)
	return (SCfDelItem)(c)
}

type CfExists Completed

type SCfExists SCompleted

func (b *Builder) CfExists() (c CfExists) {
	c = CfExists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.EXISTS")
	return c
}

func (b *SBuilder) CfExists() (c SCfExists) {
	c = SCfExists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.EXISTS")
	return c
}

func (c CfExists) Key(key string) CfExistsKey {
	c.cs.s = append(c.cs.s, key)
	return (CfExistsKey)(c)
}

func (c SCfExists) Key(key string) SCfExistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfExistsKey)(c)
}

type CfExistsItem Completed

type SCfExistsItem SCompleted

func (c CfExistsItem) Build() Completed {
	return Completed(c)
}

func (c SCfExistsItem) Build() SCompleted {
	return SCompleted(c)
}

func (c CfExistsItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCfExistsItem) Cache() SCacheable {
	return SCacheable(c)
}

type CfExistsKey Completed

type SCfExistsKey SCompleted

func (c CfExistsKey) Item(item string) CfExistsItem {
	c.cs.s = append(c.cs.s, item)
	return (CfExistsItem)(c)
}

func (c SCfExistsKey) Item(item string) SCfExistsItem {
	c.cs.s = append(c.cs.s, item)
	return (SCfExistsItem)(c)
}

type CfInfo Completed

type SCfInfo SCompleted

func (b *Builder) CfInfo() (c CfInfo) {
	c = CfInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.INFO")
	return c
}

func (b *SBuilder) CfInfo() (c SCfInfo) {
	c = SCfInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.INFO")
	return c
}

func (c CfInfo) Key(key string) CfInfoKey {
	c.cs.s = append(c.cs.s, key)
	return (CfInfoKey)(c)
}

func (c SCfInfo) Key(key string) SCfInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfInfoKey)(c)
}

type CfInfoKey Completed

type SCfInfoKey SCompleted

func (c CfInfoKey) Build() Completed {
	return Completed(c)
}

func (c SCfInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c CfInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCfInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type CfInsert Completed

type SCfInsert SCompleted

func (b *Builder) CfInsert() (c CfInsert) {
	c = CfInsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.INSERT")
	return c
}

func (b *SBuilder) CfInsert() (c SCfInsert) {
	c = SCfInsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.INSERT")
	return c
}

func (c CfInsert) Key(key string) CfInsertKey {
	c.cs.s = append(c.cs.s, key)
	return (CfInsertKey)(c)
}

func (c SCfInsert) Key(key string) SCfInsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfInsertKey)(c)
}

type CfInsertCapacity Completed

type SCfInsertCapacity SCompleted

func (c CfInsertCapacity) Nocreate() CfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (CfInsertNocreate)(c)
}

func (c SCfInsertCapacity) Nocreate() SCfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SCfInsertNocreate)(c)
}

func (c CfInsertCapacity) Items() CfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (CfInsertItems)(c)
}

func (c SCfInsertCapacity) Items() SCfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SCfInsertItems)(c)
}

type CfInsertItem Completed

type SCfInsertItem SCompleted

func (c CfInsertItem) Item(item ...string) CfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SCfInsertItem) Item(item ...string) SCfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c CfInsertItem) Build() Completed {
	return Completed(c)
}

func (c SCfInsertItem) Build() SCompleted {
	return SCompleted(c)
}

type CfInsertItems Completed

type SCfInsertItems SCompleted

func (c CfInsertItems) Item(item ...string) CfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return (CfInsertItem)(c)
}

func (c SCfInsertItems) Item(item ...string) SCfInsertItem {
	c.cs.s = append(c.cs.s, item...)
	return (SCfInsertItem)(c)
}

type CfInsertKey Completed

type SCfInsertKey SCompleted

func (c CfInsertKey) Capacity(capacity int64) CfInsertCapacity {
	c.cs.s = append(c.cs.s, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (CfInsertCapacity)(c)
}

func (c SCfInsertKey) Capacity(capacity int64) SCfInsertCapacity {
	c.cs.s = append(c.cs.s, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (SCfInsertCapacity)(c)
}

func (c CfInsertKey) Nocreate() CfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (CfInsertNocreate)(c)
}

func (c SCfInsertKey) Nocreate() SCfInsertNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SCfInsertNocreate)(c)
}

func (c CfInsertKey) Items() CfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (CfInsertItems)(c)
}

func (c SCfInsertKey) Items() SCfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SCfInsertItems)(c)
}

type CfInsertNocreate Completed

type SCfInsertNocreate SCompleted

func (c CfInsertNocreate) Items() CfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (CfInsertItems)(c)
}

func (c SCfInsertNocreate) Items() SCfInsertItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SCfInsertItems)(c)
}

type CfInsertnx Completed

type SCfInsertnx SCompleted

func (b *Builder) CfInsertnx() (c CfInsertnx) {
	c = CfInsertnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.INSERTNX")
	return c
}

func (b *SBuilder) CfInsertnx() (c SCfInsertnx) {
	c = SCfInsertnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.INSERTNX")
	return c
}

func (c CfInsertnx) Key(key string) CfInsertnxKey {
	c.cs.s = append(c.cs.s, key)
	return (CfInsertnxKey)(c)
}

func (c SCfInsertnx) Key(key string) SCfInsertnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfInsertnxKey)(c)
}

type CfInsertnxCapacity Completed

type SCfInsertnxCapacity SCompleted

func (c CfInsertnxCapacity) Nocreate() CfInsertnxNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (CfInsertnxNocreate)(c)
}

func (c SCfInsertnxCapacity) Nocreate() SCfInsertnxNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SCfInsertnxNocreate)(c)
}

func (c CfInsertnxCapacity) Items() CfInsertnxItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (CfInsertnxItems)(c)
}

func (c SCfInsertnxCapacity) Items() SCfInsertnxItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SCfInsertnxItems)(c)
}

type CfInsertnxItem Completed

type SCfInsertnxItem SCompleted

func (c CfInsertnxItem) Item(item ...string) CfInsertnxItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SCfInsertnxItem) Item(item ...string) SCfInsertnxItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c CfInsertnxItem) Build() Completed {
	return Completed(c)
}

func (c SCfInsertnxItem) Build() SCompleted {
	return SCompleted(c)
}

type CfInsertnxItems Completed

type SCfInsertnxItems SCompleted

func (c CfInsertnxItems) Item(item ...string) CfInsertnxItem {
	c.cs.s = append(c.cs.s, item...)
	return (CfInsertnxItem)(c)
}

func (c SCfInsertnxItems) Item(item ...string) SCfInsertnxItem {
	c.cs.s = append(c.cs.s, item...)
	return (SCfInsertnxItem)(c)
}

type CfInsertnxKey Completed

type SCfInsertnxKey SCompleted

func (c CfInsertnxKey) Capacity(capacity int64) CfInsertnxCapacity {
	c.cs.s = append(c.cs.s, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (CfInsertnxCapacity)(c)
}

func (c SCfInsertnxKey) Capacity(capacity int64) SCfInsertnxCapacity {
	c.cs.s = append(c.cs.s, "CAPACITY", strconv.FormatInt(capacity, 10))
	return (SCfInsertnxCapacity)(c)
}

func (c CfInsertnxKey) Nocreate() CfInsertnxNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (CfInsertnxNocreate)(c)
}

func (c SCfInsertnxKey) Nocreate() SCfInsertnxNocreate {
	c.cs.s = append(c.cs.s, "NOCREATE")
	return (SCfInsertnxNocreate)(c)
}

func (c CfInsertnxKey) Items() CfInsertnxItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (CfInsertnxItems)(c)
}

func (c SCfInsertnxKey) Items() SCfInsertnxItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SCfInsertnxItems)(c)
}

type CfInsertnxNocreate Completed

type SCfInsertnxNocreate SCompleted

func (c CfInsertnxNocreate) Items() CfInsertnxItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (CfInsertnxItems)(c)
}

func (c SCfInsertnxNocreate) Items() SCfInsertnxItems {
	c.cs.s = append(c.cs.s, "ITEMS")
	return (SCfInsertnxItems)(c)
}

type CfLoadchunk Completed

type SCfLoadchunk SCompleted

func (b *Builder) CfLoadchunk() (c CfLoadchunk) {
	c = CfLoadchunk{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.LOADCHUNK")
	return c
}

func (b *SBuilder) CfLoadchunk() (c SCfLoadchunk) {
	c = SCfLoadchunk{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.LOADCHUNK")
	return c
}

func (c CfLoadchunk) Key(key string) CfLoadchunkKey {
	c.cs.s = append(c.cs.s, key)
	return (CfLoadchunkKey)(c)
}

func (c SCfLoadchunk) Key(key string) SCfLoadchunkKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfLoadchunkKey)(c)
}

type CfLoadchunkData Completed

type SCfLoadchunkData SCompleted

func (c CfLoadchunkData) Build() Completed {
	return Completed(c)
}

func (c SCfLoadchunkData) Build() SCompleted {
	return SCompleted(c)
}

type CfLoadchunkIterator Completed

type SCfLoadchunkIterator SCompleted

func (c CfLoadchunkIterator) Data(data string) CfLoadchunkData {
	c.cs.s = append(c.cs.s, data)
	return (CfLoadchunkData)(c)
}

func (c SCfLoadchunkIterator) Data(data string) SCfLoadchunkData {
	c.cs.s = append(c.cs.s, data)
	return (SCfLoadchunkData)(c)
}

type CfLoadchunkKey Completed

type SCfLoadchunkKey SCompleted

func (c CfLoadchunkKey) Iterator(iterator int64) CfLoadchunkIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (CfLoadchunkIterator)(c)
}

func (c SCfLoadchunkKey) Iterator(iterator int64) SCfLoadchunkIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (SCfLoadchunkIterator)(c)
}

type CfMexists Completed

type SCfMexists SCompleted

func (b *Builder) CfMexists() (c CfMexists) {
	c = CfMexists{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.MEXISTS")
	return c
}

func (b *SBuilder) CfMexists() (c SCfMexists) {
	c = SCfMexists{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.MEXISTS")
	return c
}

func (c CfMexists) Key(key string) CfMexistsKey {
	c.cs.s = append(c.cs.s, key)
	return (CfMexistsKey)(c)
}

func (c SCfMexists) Key(key string) SCfMexistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfMexistsKey)(c)
}

type CfMexistsItem Completed

type SCfMexistsItem SCompleted

func (c CfMexistsItem) Item(item ...string) CfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SCfMexistsItem) Item(item ...string) SCfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c CfMexistsItem) Build() Completed {
	return Completed(c)
}

func (c SCfMexistsItem) Build() SCompleted {
	return SCompleted(c)
}

type CfMexistsKey Completed

type SCfMexistsKey SCompleted

func (c CfMexistsKey) Item(item ...string) CfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return (CfMexistsItem)(c)
}

func (c SCfMexistsKey) Item(item ...string) SCfMexistsItem {
	c.cs.s = append(c.cs.s, item...)
	return (SCfMexistsItem)(c)
}

type CfReserve Completed

type SCfReserve SCompleted

func (b *Builder) CfReserve() (c CfReserve) {
	c = CfReserve{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.RESERVE")
	return c
}

func (b *SBuilder) CfReserve() (c SCfReserve) {
	c = SCfReserve{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CF.RESERVE")
	return c
}

func (c CfReserve) Key(key string) CfReserveKey {
	c.cs.s = append(c.cs.s, key)
	return (CfReserveKey)(c)
}

func (c SCfReserve) Key(key string) SCfReserveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfReserveKey)(c)
}

type CfReserveBucketsize Completed

type SCfReserveBucketsize SCompleted

func (c CfReserveBucketsize) Maxiterations(maxiterations int64) CfReserveMaxiterations {
	c.cs.s = append(c.cs.s, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (CfReserveMaxiterations)(c)
}

func (c SCfReserveBucketsize) Maxiterations(maxiterations int64) SCfReserveMaxiterations {
	c.cs.s = append(c.cs.s, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (SCfReserveMaxiterations)(c)
}

func (c CfReserveBucketsize) Expansion(expansion int64) CfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (CfReserveExpansion)(c)
}

func (c SCfReserveBucketsize) Expansion(expansion int64) SCfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SCfReserveExpansion)(c)
}

func (c CfReserveBucketsize) Build() Completed {
	return Completed(c)
}

func (c SCfReserveBucketsize) Build() SCompleted {
	return SCompleted(c)
}

type CfReserveCapacity Completed

type SCfReserveCapacity SCompleted

func (c CfReserveCapacity) Bucketsize(bucketsize int64) CfReserveBucketsize {
	c.cs.s = append(c.cs.s, "BUCKETSIZE", strconv.FormatInt(bucketsize, 10))
	return (CfReserveBucketsize)(c)
}

func (c SCfReserveCapacity) Bucketsize(bucketsize int64) SCfReserveBucketsize {
	c.cs.s = append(c.cs.s, "BUCKETSIZE", strconv.FormatInt(bucketsize, 10))
	return (SCfReserveBucketsize)(c)
}

func (c CfReserveCapacity) Maxiterations(maxiterations int64) CfReserveMaxiterations {
	c.cs.s = append(c.cs.s, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (CfReserveMaxiterations)(c)
}

func (c SCfReserveCapacity) Maxiterations(maxiterations int64) SCfReserveMaxiterations {
	c.cs.s = append(c.cs.s, "MAXITERATIONS", strconv.FormatInt(maxiterations, 10))
	return (SCfReserveMaxiterations)(c)
}

func (c CfReserveCapacity) Expansion(expansion int64) CfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (CfReserveExpansion)(c)
}

func (c SCfReserveCapacity) Expansion(expansion int64) SCfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SCfReserveExpansion)(c)
}

func (c CfReserveCapacity) Build() Completed {
	return Completed(c)
}

func (c SCfReserveCapacity) Build() SCompleted {
	return SCompleted(c)
}

type CfReserveExpansion Completed

type SCfReserveExpansion SCompleted

func (c CfReserveExpansion) Build() Completed {
	return Completed(c)
}

func (c SCfReserveExpansion) Build() SCompleted {
	return SCompleted(c)
}

type CfReserveKey Completed

type SCfReserveKey SCompleted

func (c CfReserveKey) Capacity(capacity int64) CfReserveCapacity {
	c.cs.s = append(c.cs.s, strconv.FormatInt(capacity, 10))
	return (CfReserveCapacity)(c)
}

func (c SCfReserveKey) Capacity(capacity int64) SCfReserveCapacity {
	c.cs.s = append(c.cs.s, strconv.FormatInt(capacity, 10))
	return (SCfReserveCapacity)(c)
}

type CfReserveMaxiterations Completed

type SCfReserveMaxiterations SCompleted

func (c CfReserveMaxiterations) Expansion(expansion int64) CfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (CfReserveExpansion)(c)
}

func (c SCfReserveMaxiterations) Expansion(expansion int64) SCfReserveExpansion {
	c.cs.s = append(c.cs.s, "EXPANSION", strconv.FormatInt(expansion, 10))
	return (SCfReserveExpansion)(c)
}

func (c CfReserveMaxiterations) Build() Completed {
	return Completed(c)
}

func (c SCfReserveMaxiterations) Build() SCompleted {
	return SCompleted(c)
}

type CfScandump Completed

type SCfScandump SCompleted

func (b *Builder) CfScandump() (c CfScandump) {
	c = CfScandump{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.SCANDUMP")
	return c
}

func (b *SBuilder) CfScandump() (c SCfScandump) {
	c = SCfScandump{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CF.SCANDUMP")
	return c
}

func (c CfScandump) Key(key string) CfScandumpKey {
	c.cs.s = append(c.cs.s, key)
	return (CfScandumpKey)(c)
}

func (c SCfScandump) Key(key string) SCfScandumpKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCfScandumpKey)(c)
}

type CfScandumpIterator Completed

type SCfScandumpIterator SCompleted

func (c CfScandumpIterator) Build() Completed {
	return Completed(c)
}

func (c SCfScandumpIterator) Build() SCompleted {
	return SCompleted(c)
}

type CfScandumpKey Completed

type SCfScandumpKey SCompleted

func (c CfScandumpKey) Iterator(iterator int64) CfScandumpIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (CfScandumpIterator)(c)
}

func (c SCfScandumpKey) Iterator(iterator int64) SCfScandumpIterator {
	c.cs.s = append(c.cs.s, strconv.FormatInt(iterator, 10))
	return (SCfScandumpIterator)(c)
}

type ClientCaching Completed

type SClientCaching SCompleted

func (b *Builder) ClientCaching() (c ClientCaching) {
	c = ClientCaching{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "CACHING")
	return c
}

func (b *SBuilder) ClientCaching() (c SClientCaching) {
	c = SClientCaching{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "CACHING")
	return c
}

func (c ClientCaching) Yes() ClientCachingModeYes {
	c.cs.s = append(c.cs.s, "YES")
	return (ClientCachingModeYes)(c)
}

func (c SClientCaching) Yes() SClientCachingModeYes {
	c.cs.s = append(c.cs.s, "YES")
	return (SClientCachingModeYes)(c)
}

func (c ClientCaching) No() ClientCachingModeNo {
	c.cs.s = append(c.cs.s, "NO")
	return (ClientCachingModeNo)(c)
}

func (c SClientCaching) No() SClientCachingModeNo {
	c.cs.s = append(c.cs.s, "NO")
	return (SClientCachingModeNo)(c)
}

type ClientCachingModeNo Completed

type SClientCachingModeNo SCompleted

func (c ClientCachingModeNo) Build() Completed {
	return Completed(c)
}

func (c SClientCachingModeNo) Build() SCompleted {
	return SCompleted(c)
}

type ClientCachingModeYes Completed

type SClientCachingModeYes SCompleted

func (c ClientCachingModeYes) Build() Completed {
	return Completed(c)
}

func (c SClientCachingModeYes) Build() SCompleted {
	return SCompleted(c)
}

type ClientGetname Completed

type SClientGetname SCompleted

func (b *Builder) ClientGetname() (c ClientGetname) {
	c = ClientGetname{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "GETNAME")
	return c
}

func (b *SBuilder) ClientGetname() (c SClientGetname) {
	c = SClientGetname{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "GETNAME")
	return c
}

func (c ClientGetname) Build() Completed {
	return Completed(c)
}

func (c SClientGetname) Build() SCompleted {
	return SCompleted(c)
}

type ClientGetredir Completed

type SClientGetredir SCompleted

func (b *Builder) ClientGetredir() (c ClientGetredir) {
	c = ClientGetredir{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "GETREDIR")
	return c
}

func (b *SBuilder) ClientGetredir() (c SClientGetredir) {
	c = SClientGetredir{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "GETREDIR")
	return c
}

func (c ClientGetredir) Build() Completed {
	return Completed(c)
}

func (c SClientGetredir) Build() SCompleted {
	return SCompleted(c)
}

type ClientId Completed

type SClientId SCompleted

func (b *Builder) ClientId() (c ClientId) {
	c = ClientId{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "ID")
	return c
}

func (b *SBuilder) ClientId() (c SClientId) {
	c = SClientId{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "ID")
	return c
}

func (c ClientId) Build() Completed {
	return Completed(c)
}

func (c SClientId) Build() SCompleted {
	return SCompleted(c)
}

type ClientInfo Completed

type SClientInfo SCompleted

func (b *Builder) ClientInfo() (c ClientInfo) {
	c = ClientInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "INFO")
	return c
}

func (b *SBuilder) ClientInfo() (c SClientInfo) {
	c = SClientInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "INFO")
	return c
}

func (c ClientInfo) Build() Completed {
	return Completed(c)
}

func (c SClientInfo) Build() SCompleted {
	return SCompleted(c)
}

type ClientKill Completed

type SClientKill SCompleted

func (b *Builder) ClientKill() (c ClientKill) {
	c = ClientKill{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "KILL")
	return c
}

func (b *SBuilder) ClientKill() (c SClientKill) {
	c = SClientKill{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "KILL")
	return c
}

func (c ClientKill) IpPort(ipPort string) ClientKillIpPort {
	c.cs.s = append(c.cs.s, ipPort)
	return (ClientKillIpPort)(c)
}

func (c SClientKill) IpPort(ipPort string) SClientKillIpPort {
	c.cs.s = append(c.cs.s, ipPort)
	return (SClientKillIpPort)(c)
}

func (c ClientKill) Id(clientId int64) ClientKillId {
	c.cs.s = append(c.cs.s, "ID", strconv.FormatInt(clientId, 10))
	return (ClientKillId)(c)
}

func (c SClientKill) Id(clientId int64) SClientKillId {
	c.cs.s = append(c.cs.s, "ID", strconv.FormatInt(clientId, 10))
	return (SClientKillId)(c)
}

func (c ClientKill) TypeNormal() ClientKillTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (ClientKillTypeNormal)(c)
}

func (c SClientKill) TypeNormal() SClientKillTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (SClientKillTypeNormal)(c)
}

func (c ClientKill) TypeMaster() ClientKillTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (ClientKillTypeMaster)(c)
}

func (c SClientKill) TypeMaster() SClientKillTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (SClientKillTypeMaster)(c)
}

func (c ClientKill) TypeSlave() ClientKillTypeSlave {
	c.cs.s = append(c.cs.s, "TYPE", "slave")
	return (ClientKillTypeSlave)(c)
}

func (c SClientKill) TypeSlave() SClientKillTypeSlave {
	c.cs.s = append(c.cs.s, "TYPE", "slave")
	return (SClientKillTypeSlave)(c)
}

func (c ClientKill) TypePubsub() ClientKillTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (ClientKillTypePubsub)(c)
}

func (c SClientKill) TypePubsub() SClientKillTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (SClientKillTypePubsub)(c)
}

func (c ClientKill) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKill) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKill) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKill) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKill) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKill) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKill) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKill) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKill) Build() Completed {
	return Completed(c)
}

func (c SClientKill) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillAddr Completed

type SClientKillAddr SCompleted

func (c ClientKillAddr) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillAddr) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillAddr) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillAddr) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillAddr) Build() Completed {
	return Completed(c)
}

func (c SClientKillAddr) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillId Completed

type SClientKillId SCompleted

func (c ClientKillId) TypeNormal() ClientKillTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (ClientKillTypeNormal)(c)
}

func (c SClientKillId) TypeNormal() SClientKillTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (SClientKillTypeNormal)(c)
}

func (c ClientKillId) TypeMaster() ClientKillTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (ClientKillTypeMaster)(c)
}

func (c SClientKillId) TypeMaster() SClientKillTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (SClientKillTypeMaster)(c)
}

func (c ClientKillId) TypeSlave() ClientKillTypeSlave {
	c.cs.s = append(c.cs.s, "TYPE", "slave")
	return (ClientKillTypeSlave)(c)
}

func (c SClientKillId) TypeSlave() SClientKillTypeSlave {
	c.cs.s = append(c.cs.s, "TYPE", "slave")
	return (SClientKillTypeSlave)(c)
}

func (c ClientKillId) TypePubsub() ClientKillTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (ClientKillTypePubsub)(c)
}

func (c SClientKillId) TypePubsub() SClientKillTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (SClientKillTypePubsub)(c)
}

func (c ClientKillId) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillId) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillId) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillId) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillId) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillId) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillId) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillId) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillId) Build() Completed {
	return Completed(c)
}

func (c SClientKillId) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillIpPort Completed

type SClientKillIpPort SCompleted

func (c ClientKillIpPort) Id(clientId int64) ClientKillId {
	c.cs.s = append(c.cs.s, "ID", strconv.FormatInt(clientId, 10))
	return (ClientKillId)(c)
}

func (c SClientKillIpPort) Id(clientId int64) SClientKillId {
	c.cs.s = append(c.cs.s, "ID", strconv.FormatInt(clientId, 10))
	return (SClientKillId)(c)
}

func (c ClientKillIpPort) TypeNormal() ClientKillTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (ClientKillTypeNormal)(c)
}

func (c SClientKillIpPort) TypeNormal() SClientKillTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (SClientKillTypeNormal)(c)
}

func (c ClientKillIpPort) TypeMaster() ClientKillTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (ClientKillTypeMaster)(c)
}

func (c SClientKillIpPort) TypeMaster() SClientKillTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (SClientKillTypeMaster)(c)
}

func (c ClientKillIpPort) TypeSlave() ClientKillTypeSlave {
	c.cs.s = append(c.cs.s, "TYPE", "slave")
	return (ClientKillTypeSlave)(c)
}

func (c SClientKillIpPort) TypeSlave() SClientKillTypeSlave {
	c.cs.s = append(c.cs.s, "TYPE", "slave")
	return (SClientKillTypeSlave)(c)
}

func (c ClientKillIpPort) TypePubsub() ClientKillTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (ClientKillTypePubsub)(c)
}

func (c SClientKillIpPort) TypePubsub() SClientKillTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (SClientKillTypePubsub)(c)
}

func (c ClientKillIpPort) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillIpPort) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillIpPort) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillIpPort) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillIpPort) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillIpPort) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillIpPort) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillIpPort) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillIpPort) Build() Completed {
	return Completed(c)
}

func (c SClientKillIpPort) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillLaddr Completed

type SClientKillLaddr SCompleted

func (c ClientKillLaddr) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillLaddr) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillLaddr) Build() Completed {
	return Completed(c)
}

func (c SClientKillLaddr) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillSkipme Completed

type SClientKillSkipme SCompleted

func (c ClientKillSkipme) Build() Completed {
	return Completed(c)
}

func (c SClientKillSkipme) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypeMaster Completed

type SClientKillTypeMaster SCompleted

func (c ClientKillTypeMaster) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypeMaster) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypeMaster) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypeMaster) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypeMaster) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypeMaster) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypeMaster) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypeMaster) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypeMaster) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypeMaster) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypeNormal Completed

type SClientKillTypeNormal SCompleted

func (c ClientKillTypeNormal) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypeNormal) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypeNormal) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypeNormal) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypeNormal) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypeNormal) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypeNormal) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypeNormal) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypeNormal) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypeNormal) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypePubsub Completed

type SClientKillTypePubsub SCompleted

func (c ClientKillTypePubsub) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypePubsub) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypePubsub) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypePubsub) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypePubsub) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypePubsub) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypePubsub) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypePubsub) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypePubsub) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypePubsub) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillTypeSlave Completed

type SClientKillTypeSlave SCompleted

func (c ClientKillTypeSlave) User(username string) ClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (ClientKillUser)(c)
}

func (c SClientKillTypeSlave) User(username string) SClientKillUser {
	c.cs.s = append(c.cs.s, "USER", username)
	return (SClientKillUser)(c)
}

func (c ClientKillTypeSlave) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillTypeSlave) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillTypeSlave) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillTypeSlave) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillTypeSlave) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillTypeSlave) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillTypeSlave) Build() Completed {
	return Completed(c)
}

func (c SClientKillTypeSlave) Build() SCompleted {
	return SCompleted(c)
}

type ClientKillUser Completed

type SClientKillUser SCompleted

func (c ClientKillUser) Addr(ipPort string) ClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (ClientKillAddr)(c)
}

func (c SClientKillUser) Addr(ipPort string) SClientKillAddr {
	c.cs.s = append(c.cs.s, "ADDR", ipPort)
	return (SClientKillAddr)(c)
}

func (c ClientKillUser) Laddr(ipPort string) ClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (ClientKillLaddr)(c)
}

func (c SClientKillUser) Laddr(ipPort string) SClientKillLaddr {
	c.cs.s = append(c.cs.s, "LADDR", ipPort)
	return (SClientKillLaddr)(c)
}

func (c ClientKillUser) Skipme(yesNo string) ClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (ClientKillSkipme)(c)
}

func (c SClientKillUser) Skipme(yesNo string) SClientKillSkipme {
	c.cs.s = append(c.cs.s, "SKIPME", yesNo)
	return (SClientKillSkipme)(c)
}

func (c ClientKillUser) Build() Completed {
	return Completed(c)
}

func (c SClientKillUser) Build() SCompleted {
	return SCompleted(c)
}

type ClientList Completed

type SClientList SCompleted

func (b *Builder) ClientList() (c ClientList) {
	c = ClientList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "LIST")
	return c
}

func (b *SBuilder) ClientList() (c SClientList) {
	c = SClientList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "LIST")
	return c
}

func (c ClientList) TypeNormal() ClientListTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (ClientListTypeNormal)(c)
}

func (c SClientList) TypeNormal() SClientListTypeNormal {
	c.cs.s = append(c.cs.s, "TYPE", "normal")
	return (SClientListTypeNormal)(c)
}

func (c ClientList) TypeMaster() ClientListTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (ClientListTypeMaster)(c)
}

func (c SClientList) TypeMaster() SClientListTypeMaster {
	c.cs.s = append(c.cs.s, "TYPE", "master")
	return (SClientListTypeMaster)(c)
}

func (c ClientList) TypeReplica() ClientListTypeReplica {
	c.cs.s = append(c.cs.s, "TYPE", "replica")
	return (ClientListTypeReplica)(c)
}

func (c SClientList) TypeReplica() SClientListTypeReplica {
	c.cs.s = append(c.cs.s, "TYPE", "replica")
	return (SClientListTypeReplica)(c)
}

func (c ClientList) TypePubsub() ClientListTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (ClientListTypePubsub)(c)
}

func (c SClientList) TypePubsub() SClientListTypePubsub {
	c.cs.s = append(c.cs.s, "TYPE", "pubsub")
	return (SClientListTypePubsub)(c)
}

func (c ClientList) Id() ClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (ClientListIdId)(c)
}

func (c SClientList) Id() SClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (SClientListIdId)(c)
}

func (c ClientList) Build() Completed {
	return Completed(c)
}

func (c SClientList) Build() SCompleted {
	return SCompleted(c)
}

type ClientListIdClientId Completed

type SClientListIdClientId SCompleted

func (c ClientListIdClientId) ClientId(clientId ...int64) ClientListIdClientId {
	for _, n := range clientId {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SClientListIdClientId) ClientId(clientId ...int64) SClientListIdClientId {
	for _, n := range clientId {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ClientListIdClientId) Build() Completed {
	return Completed(c)
}

func (c SClientListIdClientId) Build() SCompleted {
	return SCompleted(c)
}

type ClientListIdId Completed

type SClientListIdId SCompleted

func (c ClientListIdId) ClientId(clientId ...int64) ClientListIdClientId {
	for _, n := range clientId {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ClientListIdClientId)(c)
}

func (c SClientListIdId) ClientId(clientId ...int64) SClientListIdClientId {
	for _, n := range clientId {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SClientListIdClientId)(c)
}

type ClientListTypeMaster Completed

type SClientListTypeMaster SCompleted

func (c ClientListTypeMaster) Id() ClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypeMaster) Id() SClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypeMaster) Build() Completed {
	return Completed(c)
}

func (c SClientListTypeMaster) Build() SCompleted {
	return SCompleted(c)
}

type ClientListTypeNormal Completed

type SClientListTypeNormal SCompleted

func (c ClientListTypeNormal) Id() ClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypeNormal) Id() SClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypeNormal) Build() Completed {
	return Completed(c)
}

func (c SClientListTypeNormal) Build() SCompleted {
	return SCompleted(c)
}

type ClientListTypePubsub Completed

type SClientListTypePubsub SCompleted

func (c ClientListTypePubsub) Id() ClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypePubsub) Id() SClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypePubsub) Build() Completed {
	return Completed(c)
}

func (c SClientListTypePubsub) Build() SCompleted {
	return SCompleted(c)
}

type ClientListTypeReplica Completed

type SClientListTypeReplica SCompleted

func (c ClientListTypeReplica) Id() ClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (ClientListIdId)(c)
}

func (c SClientListTypeReplica) Id() SClientListIdId {
	c.cs.s = append(c.cs.s, "ID")
	return (SClientListIdId)(c)
}

func (c ClientListTypeReplica) Build() Completed {
	return Completed(c)
}

func (c SClientListTypeReplica) Build() SCompleted {
	return SCompleted(c)
}

type ClientNoEvict Completed

type SClientNoEvict SCompleted

func (b *Builder) ClientNoEvict() (c ClientNoEvict) {
	c = ClientNoEvict{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "NO-EVICT")
	return c
}

func (b *SBuilder) ClientNoEvict() (c SClientNoEvict) {
	c = SClientNoEvict{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "NO-EVICT")
	return c
}

func (c ClientNoEvict) On() ClientNoEvictEnabledOn {
	c.cs.s = append(c.cs.s, "ON")
	return (ClientNoEvictEnabledOn)(c)
}

func (c SClientNoEvict) On() SClientNoEvictEnabledOn {
	c.cs.s = append(c.cs.s, "ON")
	return (SClientNoEvictEnabledOn)(c)
}

func (c ClientNoEvict) Off() ClientNoEvictEnabledOff {
	c.cs.s = append(c.cs.s, "OFF")
	return (ClientNoEvictEnabledOff)(c)
}

func (c SClientNoEvict) Off() SClientNoEvictEnabledOff {
	c.cs.s = append(c.cs.s, "OFF")
	return (SClientNoEvictEnabledOff)(c)
}

type ClientNoEvictEnabledOff Completed

type SClientNoEvictEnabledOff SCompleted

func (c ClientNoEvictEnabledOff) Build() Completed {
	return Completed(c)
}

func (c SClientNoEvictEnabledOff) Build() SCompleted {
	return SCompleted(c)
}

type ClientNoEvictEnabledOn Completed

type SClientNoEvictEnabledOn SCompleted

func (c ClientNoEvictEnabledOn) Build() Completed {
	return Completed(c)
}

func (c SClientNoEvictEnabledOn) Build() SCompleted {
	return SCompleted(c)
}

type ClientPause Completed

type SClientPause SCompleted

func (b *Builder) ClientPause() (c ClientPause) {
	c = ClientPause{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "CLIENT", "PAUSE")
	return c
}

func (b *SBuilder) ClientPause() (c SClientPause) {
	c = SClientPause{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "CLIENT", "PAUSE")
	return c
}

func (c ClientPause) Timeout(timeout int64) ClientPauseTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timeout, 10))
	return (ClientPauseTimeout)(c)
}

func (c SClientPause) Timeout(timeout int64) SClientPauseTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timeout, 10))
	return (SClientPauseTimeout)(c)
}

type ClientPauseModeAll Completed

type SClientPauseModeAll SCompleted

func (c ClientPauseModeAll) Build() Completed {
	return Completed(c)
}

func (c SClientPauseModeAll) Build() SCompleted {
	return SCompleted(c)
}

type ClientPauseModeWrite Completed

type SClientPauseModeWrite SCompleted

func (c ClientPauseModeWrite) Build() Completed {
	return Completed(c)
}

func (c SClientPauseModeWrite) Build() SCompleted {
	return SCompleted(c)
}

type ClientPauseTimeout Completed

type SClientPauseTimeout SCompleted

func (c ClientPauseTimeout) Write() ClientPauseModeWrite {
	c.cs.s = append(c.cs.s, "WRITE")
	return (ClientPauseModeWrite)(c)
}

func (c SClientPauseTimeout) Write() SClientPauseModeWrite {
	c.cs.s = append(c.cs.s, "WRITE")
	return (SClientPauseModeWrite)(c)
}

func (c ClientPauseTimeout) All() ClientPauseModeAll {
	c.cs.s = append(c.cs.s, "ALL")
	return (ClientPauseModeAll)(c)
}

func (c SClientPauseTimeout) All() SClientPauseModeAll {
	c.cs.s = append(c.cs.s, "ALL")
	return (SClientPauseModeAll)(c)
}

func (c ClientPauseTimeout) Build() Completed {
	return Completed(c)
}

func (c SClientPauseTimeout) Build() SCompleted {
	return SCompleted(c)
}

type ClientReply Completed

type SClientReply SCompleted

func (b *Builder) ClientReply() (c ClientReply) {
	c = ClientReply{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "REPLY")
	return c
}

func (b *SBuilder) ClientReply() (c SClientReply) {
	c = SClientReply{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "REPLY")
	return c
}

func (c ClientReply) On() ClientReplyReplyModeOn {
	c.cs.s = append(c.cs.s, "ON")
	return (ClientReplyReplyModeOn)(c)
}

func (c SClientReply) On() SClientReplyReplyModeOn {
	c.cs.s = append(c.cs.s, "ON")
	return (SClientReplyReplyModeOn)(c)
}

func (c ClientReply) Off() ClientReplyReplyModeOff {
	c.cs.s = append(c.cs.s, "OFF")
	return (ClientReplyReplyModeOff)(c)
}

func (c SClientReply) Off() SClientReplyReplyModeOff {
	c.cs.s = append(c.cs.s, "OFF")
	return (SClientReplyReplyModeOff)(c)
}

func (c ClientReply) Skip() ClientReplyReplyModeSkip {
	c.cs.s = append(c.cs.s, "SKIP")
	return (ClientReplyReplyModeSkip)(c)
}

func (c SClientReply) Skip() SClientReplyReplyModeSkip {
	c.cs.s = append(c.cs.s, "SKIP")
	return (SClientReplyReplyModeSkip)(c)
}

type ClientReplyReplyModeOff Completed

type SClientReplyReplyModeOff SCompleted

func (c ClientReplyReplyModeOff) Build() Completed {
	return Completed(c)
}

func (c SClientReplyReplyModeOff) Build() SCompleted {
	return SCompleted(c)
}

type ClientReplyReplyModeOn Completed

type SClientReplyReplyModeOn SCompleted

func (c ClientReplyReplyModeOn) Build() Completed {
	return Completed(c)
}

func (c SClientReplyReplyModeOn) Build() SCompleted {
	return SCompleted(c)
}

type ClientReplyReplyModeSkip Completed

type SClientReplyReplyModeSkip SCompleted

func (c ClientReplyReplyModeSkip) Build() Completed {
	return Completed(c)
}

func (c SClientReplyReplyModeSkip) Build() SCompleted {
	return SCompleted(c)
}

type ClientSetname Completed

type SClientSetname SCompleted

func (b *Builder) ClientSetname() (c ClientSetname) {
	c = ClientSetname{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "SETNAME")
	return c
}

func (b *SBuilder) ClientSetname() (c SClientSetname) {
	c = SClientSetname{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "SETNAME")
	return c
}

func (c ClientSetname) ConnectionName(connectionName string) ClientSetnameConnectionName {
	c.cs.s = append(c.cs.s, connectionName)
	return (ClientSetnameConnectionName)(c)
}

func (c SClientSetname) ConnectionName(connectionName string) SClientSetnameConnectionName {
	c.cs.s = append(c.cs.s, connectionName)
	return (SClientSetnameConnectionName)(c)
}

type ClientSetnameConnectionName Completed

type SClientSetnameConnectionName SCompleted

func (c ClientSetnameConnectionName) Build() Completed {
	return Completed(c)
}

func (c SClientSetnameConnectionName) Build() SCompleted {
	return SCompleted(c)
}

type ClientTracking Completed

type SClientTracking SCompleted

func (b *Builder) ClientTracking() (c ClientTracking) {
	c = ClientTracking{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "TRACKING")
	return c
}

func (b *SBuilder) ClientTracking() (c SClientTracking) {
	c = SClientTracking{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "TRACKING")
	return c
}

func (c ClientTracking) On() ClientTrackingStatusOn {
	c.cs.s = append(c.cs.s, "ON")
	return (ClientTrackingStatusOn)(c)
}

func (c SClientTracking) On() SClientTrackingStatusOn {
	c.cs.s = append(c.cs.s, "ON")
	return (SClientTrackingStatusOn)(c)
}

func (c ClientTracking) Off() ClientTrackingStatusOff {
	c.cs.s = append(c.cs.s, "OFF")
	return (ClientTrackingStatusOff)(c)
}

func (c SClientTracking) Off() SClientTrackingStatusOff {
	c.cs.s = append(c.cs.s, "OFF")
	return (SClientTrackingStatusOff)(c)
}

type ClientTrackingBcast Completed

type SClientTrackingBcast SCompleted

func (c ClientTrackingBcast) Optin() ClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingBcast) Optin() SClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingBcast) Optout() ClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingBcast) Optout() SClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingBcast) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingBcast) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingBcast) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingBcast) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingNoloop Completed

type SClientTrackingNoloop SCompleted

func (c ClientTrackingNoloop) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingNoloop) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingOptin Completed

type SClientTrackingOptin SCompleted

func (c ClientTrackingOptin) Optout() ClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingOptin) Optout() SClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingOptin) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingOptin) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingOptin) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingOptin) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingOptout Completed

type SClientTrackingOptout SCompleted

func (c ClientTrackingOptout) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingOptout) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingOptout) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingOptout) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingPrefix Completed

type SClientTrackingPrefix SCompleted

func (c ClientTrackingPrefix) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return c
}

func (c SClientTrackingPrefix) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return c
}

func (c ClientTrackingPrefix) Bcast() ClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingPrefix) Bcast() SClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingPrefix) Optin() ClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingPrefix) Optin() SClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingPrefix) Optout() ClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingPrefix) Optout() SClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingPrefix) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingPrefix) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingPrefix) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingPrefix) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingRedirect Completed

type SClientTrackingRedirect SCompleted

func (c ClientTrackingRedirect) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return (ClientTrackingPrefix)(c)
}

func (c SClientTrackingRedirect) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return (SClientTrackingPrefix)(c)
}

func (c ClientTrackingRedirect) Bcast() ClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingRedirect) Bcast() SClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingRedirect) Optin() ClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingRedirect) Optin() SClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingRedirect) Optout() ClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingRedirect) Optout() SClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingRedirect) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingRedirect) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingRedirect) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingRedirect) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingStatusOff Completed

type SClientTrackingStatusOff SCompleted

func (c ClientTrackingStatusOff) Redirect(clientId int64) ClientTrackingRedirect {
	c.cs.s = append(c.cs.s, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (ClientTrackingRedirect)(c)
}

func (c SClientTrackingStatusOff) Redirect(clientId int64) SClientTrackingRedirect {
	c.cs.s = append(c.cs.s, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (SClientTrackingRedirect)(c)
}

func (c ClientTrackingStatusOff) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return (ClientTrackingPrefix)(c)
}

func (c SClientTrackingStatusOff) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return (SClientTrackingPrefix)(c)
}

func (c ClientTrackingStatusOff) Bcast() ClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingStatusOff) Bcast() SClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingStatusOff) Optin() ClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingStatusOff) Optin() SClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingStatusOff) Optout() ClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingStatusOff) Optout() SClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingStatusOff) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingStatusOff) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingStatusOff) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingStatusOff) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackingStatusOn Completed

type SClientTrackingStatusOn SCompleted

func (c ClientTrackingStatusOn) Redirect(clientId int64) ClientTrackingRedirect {
	c.cs.s = append(c.cs.s, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (ClientTrackingRedirect)(c)
}

func (c SClientTrackingStatusOn) Redirect(clientId int64) SClientTrackingRedirect {
	c.cs.s = append(c.cs.s, "REDIRECT", strconv.FormatInt(clientId, 10))
	return (SClientTrackingRedirect)(c)
}

func (c ClientTrackingStatusOn) Prefix(prefix ...string) ClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return (ClientTrackingPrefix)(c)
}

func (c SClientTrackingStatusOn) Prefix(prefix ...string) SClientTrackingPrefix {
	c.cs.s = append(c.cs.s, "PREFIX")
	c.cs.s = append(c.cs.s, prefix...)
	return (SClientTrackingPrefix)(c)
}

func (c ClientTrackingStatusOn) Bcast() ClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (ClientTrackingBcast)(c)
}

func (c SClientTrackingStatusOn) Bcast() SClientTrackingBcast {
	c.cs.s = append(c.cs.s, "BCAST")
	return (SClientTrackingBcast)(c)
}

func (c ClientTrackingStatusOn) Optin() ClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (ClientTrackingOptin)(c)
}

func (c SClientTrackingStatusOn) Optin() SClientTrackingOptin {
	c.cs.s = append(c.cs.s, "OPTIN")
	return (SClientTrackingOptin)(c)
}

func (c ClientTrackingStatusOn) Optout() ClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (ClientTrackingOptout)(c)
}

func (c SClientTrackingStatusOn) Optout() SClientTrackingOptout {
	c.cs.s = append(c.cs.s, "OPTOUT")
	return (SClientTrackingOptout)(c)
}

func (c ClientTrackingStatusOn) Noloop() ClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (ClientTrackingNoloop)(c)
}

func (c SClientTrackingStatusOn) Noloop() SClientTrackingNoloop {
	c.cs.s = append(c.cs.s, "NOLOOP")
	return (SClientTrackingNoloop)(c)
}

func (c ClientTrackingStatusOn) Build() Completed {
	return Completed(c)
}

func (c SClientTrackingStatusOn) Build() SCompleted {
	return SCompleted(c)
}

type ClientTrackinginfo Completed

type SClientTrackinginfo SCompleted

func (b *Builder) ClientTrackinginfo() (c ClientTrackinginfo) {
	c = ClientTrackinginfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "TRACKINGINFO")
	return c
}

func (b *SBuilder) ClientTrackinginfo() (c SClientTrackinginfo) {
	c = SClientTrackinginfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "TRACKINGINFO")
	return c
}

func (c ClientTrackinginfo) Build() Completed {
	return Completed(c)
}

func (c SClientTrackinginfo) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnblock Completed

type SClientUnblock SCompleted

func (b *Builder) ClientUnblock() (c ClientUnblock) {
	c = ClientUnblock{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "UNBLOCK")
	return c
}

func (b *SBuilder) ClientUnblock() (c SClientUnblock) {
	c = SClientUnblock{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "UNBLOCK")
	return c
}

func (c ClientUnblock) ClientId(clientId int64) ClientUnblockClientId {
	c.cs.s = append(c.cs.s, strconv.FormatInt(clientId, 10))
	return (ClientUnblockClientId)(c)
}

func (c SClientUnblock) ClientId(clientId int64) SClientUnblockClientId {
	c.cs.s = append(c.cs.s, strconv.FormatInt(clientId, 10))
	return (SClientUnblockClientId)(c)
}

type ClientUnblockClientId Completed

type SClientUnblockClientId SCompleted

func (c ClientUnblockClientId) Timeout() ClientUnblockUnblockTypeTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT")
	return (ClientUnblockUnblockTypeTimeout)(c)
}

func (c SClientUnblockClientId) Timeout() SClientUnblockUnblockTypeTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT")
	return (SClientUnblockUnblockTypeTimeout)(c)
}

func (c ClientUnblockClientId) Error() ClientUnblockUnblockTypeError {
	c.cs.s = append(c.cs.s, "ERROR")
	return (ClientUnblockUnblockTypeError)(c)
}

func (c SClientUnblockClientId) Error() SClientUnblockUnblockTypeError {
	c.cs.s = append(c.cs.s, "ERROR")
	return (SClientUnblockUnblockTypeError)(c)
}

func (c ClientUnblockClientId) Build() Completed {
	return Completed(c)
}

func (c SClientUnblockClientId) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnblockUnblockTypeError Completed

type SClientUnblockUnblockTypeError SCompleted

func (c ClientUnblockUnblockTypeError) Build() Completed {
	return Completed(c)
}

func (c SClientUnblockUnblockTypeError) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnblockUnblockTypeTimeout Completed

type SClientUnblockUnblockTypeTimeout SCompleted

func (c ClientUnblockUnblockTypeTimeout) Build() Completed {
	return Completed(c)
}

func (c SClientUnblockUnblockTypeTimeout) Build() SCompleted {
	return SCompleted(c)
}

type ClientUnpause Completed

type SClientUnpause SCompleted

func (b *Builder) ClientUnpause() (c ClientUnpause) {
	c = ClientUnpause{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "UNPAUSE")
	return c
}

func (b *SBuilder) ClientUnpause() (c SClientUnpause) {
	c = SClientUnpause{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLIENT", "UNPAUSE")
	return c
}

func (c ClientUnpause) Build() Completed {
	return Completed(c)
}

func (c SClientUnpause) Build() SCompleted {
	return SCompleted(c)
}

type ClusterAddslots Completed

type SClusterAddslots SCompleted

func (b *Builder) ClusterAddslots() (c ClusterAddslots) {
	c = ClusterAddslots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "ADDSLOTS")
	return c
}

func (b *SBuilder) ClusterAddslots() (c SClusterAddslots) {
	c = SClusterAddslots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "ADDSLOTS")
	return c
}

func (c ClusterAddslots) Slot(slot ...int64) ClusterAddslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ClusterAddslotsSlot)(c)
}

func (c SClusterAddslots) Slot(slot ...int64) SClusterAddslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SClusterAddslotsSlot)(c)
}

type ClusterAddslotsSlot Completed

type SClusterAddslotsSlot SCompleted

func (c ClusterAddslotsSlot) Slot(slot ...int64) ClusterAddslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SClusterAddslotsSlot) Slot(slot ...int64) SClusterAddslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ClusterAddslotsSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterAddslotsSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterAddslotsrange Completed

type SClusterAddslotsrange SCompleted

func (b *Builder) ClusterAddslotsrange() (c ClusterAddslotsrange) {
	c = ClusterAddslotsrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "ADDSLOTSRANGE")
	return c
}

func (b *SBuilder) ClusterAddslotsrange() (c SClusterAddslotsrange) {
	c = SClusterAddslotsrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "ADDSLOTSRANGE")
	return c
}

func (c ClusterAddslotsrange) StartSlotEndSlot() ClusterAddslotsrangeStartSlotEndSlot {
	return (ClusterAddslotsrangeStartSlotEndSlot)(c)
}

func (c SClusterAddslotsrange) StartSlotEndSlot() SClusterAddslotsrangeStartSlotEndSlot {
	return (SClusterAddslotsrangeStartSlotEndSlot)(c)
}

type ClusterAddslotsrangeStartSlotEndSlot Completed

type SClusterAddslotsrangeStartSlotEndSlot SCompleted

func (c ClusterAddslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) ClusterAddslotsrangeStartSlotEndSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c SClusterAddslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) SClusterAddslotsrangeStartSlotEndSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c ClusterAddslotsrangeStartSlotEndSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterAddslotsrangeStartSlotEndSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterBumpepoch Completed

type SClusterBumpepoch SCompleted

func (b *Builder) ClusterBumpepoch() (c ClusterBumpepoch) {
	c = ClusterBumpepoch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "BUMPEPOCH")
	return c
}

func (b *SBuilder) ClusterBumpepoch() (c SClusterBumpepoch) {
	c = SClusterBumpepoch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "BUMPEPOCH")
	return c
}

func (c ClusterBumpepoch) Build() Completed {
	return Completed(c)
}

func (c SClusterBumpepoch) Build() SCompleted {
	return SCompleted(c)
}

type ClusterCountFailureReports Completed

type SClusterCountFailureReports SCompleted

func (b *Builder) ClusterCountFailureReports() (c ClusterCountFailureReports) {
	c = ClusterCountFailureReports{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "COUNT-FAILURE-REPORTS")
	return c
}

func (b *SBuilder) ClusterCountFailureReports() (c SClusterCountFailureReports) {
	c = SClusterCountFailureReports{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "COUNT-FAILURE-REPORTS")
	return c
}

func (c ClusterCountFailureReports) NodeId(nodeId string) ClusterCountFailureReportsNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterCountFailureReportsNodeId)(c)
}

func (c SClusterCountFailureReports) NodeId(nodeId string) SClusterCountFailureReportsNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterCountFailureReportsNodeId)(c)
}

type ClusterCountFailureReportsNodeId Completed

type SClusterCountFailureReportsNodeId SCompleted

func (c ClusterCountFailureReportsNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterCountFailureReportsNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterCountkeysinslot Completed

type SClusterCountkeysinslot SCompleted

func (b *Builder) ClusterCountkeysinslot() (c ClusterCountkeysinslot) {
	c = ClusterCountkeysinslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "COUNTKEYSINSLOT")
	return c
}

func (b *SBuilder) ClusterCountkeysinslot() (c SClusterCountkeysinslot) {
	c = SClusterCountkeysinslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "COUNTKEYSINSLOT")
	return c
}

func (c ClusterCountkeysinslot) Slot(slot int64) ClusterCountkeysinslotSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(slot, 10))
	return (ClusterCountkeysinslotSlot)(c)
}

func (c SClusterCountkeysinslot) Slot(slot int64) SClusterCountkeysinslotSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(slot, 10))
	return (SClusterCountkeysinslotSlot)(c)
}

type ClusterCountkeysinslotSlot Completed

type SClusterCountkeysinslotSlot SCompleted

func (c ClusterCountkeysinslotSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterCountkeysinslotSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterDelslots Completed

type SClusterDelslots SCompleted

func (b *Builder) ClusterDelslots() (c ClusterDelslots) {
	c = ClusterDelslots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "DELSLOTS")
	return c
}

func (b *SBuilder) ClusterDelslots() (c SClusterDelslots) {
	c = SClusterDelslots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "DELSLOTS")
	return c
}

func (c ClusterDelslots) Slot(slot ...int64) ClusterDelslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ClusterDelslotsSlot)(c)
}

func (c SClusterDelslots) Slot(slot ...int64) SClusterDelslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SClusterDelslotsSlot)(c)
}

type ClusterDelslotsSlot Completed

type SClusterDelslotsSlot SCompleted

func (c ClusterDelslotsSlot) Slot(slot ...int64) ClusterDelslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SClusterDelslotsSlot) Slot(slot ...int64) SClusterDelslotsSlot {
	for _, n := range slot {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ClusterDelslotsSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterDelslotsSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterDelslotsrange Completed

type SClusterDelslotsrange SCompleted

func (b *Builder) ClusterDelslotsrange() (c ClusterDelslotsrange) {
	c = ClusterDelslotsrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "DELSLOTSRANGE")
	return c
}

func (b *SBuilder) ClusterDelslotsrange() (c SClusterDelslotsrange) {
	c = SClusterDelslotsrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "DELSLOTSRANGE")
	return c
}

func (c ClusterDelslotsrange) StartSlotEndSlot() ClusterDelslotsrangeStartSlotEndSlot {
	return (ClusterDelslotsrangeStartSlotEndSlot)(c)
}

func (c SClusterDelslotsrange) StartSlotEndSlot() SClusterDelslotsrangeStartSlotEndSlot {
	return (SClusterDelslotsrangeStartSlotEndSlot)(c)
}

type ClusterDelslotsrangeStartSlotEndSlot Completed

type SClusterDelslotsrangeStartSlotEndSlot SCompleted

func (c ClusterDelslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) ClusterDelslotsrangeStartSlotEndSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c SClusterDelslotsrangeStartSlotEndSlot) StartSlotEndSlot(startSlot int64, endSlot int64) SClusterDelslotsrangeStartSlotEndSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(startSlot, 10), strconv.FormatInt(endSlot, 10))
	return c
}

func (c ClusterDelslotsrangeStartSlotEndSlot) Build() Completed {
	return Completed(c)
}

func (c SClusterDelslotsrangeStartSlotEndSlot) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFailover Completed

type SClusterFailover SCompleted

func (b *Builder) ClusterFailover() (c ClusterFailover) {
	c = ClusterFailover{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "FAILOVER")
	return c
}

func (b *SBuilder) ClusterFailover() (c SClusterFailover) {
	c = SClusterFailover{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "FAILOVER")
	return c
}

func (c ClusterFailover) Force() ClusterFailoverOptionsForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (ClusterFailoverOptionsForce)(c)
}

func (c SClusterFailover) Force() SClusterFailoverOptionsForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (SClusterFailoverOptionsForce)(c)
}

func (c ClusterFailover) Takeover() ClusterFailoverOptionsTakeover {
	c.cs.s = append(c.cs.s, "TAKEOVER")
	return (ClusterFailoverOptionsTakeover)(c)
}

func (c SClusterFailover) Takeover() SClusterFailoverOptionsTakeover {
	c.cs.s = append(c.cs.s, "TAKEOVER")
	return (SClusterFailoverOptionsTakeover)(c)
}

func (c ClusterFailover) Build() Completed {
	return Completed(c)
}

func (c SClusterFailover) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFailoverOptionsForce Completed

type SClusterFailoverOptionsForce SCompleted

func (c ClusterFailoverOptionsForce) Build() Completed {
	return Completed(c)
}

func (c SClusterFailoverOptionsForce) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFailoverOptionsTakeover Completed

type SClusterFailoverOptionsTakeover SCompleted

func (c ClusterFailoverOptionsTakeover) Build() Completed {
	return Completed(c)
}

func (c SClusterFailoverOptionsTakeover) Build() SCompleted {
	return SCompleted(c)
}

type ClusterFlushslots Completed

type SClusterFlushslots SCompleted

func (b *Builder) ClusterFlushslots() (c ClusterFlushslots) {
	c = ClusterFlushslots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "FLUSHSLOTS")
	return c
}

func (b *SBuilder) ClusterFlushslots() (c SClusterFlushslots) {
	c = SClusterFlushslots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "FLUSHSLOTS")
	return c
}

func (c ClusterFlushslots) Build() Completed {
	return Completed(c)
}

func (c SClusterFlushslots) Build() SCompleted {
	return SCompleted(c)
}

type ClusterForget Completed

type SClusterForget SCompleted

func (b *Builder) ClusterForget() (c ClusterForget) {
	c = ClusterForget{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "FORGET")
	return c
}

func (b *SBuilder) ClusterForget() (c SClusterForget) {
	c = SClusterForget{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "FORGET")
	return c
}

func (c ClusterForget) NodeId(nodeId string) ClusterForgetNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterForgetNodeId)(c)
}

func (c SClusterForget) NodeId(nodeId string) SClusterForgetNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterForgetNodeId)(c)
}

type ClusterForgetNodeId Completed

type SClusterForgetNodeId SCompleted

func (c ClusterForgetNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterForgetNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterGetkeysinslot Completed

type SClusterGetkeysinslot SCompleted

func (b *Builder) ClusterGetkeysinslot() (c ClusterGetkeysinslot) {
	c = ClusterGetkeysinslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "GETKEYSINSLOT")
	return c
}

func (b *SBuilder) ClusterGetkeysinslot() (c SClusterGetkeysinslot) {
	c = SClusterGetkeysinslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "GETKEYSINSLOT")
	return c
}

func (c ClusterGetkeysinslot) Slot(slot int64) ClusterGetkeysinslotSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(slot, 10))
	return (ClusterGetkeysinslotSlot)(c)
}

func (c SClusterGetkeysinslot) Slot(slot int64) SClusterGetkeysinslotSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(slot, 10))
	return (SClusterGetkeysinslotSlot)(c)
}

type ClusterGetkeysinslotCount Completed

type SClusterGetkeysinslotCount SCompleted

func (c ClusterGetkeysinslotCount) Build() Completed {
	return Completed(c)
}

func (c SClusterGetkeysinslotCount) Build() SCompleted {
	return SCompleted(c)
}

type ClusterGetkeysinslotSlot Completed

type SClusterGetkeysinslotSlot SCompleted

func (c ClusterGetkeysinslotSlot) Count(count int64) ClusterGetkeysinslotCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (ClusterGetkeysinslotCount)(c)
}

func (c SClusterGetkeysinslotSlot) Count(count int64) SClusterGetkeysinslotCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SClusterGetkeysinslotCount)(c)
}

type ClusterInfo Completed

type SClusterInfo SCompleted

func (b *Builder) ClusterInfo() (c ClusterInfo) {
	c = ClusterInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "INFO")
	return c
}

func (b *SBuilder) ClusterInfo() (c SClusterInfo) {
	c = SClusterInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "INFO")
	return c
}

func (c ClusterInfo) Build() Completed {
	return Completed(c)
}

func (c SClusterInfo) Build() SCompleted {
	return SCompleted(c)
}

type ClusterKeyslot Completed

type SClusterKeyslot SCompleted

func (b *Builder) ClusterKeyslot() (c ClusterKeyslot) {
	c = ClusterKeyslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "KEYSLOT")
	return c
}

func (b *SBuilder) ClusterKeyslot() (c SClusterKeyslot) {
	c = SClusterKeyslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "KEYSLOT")
	return c
}

func (c ClusterKeyslot) Key(key string) ClusterKeyslotKey {
	c.cs.s = append(c.cs.s, key)
	return (ClusterKeyslotKey)(c)
}

func (c SClusterKeyslot) Key(key string) SClusterKeyslotKey {
	c.cs.s = append(c.cs.s, key)
	return (SClusterKeyslotKey)(c)
}

type ClusterKeyslotKey Completed

type SClusterKeyslotKey SCompleted

func (c ClusterKeyslotKey) Build() Completed {
	return Completed(c)
}

func (c SClusterKeyslotKey) Build() SCompleted {
	return SCompleted(c)
}

type ClusterMeet Completed

type SClusterMeet SCompleted

func (b *Builder) ClusterMeet() (c ClusterMeet) {
	c = ClusterMeet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "MEET")
	return c
}

func (b *SBuilder) ClusterMeet() (c SClusterMeet) {
	c = SClusterMeet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "MEET")
	return c
}

func (c ClusterMeet) Ip(ip string) ClusterMeetIp {
	c.cs.s = append(c.cs.s, ip)
	return (ClusterMeetIp)(c)
}

func (c SClusterMeet) Ip(ip string) SClusterMeetIp {
	c.cs.s = append(c.cs.s, ip)
	return (SClusterMeetIp)(c)
}

type ClusterMeetIp Completed

type SClusterMeetIp SCompleted

func (c ClusterMeetIp) Port(port int64) ClusterMeetPort {
	c.cs.s = append(c.cs.s, strconv.FormatInt(port, 10))
	return (ClusterMeetPort)(c)
}

func (c SClusterMeetIp) Port(port int64) SClusterMeetPort {
	c.cs.s = append(c.cs.s, strconv.FormatInt(port, 10))
	return (SClusterMeetPort)(c)
}

type ClusterMeetPort Completed

type SClusterMeetPort SCompleted

func (c ClusterMeetPort) Build() Completed {
	return Completed(c)
}

func (c SClusterMeetPort) Build() SCompleted {
	return SCompleted(c)
}

type ClusterMyid Completed

type SClusterMyid SCompleted

func (b *Builder) ClusterMyid() (c ClusterMyid) {
	c = ClusterMyid{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "MYID")
	return c
}

func (b *SBuilder) ClusterMyid() (c SClusterMyid) {
	c = SClusterMyid{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "MYID")
	return c
}

func (c ClusterMyid) Build() Completed {
	return Completed(c)
}

func (c SClusterMyid) Build() SCompleted {
	return SCompleted(c)
}

type ClusterNodes Completed

type SClusterNodes SCompleted

func (b *Builder) ClusterNodes() (c ClusterNodes) {
	c = ClusterNodes{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "NODES")
	return c
}

func (b *SBuilder) ClusterNodes() (c SClusterNodes) {
	c = SClusterNodes{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "NODES")
	return c
}

func (c ClusterNodes) Build() Completed {
	return Completed(c)
}

func (c SClusterNodes) Build() SCompleted {
	return SCompleted(c)
}

type ClusterReplicas Completed

type SClusterReplicas SCompleted

func (b *Builder) ClusterReplicas() (c ClusterReplicas) {
	c = ClusterReplicas{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "REPLICAS")
	return c
}

func (b *SBuilder) ClusterReplicas() (c SClusterReplicas) {
	c = SClusterReplicas{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "REPLICAS")
	return c
}

func (c ClusterReplicas) NodeId(nodeId string) ClusterReplicasNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterReplicasNodeId)(c)
}

func (c SClusterReplicas) NodeId(nodeId string) SClusterReplicasNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterReplicasNodeId)(c)
}

type ClusterReplicasNodeId Completed

type SClusterReplicasNodeId SCompleted

func (c ClusterReplicasNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterReplicasNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterReplicate Completed

type SClusterReplicate SCompleted

func (b *Builder) ClusterReplicate() (c ClusterReplicate) {
	c = ClusterReplicate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "REPLICATE")
	return c
}

func (b *SBuilder) ClusterReplicate() (c SClusterReplicate) {
	c = SClusterReplicate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "REPLICATE")
	return c
}

func (c ClusterReplicate) NodeId(nodeId string) ClusterReplicateNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterReplicateNodeId)(c)
}

func (c SClusterReplicate) NodeId(nodeId string) SClusterReplicateNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterReplicateNodeId)(c)
}

type ClusterReplicateNodeId Completed

type SClusterReplicateNodeId SCompleted

func (c ClusterReplicateNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterReplicateNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterReset Completed

type SClusterReset SCompleted

func (b *Builder) ClusterReset() (c ClusterReset) {
	c = ClusterReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "RESET")
	return c
}

func (b *SBuilder) ClusterReset() (c SClusterReset) {
	c = SClusterReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "RESET")
	return c
}

func (c ClusterReset) Hard() ClusterResetResetTypeHard {
	c.cs.s = append(c.cs.s, "HARD")
	return (ClusterResetResetTypeHard)(c)
}

func (c SClusterReset) Hard() SClusterResetResetTypeHard {
	c.cs.s = append(c.cs.s, "HARD")
	return (SClusterResetResetTypeHard)(c)
}

func (c ClusterReset) Soft() ClusterResetResetTypeSoft {
	c.cs.s = append(c.cs.s, "SOFT")
	return (ClusterResetResetTypeSoft)(c)
}

func (c SClusterReset) Soft() SClusterResetResetTypeSoft {
	c.cs.s = append(c.cs.s, "SOFT")
	return (SClusterResetResetTypeSoft)(c)
}

func (c ClusterReset) Build() Completed {
	return Completed(c)
}

func (c SClusterReset) Build() SCompleted {
	return SCompleted(c)
}

type ClusterResetResetTypeHard Completed

type SClusterResetResetTypeHard SCompleted

func (c ClusterResetResetTypeHard) Build() Completed {
	return Completed(c)
}

func (c SClusterResetResetTypeHard) Build() SCompleted {
	return SCompleted(c)
}

type ClusterResetResetTypeSoft Completed

type SClusterResetResetTypeSoft SCompleted

func (c ClusterResetResetTypeSoft) Build() Completed {
	return Completed(c)
}

func (c SClusterResetResetTypeSoft) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSaveconfig Completed

type SClusterSaveconfig SCompleted

func (b *Builder) ClusterSaveconfig() (c ClusterSaveconfig) {
	c = ClusterSaveconfig{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SAVECONFIG")
	return c
}

func (b *SBuilder) ClusterSaveconfig() (c SClusterSaveconfig) {
	c = SClusterSaveconfig{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SAVECONFIG")
	return c
}

func (c ClusterSaveconfig) Build() Completed {
	return Completed(c)
}

func (c SClusterSaveconfig) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetConfigEpoch Completed

type SClusterSetConfigEpoch SCompleted

func (b *Builder) ClusterSetConfigEpoch() (c ClusterSetConfigEpoch) {
	c = ClusterSetConfigEpoch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SET-CONFIG-EPOCH")
	return c
}

func (b *SBuilder) ClusterSetConfigEpoch() (c SClusterSetConfigEpoch) {
	c = SClusterSetConfigEpoch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SET-CONFIG-EPOCH")
	return c
}

func (c ClusterSetConfigEpoch) ConfigEpoch(configEpoch int64) ClusterSetConfigEpochConfigEpoch {
	c.cs.s = append(c.cs.s, strconv.FormatInt(configEpoch, 10))
	return (ClusterSetConfigEpochConfigEpoch)(c)
}

func (c SClusterSetConfigEpoch) ConfigEpoch(configEpoch int64) SClusterSetConfigEpochConfigEpoch {
	c.cs.s = append(c.cs.s, strconv.FormatInt(configEpoch, 10))
	return (SClusterSetConfigEpochConfigEpoch)(c)
}

type ClusterSetConfigEpochConfigEpoch Completed

type SClusterSetConfigEpochConfigEpoch SCompleted

func (c ClusterSetConfigEpochConfigEpoch) Build() Completed {
	return Completed(c)
}

func (c SClusterSetConfigEpochConfigEpoch) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslot Completed

type SClusterSetslot SCompleted

func (b *Builder) ClusterSetslot() (c ClusterSetslot) {
	c = ClusterSetslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SETSLOT")
	return c
}

func (b *SBuilder) ClusterSetslot() (c SClusterSetslot) {
	c = SClusterSetslot{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SETSLOT")
	return c
}

func (c ClusterSetslot) Slot(slot int64) ClusterSetslotSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(slot, 10))
	return (ClusterSetslotSlot)(c)
}

func (c SClusterSetslot) Slot(slot int64) SClusterSetslotSlot {
	c.cs.s = append(c.cs.s, strconv.FormatInt(slot, 10))
	return (SClusterSetslotSlot)(c)
}

type ClusterSetslotNodeId Completed

type SClusterSetslotNodeId SCompleted

func (c ClusterSetslotNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSlot Completed

type SClusterSetslotSlot SCompleted

func (c ClusterSetslotSlot) Importing() ClusterSetslotSubcommandImporting {
	c.cs.s = append(c.cs.s, "IMPORTING")
	return (ClusterSetslotSubcommandImporting)(c)
}

func (c SClusterSetslotSlot) Importing() SClusterSetslotSubcommandImporting {
	c.cs.s = append(c.cs.s, "IMPORTING")
	return (SClusterSetslotSubcommandImporting)(c)
}

func (c ClusterSetslotSlot) Migrating() ClusterSetslotSubcommandMigrating {
	c.cs.s = append(c.cs.s, "MIGRATING")
	return (ClusterSetslotSubcommandMigrating)(c)
}

func (c SClusterSetslotSlot) Migrating() SClusterSetslotSubcommandMigrating {
	c.cs.s = append(c.cs.s, "MIGRATING")
	return (SClusterSetslotSubcommandMigrating)(c)
}

func (c ClusterSetslotSlot) Stable() ClusterSetslotSubcommandStable {
	c.cs.s = append(c.cs.s, "STABLE")
	return (ClusterSetslotSubcommandStable)(c)
}

func (c SClusterSetslotSlot) Stable() SClusterSetslotSubcommandStable {
	c.cs.s = append(c.cs.s, "STABLE")
	return (SClusterSetslotSubcommandStable)(c)
}

func (c ClusterSetslotSlot) Node() ClusterSetslotSubcommandNode {
	c.cs.s = append(c.cs.s, "NODE")
	return (ClusterSetslotSubcommandNode)(c)
}

func (c SClusterSetslotSlot) Node() SClusterSetslotSubcommandNode {
	c.cs.s = append(c.cs.s, "NODE")
	return (SClusterSetslotSubcommandNode)(c)
}

type ClusterSetslotSubcommandImporting Completed

type SClusterSetslotSubcommandImporting SCompleted

func (c ClusterSetslotSubcommandImporting) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandImporting) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandImporting) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandImporting) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSubcommandMigrating Completed

type SClusterSetslotSubcommandMigrating SCompleted

func (c ClusterSetslotSubcommandMigrating) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandMigrating) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandMigrating) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandMigrating) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSubcommandNode Completed

type SClusterSetslotSubcommandNode SCompleted

func (c ClusterSetslotSubcommandNode) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandNode) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandNode) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandNode) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSetslotSubcommandStable Completed

type SClusterSetslotSubcommandStable SCompleted

func (c ClusterSetslotSubcommandStable) NodeId(nodeId string) ClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterSetslotNodeId)(c)
}

func (c SClusterSetslotSubcommandStable) NodeId(nodeId string) SClusterSetslotNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterSetslotNodeId)(c)
}

func (c ClusterSetslotSubcommandStable) Build() Completed {
	return Completed(c)
}

func (c SClusterSetslotSubcommandStable) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSlaves Completed

type SClusterSlaves SCompleted

func (b *Builder) ClusterSlaves() (c ClusterSlaves) {
	c = ClusterSlaves{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SLAVES")
	return c
}

func (b *SBuilder) ClusterSlaves() (c SClusterSlaves) {
	c = SClusterSlaves{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SLAVES")
	return c
}

func (c ClusterSlaves) NodeId(nodeId string) ClusterSlavesNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (ClusterSlavesNodeId)(c)
}

func (c SClusterSlaves) NodeId(nodeId string) SClusterSlavesNodeId {
	c.cs.s = append(c.cs.s, nodeId)
	return (SClusterSlavesNodeId)(c)
}

type ClusterSlavesNodeId Completed

type SClusterSlavesNodeId SCompleted

func (c ClusterSlavesNodeId) Build() Completed {
	return Completed(c)
}

func (c SClusterSlavesNodeId) Build() SCompleted {
	return SCompleted(c)
}

type ClusterSlots Completed

type SClusterSlots SCompleted

func (b *Builder) ClusterSlots() (c ClusterSlots) {
	c = ClusterSlots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SLOTS")
	return c
}

func (b *SBuilder) ClusterSlots() (c SClusterSlots) {
	c = SClusterSlots{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CLUSTER", "SLOTS")
	return c
}

func (c ClusterSlots) Build() Completed {
	return Completed(c)
}

func (c SClusterSlots) Build() SCompleted {
	return SCompleted(c)
}

type CmsIncrby Completed

type SCmsIncrby SCompleted

func (b *Builder) CmsIncrby() (c CmsIncrby) {
	c = CmsIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.INCRBY")
	return c
}

func (b *SBuilder) CmsIncrby() (c SCmsIncrby) {
	c = SCmsIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.INCRBY")
	return c
}

func (c CmsIncrby) Key(key string) CmsIncrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (CmsIncrbyKey)(c)
}

func (c SCmsIncrby) Key(key string) SCmsIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCmsIncrbyKey)(c)
}

type CmsIncrbyItemsIncrement Completed

type SCmsIncrbyItemsIncrement SCompleted

func (c CmsIncrbyItemsIncrement) Item(item string) CmsIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (CmsIncrbyItemsItem)(c)
}

func (c SCmsIncrbyItemsIncrement) Item(item string) SCmsIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (SCmsIncrbyItemsItem)(c)
}

func (c CmsIncrbyItemsIncrement) Build() Completed {
	return Completed(c)
}

func (c SCmsIncrbyItemsIncrement) Build() SCompleted {
	return SCompleted(c)
}

type CmsIncrbyItemsItem Completed

type SCmsIncrbyItemsItem SCompleted

func (c CmsIncrbyItemsItem) Increment(increment int64) CmsIncrbyItemsIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (CmsIncrbyItemsIncrement)(c)
}

func (c SCmsIncrbyItemsItem) Increment(increment int64) SCmsIncrbyItemsIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (SCmsIncrbyItemsIncrement)(c)
}

type CmsIncrbyKey Completed

type SCmsIncrbyKey SCompleted

func (c CmsIncrbyKey) Item(item string) CmsIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (CmsIncrbyItemsItem)(c)
}

func (c SCmsIncrbyKey) Item(item string) SCmsIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (SCmsIncrbyItemsItem)(c)
}

type CmsInfo Completed

type SCmsInfo SCompleted

func (b *Builder) CmsInfo() (c CmsInfo) {
	c = CmsInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CMS.INFO")
	return c
}

func (b *SBuilder) CmsInfo() (c SCmsInfo) {
	c = SCmsInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CMS.INFO")
	return c
}

func (c CmsInfo) Key(key string) CmsInfoKey {
	c.cs.s = append(c.cs.s, key)
	return (CmsInfoKey)(c)
}

func (c SCmsInfo) Key(key string) SCmsInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCmsInfoKey)(c)
}

type CmsInfoKey Completed

type SCmsInfoKey SCompleted

func (c CmsInfoKey) Build() Completed {
	return Completed(c)
}

func (c SCmsInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c CmsInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCmsInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type CmsInitbydim Completed

type SCmsInitbydim SCompleted

func (b *Builder) CmsInitbydim() (c CmsInitbydim) {
	c = CmsInitbydim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.INITBYDIM")
	return c
}

func (b *SBuilder) CmsInitbydim() (c SCmsInitbydim) {
	c = SCmsInitbydim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.INITBYDIM")
	return c
}

func (c CmsInitbydim) Key(key string) CmsInitbydimKey {
	c.cs.s = append(c.cs.s, key)
	return (CmsInitbydimKey)(c)
}

func (c SCmsInitbydim) Key(key string) SCmsInitbydimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCmsInitbydimKey)(c)
}

type CmsInitbydimDepth Completed

type SCmsInitbydimDepth SCompleted

func (c CmsInitbydimDepth) Build() Completed {
	return Completed(c)
}

func (c SCmsInitbydimDepth) Build() SCompleted {
	return SCompleted(c)
}

type CmsInitbydimKey Completed

type SCmsInitbydimKey SCompleted

func (c CmsInitbydimKey) Width(width int64) CmsInitbydimWidth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(width, 10))
	return (CmsInitbydimWidth)(c)
}

func (c SCmsInitbydimKey) Width(width int64) SCmsInitbydimWidth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(width, 10))
	return (SCmsInitbydimWidth)(c)
}

type CmsInitbydimWidth Completed

type SCmsInitbydimWidth SCompleted

func (c CmsInitbydimWidth) Depth(depth int64) CmsInitbydimDepth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(depth, 10))
	return (CmsInitbydimDepth)(c)
}

func (c SCmsInitbydimWidth) Depth(depth int64) SCmsInitbydimDepth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(depth, 10))
	return (SCmsInitbydimDepth)(c)
}

type CmsInitbyprob Completed

type SCmsInitbyprob SCompleted

func (b *Builder) CmsInitbyprob() (c CmsInitbyprob) {
	c = CmsInitbyprob{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.INITBYPROB")
	return c
}

func (b *SBuilder) CmsInitbyprob() (c SCmsInitbyprob) {
	c = SCmsInitbyprob{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.INITBYPROB")
	return c
}

func (c CmsInitbyprob) Key(key string) CmsInitbyprobKey {
	c.cs.s = append(c.cs.s, key)
	return (CmsInitbyprobKey)(c)
}

func (c SCmsInitbyprob) Key(key string) SCmsInitbyprobKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCmsInitbyprobKey)(c)
}

type CmsInitbyprobError Completed

type SCmsInitbyprobError SCompleted

func (c CmsInitbyprobError) Probability(probability float64) CmsInitbyprobProbability {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(probability, 'f', -1, 64))
	return (CmsInitbyprobProbability)(c)
}

func (c SCmsInitbyprobError) Probability(probability float64) SCmsInitbyprobProbability {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(probability, 'f', -1, 64))
	return (SCmsInitbyprobProbability)(c)
}

type CmsInitbyprobKey Completed

type SCmsInitbyprobKey SCompleted

func (c CmsInitbyprobKey) Error(error float64) CmsInitbyprobError {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(error, 'f', -1, 64))
	return (CmsInitbyprobError)(c)
}

func (c SCmsInitbyprobKey) Error(error float64) SCmsInitbyprobError {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(error, 'f', -1, 64))
	return (SCmsInitbyprobError)(c)
}

type CmsInitbyprobProbability Completed

type SCmsInitbyprobProbability SCompleted

func (c CmsInitbyprobProbability) Build() Completed {
	return Completed(c)
}

func (c SCmsInitbyprobProbability) Build() SCompleted {
	return SCompleted(c)
}

type CmsMerge Completed

type SCmsMerge SCompleted

func (b *Builder) CmsMerge() (c CmsMerge) {
	c = CmsMerge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.MERGE")
	return c
}

func (b *SBuilder) CmsMerge() (c SCmsMerge) {
	c = SCmsMerge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CMS.MERGE")
	return c
}

func (c CmsMerge) Destination(destination string) CmsMergeDestination {
	c.cs.s = append(c.cs.s, destination)
	return (CmsMergeDestination)(c)
}

func (c SCmsMerge) Destination(destination string) SCmsMergeDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SCmsMergeDestination)(c)
}

type CmsMergeDestination Completed

type SCmsMergeDestination SCompleted

func (c CmsMergeDestination) Numkeys(numkeys int64) CmsMergeNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (CmsMergeNumkeys)(c)
}

func (c SCmsMergeDestination) Numkeys(numkeys int64) SCmsMergeNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SCmsMergeNumkeys)(c)
}

type CmsMergeNumkeys Completed

type SCmsMergeNumkeys SCompleted

func (c CmsMergeNumkeys) Source(source ...string) CmsMergeSource {
	c.cs.s = append(c.cs.s, source...)
	return (CmsMergeSource)(c)
}

func (c SCmsMergeNumkeys) Source(source ...string) SCmsMergeSource {
	for _, k := range source {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, source...)
	return (SCmsMergeSource)(c)
}

type CmsMergeSource Completed

type SCmsMergeSource SCompleted

func (c CmsMergeSource) Source(source ...string) CmsMergeSource {
	c.cs.s = append(c.cs.s, source...)
	return c
}

func (c SCmsMergeSource) Source(source ...string) SCmsMergeSource {
	for _, k := range source {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, source...)
	return c
}

func (c CmsMergeSource) Weights() CmsMergeWeightWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	return (CmsMergeWeightWeights)(c)
}

func (c SCmsMergeSource) Weights() SCmsMergeWeightWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	return (SCmsMergeWeightWeights)(c)
}

func (c CmsMergeSource) Build() Completed {
	return Completed(c)
}

func (c SCmsMergeSource) Build() SCompleted {
	return SCompleted(c)
}

type CmsMergeWeightWeight Completed

type SCmsMergeWeightWeight SCompleted

func (c CmsMergeWeightWeight) Weight(weight ...float64) CmsMergeWeightWeight {
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return c
}

func (c SCmsMergeWeightWeight) Weight(weight ...float64) SCmsMergeWeightWeight {
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return c
}

func (c CmsMergeWeightWeight) Build() Completed {
	return Completed(c)
}

func (c SCmsMergeWeightWeight) Build() SCompleted {
	return SCompleted(c)
}

type CmsMergeWeightWeights Completed

type SCmsMergeWeightWeights SCompleted

func (c CmsMergeWeightWeights) Weight(weight ...float64) CmsMergeWeightWeight {
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return (CmsMergeWeightWeight)(c)
}

func (c SCmsMergeWeightWeights) Weight(weight ...float64) SCmsMergeWeightWeight {
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatFloat(n, 'f', -1, 64))
	}
	return (SCmsMergeWeightWeight)(c)
}

type CmsQuery Completed

type SCmsQuery SCompleted

func (b *Builder) CmsQuery() (c CmsQuery) {
	c = CmsQuery{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CMS.QUERY")
	return c
}

func (b *SBuilder) CmsQuery() (c SCmsQuery) {
	c = SCmsQuery{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "CMS.QUERY")
	return c
}

func (c CmsQuery) Key(key string) CmsQueryKey {
	c.cs.s = append(c.cs.s, key)
	return (CmsQueryKey)(c)
}

func (c SCmsQuery) Key(key string) SCmsQueryKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SCmsQueryKey)(c)
}

type CmsQueryItem Completed

type SCmsQueryItem SCompleted

func (c CmsQueryItem) Item(item ...string) CmsQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c SCmsQueryItem) Item(item ...string) SCmsQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c CmsQueryItem) Build() Completed {
	return Completed(c)
}

func (c SCmsQueryItem) Build() SCompleted {
	return SCompleted(c)
}

func (c CmsQueryItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c SCmsQueryItem) Cache() SCacheable {
	return SCacheable(c)
}

type CmsQueryKey Completed

type SCmsQueryKey SCompleted

func (c CmsQueryKey) Item(item ...string) CmsQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return (CmsQueryItem)(c)
}

func (c SCmsQueryKey) Item(item ...string) SCmsQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return (SCmsQueryItem)(c)
}

type Command Completed

type SCommand SCompleted

func (b *Builder) Command() (c Command) {
	c = Command{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND")
	return c
}

func (b *SBuilder) Command() (c SCommand) {
	c = SCommand{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND")
	return c
}

func (c Command) Build() Completed {
	return Completed(c)
}

func (c SCommand) Build() SCompleted {
	return SCompleted(c)
}

type CommandCount Completed

type SCommandCount SCompleted

func (b *Builder) CommandCount() (c CommandCount) {
	c = CommandCount{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND", "COUNT")
	return c
}

func (b *SBuilder) CommandCount() (c SCommandCount) {
	c = SCommandCount{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND", "COUNT")
	return c
}

func (c CommandCount) Build() Completed {
	return Completed(c)
}

func (c SCommandCount) Build() SCompleted {
	return SCompleted(c)
}

type CommandGetkeys Completed

type SCommandGetkeys SCompleted

func (b *Builder) CommandGetkeys() (c CommandGetkeys) {
	c = CommandGetkeys{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND", "GETKEYS")
	return c
}

func (b *SBuilder) CommandGetkeys() (c SCommandGetkeys) {
	c = SCommandGetkeys{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND", "GETKEYS")
	return c
}

func (c CommandGetkeys) Build() Completed {
	return Completed(c)
}

func (c SCommandGetkeys) Build() SCompleted {
	return SCompleted(c)
}

type CommandInfo Completed

type SCommandInfo SCompleted

func (b *Builder) CommandInfo() (c CommandInfo) {
	c = CommandInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND", "INFO")
	return c
}

func (b *SBuilder) CommandInfo() (c SCommandInfo) {
	c = SCommandInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COMMAND", "INFO")
	return c
}

func (c CommandInfo) CommandName(commandName ...string) CommandInfoCommandName {
	c.cs.s = append(c.cs.s, commandName...)
	return (CommandInfoCommandName)(c)
}

func (c SCommandInfo) CommandName(commandName ...string) SCommandInfoCommandName {
	c.cs.s = append(c.cs.s, commandName...)
	return (SCommandInfoCommandName)(c)
}

type CommandInfoCommandName Completed

type SCommandInfoCommandName SCompleted

func (c CommandInfoCommandName) CommandName(commandName ...string) CommandInfoCommandName {
	c.cs.s = append(c.cs.s, commandName...)
	return c
}

func (c SCommandInfoCommandName) CommandName(commandName ...string) SCommandInfoCommandName {
	c.cs.s = append(c.cs.s, commandName...)
	return c
}

func (c CommandInfoCommandName) Build() Completed {
	return Completed(c)
}

func (c SCommandInfoCommandName) Build() SCompleted {
	return SCompleted(c)
}

type ConfigGet Completed

type SConfigGet SCompleted

func (b *Builder) ConfigGet() (c ConfigGet) {
	c = ConfigGet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "GET")
	return c
}

func (b *SBuilder) ConfigGet() (c SConfigGet) {
	c = SConfigGet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "GET")
	return c
}

func (c ConfigGet) Parameter(parameter ...string) ConfigGetParameter {
	c.cs.s = append(c.cs.s, parameter...)
	return (ConfigGetParameter)(c)
}

func (c SConfigGet) Parameter(parameter ...string) SConfigGetParameter {
	c.cs.s = append(c.cs.s, parameter...)
	return (SConfigGetParameter)(c)
}

type ConfigGetParameter Completed

type SConfigGetParameter SCompleted

func (c ConfigGetParameter) Parameter(parameter ...string) ConfigGetParameter {
	c.cs.s = append(c.cs.s, parameter...)
	return c
}

func (c SConfigGetParameter) Parameter(parameter ...string) SConfigGetParameter {
	c.cs.s = append(c.cs.s, parameter...)
	return c
}

func (c ConfigGetParameter) Build() Completed {
	return Completed(c)
}

func (c SConfigGetParameter) Build() SCompleted {
	return SCompleted(c)
}

type ConfigResetstat Completed

type SConfigResetstat SCompleted

func (b *Builder) ConfigResetstat() (c ConfigResetstat) {
	c = ConfigResetstat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "RESETSTAT")
	return c
}

func (b *SBuilder) ConfigResetstat() (c SConfigResetstat) {
	c = SConfigResetstat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "RESETSTAT")
	return c
}

func (c ConfigResetstat) Build() Completed {
	return Completed(c)
}

func (c SConfigResetstat) Build() SCompleted {
	return SCompleted(c)
}

type ConfigRewrite Completed

type SConfigRewrite SCompleted

func (b *Builder) ConfigRewrite() (c ConfigRewrite) {
	c = ConfigRewrite{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "REWRITE")
	return c
}

func (b *SBuilder) ConfigRewrite() (c SConfigRewrite) {
	c = SConfigRewrite{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "REWRITE")
	return c
}

func (c ConfigRewrite) Build() Completed {
	return Completed(c)
}

func (c SConfigRewrite) Build() SCompleted {
	return SCompleted(c)
}

type ConfigSet Completed

type SConfigSet SCompleted

func (b *Builder) ConfigSet() (c ConfigSet) {
	c = ConfigSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "SET")
	return c
}

func (b *SBuilder) ConfigSet() (c SConfigSet) {
	c = SConfigSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "CONFIG", "SET")
	return c
}

func (c ConfigSet) ParameterValue() ConfigSetParameterValue {
	return (ConfigSetParameterValue)(c)
}

func (c SConfigSet) ParameterValue() SConfigSetParameterValue {
	return (SConfigSetParameterValue)(c)
}

type ConfigSetParameterValue Completed

type SConfigSetParameterValue SCompleted

func (c ConfigSetParameterValue) ParameterValue(parameter string, value string) ConfigSetParameterValue {
	c.cs.s = append(c.cs.s, parameter, value)
	return c
}

func (c SConfigSetParameterValue) ParameterValue(parameter string, value string) SConfigSetParameterValue {
	c.cs.s = append(c.cs.s, parameter, value)
	return c
}

func (c ConfigSetParameterValue) Build() Completed {
	return Completed(c)
}

func (c SConfigSetParameterValue) Build() SCompleted {
	return SCompleted(c)
}

type Copy Completed

type SCopy SCompleted

func (b *Builder) Copy() (c Copy) {
	c = Copy{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COPY")
	return c
}

func (b *SBuilder) Copy() (c SCopy) {
	c = SCopy{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "COPY")
	return c
}

func (c Copy) Source(source string) CopySource {
	c.cs.s = append(c.cs.s, source)
	return (CopySource)(c)
}

func (c SCopy) Source(source string) SCopySource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SCopySource)(c)
}

type CopyDb Completed

type SCopyDb SCompleted

func (c CopyDb) Replace() CopyReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (CopyReplace)(c)
}

func (c SCopyDb) Replace() SCopyReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (SCopyReplace)(c)
}

func (c CopyDb) Build() Completed {
	return Completed(c)
}

func (c SCopyDb) Build() SCompleted {
	return SCompleted(c)
}

type CopyDestination Completed

type SCopyDestination SCompleted

func (c CopyDestination) Db(destinationDb int64) CopyDb {
	c.cs.s = append(c.cs.s, "DB", strconv.FormatInt(destinationDb, 10))
	return (CopyDb)(c)
}

func (c SCopyDestination) Db(destinationDb int64) SCopyDb {
	c.cs.s = append(c.cs.s, "DB", strconv.FormatInt(destinationDb, 10))
	return (SCopyDb)(c)
}

func (c CopyDestination) Replace() CopyReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (CopyReplace)(c)
}

func (c SCopyDestination) Replace() SCopyReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (SCopyReplace)(c)
}

func (c CopyDestination) Build() Completed {
	return Completed(c)
}

func (c SCopyDestination) Build() SCompleted {
	return SCompleted(c)
}

type CopyReplace Completed

type SCopyReplace SCompleted

func (c CopyReplace) Build() Completed {
	return Completed(c)
}

func (c SCopyReplace) Build() SCompleted {
	return SCompleted(c)
}

type CopySource Completed

type SCopySource SCompleted

func (c CopySource) Destination(destination string) CopyDestination {
	c.cs.s = append(c.cs.s, destination)
	return (CopyDestination)(c)
}

func (c SCopySource) Destination(destination string) SCopyDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SCopyDestination)(c)
}

type Dbsize Completed

type SDbsize SCompleted

func (b *Builder) Dbsize() (c Dbsize) {
	c = Dbsize{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "DBSIZE")
	return c
}

func (b *SBuilder) Dbsize() (c SDbsize) {
	c = SDbsize{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "DBSIZE")
	return c
}

func (c Dbsize) Build() Completed {
	return Completed(c)
}

func (c SDbsize) Build() SCompleted {
	return SCompleted(c)
}

type DebugObject Completed

type SDebugObject SCompleted

func (b *Builder) DebugObject() (c DebugObject) {
	c = DebugObject{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DEBUG", "OBJECT")
	return c
}

func (b *SBuilder) DebugObject() (c SDebugObject) {
	c = SDebugObject{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DEBUG", "OBJECT")
	return c
}

func (c DebugObject) Key(key string) DebugObjectKey {
	c.cs.s = append(c.cs.s, key)
	return (DebugObjectKey)(c)
}

func (c SDebugObject) Key(key string) SDebugObjectKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SDebugObjectKey)(c)
}

type DebugObjectKey Completed

type SDebugObjectKey SCompleted

func (c DebugObjectKey) Build() Completed {
	return Completed(c)
}

func (c SDebugObjectKey) Build() SCompleted {
	return SCompleted(c)
}

type DebugSegfault Completed

type SDebugSegfault SCompleted

func (b *Builder) DebugSegfault() (c DebugSegfault) {
	c = DebugSegfault{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DEBUG", "SEGFAULT")
	return c
}

func (b *SBuilder) DebugSegfault() (c SDebugSegfault) {
	c = SDebugSegfault{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DEBUG", "SEGFAULT")
	return c
}

func (c DebugSegfault) Build() Completed {
	return Completed(c)
}

func (c SDebugSegfault) Build() SCompleted {
	return SCompleted(c)
}

type Decr Completed

type SDecr SCompleted

func (b *Builder) Decr() (c Decr) {
	c = Decr{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DECR")
	return c
}

func (b *SBuilder) Decr() (c SDecr) {
	c = SDecr{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DECR")
	return c
}

func (c Decr) Key(key string) DecrKey {
	c.cs.s = append(c.cs.s, key)
	return (DecrKey)(c)
}

func (c SDecr) Key(key string) SDecrKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SDecrKey)(c)
}

type DecrKey Completed

type SDecrKey SCompleted

func (c DecrKey) Build() Completed {
	return Completed(c)
}

func (c SDecrKey) Build() SCompleted {
	return SCompleted(c)
}

type Decrby Completed

type SDecrby SCompleted

func (b *Builder) Decrby() (c Decrby) {
	c = Decrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DECRBY")
	return c
}

func (b *SBuilder) Decrby() (c SDecrby) {
	c = SDecrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DECRBY")
	return c
}

func (c Decrby) Key(key string) DecrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (DecrbyKey)(c)
}

func (c SDecrby) Key(key string) SDecrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SDecrbyKey)(c)
}

type DecrbyDecrement Completed

type SDecrbyDecrement SCompleted

func (c DecrbyDecrement) Build() Completed {
	return Completed(c)
}

func (c SDecrbyDecrement) Build() SCompleted {
	return SCompleted(c)
}

type DecrbyKey Completed

type SDecrbyKey SCompleted

func (c DecrbyKey) Decrement(decrement int64) DecrbyDecrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(decrement, 10))
	return (DecrbyDecrement)(c)
}

func (c SDecrbyKey) Decrement(decrement int64) SDecrbyDecrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(decrement, 10))
	return (SDecrbyDecrement)(c)
}

type Del Completed

type SDel SCompleted

func (b *Builder) Del() (c Del) {
	c = Del{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DEL")
	return c
}

func (b *SBuilder) Del() (c SDel) {
	c = SDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DEL")
	return c
}

func (c Del) Key(key ...string) DelKey {
	c.cs.s = append(c.cs.s, key...)
	return (DelKey)(c)
}

func (c SDel) Key(key ...string) SDelKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SDelKey)(c)
}

type DelKey Completed

type SDelKey SCompleted

func (c DelKey) Key(key ...string) DelKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SDelKey) Key(key ...string) SDelKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c DelKey) Build() Completed {
	return Completed(c)
}

func (c SDelKey) Build() SCompleted {
	return SCompleted(c)
}

type Discard Completed

type SDiscard SCompleted

func (b *Builder) Discard() (c Discard) {
	c = Discard{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DISCARD")
	return c
}

func (b *SBuilder) Discard() (c SDiscard) {
	c = SDiscard{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "DISCARD")
	return c
}

func (c Discard) Build() Completed {
	return Completed(c)
}

func (c SDiscard) Build() SCompleted {
	return SCompleted(c)
}

type Dump Completed

type SDump SCompleted

func (b *Builder) Dump() (c Dump) {
	c = Dump{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "DUMP")
	return c
}

func (b *SBuilder) Dump() (c SDump) {
	c = SDump{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "DUMP")
	return c
}

func (c Dump) Key(key string) DumpKey {
	c.cs.s = append(c.cs.s, key)
	return (DumpKey)(c)
}

func (c SDump) Key(key string) SDumpKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SDumpKey)(c)
}

type DumpKey Completed

type SDumpKey SCompleted

func (c DumpKey) Build() Completed {
	return Completed(c)
}

func (c SDumpKey) Build() SCompleted {
	return SCompleted(c)
}

type Echo Completed

type SEcho SCompleted

func (b *Builder) Echo() (c Echo) {
	c = Echo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ECHO")
	return c
}

func (b *SBuilder) Echo() (c SEcho) {
	c = SEcho{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ECHO")
	return c
}

func (c Echo) Message(message string) EchoMessage {
	c.cs.s = append(c.cs.s, message)
	return (EchoMessage)(c)
}

func (c SEcho) Message(message string) SEchoMessage {
	c.cs.s = append(c.cs.s, message)
	return (SEchoMessage)(c)
}

type EchoMessage Completed

type SEchoMessage SCompleted

func (c EchoMessage) Build() Completed {
	return Completed(c)
}

func (c SEchoMessage) Build() SCompleted {
	return SCompleted(c)
}

type Eval Completed

type SEval SCompleted

func (b *Builder) Eval() (c Eval) {
	c = Eval{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EVAL")
	return c
}

func (b *SBuilder) Eval() (c SEval) {
	c = SEval{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EVAL")
	return c
}

func (c Eval) Script(script string) EvalScript {
	c.cs.s = append(c.cs.s, script)
	return (EvalScript)(c)
}

func (c SEval) Script(script string) SEvalScript {
	c.cs.s = append(c.cs.s, script)
	return (SEvalScript)(c)
}

type EvalArg Completed

type SEvalArg SCompleted

func (c EvalArg) Arg(arg ...string) EvalArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c SEvalArg) Arg(arg ...string) SEvalArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c EvalArg) Build() Completed {
	return Completed(c)
}

func (c SEvalArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalKey Completed

type SEvalKey SCompleted

func (c EvalKey) Key(key ...string) EvalKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SEvalKey) Key(key ...string) SEvalKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c EvalKey) Arg(arg ...string) EvalArg {
	c.cs.s = append(c.cs.s, arg...)
	return (EvalArg)(c)
}

func (c SEvalKey) Arg(arg ...string) SEvalArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SEvalArg)(c)
}

func (c EvalKey) Build() Completed {
	return Completed(c)
}

func (c SEvalKey) Build() SCompleted {
	return SCompleted(c)
}

type EvalNumkeys Completed

type SEvalNumkeys SCompleted

func (c EvalNumkeys) Key(key ...string) EvalKey {
	c.cs.s = append(c.cs.s, key...)
	return (EvalKey)(c)
}

func (c SEvalNumkeys) Key(key ...string) SEvalKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SEvalKey)(c)
}

func (c EvalNumkeys) Arg(arg ...string) EvalArg {
	c.cs.s = append(c.cs.s, arg...)
	return (EvalArg)(c)
}

func (c SEvalNumkeys) Arg(arg ...string) SEvalArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SEvalArg)(c)
}

func (c EvalNumkeys) Build() Completed {
	return Completed(c)
}

func (c SEvalNumkeys) Build() SCompleted {
	return SCompleted(c)
}

type EvalRo Completed

type SEvalRo SCompleted

func (b *Builder) EvalRo() (c EvalRo) {
	c = EvalRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EVAL_RO")
	return c
}

func (b *SBuilder) EvalRo() (c SEvalRo) {
	c = SEvalRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EVAL_RO")
	return c
}

func (c EvalRo) Script(script string) EvalRoScript {
	c.cs.s = append(c.cs.s, script)
	return (EvalRoScript)(c)
}

func (c SEvalRo) Script(script string) SEvalRoScript {
	c.cs.s = append(c.cs.s, script)
	return (SEvalRoScript)(c)
}

type EvalRoArg Completed

type SEvalRoArg SCompleted

func (c EvalRoArg) Arg(arg ...string) EvalRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c SEvalRoArg) Arg(arg ...string) SEvalRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c EvalRoArg) Build() Completed {
	return Completed(c)
}

func (c SEvalRoArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalRoKey Completed

type SEvalRoKey SCompleted

func (c EvalRoKey) Key(key ...string) EvalRoKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SEvalRoKey) Key(key ...string) SEvalRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c EvalRoKey) Arg(arg ...string) EvalRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return (EvalRoArg)(c)
}

func (c SEvalRoKey) Arg(arg ...string) SEvalRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SEvalRoArg)(c)
}

type EvalRoNumkeys Completed

type SEvalRoNumkeys SCompleted

func (c EvalRoNumkeys) Key(key ...string) EvalRoKey {
	c.cs.s = append(c.cs.s, key...)
	return (EvalRoKey)(c)
}

func (c SEvalRoNumkeys) Key(key ...string) SEvalRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SEvalRoKey)(c)
}

type EvalRoScript Completed

type SEvalRoScript SCompleted

func (c EvalRoScript) Numkeys(numkeys int64) EvalRoNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (EvalRoNumkeys)(c)
}

func (c SEvalRoScript) Numkeys(numkeys int64) SEvalRoNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SEvalRoNumkeys)(c)
}

type EvalScript Completed

type SEvalScript SCompleted

func (c EvalScript) Numkeys(numkeys int64) EvalNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (EvalNumkeys)(c)
}

func (c SEvalScript) Numkeys(numkeys int64) SEvalNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SEvalNumkeys)(c)
}

type Evalsha Completed

type SEvalsha SCompleted

func (b *Builder) Evalsha() (c Evalsha) {
	c = Evalsha{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EVALSHA")
	return c
}

func (b *SBuilder) Evalsha() (c SEvalsha) {
	c = SEvalsha{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EVALSHA")
	return c
}

func (c Evalsha) Sha1(sha1 string) EvalshaSha1 {
	c.cs.s = append(c.cs.s, sha1)
	return (EvalshaSha1)(c)
}

func (c SEvalsha) Sha1(sha1 string) SEvalshaSha1 {
	c.cs.s = append(c.cs.s, sha1)
	return (SEvalshaSha1)(c)
}

type EvalshaArg Completed

type SEvalshaArg SCompleted

func (c EvalshaArg) Arg(arg ...string) EvalshaArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c SEvalshaArg) Arg(arg ...string) SEvalshaArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c EvalshaArg) Build() Completed {
	return Completed(c)
}

func (c SEvalshaArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaKey Completed

type SEvalshaKey SCompleted

func (c EvalshaKey) Key(key ...string) EvalshaKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SEvalshaKey) Key(key ...string) SEvalshaKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c EvalshaKey) Arg(arg ...string) EvalshaArg {
	c.cs.s = append(c.cs.s, arg...)
	return (EvalshaArg)(c)
}

func (c SEvalshaKey) Arg(arg ...string) SEvalshaArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SEvalshaArg)(c)
}

func (c EvalshaKey) Build() Completed {
	return Completed(c)
}

func (c SEvalshaKey) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaNumkeys Completed

type SEvalshaNumkeys SCompleted

func (c EvalshaNumkeys) Key(key ...string) EvalshaKey {
	c.cs.s = append(c.cs.s, key...)
	return (EvalshaKey)(c)
}

func (c SEvalshaNumkeys) Key(key ...string) SEvalshaKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SEvalshaKey)(c)
}

func (c EvalshaNumkeys) Arg(arg ...string) EvalshaArg {
	c.cs.s = append(c.cs.s, arg...)
	return (EvalshaArg)(c)
}

func (c SEvalshaNumkeys) Arg(arg ...string) SEvalshaArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SEvalshaArg)(c)
}

func (c EvalshaNumkeys) Build() Completed {
	return Completed(c)
}

func (c SEvalshaNumkeys) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaRo Completed

type SEvalshaRo SCompleted

func (b *Builder) EvalshaRo() (c EvalshaRo) {
	c = EvalshaRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EVALSHA_RO")
	return c
}

func (b *SBuilder) EvalshaRo() (c SEvalshaRo) {
	c = SEvalshaRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EVALSHA_RO")
	return c
}

func (c EvalshaRo) Sha1(sha1 string) EvalshaRoSha1 {
	c.cs.s = append(c.cs.s, sha1)
	return (EvalshaRoSha1)(c)
}

func (c SEvalshaRo) Sha1(sha1 string) SEvalshaRoSha1 {
	c.cs.s = append(c.cs.s, sha1)
	return (SEvalshaRoSha1)(c)
}

type EvalshaRoArg Completed

type SEvalshaRoArg SCompleted

func (c EvalshaRoArg) Arg(arg ...string) EvalshaRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c SEvalshaRoArg) Arg(arg ...string) SEvalshaRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c EvalshaRoArg) Build() Completed {
	return Completed(c)
}

func (c SEvalshaRoArg) Build() SCompleted {
	return SCompleted(c)
}

type EvalshaRoKey Completed

type SEvalshaRoKey SCompleted

func (c EvalshaRoKey) Key(key ...string) EvalshaRoKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SEvalshaRoKey) Key(key ...string) SEvalshaRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c EvalshaRoKey) Arg(arg ...string) EvalshaRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return (EvalshaRoArg)(c)
}

func (c SEvalshaRoKey) Arg(arg ...string) SEvalshaRoArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SEvalshaRoArg)(c)
}

type EvalshaRoNumkeys Completed

type SEvalshaRoNumkeys SCompleted

func (c EvalshaRoNumkeys) Key(key ...string) EvalshaRoKey {
	c.cs.s = append(c.cs.s, key...)
	return (EvalshaRoKey)(c)
}

func (c SEvalshaRoNumkeys) Key(key ...string) SEvalshaRoKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SEvalshaRoKey)(c)
}

type EvalshaRoSha1 Completed

type SEvalshaRoSha1 SCompleted

func (c EvalshaRoSha1) Numkeys(numkeys int64) EvalshaRoNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (EvalshaRoNumkeys)(c)
}

func (c SEvalshaRoSha1) Numkeys(numkeys int64) SEvalshaRoNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SEvalshaRoNumkeys)(c)
}

type EvalshaSha1 Completed

type SEvalshaSha1 SCompleted

func (c EvalshaSha1) Numkeys(numkeys int64) EvalshaNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (EvalshaNumkeys)(c)
}

func (c SEvalshaSha1) Numkeys(numkeys int64) SEvalshaNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SEvalshaNumkeys)(c)
}

type Exec Completed

type SExec SCompleted

func (b *Builder) Exec() (c Exec) {
	c = Exec{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EXEC")
	return c
}

func (b *SBuilder) Exec() (c SExec) {
	c = SExec{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EXEC")
	return c
}

func (c Exec) Build() Completed {
	return Completed(c)
}

func (c SExec) Build() SCompleted {
	return SCompleted(c)
}

type Exists Completed

type SExists SCompleted

func (b *Builder) Exists() (c Exists) {
	c = Exists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EXISTS")
	return c
}

func (b *SBuilder) Exists() (c SExists) {
	c = SExists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EXISTS")
	return c
}

func (c Exists) Key(key ...string) ExistsKey {
	c.cs.s = append(c.cs.s, key...)
	return (ExistsKey)(c)
}

func (c SExists) Key(key ...string) SExistsKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SExistsKey)(c)
}

type ExistsKey Completed

type SExistsKey SCompleted

func (c ExistsKey) Key(key ...string) ExistsKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SExistsKey) Key(key ...string) SExistsKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ExistsKey) Build() Completed {
	return Completed(c)
}

func (c SExistsKey) Build() SCompleted {
	return SCompleted(c)
}

type Expire Completed

type SExpire SCompleted

func (b *Builder) Expire() (c Expire) {
	c = Expire{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EXPIRE")
	return c
}

func (b *SBuilder) Expire() (c SExpire) {
	c = SExpire{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EXPIRE")
	return c
}

func (c Expire) Key(key string) ExpireKey {
	c.cs.s = append(c.cs.s, key)
	return (ExpireKey)(c)
}

func (c SExpire) Key(key string) SExpireKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SExpireKey)(c)
}

type ExpireConditionGt Completed

type SExpireConditionGt SCompleted

func (c ExpireConditionGt) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireConditionLt Completed

type SExpireConditionLt SCompleted

func (c ExpireConditionLt) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireConditionNx Completed

type SExpireConditionNx SCompleted

func (c ExpireConditionNx) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireConditionXx Completed

type SExpireConditionXx SCompleted

func (c ExpireConditionXx) Build() Completed {
	return Completed(c)
}

func (c SExpireConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireKey Completed

type SExpireKey SCompleted

func (c ExpireKey) Seconds(seconds int64) ExpireSeconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(seconds, 10))
	return (ExpireSeconds)(c)
}

func (c SExpireKey) Seconds(seconds int64) SExpireSeconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(seconds, 10))
	return (SExpireSeconds)(c)
}

type ExpireSeconds Completed

type SExpireSeconds SCompleted

func (c ExpireSeconds) Nx() ExpireConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (ExpireConditionNx)(c)
}

func (c SExpireSeconds) Nx() SExpireConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SExpireConditionNx)(c)
}

func (c ExpireSeconds) Xx() ExpireConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (ExpireConditionXx)(c)
}

func (c SExpireSeconds) Xx() SExpireConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SExpireConditionXx)(c)
}

func (c ExpireSeconds) Gt() ExpireConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (ExpireConditionGt)(c)
}

func (c SExpireSeconds) Gt() SExpireConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SExpireConditionGt)(c)
}

func (c ExpireSeconds) Lt() ExpireConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (ExpireConditionLt)(c)
}

func (c SExpireSeconds) Lt() SExpireConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SExpireConditionLt)(c)
}

func (c ExpireSeconds) Build() Completed {
	return Completed(c)
}

func (c SExpireSeconds) Build() SCompleted {
	return SCompleted(c)
}

type Expireat Completed

type SExpireat SCompleted

func (b *Builder) Expireat() (c Expireat) {
	c = Expireat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EXPIREAT")
	return c
}

func (b *SBuilder) Expireat() (c SExpireat) {
	c = SExpireat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "EXPIREAT")
	return c
}

func (c Expireat) Key(key string) ExpireatKey {
	c.cs.s = append(c.cs.s, key)
	return (ExpireatKey)(c)
}

func (c SExpireat) Key(key string) SExpireatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SExpireatKey)(c)
}

type ExpireatConditionGt Completed

type SExpireatConditionGt SCompleted

func (c ExpireatConditionGt) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatConditionLt Completed

type SExpireatConditionLt SCompleted

func (c ExpireatConditionLt) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatConditionNx Completed

type SExpireatConditionNx SCompleted

func (c ExpireatConditionNx) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatConditionXx Completed

type SExpireatConditionXx SCompleted

func (c ExpireatConditionXx) Build() Completed {
	return Completed(c)
}

func (c SExpireatConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type ExpireatKey Completed

type SExpireatKey SCompleted

func (c ExpireatKey) Timestamp(timestamp int64) ExpireatTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (ExpireatTimestamp)(c)
}

func (c SExpireatKey) Timestamp(timestamp int64) SExpireatTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (SExpireatTimestamp)(c)
}

type ExpireatTimestamp Completed

type SExpireatTimestamp SCompleted

func (c ExpireatTimestamp) Nx() ExpireatConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (ExpireatConditionNx)(c)
}

func (c SExpireatTimestamp) Nx() SExpireatConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SExpireatConditionNx)(c)
}

func (c ExpireatTimestamp) Xx() ExpireatConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (ExpireatConditionXx)(c)
}

func (c SExpireatTimestamp) Xx() SExpireatConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SExpireatConditionXx)(c)
}

func (c ExpireatTimestamp) Gt() ExpireatConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (ExpireatConditionGt)(c)
}

func (c SExpireatTimestamp) Gt() SExpireatConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SExpireatConditionGt)(c)
}

func (c ExpireatTimestamp) Lt() ExpireatConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (ExpireatConditionLt)(c)
}

func (c SExpireatTimestamp) Lt() SExpireatConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SExpireatConditionLt)(c)
}

func (c ExpireatTimestamp) Build() Completed {
	return Completed(c)
}

func (c SExpireatTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type Expiretime Completed

type SExpiretime SCompleted

func (b *Builder) Expiretime() (c Expiretime) {
	c = Expiretime{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EXPIRETIME")
	return c
}

func (b *SBuilder) Expiretime() (c SExpiretime) {
	c = SExpiretime{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "EXPIRETIME")
	return c
}

func (c Expiretime) Key(key string) ExpiretimeKey {
	c.cs.s = append(c.cs.s, key)
	return (ExpiretimeKey)(c)
}

func (c SExpiretime) Key(key string) SExpiretimeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SExpiretimeKey)(c)
}

type ExpiretimeKey Completed

type SExpiretimeKey SCompleted

func (c ExpiretimeKey) Build() Completed {
	return Completed(c)
}

func (c SExpiretimeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c ExpiretimeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SExpiretimeKey) Cache() SCacheable {
	return SCacheable(c)
}

type Failover Completed

type SFailover SCompleted

func (b *Builder) Failover() (c Failover) {
	c = Failover{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FAILOVER")
	return c
}

func (b *SBuilder) Failover() (c SFailover) {
	c = SFailover{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FAILOVER")
	return c
}

func (c Failover) To() FailoverTargetTo {
	c.cs.s = append(c.cs.s, "TO")
	return (FailoverTargetTo)(c)
}

func (c SFailover) To() SFailoverTargetTo {
	c.cs.s = append(c.cs.s, "TO")
	return (SFailoverTargetTo)(c)
}

func (c Failover) Abort() FailoverAbort {
	c.cs.s = append(c.cs.s, "ABORT")
	return (FailoverAbort)(c)
}

func (c SFailover) Abort() SFailoverAbort {
	c.cs.s = append(c.cs.s, "ABORT")
	return (SFailoverAbort)(c)
}

func (c Failover) Timeout(milliseconds int64) FailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailover) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c Failover) Build() Completed {
	return Completed(c)
}

func (c SFailover) Build() SCompleted {
	return SCompleted(c)
}

type FailoverAbort Completed

type SFailoverAbort SCompleted

func (c FailoverAbort) Timeout(milliseconds int64) FailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailoverAbort) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c FailoverAbort) Build() Completed {
	return Completed(c)
}

func (c SFailoverAbort) Build() SCompleted {
	return SCompleted(c)
}

type FailoverTargetForce Completed

type SFailoverTargetForce SCompleted

func (c FailoverTargetForce) Abort() FailoverAbort {
	c.cs.s = append(c.cs.s, "ABORT")
	return (FailoverAbort)(c)
}

func (c SFailoverTargetForce) Abort() SFailoverAbort {
	c.cs.s = append(c.cs.s, "ABORT")
	return (SFailoverAbort)(c)
}

func (c FailoverTargetForce) Timeout(milliseconds int64) FailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailoverTargetForce) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c FailoverTargetForce) Build() Completed {
	return Completed(c)
}

func (c SFailoverTargetForce) Build() SCompleted {
	return SCompleted(c)
}

type FailoverTargetHost Completed

type SFailoverTargetHost SCompleted

func (c FailoverTargetHost) Port(port int64) FailoverTargetPort {
	c.cs.s = append(c.cs.s, strconv.FormatInt(port, 10))
	return (FailoverTargetPort)(c)
}

func (c SFailoverTargetHost) Port(port int64) SFailoverTargetPort {
	c.cs.s = append(c.cs.s, strconv.FormatInt(port, 10))
	return (SFailoverTargetPort)(c)
}

type FailoverTargetPort Completed

type SFailoverTargetPort SCompleted

func (c FailoverTargetPort) Force() FailoverTargetForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (FailoverTargetForce)(c)
}

func (c SFailoverTargetPort) Force() SFailoverTargetForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (SFailoverTargetForce)(c)
}

func (c FailoverTargetPort) Abort() FailoverAbort {
	c.cs.s = append(c.cs.s, "ABORT")
	return (FailoverAbort)(c)
}

func (c SFailoverTargetPort) Abort() SFailoverAbort {
	c.cs.s = append(c.cs.s, "ABORT")
	return (SFailoverAbort)(c)
}

func (c FailoverTargetPort) Timeout(milliseconds int64) FailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (FailoverTimeout)(c)
}

func (c SFailoverTargetPort) Timeout(milliseconds int64) SFailoverTimeout {
	c.cs.s = append(c.cs.s, "TIMEOUT", strconv.FormatInt(milliseconds, 10))
	return (SFailoverTimeout)(c)
}

func (c FailoverTargetPort) Build() Completed {
	return Completed(c)
}

func (c SFailoverTargetPort) Build() SCompleted {
	return SCompleted(c)
}

type FailoverTargetTo Completed

type SFailoverTargetTo SCompleted

func (c FailoverTargetTo) Host(host string) FailoverTargetHost {
	c.cs.s = append(c.cs.s, host)
	return (FailoverTargetHost)(c)
}

func (c SFailoverTargetTo) Host(host string) SFailoverTargetHost {
	c.cs.s = append(c.cs.s, host)
	return (SFailoverTargetHost)(c)
}

type FailoverTimeout Completed

type SFailoverTimeout SCompleted

func (c FailoverTimeout) Build() Completed {
	return Completed(c)
}

func (c SFailoverTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Flushall Completed

type SFlushall SCompleted

func (b *Builder) Flushall() (c Flushall) {
	c = Flushall{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FLUSHALL")
	return c
}

func (b *SBuilder) Flushall() (c SFlushall) {
	c = SFlushall{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FLUSHALL")
	return c
}

func (c Flushall) Async() FlushallAsync {
	c.cs.s = append(c.cs.s, "ASYNC")
	return (FlushallAsync)(c)
}

func (c SFlushall) Async() SFlushallAsync {
	c.cs.s = append(c.cs.s, "ASYNC")
	return (SFlushallAsync)(c)
}

func (c Flushall) Sync() FlushallAsyncSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (FlushallAsyncSync)(c)
}

func (c SFlushall) Sync() SFlushallAsyncSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (SFlushallAsyncSync)(c)
}

func (c Flushall) Build() Completed {
	return Completed(c)
}

func (c SFlushall) Build() SCompleted {
	return SCompleted(c)
}

type FlushallAsync Completed

type SFlushallAsync SCompleted

func (c FlushallAsync) Build() Completed {
	return Completed(c)
}

func (c SFlushallAsync) Build() SCompleted {
	return SCompleted(c)
}

type FlushallAsyncSync Completed

type SFlushallAsyncSync SCompleted

func (c FlushallAsyncSync) Build() Completed {
	return Completed(c)
}

func (c SFlushallAsyncSync) Build() SCompleted {
	return SCompleted(c)
}

type Flushdb Completed

type SFlushdb SCompleted

func (b *Builder) Flushdb() (c Flushdb) {
	c = Flushdb{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FLUSHDB")
	return c
}

func (b *SBuilder) Flushdb() (c SFlushdb) {
	c = SFlushdb{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FLUSHDB")
	return c
}

func (c Flushdb) Async() FlushdbAsync {
	c.cs.s = append(c.cs.s, "ASYNC")
	return (FlushdbAsync)(c)
}

func (c SFlushdb) Async() SFlushdbAsync {
	c.cs.s = append(c.cs.s, "ASYNC")
	return (SFlushdbAsync)(c)
}

func (c Flushdb) Sync() FlushdbAsyncSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (FlushdbAsyncSync)(c)
}

func (c SFlushdb) Sync() SFlushdbAsyncSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (SFlushdbAsyncSync)(c)
}

func (c Flushdb) Build() Completed {
	return Completed(c)
}

func (c SFlushdb) Build() SCompleted {
	return SCompleted(c)
}

type FlushdbAsync Completed

type SFlushdbAsync SCompleted

func (c FlushdbAsync) Build() Completed {
	return Completed(c)
}

func (c SFlushdbAsync) Build() SCompleted {
	return SCompleted(c)
}

type FlushdbAsyncSync Completed

type SFlushdbAsyncSync SCompleted

func (c FlushdbAsyncSync) Build() Completed {
	return Completed(c)
}

func (c SFlushdbAsyncSync) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregate Completed

type SFtAggregate SCompleted

func (b *Builder) FtAggregate() (c FtAggregate) {
	c = FtAggregate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.AGGREGATE")
	return c
}

func (b *SBuilder) FtAggregate() (c SFtAggregate) {
	c = SFtAggregate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.AGGREGATE")
	return c
}

func (c FtAggregate) Index(index string) FtAggregateIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtAggregateIndex)(c)
}

func (c SFtAggregate) Index(index string) SFtAggregateIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtAggregateIndex)(c)
}

type FtAggregateApplyApply Completed

type SFtAggregateApplyApply SCompleted

func (c FtAggregateApplyApply) As(name string) FtAggregateApplyAs {
	c.cs.s = append(c.cs.s, "AS", name)
	return (FtAggregateApplyAs)(c)
}

func (c SFtAggregateApplyApply) As(name string) SFtAggregateApplyAs {
	c.cs.s = append(c.cs.s, "AS", name)
	return (SFtAggregateApplyAs)(c)
}

type FtAggregateApplyAs Completed

type SFtAggregateApplyAs SCompleted

func (c FtAggregateApplyAs) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateApplyAs) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateApplyAs) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateApplyAs) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateApplyAs) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateApplyAs) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateApplyAs) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateApplyAs) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateApplyAs) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateApplyAs) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateCursorCount Completed

type SFtAggregateCursorCount SCompleted

func (c FtAggregateCursorCount) Maxidle(idleTime int64) FtAggregateCursorMaxidle {
	c.cs.s = append(c.cs.s, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (FtAggregateCursorMaxidle)(c)
}

func (c SFtAggregateCursorCount) Maxidle(idleTime int64) SFtAggregateCursorMaxidle {
	c.cs.s = append(c.cs.s, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (SFtAggregateCursorMaxidle)(c)
}

func (c FtAggregateCursorCount) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateCursorCount) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateCursorMaxidle Completed

type SFtAggregateCursorMaxidle SCompleted

func (c FtAggregateCursorMaxidle) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateCursorMaxidle) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateCursorWithcursor Completed

type SFtAggregateCursorWithcursor SCompleted

func (c FtAggregateCursorWithcursor) Count(readSize int64) FtAggregateCursorCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(readSize, 10))
	return (FtAggregateCursorCount)(c)
}

func (c SFtAggregateCursorWithcursor) Count(readSize int64) SFtAggregateCursorCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(readSize, 10))
	return (SFtAggregateCursorCount)(c)
}

func (c FtAggregateCursorWithcursor) Maxidle(idleTime int64) FtAggregateCursorMaxidle {
	c.cs.s = append(c.cs.s, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (FtAggregateCursorMaxidle)(c)
}

func (c SFtAggregateCursorWithcursor) Maxidle(idleTime int64) SFtAggregateCursorMaxidle {
	c.cs.s = append(c.cs.s, "MAXIDLE", strconv.FormatInt(idleTime, 10))
	return (SFtAggregateCursorMaxidle)(c)
}

func (c FtAggregateCursorWithcursor) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateCursorWithcursor) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateFilter Completed

type SFtAggregateFilter SCompleted

func (c FtAggregateFilter) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateFilter) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateFilter) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateFilter) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyGroupby Completed

type SFtAggregateGroupbyGroupby SCompleted

func (c FtAggregateGroupbyGroupby) Property(property ...string) FtAggregateGroupbyProperty {
	c.cs.s = append(c.cs.s, property...)
	return (FtAggregateGroupbyProperty)(c)
}

func (c SFtAggregateGroupbyGroupby) Property(property ...string) SFtAggregateGroupbyProperty {
	c.cs.s = append(c.cs.s, property...)
	return (SFtAggregateGroupbyProperty)(c)
}

type FtAggregateGroupbyProperty Completed

type SFtAggregateGroupbyProperty SCompleted

func (c FtAggregateGroupbyProperty) Property(property ...string) FtAggregateGroupbyProperty {
	c.cs.s = append(c.cs.s, property...)
	return c
}

func (c SFtAggregateGroupbyProperty) Property(property ...string) SFtAggregateGroupbyProperty {
	c.cs.s = append(c.cs.s, property...)
	return c
}

func (c FtAggregateGroupbyProperty) Reduce(function string) FtAggregateGroupbyReduceReduce {
	c.cs.s = append(c.cs.s, "REDUCE", function)
	return (FtAggregateGroupbyReduceReduce)(c)
}

func (c SFtAggregateGroupbyProperty) Reduce(function string) SFtAggregateGroupbyReduceReduce {
	c.cs.s = append(c.cs.s, "REDUCE", function)
	return (SFtAggregateGroupbyReduceReduce)(c)
}

func (c FtAggregateGroupbyProperty) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateGroupbyProperty) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateGroupbyProperty) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateGroupbyProperty) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateGroupbyProperty) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateGroupbyProperty) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateGroupbyProperty) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateGroupbyProperty) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateGroupbyProperty) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateGroupbyProperty) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateGroupbyProperty) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateGroupbyProperty) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateGroupbyProperty) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateGroupbyProperty) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyReduceArg Completed

type SFtAggregateGroupbyReduceArg SCompleted

func (c FtAggregateGroupbyReduceArg) Arg(arg ...string) FtAggregateGroupbyReduceArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c SFtAggregateGroupbyReduceArg) Arg(arg ...string) SFtAggregateGroupbyReduceArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c FtAggregateGroupbyReduceArg) As(name string) FtAggregateGroupbyReduceAs {
	c.cs.s = append(c.cs.s, "AS", name)
	return (FtAggregateGroupbyReduceAs)(c)
}

func (c SFtAggregateGroupbyReduceArg) As(name string) SFtAggregateGroupbyReduceAs {
	c.cs.s = append(c.cs.s, "AS", name)
	return (SFtAggregateGroupbyReduceAs)(c)
}

func (c FtAggregateGroupbyReduceArg) Reduce(function string) FtAggregateGroupbyReduceReduce {
	c.cs.s = append(c.cs.s, "REDUCE", function)
	return (FtAggregateGroupbyReduceReduce)(c)
}

func (c SFtAggregateGroupbyReduceArg) Reduce(function string) SFtAggregateGroupbyReduceReduce {
	c.cs.s = append(c.cs.s, "REDUCE", function)
	return (SFtAggregateGroupbyReduceReduce)(c)
}

func (c FtAggregateGroupbyReduceArg) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateGroupbyReduceArg) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateGroupbyReduceArg) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateGroupbyReduceArg) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateGroupbyReduceArg) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateGroupbyReduceArg) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateGroupbyReduceArg) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateGroupbyReduceArg) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateGroupbyReduceArg) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateGroupbyReduceArg) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateGroupbyReduceArg) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateGroupbyReduceArg) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateGroupbyReduceArg) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateGroupbyReduceArg) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyReduceAs Completed

type SFtAggregateGroupbyReduceAs SCompleted

func (c FtAggregateGroupbyReduceAs) Reduce(function string) FtAggregateGroupbyReduceReduce {
	c.cs.s = append(c.cs.s, "REDUCE", function)
	return (FtAggregateGroupbyReduceReduce)(c)
}

func (c SFtAggregateGroupbyReduceAs) Reduce(function string) SFtAggregateGroupbyReduceReduce {
	c.cs.s = append(c.cs.s, "REDUCE", function)
	return (SFtAggregateGroupbyReduceReduce)(c)
}

func (c FtAggregateGroupbyReduceAs) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateGroupbyReduceAs) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateGroupbyReduceAs) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateGroupbyReduceAs) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateGroupbyReduceAs) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateGroupbyReduceAs) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateGroupbyReduceAs) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateGroupbyReduceAs) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateGroupbyReduceAs) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateGroupbyReduceAs) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateGroupbyReduceAs) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateGroupbyReduceAs) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateGroupbyReduceAs) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateGroupbyReduceAs) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateGroupbyReduceNargs Completed

type SFtAggregateGroupbyReduceNargs SCompleted

func (c FtAggregateGroupbyReduceNargs) Arg(arg ...string) FtAggregateGroupbyReduceArg {
	c.cs.s = append(c.cs.s, arg...)
	return (FtAggregateGroupbyReduceArg)(c)
}

func (c SFtAggregateGroupbyReduceNargs) Arg(arg ...string) SFtAggregateGroupbyReduceArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SFtAggregateGroupbyReduceArg)(c)
}

type FtAggregateGroupbyReduceReduce Completed

type SFtAggregateGroupbyReduceReduce SCompleted

func (c FtAggregateGroupbyReduceReduce) Nargs(nargs int64) FtAggregateGroupbyReduceNargs {
	c.cs.s = append(c.cs.s, strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyReduceNargs)(c)
}

func (c SFtAggregateGroupbyReduceReduce) Nargs(nargs int64) SFtAggregateGroupbyReduceNargs {
	c.cs.s = append(c.cs.s, strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyReduceNargs)(c)
}

type FtAggregateIndex Completed

type SFtAggregateIndex SCompleted

func (c FtAggregateIndex) Query(query string) FtAggregateQuery {
	c.cs.s = append(c.cs.s, query)
	return (FtAggregateQuery)(c)
}

func (c SFtAggregateIndex) Query(query string) SFtAggregateQuery {
	c.cs.s = append(c.cs.s, query)
	return (SFtAggregateQuery)(c)
}

type FtAggregateLimitLimit Completed

type SFtAggregateLimitLimit SCompleted

func (c FtAggregateLimitLimit) OffsetNum(offset int64, num int64) FtAggregateLimitOffsetNum {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (FtAggregateLimitOffsetNum)(c)
}

func (c SFtAggregateLimitLimit) OffsetNum(offset int64, num int64) SFtAggregateLimitOffsetNum {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (SFtAggregateLimitOffsetNum)(c)
}

type FtAggregateLimitOffsetNum Completed

type SFtAggregateLimitOffsetNum SCompleted

func (c FtAggregateLimitOffsetNum) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateLimitOffsetNum) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateLimitOffsetNum) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateLimitOffsetNum) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateLimitOffsetNum) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateLimitOffsetNum) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateLoadField Completed

type SFtAggregateLoadField SCompleted

func (c FtAggregateLoadField) Field(field ...string) FtAggregateLoadField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SFtAggregateLoadField) Field(field ...string) SFtAggregateLoadField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c FtAggregateLoadField) LoadAll() FtAggregateLoadallLoadAll {
	c.cs.s = append(c.cs.s, "LOAD", "*")
	return (FtAggregateLoadallLoadAll)(c)
}

func (c SFtAggregateLoadField) LoadAll() SFtAggregateLoadallLoadAll {
	c.cs.s = append(c.cs.s, "LOAD", "*")
	return (SFtAggregateLoadallLoadAll)(c)
}

func (c FtAggregateLoadField) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateLoadField) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateLoadField) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateLoadField) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateLoadField) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateLoadField) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateLoadField) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateLoadField) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateLoadField) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateLoadField) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateLoadField) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateLoadField) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateLoadField) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateLoadField) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateLoadLoad Completed

type SFtAggregateLoadLoad SCompleted

func (c FtAggregateLoadLoad) Field(field ...string) FtAggregateLoadField {
	c.cs.s = append(c.cs.s, field...)
	return (FtAggregateLoadField)(c)
}

func (c SFtAggregateLoadLoad) Field(field ...string) SFtAggregateLoadField {
	c.cs.s = append(c.cs.s, field...)
	return (SFtAggregateLoadField)(c)
}

type FtAggregateLoadallLoadAll Completed

type SFtAggregateLoadallLoadAll SCompleted

func (c FtAggregateLoadallLoadAll) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateLoadallLoadAll) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateLoadallLoadAll) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateLoadallLoadAll) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateLoadallLoadAll) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateLoadallLoadAll) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateLoadallLoadAll) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateLoadallLoadAll) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateLoadallLoadAll) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateLoadallLoadAll) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateLoadallLoadAll) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateLoadallLoadAll) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateLoadallLoadAll) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateLoadallLoadAll) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateQuery Completed

type SFtAggregateQuery SCompleted

func (c FtAggregateQuery) Verbatim() FtAggregateVerbatim {
	c.cs.s = append(c.cs.s, "VERBATIM")
	return (FtAggregateVerbatim)(c)
}

func (c SFtAggregateQuery) Verbatim() SFtAggregateVerbatim {
	c.cs.s = append(c.cs.s, "VERBATIM")
	return (SFtAggregateVerbatim)(c)
}

func (c FtAggregateQuery) Load(count string) FtAggregateLoadLoad {
	c.cs.s = append(c.cs.s, "LOAD", count)
	return (FtAggregateLoadLoad)(c)
}

func (c SFtAggregateQuery) Load(count string) SFtAggregateLoadLoad {
	c.cs.s = append(c.cs.s, "LOAD", count)
	return (SFtAggregateLoadLoad)(c)
}

func (c FtAggregateQuery) LoadAll() FtAggregateLoadallLoadAll {
	c.cs.s = append(c.cs.s, "LOAD", "*")
	return (FtAggregateLoadallLoadAll)(c)
}

func (c SFtAggregateQuery) LoadAll() SFtAggregateLoadallLoadAll {
	c.cs.s = append(c.cs.s, "LOAD", "*")
	return (SFtAggregateLoadallLoadAll)(c)
}

func (c FtAggregateQuery) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateQuery) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateQuery) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateQuery) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateQuery) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateQuery) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateQuery) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateQuery) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateQuery) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateQuery) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateQuery) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateQuery) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateQuery) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbyFieldsOrderAsc Completed

type SFtAggregateSortbyFieldsOrderAsc SCompleted

func (c FtAggregateSortbyFieldsOrderAsc) Property(property string) FtAggregateSortbyFieldsProperty {
	c.cs.s = append(c.cs.s, property)
	return (FtAggregateSortbyFieldsProperty)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Property(property string) SFtAggregateSortbyFieldsProperty {
	c.cs.s = append(c.cs.s, property)
	return (SFtAggregateSortbyFieldsProperty)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Max(num int64) FtAggregateSortbyMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(num, 10))
	return (FtAggregateSortbyMax)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Max(num int64) SFtAggregateSortbyMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(num, 10))
	return (SFtAggregateSortbyMax)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbyFieldsOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbyFieldsOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbyFieldsOrderDesc Completed

type SFtAggregateSortbyFieldsOrderDesc SCompleted

func (c FtAggregateSortbyFieldsOrderDesc) Property(property string) FtAggregateSortbyFieldsProperty {
	c.cs.s = append(c.cs.s, property)
	return (FtAggregateSortbyFieldsProperty)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Property(property string) SFtAggregateSortbyFieldsProperty {
	c.cs.s = append(c.cs.s, property)
	return (SFtAggregateSortbyFieldsProperty)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Max(num int64) FtAggregateSortbyMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(num, 10))
	return (FtAggregateSortbyMax)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Max(num int64) SFtAggregateSortbyMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(num, 10))
	return (SFtAggregateSortbyMax)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbyFieldsOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbyFieldsOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbyFieldsProperty Completed

type SFtAggregateSortbyFieldsProperty SCompleted

func (c FtAggregateSortbyFieldsProperty) Asc() FtAggregateSortbyFieldsOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (FtAggregateSortbyFieldsOrderAsc)(c)
}

func (c SFtAggregateSortbyFieldsProperty) Asc() SFtAggregateSortbyFieldsOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SFtAggregateSortbyFieldsOrderAsc)(c)
}

func (c FtAggregateSortbyFieldsProperty) Desc() FtAggregateSortbyFieldsOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (FtAggregateSortbyFieldsOrderDesc)(c)
}

func (c SFtAggregateSortbyFieldsProperty) Desc() SFtAggregateSortbyFieldsOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SFtAggregateSortbyFieldsOrderDesc)(c)
}

type FtAggregateSortbyMax Completed

type SFtAggregateSortbyMax SCompleted

func (c FtAggregateSortbyMax) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbyMax) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbyMax) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbyMax) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbyMax) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbyMax) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbyMax) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbyMax) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbyMax) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbyMax) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateSortbySortby Completed

type SFtAggregateSortbySortby SCompleted

func (c FtAggregateSortbySortby) Property(property string) FtAggregateSortbyFieldsProperty {
	c.cs.s = append(c.cs.s, property)
	return (FtAggregateSortbyFieldsProperty)(c)
}

func (c SFtAggregateSortbySortby) Property(property string) SFtAggregateSortbyFieldsProperty {
	c.cs.s = append(c.cs.s, property)
	return (SFtAggregateSortbyFieldsProperty)(c)
}

func (c FtAggregateSortbySortby) Max(num int64) FtAggregateSortbyMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(num, 10))
	return (FtAggregateSortbyMax)(c)
}

func (c SFtAggregateSortbySortby) Max(num int64) SFtAggregateSortbyMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(num, 10))
	return (SFtAggregateSortbyMax)(c)
}

func (c FtAggregateSortbySortby) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateSortbySortby) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateSortbySortby) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateSortbySortby) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateSortbySortby) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateSortbySortby) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateSortbySortby) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateSortbySortby) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateSortbySortby) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateSortbySortby) Build() SCompleted {
	return SCompleted(c)
}

type FtAggregateVerbatim Completed

type SFtAggregateVerbatim SCompleted

func (c FtAggregateVerbatim) Load(count string) FtAggregateLoadLoad {
	c.cs.s = append(c.cs.s, "LOAD", count)
	return (FtAggregateLoadLoad)(c)
}

func (c SFtAggregateVerbatim) Load(count string) SFtAggregateLoadLoad {
	c.cs.s = append(c.cs.s, "LOAD", count)
	return (SFtAggregateLoadLoad)(c)
}

func (c FtAggregateVerbatim) LoadAll() FtAggregateLoadallLoadAll {
	c.cs.s = append(c.cs.s, "LOAD", "*")
	return (FtAggregateLoadallLoadAll)(c)
}

func (c SFtAggregateVerbatim) LoadAll() SFtAggregateLoadallLoadAll {
	c.cs.s = append(c.cs.s, "LOAD", "*")
	return (SFtAggregateLoadallLoadAll)(c)
}

func (c FtAggregateVerbatim) Groupby(nargs int64) FtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateGroupbyGroupby)(c)
}

func (c SFtAggregateVerbatim) Groupby(nargs int64) SFtAggregateGroupbyGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateGroupbyGroupby)(c)
}

func (c FtAggregateVerbatim) Sortby(nargs int64) FtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (FtAggregateSortbySortby)(c)
}

func (c SFtAggregateVerbatim) Sortby(nargs int64) SFtAggregateSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", strconv.FormatInt(nargs, 10))
	return (SFtAggregateSortbySortby)(c)
}

func (c FtAggregateVerbatim) Apply(expression string) FtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (FtAggregateApplyApply)(c)
}

func (c SFtAggregateVerbatim) Apply(expression string) SFtAggregateApplyApply {
	c.cs.s = append(c.cs.s, "APPLY", expression)
	return (SFtAggregateApplyApply)(c)
}

func (c FtAggregateVerbatim) Limit() FtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtAggregateLimitLimit)(c)
}

func (c SFtAggregateVerbatim) Limit() SFtAggregateLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtAggregateLimitLimit)(c)
}

func (c FtAggregateVerbatim) Filter(filter string) FtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (FtAggregateFilter)(c)
}

func (c SFtAggregateVerbatim) Filter(filter string) SFtAggregateFilter {
	c.cs.s = append(c.cs.s, "FILTER", filter)
	return (SFtAggregateFilter)(c)
}

func (c FtAggregateVerbatim) Withcursor() FtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (FtAggregateCursorWithcursor)(c)
}

func (c SFtAggregateVerbatim) Withcursor() SFtAggregateCursorWithcursor {
	c.cs.s = append(c.cs.s, "WITHCURSOR")
	return (SFtAggregateCursorWithcursor)(c)
}

func (c FtAggregateVerbatim) Build() Completed {
	return Completed(c)
}

func (c SFtAggregateVerbatim) Build() SCompleted {
	return SCompleted(c)
}

type FtAliasadd Completed

type SFtAliasadd SCompleted

func (b *Builder) FtAliasadd() (c FtAliasadd) {
	c = FtAliasadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALIASADD")
	return c
}

func (b *SBuilder) FtAliasadd() (c SFtAliasadd) {
	c = SFtAliasadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALIASADD")
	return c
}

func (c FtAliasadd) Alias(alias string) FtAliasaddAlias {
	c.cs.s = append(c.cs.s, alias)
	return (FtAliasaddAlias)(c)
}

func (c SFtAliasadd) Alias(alias string) SFtAliasaddAlias {
	c.cs.s = append(c.cs.s, alias)
	return (SFtAliasaddAlias)(c)
}

type FtAliasaddAlias Completed

type SFtAliasaddAlias SCompleted

func (c FtAliasaddAlias) Index(index string) FtAliasaddIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtAliasaddIndex)(c)
}

func (c SFtAliasaddAlias) Index(index string) SFtAliasaddIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtAliasaddIndex)(c)
}

type FtAliasaddIndex Completed

type SFtAliasaddIndex SCompleted

func (c FtAliasaddIndex) Build() Completed {
	return Completed(c)
}

func (c SFtAliasaddIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtAliasdel Completed

type SFtAliasdel SCompleted

func (b *Builder) FtAliasdel() (c FtAliasdel) {
	c = FtAliasdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALIASDEL")
	return c
}

func (b *SBuilder) FtAliasdel() (c SFtAliasdel) {
	c = SFtAliasdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALIASDEL")
	return c
}

func (c FtAliasdel) Alias(alias string) FtAliasdelAlias {
	c.cs.s = append(c.cs.s, alias)
	return (FtAliasdelAlias)(c)
}

func (c SFtAliasdel) Alias(alias string) SFtAliasdelAlias {
	c.cs.s = append(c.cs.s, alias)
	return (SFtAliasdelAlias)(c)
}

type FtAliasdelAlias Completed

type SFtAliasdelAlias SCompleted

func (c FtAliasdelAlias) Build() Completed {
	return Completed(c)
}

func (c SFtAliasdelAlias) Build() SCompleted {
	return SCompleted(c)
}

type FtAliasupdate Completed

type SFtAliasupdate SCompleted

func (b *Builder) FtAliasupdate() (c FtAliasupdate) {
	c = FtAliasupdate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALIASUPDATE")
	return c
}

func (b *SBuilder) FtAliasupdate() (c SFtAliasupdate) {
	c = SFtAliasupdate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALIASUPDATE")
	return c
}

func (c FtAliasupdate) Alias(alias string) FtAliasupdateAlias {
	c.cs.s = append(c.cs.s, alias)
	return (FtAliasupdateAlias)(c)
}

func (c SFtAliasupdate) Alias(alias string) SFtAliasupdateAlias {
	c.cs.s = append(c.cs.s, alias)
	return (SFtAliasupdateAlias)(c)
}

type FtAliasupdateAlias Completed

type SFtAliasupdateAlias SCompleted

func (c FtAliasupdateAlias) Index(index string) FtAliasupdateIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtAliasupdateIndex)(c)
}

func (c SFtAliasupdateAlias) Index(index string) SFtAliasupdateIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtAliasupdateIndex)(c)
}

type FtAliasupdateIndex Completed

type SFtAliasupdateIndex SCompleted

func (c FtAliasupdateIndex) Build() Completed {
	return Completed(c)
}

func (c SFtAliasupdateIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtAlter Completed

type SFtAlter SCompleted

func (b *Builder) FtAlter() (c FtAlter) {
	c = FtAlter{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALTER")
	return c
}

func (b *SBuilder) FtAlter() (c SFtAlter) {
	c = SFtAlter{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.ALTER")
	return c
}

func (c FtAlter) Index(index string) FtAlterIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtAlterIndex)(c)
}

func (c SFtAlter) Index(index string) SFtAlterIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtAlterIndex)(c)
}

type FtAlterAdd Completed

type SFtAlterAdd SCompleted

func (c FtAlterAdd) Field(field string) FtAlterField {
	c.cs.s = append(c.cs.s, field)
	return (FtAlterField)(c)
}

func (c SFtAlterAdd) Field(field string) SFtAlterField {
	c.cs.s = append(c.cs.s, field)
	return (SFtAlterField)(c)
}

type FtAlterField Completed

type SFtAlterField SCompleted

func (c FtAlterField) Options(options string) FtAlterOptions {
	c.cs.s = append(c.cs.s, options)
	return (FtAlterOptions)(c)
}

func (c SFtAlterField) Options(options string) SFtAlterOptions {
	c.cs.s = append(c.cs.s, options)
	return (SFtAlterOptions)(c)
}

type FtAlterIndex Completed

type SFtAlterIndex SCompleted

func (c FtAlterIndex) Schema() FtAlterSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtAlterSchema)(c)
}

func (c SFtAlterIndex) Schema() SFtAlterSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtAlterSchema)(c)
}

type FtAlterOptions Completed

type SFtAlterOptions SCompleted

func (c FtAlterOptions) Build() Completed {
	return Completed(c)
}

func (c SFtAlterOptions) Build() SCompleted {
	return SCompleted(c)
}

type FtAlterSchema Completed

type SFtAlterSchema SCompleted

func (c FtAlterSchema) Add() FtAlterAdd {
	c.cs.s = append(c.cs.s, "ADD")
	return (FtAlterAdd)(c)
}

func (c SFtAlterSchema) Add() SFtAlterAdd {
	c.cs.s = append(c.cs.s, "ADD")
	return (SFtAlterAdd)(c)
}

type FtConfigGet Completed

type SFtConfigGet SCompleted

func (b *Builder) FtConfigGet() (c FtConfigGet) {
	c = FtConfigGet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CONFIG", "GET")
	return c
}

func (b *SBuilder) FtConfigGet() (c SFtConfigGet) {
	c = SFtConfigGet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CONFIG", "GET")
	return c
}

func (c FtConfigGet) Option(option string) FtConfigGetOption {
	c.cs.s = append(c.cs.s, option)
	return (FtConfigGetOption)(c)
}

func (c SFtConfigGet) Option(option string) SFtConfigGetOption {
	c.cs.s = append(c.cs.s, option)
	return (SFtConfigGetOption)(c)
}

type FtConfigGetOption Completed

type SFtConfigGetOption SCompleted

func (c FtConfigGetOption) Value(value string) FtConfigGetValue {
	c.cs.s = append(c.cs.s, value)
	return (FtConfigGetValue)(c)
}

func (c SFtConfigGetOption) Value(value string) SFtConfigGetValue {
	c.cs.s = append(c.cs.s, value)
	return (SFtConfigGetValue)(c)
}

type FtConfigGetValue Completed

type SFtConfigGetValue SCompleted

func (c FtConfigGetValue) Build() Completed {
	return Completed(c)
}

func (c SFtConfigGetValue) Build() SCompleted {
	return SCompleted(c)
}

type FtConfigHelp Completed

type SFtConfigHelp SCompleted

func (b *Builder) FtConfigHelp() (c FtConfigHelp) {
	c = FtConfigHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CONFIG", "HELP")
	return c
}

func (b *SBuilder) FtConfigHelp() (c SFtConfigHelp) {
	c = SFtConfigHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CONFIG", "HELP")
	return c
}

func (c FtConfigHelp) Option(option string) FtConfigHelpOption {
	c.cs.s = append(c.cs.s, option)
	return (FtConfigHelpOption)(c)
}

func (c SFtConfigHelp) Option(option string) SFtConfigHelpOption {
	c.cs.s = append(c.cs.s, option)
	return (SFtConfigHelpOption)(c)
}

type FtConfigHelpOption Completed

type SFtConfigHelpOption SCompleted

func (c FtConfigHelpOption) Build() Completed {
	return Completed(c)
}

func (c SFtConfigHelpOption) Build() SCompleted {
	return SCompleted(c)
}

type FtConfigSet Completed

type SFtConfigSet SCompleted

func (b *Builder) FtConfigSet() (c FtConfigSet) {
	c = FtConfigSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CONFIG", "SET")
	return c
}

func (b *SBuilder) FtConfigSet() (c SFtConfigSet) {
	c = SFtConfigSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CONFIG", "SET")
	return c
}

func (c FtConfigSet) Option(option string) FtConfigSetOption {
	c.cs.s = append(c.cs.s, option)
	return (FtConfigSetOption)(c)
}

func (c SFtConfigSet) Option(option string) SFtConfigSetOption {
	c.cs.s = append(c.cs.s, option)
	return (SFtConfigSetOption)(c)
}

type FtConfigSetOption Completed

type SFtConfigSetOption SCompleted

func (c FtConfigSetOption) Build() Completed {
	return Completed(c)
}

func (c SFtConfigSetOption) Build() SCompleted {
	return SCompleted(c)
}

type FtCreate Completed

type SFtCreate SCompleted

func (b *Builder) FtCreate() (c FtCreate) {
	c = FtCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CREATE")
	return c
}

func (b *SBuilder) FtCreate() (c SFtCreate) {
	c = SFtCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CREATE")
	return c
}

func (c FtCreate) Index(index string) FtCreateIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtCreateIndex)(c)
}

func (c SFtCreate) Index(index string) SFtCreateIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtCreateIndex)(c)
}

type FtCreateFieldAs Completed

type SFtCreateFieldAs SCompleted

func (c FtCreateFieldAs) Text() FtCreateFieldFieldTypeText {
	c.cs.s = append(c.cs.s, "TEXT")
	return (FtCreateFieldFieldTypeText)(c)
}

func (c SFtCreateFieldAs) Text() SFtCreateFieldFieldTypeText {
	c.cs.s = append(c.cs.s, "TEXT")
	return (SFtCreateFieldFieldTypeText)(c)
}

func (c FtCreateFieldAs) Tag() FtCreateFieldFieldTypeTag {
	c.cs.s = append(c.cs.s, "TAG")
	return (FtCreateFieldFieldTypeTag)(c)
}

func (c SFtCreateFieldAs) Tag() SFtCreateFieldFieldTypeTag {
	c.cs.s = append(c.cs.s, "TAG")
	return (SFtCreateFieldFieldTypeTag)(c)
}

func (c FtCreateFieldAs) Numeric() FtCreateFieldFieldTypeNumeric {
	c.cs.s = append(c.cs.s, "NUMERIC")
	return (FtCreateFieldFieldTypeNumeric)(c)
}

func (c SFtCreateFieldAs) Numeric() SFtCreateFieldFieldTypeNumeric {
	c.cs.s = append(c.cs.s, "NUMERIC")
	return (SFtCreateFieldFieldTypeNumeric)(c)
}

func (c FtCreateFieldAs) Geo() FtCreateFieldFieldTypeGeo {
	c.cs.s = append(c.cs.s, "GEO")
	return (FtCreateFieldFieldTypeGeo)(c)
}

func (c SFtCreateFieldAs) Geo() SFtCreateFieldFieldTypeGeo {
	c.cs.s = append(c.cs.s, "GEO")
	return (SFtCreateFieldFieldTypeGeo)(c)
}

type FtCreateFieldFieldName Completed

type SFtCreateFieldFieldName SCompleted

func (c FtCreateFieldFieldName) As(alias string) FtCreateFieldAs {
	c.cs.s = append(c.cs.s, "AS", alias)
	return (FtCreateFieldAs)(c)
}

func (c SFtCreateFieldFieldName) As(alias string) SFtCreateFieldAs {
	c.cs.s = append(c.cs.s, "AS", alias)
	return (SFtCreateFieldAs)(c)
}

func (c FtCreateFieldFieldName) Text() FtCreateFieldFieldTypeText {
	c.cs.s = append(c.cs.s, "TEXT")
	return (FtCreateFieldFieldTypeText)(c)
}

func (c SFtCreateFieldFieldName) Text() SFtCreateFieldFieldTypeText {
	c.cs.s = append(c.cs.s, "TEXT")
	return (SFtCreateFieldFieldTypeText)(c)
}

func (c FtCreateFieldFieldName) Tag() FtCreateFieldFieldTypeTag {
	c.cs.s = append(c.cs.s, "TAG")
	return (FtCreateFieldFieldTypeTag)(c)
}

func (c SFtCreateFieldFieldName) Tag() SFtCreateFieldFieldTypeTag {
	c.cs.s = append(c.cs.s, "TAG")
	return (SFtCreateFieldFieldTypeTag)(c)
}

func (c FtCreateFieldFieldName) Numeric() FtCreateFieldFieldTypeNumeric {
	c.cs.s = append(c.cs.s, "NUMERIC")
	return (FtCreateFieldFieldTypeNumeric)(c)
}

func (c SFtCreateFieldFieldName) Numeric() SFtCreateFieldFieldTypeNumeric {
	c.cs.s = append(c.cs.s, "NUMERIC")
	return (SFtCreateFieldFieldTypeNumeric)(c)
}

func (c FtCreateFieldFieldName) Geo() FtCreateFieldFieldTypeGeo {
	c.cs.s = append(c.cs.s, "GEO")
	return (FtCreateFieldFieldTypeGeo)(c)
}

func (c SFtCreateFieldFieldName) Geo() SFtCreateFieldFieldTypeGeo {
	c.cs.s = append(c.cs.s, "GEO")
	return (SFtCreateFieldFieldTypeGeo)(c)
}

type FtCreateFieldFieldTypeGeo Completed

type SFtCreateFieldFieldTypeGeo SCompleted

func (c FtCreateFieldFieldTypeGeo) Sortable() FtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeGeo) Sortable() SFtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeGeo) Noindex() FtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeGeo) Noindex() SFtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeGeo) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeGeo) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeGeo) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeGeo) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldFieldTypeNumeric Completed

type SFtCreateFieldFieldTypeNumeric SCompleted

func (c FtCreateFieldFieldTypeNumeric) Sortable() FtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeNumeric) Sortable() SFtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeNumeric) Noindex() FtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeNumeric) Noindex() SFtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeNumeric) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeNumeric) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeNumeric) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeNumeric) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldFieldTypeTag Completed

type SFtCreateFieldFieldTypeTag SCompleted

func (c FtCreateFieldFieldTypeTag) Sortable() FtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeTag) Sortable() SFtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeTag) Noindex() FtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeTag) Noindex() SFtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeTag) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeTag) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeTag) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeTag) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldFieldTypeText Completed

type SFtCreateFieldFieldTypeText SCompleted

func (c FtCreateFieldFieldTypeText) Sortable() FtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (FtCreateFieldSortableSortable)(c)
}

func (c SFtCreateFieldFieldTypeText) Sortable() SFtCreateFieldSortableSortable {
	c.cs.s = append(c.cs.s, "SORTABLE")
	return (SFtCreateFieldSortableSortable)(c)
}

func (c FtCreateFieldFieldTypeText) Noindex() FtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldFieldTypeText) Noindex() SFtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldFieldTypeText) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldFieldTypeText) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldFieldTypeText) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldFieldTypeText) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldNoindex Completed

type SFtCreateFieldNoindex SCompleted

func (c FtCreateFieldNoindex) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldNoindex) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldNoindex) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldNoindex) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldSortableSortable Completed

type SFtCreateFieldSortableSortable SCompleted

func (c FtCreateFieldSortableSortable) Unf() FtCreateFieldSortableUnf {
	c.cs.s = append(c.cs.s, "UNF")
	return (FtCreateFieldSortableUnf)(c)
}

func (c SFtCreateFieldSortableSortable) Unf() SFtCreateFieldSortableUnf {
	c.cs.s = append(c.cs.s, "UNF")
	return (SFtCreateFieldSortableUnf)(c)
}

func (c FtCreateFieldSortableSortable) Noindex() FtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldSortableSortable) Noindex() SFtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldSortableSortable) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldSortableSortable) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldSortableSortable) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldSortableSortable) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateFieldSortableUnf Completed

type SFtCreateFieldSortableUnf SCompleted

func (c FtCreateFieldSortableUnf) Noindex() FtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (FtCreateFieldNoindex)(c)
}

func (c SFtCreateFieldSortableUnf) Noindex() SFtCreateFieldNoindex {
	c.cs.s = append(c.cs.s, "NOINDEX")
	return (SFtCreateFieldNoindex)(c)
}

func (c FtCreateFieldSortableUnf) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateFieldSortableUnf) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

func (c FtCreateFieldSortableUnf) Build() Completed {
	return Completed(c)
}

func (c SFtCreateFieldSortableUnf) Build() SCompleted {
	return SCompleted(c)
}

type FtCreateIndex Completed

type SFtCreateIndex SCompleted

func (c FtCreateIndex) OnHash() FtCreateOnHash {
	c.cs.s = append(c.cs.s, "ON", "HASH")
	return (FtCreateOnHash)(c)
}

func (c SFtCreateIndex) OnHash() SFtCreateOnHash {
	c.cs.s = append(c.cs.s, "ON", "HASH")
	return (SFtCreateOnHash)(c)
}

func (c FtCreateIndex) OnJson() FtCreateOnJson {
	c.cs.s = append(c.cs.s, "ON", "JSON")
	return (FtCreateOnJson)(c)
}

func (c SFtCreateIndex) OnJson() SFtCreateOnJson {
	c.cs.s = append(c.cs.s, "ON", "JSON")
	return (SFtCreateOnJson)(c)
}

func (c FtCreateIndex) Prefix(count int64) FtCreatePrefixCount {
	c.cs.s = append(c.cs.s, "PREFIX", strconv.FormatInt(count, 10))
	return (FtCreatePrefixCount)(c)
}

func (c SFtCreateIndex) Prefix(count int64) SFtCreatePrefixCount {
	c.cs.s = append(c.cs.s, "PREFIX", strconv.FormatInt(count, 10))
	return (SFtCreatePrefixCount)(c)
}

func (c FtCreateIndex) Language(defaultLang string) FtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreateIndex) Language(defaultLang string) SFtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreateIndex) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateIndex) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateIndex) Score(defaultScore float64) FtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateIndex) Score(defaultScore float64) SFtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateIndex) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateIndex) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateIndex) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateIndex) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateIndex) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateIndex) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateIndex) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateIndex) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateIndex) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateIndex) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateIndex) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateIndex) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateIndex) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateIndex) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateIndex) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateIndex) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateIndex) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateIndex) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateIndex) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateIndex) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateLanguage Completed

type SFtCreateLanguage SCompleted

func (c FtCreateLanguage) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateLanguage) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateLanguage) Score(defaultScore float64) FtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateLanguage) Score(defaultScore float64) SFtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateLanguage) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateLanguage) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateLanguage) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateLanguage) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateLanguage) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateLanguage) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateLanguage) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateLanguage) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateLanguage) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateLanguage) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateLanguage) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateLanguage) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateLanguage) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateLanguage) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateLanguage) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateLanguage) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateLanguage) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateLanguage) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateLanguage) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateLanguage) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateLanguageField Completed

type SFtCreateLanguageField SCompleted

func (c FtCreateLanguageField) Score(defaultScore float64) FtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateLanguageField) Score(defaultScore float64) SFtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateLanguageField) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateLanguageField) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateLanguageField) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateLanguageField) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateLanguageField) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateLanguageField) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateLanguageField) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateLanguageField) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateLanguageField) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateLanguageField) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateLanguageField) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateLanguageField) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateLanguageField) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateLanguageField) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateLanguageField) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateLanguageField) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateLanguageField) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateLanguageField) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateLanguageField) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateLanguageField) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateMaxtextfields Completed

type SFtCreateMaxtextfields SCompleted

func (c FtCreateMaxtextfields) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateMaxtextfields) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateMaxtextfields) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateMaxtextfields) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateMaxtextfields) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateMaxtextfields) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateMaxtextfields) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateMaxtextfields) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateMaxtextfields) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateMaxtextfields) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateMaxtextfields) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateMaxtextfields) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateMaxtextfields) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateMaxtextfields) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNofields Completed

type SFtCreateNofields SCompleted

func (c FtCreateNofields) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateNofields) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateNofields) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNofields) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNofields) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNofields) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNofreqs Completed

type SFtCreateNofreqs SCompleted

func (c FtCreateNofreqs) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNofreqs) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNofreqs) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNofreqs) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNohl Completed

type SFtCreateNohl SCompleted

func (c FtCreateNohl) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateNohl) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateNohl) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateNohl) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateNohl) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNohl) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNohl) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNohl) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateNooffsets Completed

type SFtCreateNooffsets SCompleted

func (c FtCreateNooffsets) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateNooffsets) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateNooffsets) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateNooffsets) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateNooffsets) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateNooffsets) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateNooffsets) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateNooffsets) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateNooffsets) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateNooffsets) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateOnHash Completed

type SFtCreateOnHash SCompleted

func (c FtCreateOnHash) Prefix(count int64) FtCreatePrefixCount {
	c.cs.s = append(c.cs.s, "PREFIX", strconv.FormatInt(count, 10))
	return (FtCreatePrefixCount)(c)
}

func (c SFtCreateOnHash) Prefix(count int64) SFtCreatePrefixCount {
	c.cs.s = append(c.cs.s, "PREFIX", strconv.FormatInt(count, 10))
	return (SFtCreatePrefixCount)(c)
}

func (c FtCreateOnHash) Language(defaultLang string) FtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreateOnHash) Language(defaultLang string) SFtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreateOnHash) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateOnHash) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateOnHash) Score(defaultScore float64) FtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateOnHash) Score(defaultScore float64) SFtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateOnHash) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateOnHash) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateOnHash) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateOnHash) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateOnHash) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateOnHash) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateOnHash) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateOnHash) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateOnHash) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateOnHash) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateOnHash) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateOnHash) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateOnHash) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateOnHash) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateOnHash) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateOnHash) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateOnHash) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateOnHash) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateOnHash) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateOnHash) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateOnJson Completed

type SFtCreateOnJson SCompleted

func (c FtCreateOnJson) Prefix(count int64) FtCreatePrefixCount {
	c.cs.s = append(c.cs.s, "PREFIX", strconv.FormatInt(count, 10))
	return (FtCreatePrefixCount)(c)
}

func (c SFtCreateOnJson) Prefix(count int64) SFtCreatePrefixCount {
	c.cs.s = append(c.cs.s, "PREFIX", strconv.FormatInt(count, 10))
	return (SFtCreatePrefixCount)(c)
}

func (c FtCreateOnJson) Language(defaultLang string) FtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreateOnJson) Language(defaultLang string) SFtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreateOnJson) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreateOnJson) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreateOnJson) Score(defaultScore float64) FtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreateOnJson) Score(defaultScore float64) SFtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreateOnJson) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateOnJson) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateOnJson) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateOnJson) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateOnJson) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateOnJson) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateOnJson) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateOnJson) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateOnJson) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateOnJson) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateOnJson) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateOnJson) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateOnJson) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateOnJson) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateOnJson) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateOnJson) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateOnJson) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateOnJson) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateOnJson) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateOnJson) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreatePayloadField Completed

type SFtCreatePayloadField SCompleted

func (c FtCreatePayloadField) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreatePayloadField) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreatePayloadField) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreatePayloadField) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreatePayloadField) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreatePayloadField) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreatePayloadField) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreatePayloadField) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreatePayloadField) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreatePayloadField) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreatePayloadField) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreatePayloadField) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreatePayloadField) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreatePayloadField) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreatePayloadField) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreatePayloadField) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreatePrefixCount Completed

type SFtCreatePrefixCount SCompleted

func (c FtCreatePrefixCount) Prefix(prefix ...string) FtCreatePrefixPrefix {
	c.cs.s = append(c.cs.s, prefix...)
	return (FtCreatePrefixPrefix)(c)
}

func (c SFtCreatePrefixCount) Prefix(prefix ...string) SFtCreatePrefixPrefix {
	c.cs.s = append(c.cs.s, prefix...)
	return (SFtCreatePrefixPrefix)(c)
}

type FtCreatePrefixPrefix Completed

type SFtCreatePrefixPrefix SCompleted

func (c FtCreatePrefixPrefix) Prefix(prefix ...string) FtCreatePrefixPrefix {
	c.cs.s = append(c.cs.s, prefix...)
	return c
}

func (c SFtCreatePrefixPrefix) Prefix(prefix ...string) SFtCreatePrefixPrefix {
	c.cs.s = append(c.cs.s, prefix...)
	return c
}

func (c FtCreatePrefixPrefix) Language(defaultLang string) FtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (FtCreateLanguage)(c)
}

func (c SFtCreatePrefixPrefix) Language(defaultLang string) SFtCreateLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", defaultLang)
	return (SFtCreateLanguage)(c)
}

func (c FtCreatePrefixPrefix) LanguageField(langAttribute string) FtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (FtCreateLanguageField)(c)
}

func (c SFtCreatePrefixPrefix) LanguageField(langAttribute string) SFtCreateLanguageField {
	c.cs.s = append(c.cs.s, "LANGUAGE_FIELD", langAttribute)
	return (SFtCreateLanguageField)(c)
}

func (c FtCreatePrefixPrefix) Score(defaultScore float64) FtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (FtCreateScore)(c)
}

func (c SFtCreatePrefixPrefix) Score(defaultScore float64) SFtCreateScore {
	c.cs.s = append(c.cs.s, "SCORE", strconv.FormatFloat(defaultScore, 'f', -1, 64))
	return (SFtCreateScore)(c)
}

func (c FtCreatePrefixPrefix) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreatePrefixPrefix) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreatePrefixPrefix) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreatePrefixPrefix) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreatePrefixPrefix) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreatePrefixPrefix) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreatePrefixPrefix) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreatePrefixPrefix) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreatePrefixPrefix) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreatePrefixPrefix) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreatePrefixPrefix) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreatePrefixPrefix) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreatePrefixPrefix) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreatePrefixPrefix) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreatePrefixPrefix) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreatePrefixPrefix) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreatePrefixPrefix) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreatePrefixPrefix) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreatePrefixPrefix) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreatePrefixPrefix) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateSchema Completed

type SFtCreateSchema SCompleted

func (c FtCreateSchema) FieldName(fieldName string) FtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtCreateFieldFieldName)(c)
}

func (c SFtCreateSchema) FieldName(fieldName string) SFtCreateFieldFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtCreateFieldFieldName)(c)
}

type FtCreateScore Completed

type SFtCreateScore SCompleted

func (c FtCreateScore) ScoreField(scoreAttribute string) FtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (FtCreateScoreField)(c)
}

func (c SFtCreateScore) ScoreField(scoreAttribute string) SFtCreateScoreField {
	c.cs.s = append(c.cs.s, "SCORE_FIELD", scoreAttribute)
	return (SFtCreateScoreField)(c)
}

func (c FtCreateScore) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateScore) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateScore) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateScore) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateScore) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateScore) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateScore) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateScore) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateScore) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateScore) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateScore) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateScore) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateScore) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateScore) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateScore) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateScore) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateScore) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateScore) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateScoreField Completed

type SFtCreateScoreField SCompleted

func (c FtCreateScoreField) PayloadField(payloadAttribute string) FtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (FtCreatePayloadField)(c)
}

func (c SFtCreateScoreField) PayloadField(payloadAttribute string) SFtCreatePayloadField {
	c.cs.s = append(c.cs.s, "PAYLOAD_FIELD", payloadAttribute)
	return (SFtCreatePayloadField)(c)
}

func (c FtCreateScoreField) Maxtextfields() FtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (FtCreateMaxtextfields)(c)
}

func (c SFtCreateScoreField) Maxtextfields() SFtCreateMaxtextfields {
	c.cs.s = append(c.cs.s, "MAXTEXTFIELDS")
	return (SFtCreateMaxtextfields)(c)
}

func (c FtCreateScoreField) Temporary(seconds float64) FtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (FtCreateTemporary)(c)
}

func (c SFtCreateScoreField) Temporary(seconds float64) SFtCreateTemporary {
	c.cs.s = append(c.cs.s, "TEMPORARY", strconv.FormatFloat(seconds, 'f', -1, 64))
	return (SFtCreateTemporary)(c)
}

func (c FtCreateScoreField) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateScoreField) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateScoreField) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateScoreField) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateScoreField) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateScoreField) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateScoreField) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateScoreField) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateScoreField) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateScoreField) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateScoreField) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateScoreField) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateStopwordsStopword Completed

type SFtCreateStopwordsStopword SCompleted

func (c FtCreateStopwordsStopword) Stopword(stopword ...string) FtCreateStopwordsStopword {
	c.cs.s = append(c.cs.s, stopword...)
	return c
}

func (c SFtCreateStopwordsStopword) Stopword(stopword ...string) SFtCreateStopwordsStopword {
	c.cs.s = append(c.cs.s, stopword...)
	return c
}

func (c FtCreateStopwordsStopword) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateStopwordsStopword) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCreateStopwordsStopwords Completed

type SFtCreateStopwordsStopwords SCompleted

func (c FtCreateStopwordsStopwords) Stopword(stopword ...string) FtCreateStopwordsStopword {
	c.cs.s = append(c.cs.s, stopword...)
	return (FtCreateStopwordsStopword)(c)
}

func (c SFtCreateStopwordsStopwords) Stopword(stopword ...string) SFtCreateStopwordsStopword {
	c.cs.s = append(c.cs.s, stopword...)
	return (SFtCreateStopwordsStopword)(c)
}

type FtCreateTemporary Completed

type SFtCreateTemporary SCompleted

func (c FtCreateTemporary) Nooffsets() FtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (FtCreateNooffsets)(c)
}

func (c SFtCreateTemporary) Nooffsets() SFtCreateNooffsets {
	c.cs.s = append(c.cs.s, "NOOFFSETS")
	return (SFtCreateNooffsets)(c)
}

func (c FtCreateTemporary) Nohl() FtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (FtCreateNohl)(c)
}

func (c SFtCreateTemporary) Nohl() SFtCreateNohl {
	c.cs.s = append(c.cs.s, "NOHL")
	return (SFtCreateNohl)(c)
}

func (c FtCreateTemporary) Nofields() FtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (FtCreateNofields)(c)
}

func (c SFtCreateTemporary) Nofields() SFtCreateNofields {
	c.cs.s = append(c.cs.s, "NOFIELDS")
	return (SFtCreateNofields)(c)
}

func (c FtCreateTemporary) Nofreqs() FtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (FtCreateNofreqs)(c)
}

func (c SFtCreateTemporary) Nofreqs() SFtCreateNofreqs {
	c.cs.s = append(c.cs.s, "NOFREQS")
	return (SFtCreateNofreqs)(c)
}

func (c FtCreateTemporary) Stopwords(count int64) FtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (FtCreateStopwordsStopwords)(c)
}

func (c SFtCreateTemporary) Stopwords(count int64) SFtCreateStopwordsStopwords {
	c.cs.s = append(c.cs.s, "STOPWORDS", strconv.FormatInt(count, 10))
	return (SFtCreateStopwordsStopwords)(c)
}

func (c FtCreateTemporary) Schema() FtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (FtCreateSchema)(c)
}

func (c SFtCreateTemporary) Schema() SFtCreateSchema {
	c.cs.s = append(c.cs.s, "SCHEMA")
	return (SFtCreateSchema)(c)
}

type FtCursorDel Completed

type SFtCursorDel SCompleted

func (b *Builder) FtCursorDel() (c FtCursorDel) {
	c = FtCursorDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CURSOR", "DEL")
	return c
}

func (b *SBuilder) FtCursorDel() (c SFtCursorDel) {
	c = SFtCursorDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CURSOR", "DEL")
	return c
}

func (c FtCursorDel) Index(index string) FtCursorDelIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtCursorDelIndex)(c)
}

func (c SFtCursorDel) Index(index string) SFtCursorDelIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtCursorDelIndex)(c)
}

type FtCursorDelCursorId Completed

type SFtCursorDelCursorId SCompleted

func (c FtCursorDelCursorId) Build() Completed {
	return Completed(c)
}

func (c SFtCursorDelCursorId) Build() SCompleted {
	return SCompleted(c)
}

type FtCursorDelIndex Completed

type SFtCursorDelIndex SCompleted

func (c FtCursorDelIndex) CursorId(cursorId int64) FtCursorDelCursorId {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursorId, 10))
	return (FtCursorDelCursorId)(c)
}

func (c SFtCursorDelIndex) CursorId(cursorId int64) SFtCursorDelCursorId {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursorId, 10))
	return (SFtCursorDelCursorId)(c)
}

type FtCursorRead Completed

type SFtCursorRead SCompleted

func (b *Builder) FtCursorRead() (c FtCursorRead) {
	c = FtCursorRead{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CURSOR", "READ")
	return c
}

func (b *SBuilder) FtCursorRead() (c SFtCursorRead) {
	c = SFtCursorRead{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.CURSOR", "READ")
	return c
}

func (c FtCursorRead) Index(index string) FtCursorReadIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtCursorReadIndex)(c)
}

func (c SFtCursorRead) Index(index string) SFtCursorReadIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtCursorReadIndex)(c)
}

type FtCursorReadCount Completed

type SFtCursorReadCount SCompleted

func (c FtCursorReadCount) Build() Completed {
	return Completed(c)
}

func (c SFtCursorReadCount) Build() SCompleted {
	return SCompleted(c)
}

type FtCursorReadCursorId Completed

type SFtCursorReadCursorId SCompleted

func (c FtCursorReadCursorId) Count(readSize int64) FtCursorReadCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(readSize, 10))
	return (FtCursorReadCount)(c)
}

func (c SFtCursorReadCursorId) Count(readSize int64) SFtCursorReadCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(readSize, 10))
	return (SFtCursorReadCount)(c)
}

func (c FtCursorReadCursorId) Build() Completed {
	return Completed(c)
}

func (c SFtCursorReadCursorId) Build() SCompleted {
	return SCompleted(c)
}

type FtCursorReadIndex Completed

type SFtCursorReadIndex SCompleted

func (c FtCursorReadIndex) CursorId(cursorId int64) FtCursorReadCursorId {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursorId, 10))
	return (FtCursorReadCursorId)(c)
}

func (c SFtCursorReadIndex) CursorId(cursorId int64) SFtCursorReadCursorId {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursorId, 10))
	return (SFtCursorReadCursorId)(c)
}

type FtDictadd Completed

type SFtDictadd SCompleted

func (b *Builder) FtDictadd() (c FtDictadd) {
	c = FtDictadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DICTADD")
	return c
}

func (b *SBuilder) FtDictadd() (c SFtDictadd) {
	c = SFtDictadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DICTADD")
	return c
}

func (c FtDictadd) Dict(dict string) FtDictaddDict {
	c.cs.s = append(c.cs.s, dict)
	return (FtDictaddDict)(c)
}

func (c SFtDictadd) Dict(dict string) SFtDictaddDict {
	c.cs.s = append(c.cs.s, dict)
	return (SFtDictaddDict)(c)
}

type FtDictaddDict Completed

type SFtDictaddDict SCompleted

func (c FtDictaddDict) Term(term ...string) FtDictaddTerm {
	c.cs.s = append(c.cs.s, term...)
	return (FtDictaddTerm)(c)
}

func (c SFtDictaddDict) Term(term ...string) SFtDictaddTerm {
	c.cs.s = append(c.cs.s, term...)
	return (SFtDictaddTerm)(c)
}

type FtDictaddTerm Completed

type SFtDictaddTerm SCompleted

func (c FtDictaddTerm) Term(term ...string) FtDictaddTerm {
	c.cs.s = append(c.cs.s, term...)
	return c
}

func (c SFtDictaddTerm) Term(term ...string) SFtDictaddTerm {
	c.cs.s = append(c.cs.s, term...)
	return c
}

func (c FtDictaddTerm) Build() Completed {
	return Completed(c)
}

func (c SFtDictaddTerm) Build() SCompleted {
	return SCompleted(c)
}

type FtDictdel Completed

type SFtDictdel SCompleted

func (b *Builder) FtDictdel() (c FtDictdel) {
	c = FtDictdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DICTDEL")
	return c
}

func (b *SBuilder) FtDictdel() (c SFtDictdel) {
	c = SFtDictdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DICTDEL")
	return c
}

func (c FtDictdel) Dict(dict string) FtDictdelDict {
	c.cs.s = append(c.cs.s, dict)
	return (FtDictdelDict)(c)
}

func (c SFtDictdel) Dict(dict string) SFtDictdelDict {
	c.cs.s = append(c.cs.s, dict)
	return (SFtDictdelDict)(c)
}

type FtDictdelDict Completed

type SFtDictdelDict SCompleted

func (c FtDictdelDict) Term(term ...string) FtDictdelTerm {
	c.cs.s = append(c.cs.s, term...)
	return (FtDictdelTerm)(c)
}

func (c SFtDictdelDict) Term(term ...string) SFtDictdelTerm {
	c.cs.s = append(c.cs.s, term...)
	return (SFtDictdelTerm)(c)
}

type FtDictdelTerm Completed

type SFtDictdelTerm SCompleted

func (c FtDictdelTerm) Term(term ...string) FtDictdelTerm {
	c.cs.s = append(c.cs.s, term...)
	return c
}

func (c SFtDictdelTerm) Term(term ...string) SFtDictdelTerm {
	c.cs.s = append(c.cs.s, term...)
	return c
}

func (c FtDictdelTerm) Build() Completed {
	return Completed(c)
}

func (c SFtDictdelTerm) Build() SCompleted {
	return SCompleted(c)
}

type FtDictdump Completed

type SFtDictdump SCompleted

func (b *Builder) FtDictdump() (c FtDictdump) {
	c = FtDictdump{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DICTDUMP")
	return c
}

func (b *SBuilder) FtDictdump() (c SFtDictdump) {
	c = SFtDictdump{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DICTDUMP")
	return c
}

func (c FtDictdump) Dict(dict string) FtDictdumpDict {
	c.cs.s = append(c.cs.s, dict)
	return (FtDictdumpDict)(c)
}

func (c SFtDictdump) Dict(dict string) SFtDictdumpDict {
	c.cs.s = append(c.cs.s, dict)
	return (SFtDictdumpDict)(c)
}

type FtDictdumpDict Completed

type SFtDictdumpDict SCompleted

func (c FtDictdumpDict) Build() Completed {
	return Completed(c)
}

func (c SFtDictdumpDict) Build() SCompleted {
	return SCompleted(c)
}

type FtDropindex Completed

type SFtDropindex SCompleted

func (b *Builder) FtDropindex() (c FtDropindex) {
	c = FtDropindex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DROPINDEX")
	return c
}

func (b *SBuilder) FtDropindex() (c SFtDropindex) {
	c = SFtDropindex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.DROPINDEX")
	return c
}

func (c FtDropindex) Index(index string) FtDropindexIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtDropindexIndex)(c)
}

func (c SFtDropindex) Index(index string) SFtDropindexIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtDropindexIndex)(c)
}

type FtDropindexDeleteDocsDd Completed

type SFtDropindexDeleteDocsDd SCompleted

func (c FtDropindexDeleteDocsDd) Build() Completed {
	return Completed(c)
}

func (c SFtDropindexDeleteDocsDd) Build() SCompleted {
	return SCompleted(c)
}

type FtDropindexIndex Completed

type SFtDropindexIndex SCompleted

func (c FtDropindexIndex) Dd() FtDropindexDeleteDocsDd {
	c.cs.s = append(c.cs.s, "DD")
	return (FtDropindexDeleteDocsDd)(c)
}

func (c SFtDropindexIndex) Dd() SFtDropindexDeleteDocsDd {
	c.cs.s = append(c.cs.s, "DD")
	return (SFtDropindexDeleteDocsDd)(c)
}

func (c FtDropindexIndex) Build() Completed {
	return Completed(c)
}

func (c SFtDropindexIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtExplain Completed

type SFtExplain SCompleted

func (b *Builder) FtExplain() (c FtExplain) {
	c = FtExplain{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.EXPLAIN")
	return c
}

func (b *SBuilder) FtExplain() (c SFtExplain) {
	c = SFtExplain{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.EXPLAIN")
	return c
}

func (c FtExplain) Index(index string) FtExplainIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtExplainIndex)(c)
}

func (c SFtExplain) Index(index string) SFtExplainIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtExplainIndex)(c)
}

type FtExplainIndex Completed

type SFtExplainIndex SCompleted

func (c FtExplainIndex) Query(query string) FtExplainQuery {
	c.cs.s = append(c.cs.s, query)
	return (FtExplainQuery)(c)
}

func (c SFtExplainIndex) Query(query string) SFtExplainQuery {
	c.cs.s = append(c.cs.s, query)
	return (SFtExplainQuery)(c)
}

type FtExplainQuery Completed

type SFtExplainQuery SCompleted

func (c FtExplainQuery) Build() Completed {
	return Completed(c)
}

func (c SFtExplainQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtExplaincli Completed

type SFtExplaincli SCompleted

func (b *Builder) FtExplaincli() (c FtExplaincli) {
	c = FtExplaincli{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.EXPLAINCLI")
	return c
}

func (b *SBuilder) FtExplaincli() (c SFtExplaincli) {
	c = SFtExplaincli{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.EXPLAINCLI")
	return c
}

func (c FtExplaincli) Index(index string) FtExplaincliIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtExplaincliIndex)(c)
}

func (c SFtExplaincli) Index(index string) SFtExplaincliIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtExplaincliIndex)(c)
}

type FtExplaincliIndex Completed

type SFtExplaincliIndex SCompleted

func (c FtExplaincliIndex) Query(query string) FtExplaincliQuery {
	c.cs.s = append(c.cs.s, query)
	return (FtExplaincliQuery)(c)
}

func (c SFtExplaincliIndex) Query(query string) SFtExplaincliQuery {
	c.cs.s = append(c.cs.s, query)
	return (SFtExplaincliQuery)(c)
}

type FtExplaincliQuery Completed

type SFtExplaincliQuery SCompleted

func (c FtExplaincliQuery) Build() Completed {
	return Completed(c)
}

func (c SFtExplaincliQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtInfo Completed

type SFtInfo SCompleted

func (b *Builder) FtInfo() (c FtInfo) {
	c = FtInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.INFO")
	return c
}

func (b *SBuilder) FtInfo() (c SFtInfo) {
	c = SFtInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.INFO")
	return c
}

func (c FtInfo) Index(index string) FtInfoIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtInfoIndex)(c)
}

func (c SFtInfo) Index(index string) SFtInfoIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtInfoIndex)(c)
}

type FtInfoIndex Completed

type SFtInfoIndex SCompleted

func (c FtInfoIndex) Build() Completed {
	return Completed(c)
}

func (c SFtInfoIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtList Completed

type SFtList SCompleted

func (b *Builder) FtList() (c FtList) {
	c = FtList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT._LIST")
	return c
}

func (b *SBuilder) FtList() (c SFtList) {
	c = SFtList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT._LIST")
	return c
}

func (c FtList) Build() Completed {
	return Completed(c)
}

func (c SFtList) Build() SCompleted {
	return SCompleted(c)
}

type FtSearch Completed

type SFtSearch SCompleted

func (b *Builder) FtSearch() (c FtSearch) {
	c = FtSearch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SEARCH")
	return c
}

func (b *SBuilder) FtSearch() (c SFtSearch) {
	c = SFtSearch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SEARCH")
	return c
}

func (c FtSearch) Index(index string) FtSearchIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtSearchIndex)(c)
}

func (c SFtSearch) Index(index string) SFtSearchIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtSearchIndex)(c)
}

type FtSearchExpander Completed

type SFtSearchExpander SCompleted

func (c FtSearchExpander) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchExpander) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchExpander) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchExpander) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchExpander) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchExpander) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchExpander) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchExpander) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchExpander) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchExpander) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchExpander) Build() Completed {
	return Completed(c)
}

func (c SFtSearchExpander) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchExplainscore Completed

type SFtSearchExplainscore SCompleted

func (c FtSearchExplainscore) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchExplainscore) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchExplainscore) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchExplainscore) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchExplainscore) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchExplainscore) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchExplainscore) Build() Completed {
	return Completed(c)
}

func (c SFtSearchExplainscore) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchFilterFilter Completed

type SFtSearchFilterFilter SCompleted

func (c FtSearchFilterFilter) Min(min float64) FtSearchFilterMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (FtSearchFilterMin)(c)
}

func (c SFtSearchFilterFilter) Min(min float64) SFtSearchFilterMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (SFtSearchFilterMin)(c)
}

type FtSearchFilterMax Completed

type SFtSearchFilterMax SCompleted

func (c FtSearchFilterMax) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchFilterMax) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchFilterMax) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchFilterMax) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchFilterMax) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchFilterMax) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchFilterMax) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchFilterMax) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchFilterMax) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchFilterMax) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchFilterMax) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchFilterMax) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchFilterMax) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchFilterMax) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchFilterMax) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchFilterMax) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchFilterMax) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchFilterMax) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchFilterMax) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchFilterMax) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchFilterMax) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchFilterMax) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchFilterMax) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchFilterMax) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchFilterMax) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchFilterMax) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchFilterMax) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchFilterMax) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchFilterMax) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchFilterMax) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchFilterMax) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchFilterMax) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchFilterMax) Build() Completed {
	return Completed(c)
}

func (c SFtSearchFilterMax) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchFilterMin Completed

type SFtSearchFilterMin SCompleted

func (c FtSearchFilterMin) Max(max float64) FtSearchFilterMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (FtSearchFilterMax)(c)
}

func (c SFtSearchFilterMin) Max(max float64) SFtSearchFilterMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (SFtSearchFilterMax)(c)
}

type FtSearchGeoFilterGeofilter Completed

type SFtSearchGeoFilterGeofilter SCompleted

func (c FtSearchGeoFilterGeofilter) Lon(lon float64) FtSearchGeoFilterLon {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(lon, 'f', -1, 64))
	return (FtSearchGeoFilterLon)(c)
}

func (c SFtSearchGeoFilterGeofilter) Lon(lon float64) SFtSearchGeoFilterLon {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(lon, 'f', -1, 64))
	return (SFtSearchGeoFilterLon)(c)
}

type FtSearchGeoFilterLat Completed

type SFtSearchGeoFilterLat SCompleted

func (c FtSearchGeoFilterLat) Radius(radius float64) FtSearchGeoFilterRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (FtSearchGeoFilterRadius)(c)
}

func (c SFtSearchGeoFilterLat) Radius(radius float64) SFtSearchGeoFilterRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SFtSearchGeoFilterRadius)(c)
}

type FtSearchGeoFilterLon Completed

type SFtSearchGeoFilterLon SCompleted

func (c FtSearchGeoFilterLon) Lat(lat float64) FtSearchGeoFilterLat {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(lat, 'f', -1, 64))
	return (FtSearchGeoFilterLat)(c)
}

func (c SFtSearchGeoFilterLon) Lat(lat float64) SFtSearchGeoFilterLat {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(lat, 'f', -1, 64))
	return (SFtSearchGeoFilterLat)(c)
}

type FtSearchGeoFilterRadius Completed

type SFtSearchGeoFilterRadius SCompleted

func (c FtSearchGeoFilterRadius) M() FtSearchGeoFilterRadiusTypeM {
	c.cs.s = append(c.cs.s, "m")
	return (FtSearchGeoFilterRadiusTypeM)(c)
}

func (c SFtSearchGeoFilterRadius) M() SFtSearchGeoFilterRadiusTypeM {
	c.cs.s = append(c.cs.s, "m")
	return (SFtSearchGeoFilterRadiusTypeM)(c)
}

func (c FtSearchGeoFilterRadius) Km() FtSearchGeoFilterRadiusTypeKm {
	c.cs.s = append(c.cs.s, "km")
	return (FtSearchGeoFilterRadiusTypeKm)(c)
}

func (c SFtSearchGeoFilterRadius) Km() SFtSearchGeoFilterRadiusTypeKm {
	c.cs.s = append(c.cs.s, "km")
	return (SFtSearchGeoFilterRadiusTypeKm)(c)
}

func (c FtSearchGeoFilterRadius) Mi() FtSearchGeoFilterRadiusTypeMi {
	c.cs.s = append(c.cs.s, "mi")
	return (FtSearchGeoFilterRadiusTypeMi)(c)
}

func (c SFtSearchGeoFilterRadius) Mi() SFtSearchGeoFilterRadiusTypeMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SFtSearchGeoFilterRadiusTypeMi)(c)
}

func (c FtSearchGeoFilterRadius) Ft() FtSearchGeoFilterRadiusTypeFt {
	c.cs.s = append(c.cs.s, "ft")
	return (FtSearchGeoFilterRadiusTypeFt)(c)
}

func (c SFtSearchGeoFilterRadius) Ft() SFtSearchGeoFilterRadiusTypeFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SFtSearchGeoFilterRadiusTypeFt)(c)
}

type FtSearchGeoFilterRadiusTypeFt Completed

type SFtSearchGeoFilterRadiusTypeFt SCompleted

func (c FtSearchGeoFilterRadiusTypeFt) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeFt) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeFt) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchGeoFilterRadiusTypeKm Completed

type SFtSearchGeoFilterRadiusTypeKm SCompleted

func (c FtSearchGeoFilterRadiusTypeKm) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeKm) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeKm) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchGeoFilterRadiusTypeM Completed

type SFtSearchGeoFilterRadiusTypeM SCompleted

func (c FtSearchGeoFilterRadiusTypeM) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeM) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeM) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchGeoFilterRadiusTypeMi Completed

type SFtSearchGeoFilterRadiusTypeMi SCompleted

func (c FtSearchGeoFilterRadiusTypeMi) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchGeoFilterRadiusTypeMi) Build() Completed {
	return Completed(c)
}

func (c SFtSearchGeoFilterRadiusTypeMi) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightFieldsField Completed

type SFtSearchHighlightFieldsField SCompleted

func (c FtSearchHighlightFieldsField) Field(field ...string) FtSearchHighlightFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SFtSearchHighlightFieldsField) Field(field ...string) SFtSearchHighlightFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c FtSearchHighlightFieldsField) Tags() FtSearchHighlightTagsTags {
	c.cs.s = append(c.cs.s, "TAGS")
	return (FtSearchHighlightTagsTags)(c)
}

func (c SFtSearchHighlightFieldsField) Tags() SFtSearchHighlightTagsTags {
	c.cs.s = append(c.cs.s, "TAGS")
	return (SFtSearchHighlightTagsTags)(c)
}

func (c FtSearchHighlightFieldsField) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchHighlightFieldsField) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchHighlightFieldsField) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchHighlightFieldsField) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchHighlightFieldsField) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchHighlightFieldsField) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchHighlightFieldsField) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchHighlightFieldsField) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchHighlightFieldsField) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchHighlightFieldsField) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchHighlightFieldsField) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchHighlightFieldsField) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchHighlightFieldsField) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchHighlightFieldsField) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchHighlightFieldsField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchHighlightFieldsField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchHighlightFieldsField) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchHighlightFieldsField) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchHighlightFieldsField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchHighlightFieldsField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightFieldsFields Completed

type SFtSearchHighlightFieldsFields SCompleted

func (c FtSearchHighlightFieldsFields) Field(field ...string) FtSearchHighlightFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return (FtSearchHighlightFieldsField)(c)
}

func (c SFtSearchHighlightFieldsFields) Field(field ...string) SFtSearchHighlightFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return (SFtSearchHighlightFieldsField)(c)
}

type FtSearchHighlightHighlight Completed

type SFtSearchHighlightHighlight SCompleted

func (c FtSearchHighlightHighlight) Fields(count string) FtSearchHighlightFieldsFields {
	c.cs.s = append(c.cs.s, "FIELDS", count)
	return (FtSearchHighlightFieldsFields)(c)
}

func (c SFtSearchHighlightHighlight) Fields(count string) SFtSearchHighlightFieldsFields {
	c.cs.s = append(c.cs.s, "FIELDS", count)
	return (SFtSearchHighlightFieldsFields)(c)
}

func (c FtSearchHighlightHighlight) Tags() FtSearchHighlightTagsTags {
	c.cs.s = append(c.cs.s, "TAGS")
	return (FtSearchHighlightTagsTags)(c)
}

func (c SFtSearchHighlightHighlight) Tags() SFtSearchHighlightTagsTags {
	c.cs.s = append(c.cs.s, "TAGS")
	return (SFtSearchHighlightTagsTags)(c)
}

func (c FtSearchHighlightHighlight) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchHighlightHighlight) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchHighlightHighlight) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchHighlightHighlight) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchHighlightHighlight) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchHighlightHighlight) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchHighlightHighlight) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchHighlightHighlight) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchHighlightHighlight) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchHighlightHighlight) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchHighlightHighlight) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchHighlightHighlight) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchHighlightHighlight) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchHighlightHighlight) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchHighlightHighlight) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchHighlightHighlight) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchHighlightHighlight) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchHighlightHighlight) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchHighlightHighlight) Build() Completed {
	return Completed(c)
}

func (c SFtSearchHighlightHighlight) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightTagsOpenClose Completed

type SFtSearchHighlightTagsOpenClose SCompleted

func (c FtSearchHighlightTagsOpenClose) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchHighlightTagsOpenClose) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchHighlightTagsOpenClose) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchHighlightTagsOpenClose) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchHighlightTagsOpenClose) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchHighlightTagsOpenClose) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchHighlightTagsOpenClose) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchHighlightTagsOpenClose) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchHighlightTagsOpenClose) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchHighlightTagsOpenClose) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchHighlightTagsOpenClose) Build() Completed {
	return Completed(c)
}

func (c SFtSearchHighlightTagsOpenClose) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchHighlightTagsTags Completed

type SFtSearchHighlightTagsTags SCompleted

func (c FtSearchHighlightTagsTags) OpenClose(open string, close string) FtSearchHighlightTagsOpenClose {
	c.cs.s = append(c.cs.s, open, close)
	return (FtSearchHighlightTagsOpenClose)(c)
}

func (c SFtSearchHighlightTagsTags) OpenClose(open string, close string) SFtSearchHighlightTagsOpenClose {
	c.cs.s = append(c.cs.s, open, close)
	return (SFtSearchHighlightTagsOpenClose)(c)
}

type FtSearchInFieldsField Completed

type SFtSearchInFieldsField SCompleted

func (c FtSearchInFieldsField) Field(field ...string) FtSearchInFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SFtSearchInFieldsField) Field(field ...string) SFtSearchInFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c FtSearchInFieldsField) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchInFieldsField) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchInFieldsField) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchInFieldsField) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchInFieldsField) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchInFieldsField) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchInFieldsField) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchInFieldsField) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchInFieldsField) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchInFieldsField) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchInFieldsField) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchInFieldsField) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchInFieldsField) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchInFieldsField) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchInFieldsField) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchInFieldsField) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchInFieldsField) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchInFieldsField) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchInFieldsField) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchInFieldsField) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchInFieldsField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchInFieldsField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchInFieldsField) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchInFieldsField) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchInFieldsField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchInFieldsField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchInFieldsInfields Completed

type SFtSearchInFieldsInfields SCompleted

func (c FtSearchInFieldsInfields) Field(field ...string) FtSearchInFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return (FtSearchInFieldsField)(c)
}

func (c SFtSearchInFieldsInfields) Field(field ...string) SFtSearchInFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return (SFtSearchInFieldsField)(c)
}

type FtSearchInKeysInkeys Completed

type SFtSearchInKeysInkeys SCompleted

func (c FtSearchInKeysInkeys) Key(key ...string) FtSearchInKeysKey {
	c.cs.s = append(c.cs.s, key...)
	return (FtSearchInKeysKey)(c)
}

func (c SFtSearchInKeysInkeys) Key(key ...string) SFtSearchInKeysKey {
	c.cs.s = append(c.cs.s, key...)
	return (SFtSearchInKeysKey)(c)
}

type FtSearchInKeysKey Completed

type SFtSearchInKeysKey SCompleted

func (c FtSearchInKeysKey) Key(key ...string) FtSearchInKeysKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SFtSearchInKeysKey) Key(key ...string) SFtSearchInKeysKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c FtSearchInKeysKey) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchInKeysKey) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchInKeysKey) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchInKeysKey) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchInKeysKey) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchInKeysKey) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchInKeysKey) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchInKeysKey) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchInKeysKey) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchInKeysKey) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchInKeysKey) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchInKeysKey) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchInKeysKey) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchInKeysKey) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchInKeysKey) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchInKeysKey) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchInKeysKey) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchInKeysKey) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchInKeysKey) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchInKeysKey) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchInKeysKey) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchInKeysKey) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchInKeysKey) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchInKeysKey) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchInKeysKey) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchInKeysKey) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchInKeysKey) Build() Completed {
	return Completed(c)
}

func (c SFtSearchInKeysKey) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchIndex Completed

type SFtSearchIndex SCompleted

func (c FtSearchIndex) Query(query string) FtSearchQuery {
	c.cs.s = append(c.cs.s, query)
	return (FtSearchQuery)(c)
}

func (c SFtSearchIndex) Query(query string) SFtSearchQuery {
	c.cs.s = append(c.cs.s, query)
	return (SFtSearchQuery)(c)
}

type FtSearchLanguage Completed

type SFtSearchLanguage SCompleted

func (c FtSearchLanguage) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchLanguage) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchLanguage) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchLanguage) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchLanguage) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchLanguage) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchLanguage) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchLanguage) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchLanguage) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchLanguage) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchLanguage) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchLanguage) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchLanguage) Build() Completed {
	return Completed(c)
}

func (c SFtSearchLanguage) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchLimitLimit Completed

type SFtSearchLimitLimit SCompleted

func (c FtSearchLimitLimit) OffsetNum(offset int64, num int64) FtSearchLimitOffsetNum {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (FtSearchLimitOffsetNum)(c)
}

func (c SFtSearchLimitLimit) OffsetNum(offset int64, num int64) SFtSearchLimitOffsetNum {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10), strconv.FormatInt(num, 10))
	return (SFtSearchLimitOffsetNum)(c)
}

type FtSearchLimitOffsetNum Completed

type SFtSearchLimitOffsetNum SCompleted

func (c FtSearchLimitOffsetNum) Build() Completed {
	return Completed(c)
}

func (c SFtSearchLimitOffsetNum) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchNocontent Completed

type SFtSearchNocontent SCompleted

func (c FtSearchNocontent) Verbatim() FtSearchVerbatim {
	c.cs.s = append(c.cs.s, "VERBATIM")
	return (FtSearchVerbatim)(c)
}

func (c SFtSearchNocontent) Verbatim() SFtSearchVerbatim {
	c.cs.s = append(c.cs.s, "VERBATIM")
	return (SFtSearchVerbatim)(c)
}

func (c FtSearchNocontent) Nostopwords() FtSearchNostopwords {
	c.cs.s = append(c.cs.s, "NOSTOPWORDS")
	return (FtSearchNostopwords)(c)
}

func (c SFtSearchNocontent) Nostopwords() SFtSearchNostopwords {
	c.cs.s = append(c.cs.s, "NOSTOPWORDS")
	return (SFtSearchNostopwords)(c)
}

func (c FtSearchNocontent) Withscores() FtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchNocontent) Withscores() SFtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchNocontent) Withpayloads() FtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchNocontent) Withpayloads() SFtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchNocontent) Withsortkeys() FtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchNocontent) Withsortkeys() SFtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchNocontent) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchNocontent) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchNocontent) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchNocontent) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchNocontent) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchNocontent) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchNocontent) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchNocontent) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchNocontent) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchNocontent) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchNocontent) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchNocontent) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchNocontent) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchNocontent) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchNocontent) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchNocontent) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchNocontent) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchNocontent) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchNocontent) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchNocontent) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchNocontent) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchNocontent) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchNocontent) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchNocontent) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchNocontent) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchNocontent) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchNocontent) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchNocontent) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchNocontent) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchNocontent) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchNocontent) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchNocontent) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchNocontent) Build() Completed {
	return Completed(c)
}

func (c SFtSearchNocontent) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchNostopwords Completed

type SFtSearchNostopwords SCompleted

func (c FtSearchNostopwords) Withscores() FtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchNostopwords) Withscores() SFtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchNostopwords) Withpayloads() FtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchNostopwords) Withpayloads() SFtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchNostopwords) Withsortkeys() FtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchNostopwords) Withsortkeys() SFtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchNostopwords) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchNostopwords) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchNostopwords) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchNostopwords) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchNostopwords) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchNostopwords) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchNostopwords) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchNostopwords) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchNostopwords) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchNostopwords) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchNostopwords) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchNostopwords) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchNostopwords) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchNostopwords) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchNostopwords) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchNostopwords) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchNostopwords) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchNostopwords) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchNostopwords) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchNostopwords) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchNostopwords) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchNostopwords) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchNostopwords) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchNostopwords) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchNostopwords) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchNostopwords) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchNostopwords) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchNostopwords) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchNostopwords) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchNostopwords) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchNostopwords) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchNostopwords) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchNostopwords) Build() Completed {
	return Completed(c)
}

func (c SFtSearchNostopwords) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchPayload Completed

type SFtSearchPayload SCompleted

func (c FtSearchPayload) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchPayload) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchPayload) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchPayload) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchPayload) Build() Completed {
	return Completed(c)
}

func (c SFtSearchPayload) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchQuery Completed

type SFtSearchQuery SCompleted

func (c FtSearchQuery) Nocontent() FtSearchNocontent {
	c.cs.s = append(c.cs.s, "NOCONTENT")
	return (FtSearchNocontent)(c)
}

func (c SFtSearchQuery) Nocontent() SFtSearchNocontent {
	c.cs.s = append(c.cs.s, "NOCONTENT")
	return (SFtSearchNocontent)(c)
}

func (c FtSearchQuery) Verbatim() FtSearchVerbatim {
	c.cs.s = append(c.cs.s, "VERBATIM")
	return (FtSearchVerbatim)(c)
}

func (c SFtSearchQuery) Verbatim() SFtSearchVerbatim {
	c.cs.s = append(c.cs.s, "VERBATIM")
	return (SFtSearchVerbatim)(c)
}

func (c FtSearchQuery) Nostopwords() FtSearchNostopwords {
	c.cs.s = append(c.cs.s, "NOSTOPWORDS")
	return (FtSearchNostopwords)(c)
}

func (c SFtSearchQuery) Nostopwords() SFtSearchNostopwords {
	c.cs.s = append(c.cs.s, "NOSTOPWORDS")
	return (SFtSearchNostopwords)(c)
}

func (c FtSearchQuery) Withscores() FtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchQuery) Withscores() SFtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchQuery) Withpayloads() FtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchQuery) Withpayloads() SFtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchQuery) Withsortkeys() FtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchQuery) Withsortkeys() SFtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchQuery) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchQuery) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchQuery) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchQuery) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchQuery) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchQuery) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchQuery) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchQuery) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchQuery) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchQuery) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchQuery) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchQuery) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchQuery) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchQuery) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchQuery) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchQuery) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchQuery) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchQuery) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchQuery) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchQuery) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchQuery) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchQuery) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchQuery) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchQuery) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchQuery) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchQuery) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchQuery) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchQuery) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchQuery) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchQuery) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchQuery) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchQuery) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchQuery) Build() Completed {
	return Completed(c)
}

func (c SFtSearchQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchReturnField Completed

type SFtSearchReturnField SCompleted

func (c FtSearchReturnField) Field(field ...string) FtSearchReturnField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SFtSearchReturnField) Field(field ...string) SFtSearchReturnField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c FtSearchReturnField) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchReturnField) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchReturnField) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchReturnField) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchReturnField) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchReturnField) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchReturnField) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchReturnField) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchReturnField) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchReturnField) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchReturnField) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchReturnField) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchReturnField) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchReturnField) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchReturnField) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchReturnField) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchReturnField) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchReturnField) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchReturnField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchReturnField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchReturnField) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchReturnField) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchReturnField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchReturnField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchReturnReturn Completed

type SFtSearchReturnReturn SCompleted

func (c FtSearchReturnReturn) Field(field ...string) FtSearchReturnField {
	c.cs.s = append(c.cs.s, field...)
	return (FtSearchReturnField)(c)
}

func (c SFtSearchReturnReturn) Field(field ...string) SFtSearchReturnField {
	c.cs.s = append(c.cs.s, field...)
	return (SFtSearchReturnField)(c)
}

type FtSearchScorer Completed

type SFtSearchScorer SCompleted

func (c FtSearchScorer) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchScorer) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchScorer) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchScorer) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchScorer) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchScorer) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchScorer) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchScorer) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchScorer) Build() Completed {
	return Completed(c)
}

func (c SFtSearchScorer) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSlop Completed

type SFtSearchSlop SCompleted

func (c FtSearchSlop) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSlop) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSlop) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSlop) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSlop) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSlop) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSlop) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSlop) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSlop) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSlop) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSlop) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSlop) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSlop) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSlop) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSlop) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSlop) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSlop) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSlop) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSortbyOrderAsc Completed

type SFtSearchSortbyOrderAsc SCompleted

func (c FtSearchSortbyOrderAsc) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSortbyOrderAsc) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSortbyOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSortbyOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSortbyOrderDesc Completed

type SFtSearchSortbyOrderDesc SCompleted

func (c FtSearchSortbyOrderDesc) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSortbyOrderDesc) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSortbyOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSortbyOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSortbySortby Completed

type SFtSearchSortbySortby SCompleted

func (c FtSearchSortbySortby) Asc() FtSearchSortbyOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (FtSearchSortbyOrderAsc)(c)
}

func (c SFtSearchSortbySortby) Asc() SFtSearchSortbyOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SFtSearchSortbyOrderAsc)(c)
}

func (c FtSearchSortbySortby) Desc() FtSearchSortbyOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (FtSearchSortbyOrderDesc)(c)
}

func (c SFtSearchSortbySortby) Desc() SFtSearchSortbyOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SFtSearchSortbyOrderDesc)(c)
}

func (c FtSearchSortbySortby) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSortbySortby) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSortbySortby) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSortbySortby) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeFieldsField Completed

type SFtSearchSummarizeFieldsField SCompleted

func (c FtSearchSummarizeFieldsField) Field(field ...string) FtSearchSummarizeFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SFtSearchSummarizeFieldsField) Field(field ...string) SFtSearchSummarizeFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c FtSearchSummarizeFieldsField) Frags(num int64) FtSearchSummarizeFrags {
	c.cs.s = append(c.cs.s, "FRAGS", strconv.FormatInt(num, 10))
	return (FtSearchSummarizeFrags)(c)
}

func (c SFtSearchSummarizeFieldsField) Frags(num int64) SFtSearchSummarizeFrags {
	c.cs.s = append(c.cs.s, "FRAGS", strconv.FormatInt(num, 10))
	return (SFtSearchSummarizeFrags)(c)
}

func (c FtSearchSummarizeFieldsField) Len(fragsize int64) FtSearchSummarizeLen {
	c.cs.s = append(c.cs.s, "LEN", strconv.FormatInt(fragsize, 10))
	return (FtSearchSummarizeLen)(c)
}

func (c SFtSearchSummarizeFieldsField) Len(fragsize int64) SFtSearchSummarizeLen {
	c.cs.s = append(c.cs.s, "LEN", strconv.FormatInt(fragsize, 10))
	return (SFtSearchSummarizeLen)(c)
}

func (c FtSearchSummarizeFieldsField) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeFieldsField) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeFieldsField) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeFieldsField) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeFieldsField) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeFieldsField) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeFieldsField) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeFieldsField) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeFieldsField) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeFieldsField) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeFieldsField) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeFieldsField) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeFieldsField) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeFieldsField) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeFieldsField) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeFieldsField) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeFieldsField) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeFieldsField) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeFieldsField) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeFieldsField) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeFieldsField) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeFieldsField) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeFieldsField) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeFieldsField) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeFieldsFields Completed

type SFtSearchSummarizeFieldsFields SCompleted

func (c FtSearchSummarizeFieldsFields) Field(field ...string) FtSearchSummarizeFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return (FtSearchSummarizeFieldsField)(c)
}

func (c SFtSearchSummarizeFieldsFields) Field(field ...string) SFtSearchSummarizeFieldsField {
	c.cs.s = append(c.cs.s, field...)
	return (SFtSearchSummarizeFieldsField)(c)
}

type FtSearchSummarizeFrags Completed

type SFtSearchSummarizeFrags SCompleted

func (c FtSearchSummarizeFrags) Len(fragsize int64) FtSearchSummarizeLen {
	c.cs.s = append(c.cs.s, "LEN", strconv.FormatInt(fragsize, 10))
	return (FtSearchSummarizeLen)(c)
}

func (c SFtSearchSummarizeFrags) Len(fragsize int64) SFtSearchSummarizeLen {
	c.cs.s = append(c.cs.s, "LEN", strconv.FormatInt(fragsize, 10))
	return (SFtSearchSummarizeLen)(c)
}

func (c FtSearchSummarizeFrags) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeFrags) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeFrags) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeFrags) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeFrags) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeFrags) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeFrags) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeFrags) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeFrags) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeFrags) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeFrags) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeFrags) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeFrags) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeFrags) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeFrags) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeFrags) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeFrags) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeFrags) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeFrags) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeFrags) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeFrags) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeFrags) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeFrags) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeFrags) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeLen Completed

type SFtSearchSummarizeLen SCompleted

func (c FtSearchSummarizeLen) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeLen) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeLen) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeLen) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeLen) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeLen) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeLen) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeLen) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeLen) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeLen) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeLen) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeLen) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeLen) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeLen) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeLen) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeLen) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeLen) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeLen) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeLen) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeLen) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeLen) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeLen) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeLen) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeLen) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeSeparator Completed

type SFtSearchSummarizeSeparator SCompleted

func (c FtSearchSummarizeSeparator) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeSeparator) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeSeparator) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeSeparator) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeSeparator) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeSeparator) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeSeparator) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeSeparator) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeSeparator) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeSeparator) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeSeparator) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeSeparator) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeSeparator) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeSeparator) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeSeparator) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeSeparator) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeSeparator) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeSeparator) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeSeparator) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeSeparator) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeSeparator) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeSeparator) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchSummarizeSummarize Completed

type SFtSearchSummarizeSummarize SCompleted

func (c FtSearchSummarizeSummarize) Fields(count string) FtSearchSummarizeFieldsFields {
	c.cs.s = append(c.cs.s, "FIELDS", count)
	return (FtSearchSummarizeFieldsFields)(c)
}

func (c SFtSearchSummarizeSummarize) Fields(count string) SFtSearchSummarizeFieldsFields {
	c.cs.s = append(c.cs.s, "FIELDS", count)
	return (SFtSearchSummarizeFieldsFields)(c)
}

func (c FtSearchSummarizeSummarize) Frags(num int64) FtSearchSummarizeFrags {
	c.cs.s = append(c.cs.s, "FRAGS", strconv.FormatInt(num, 10))
	return (FtSearchSummarizeFrags)(c)
}

func (c SFtSearchSummarizeSummarize) Frags(num int64) SFtSearchSummarizeFrags {
	c.cs.s = append(c.cs.s, "FRAGS", strconv.FormatInt(num, 10))
	return (SFtSearchSummarizeFrags)(c)
}

func (c FtSearchSummarizeSummarize) Len(fragsize int64) FtSearchSummarizeLen {
	c.cs.s = append(c.cs.s, "LEN", strconv.FormatInt(fragsize, 10))
	return (FtSearchSummarizeLen)(c)
}

func (c SFtSearchSummarizeSummarize) Len(fragsize int64) SFtSearchSummarizeLen {
	c.cs.s = append(c.cs.s, "LEN", strconv.FormatInt(fragsize, 10))
	return (SFtSearchSummarizeLen)(c)
}

func (c FtSearchSummarizeSummarize) Separator(separator string) FtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (FtSearchSummarizeSeparator)(c)
}

func (c SFtSearchSummarizeSummarize) Separator(separator string) SFtSearchSummarizeSeparator {
	c.cs.s = append(c.cs.s, "SEPARATOR", separator)
	return (SFtSearchSummarizeSeparator)(c)
}

func (c FtSearchSummarizeSummarize) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchSummarizeSummarize) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchSummarizeSummarize) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchSummarizeSummarize) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchSummarizeSummarize) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchSummarizeSummarize) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchSummarizeSummarize) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchSummarizeSummarize) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchSummarizeSummarize) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchSummarizeSummarize) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchSummarizeSummarize) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchSummarizeSummarize) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchSummarizeSummarize) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchSummarizeSummarize) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchSummarizeSummarize) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchSummarizeSummarize) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchSummarizeSummarize) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchSummarizeSummarize) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchSummarizeSummarize) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchSummarizeSummarize) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchSummarizeSummarize) Build() Completed {
	return Completed(c)
}

func (c SFtSearchSummarizeSummarize) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchTagsInorder Completed

type SFtSearchTagsInorder SCompleted

func (c FtSearchTagsInorder) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchTagsInorder) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchTagsInorder) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchTagsInorder) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchTagsInorder) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchTagsInorder) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchTagsInorder) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchTagsInorder) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchTagsInorder) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchTagsInorder) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchTagsInorder) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchTagsInorder) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchTagsInorder) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchTagsInorder) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchTagsInorder) Build() Completed {
	return Completed(c)
}

func (c SFtSearchTagsInorder) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchVerbatim Completed

type SFtSearchVerbatim SCompleted

func (c FtSearchVerbatim) Nostopwords() FtSearchNostopwords {
	c.cs.s = append(c.cs.s, "NOSTOPWORDS")
	return (FtSearchNostopwords)(c)
}

func (c SFtSearchVerbatim) Nostopwords() SFtSearchNostopwords {
	c.cs.s = append(c.cs.s, "NOSTOPWORDS")
	return (SFtSearchNostopwords)(c)
}

func (c FtSearchVerbatim) Withscores() FtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (FtSearchWithscores)(c)
}

func (c SFtSearchVerbatim) Withscores() SFtSearchWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SFtSearchWithscores)(c)
}

func (c FtSearchVerbatim) Withpayloads() FtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchVerbatim) Withpayloads() SFtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchVerbatim) Withsortkeys() FtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchVerbatim) Withsortkeys() SFtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchVerbatim) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchVerbatim) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchVerbatim) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchVerbatim) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchVerbatim) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchVerbatim) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchVerbatim) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchVerbatim) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchVerbatim) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchVerbatim) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchVerbatim) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchVerbatim) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchVerbatim) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchVerbatim) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchVerbatim) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchVerbatim) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchVerbatim) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchVerbatim) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchVerbatim) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchVerbatim) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchVerbatim) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchVerbatim) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchVerbatim) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchVerbatim) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchVerbatim) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchVerbatim) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchVerbatim) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchVerbatim) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchVerbatim) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchVerbatim) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchVerbatim) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchVerbatim) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchVerbatim) Build() Completed {
	return Completed(c)
}

func (c SFtSearchVerbatim) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchWithpayloads Completed

type SFtSearchWithpayloads SCompleted

func (c FtSearchWithpayloads) Withsortkeys() FtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchWithpayloads) Withsortkeys() SFtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchWithpayloads) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchWithpayloads) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchWithpayloads) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchWithpayloads) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchWithpayloads) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchWithpayloads) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchWithpayloads) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchWithpayloads) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchWithpayloads) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchWithpayloads) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchWithpayloads) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchWithpayloads) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchWithpayloads) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchWithpayloads) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchWithpayloads) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchWithpayloads) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchWithpayloads) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchWithpayloads) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchWithpayloads) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchWithpayloads) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchWithpayloads) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchWithpayloads) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchWithpayloads) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchWithpayloads) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchWithpayloads) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchWithpayloads) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchWithpayloads) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchWithpayloads) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchWithpayloads) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchWithpayloads) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchWithpayloads) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchWithpayloads) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchWithpayloads) Build() Completed {
	return Completed(c)
}

func (c SFtSearchWithpayloads) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchWithscores Completed

type SFtSearchWithscores SCompleted

func (c FtSearchWithscores) Withpayloads() FtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSearchWithpayloads)(c)
}

func (c SFtSearchWithscores) Withpayloads() SFtSearchWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSearchWithpayloads)(c)
}

func (c FtSearchWithscores) Withsortkeys() FtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (FtSearchWithsortkeys)(c)
}

func (c SFtSearchWithscores) Withsortkeys() SFtSearchWithsortkeys {
	c.cs.s = append(c.cs.s, "WITHSORTKEYS")
	return (SFtSearchWithsortkeys)(c)
}

func (c FtSearchWithscores) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchWithscores) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchWithscores) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchWithscores) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchWithscores) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchWithscores) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchWithscores) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchWithscores) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchWithscores) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchWithscores) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchWithscores) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchWithscores) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchWithscores) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchWithscores) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchWithscores) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchWithscores) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchWithscores) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchWithscores) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchWithscores) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchWithscores) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchWithscores) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchWithscores) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchWithscores) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchWithscores) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchWithscores) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchWithscores) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchWithscores) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchWithscores) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchWithscores) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchWithscores) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchWithscores) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchWithscores) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchWithscores) Build() Completed {
	return Completed(c)
}

func (c SFtSearchWithscores) Build() SCompleted {
	return SCompleted(c)
}

type FtSearchWithsortkeys Completed

type SFtSearchWithsortkeys SCompleted

func (c FtSearchWithsortkeys) Filter(numericField string) FtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (FtSearchFilterFilter)(c)
}

func (c SFtSearchWithsortkeys) Filter(numericField string) SFtSearchFilterFilter {
	c.cs.s = append(c.cs.s, "FILTER", numericField)
	return (SFtSearchFilterFilter)(c)
}

func (c FtSearchWithsortkeys) Geofilter(geoField string) FtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (FtSearchGeoFilterGeofilter)(c)
}

func (c SFtSearchWithsortkeys) Geofilter(geoField string) SFtSearchGeoFilterGeofilter {
	c.cs.s = append(c.cs.s, "GEOFILTER", geoField)
	return (SFtSearchGeoFilterGeofilter)(c)
}

func (c FtSearchWithsortkeys) Inkeys(count string) FtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (FtSearchInKeysInkeys)(c)
}

func (c SFtSearchWithsortkeys) Inkeys(count string) SFtSearchInKeysInkeys {
	c.cs.s = append(c.cs.s, "INKEYS", count)
	return (SFtSearchInKeysInkeys)(c)
}

func (c FtSearchWithsortkeys) Infields(count string) FtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (FtSearchInFieldsInfields)(c)
}

func (c SFtSearchWithsortkeys) Infields(count string) SFtSearchInFieldsInfields {
	c.cs.s = append(c.cs.s, "INFIELDS", count)
	return (SFtSearchInFieldsInfields)(c)
}

func (c FtSearchWithsortkeys) Return(count string) FtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (FtSearchReturnReturn)(c)
}

func (c SFtSearchWithsortkeys) Return(count string) SFtSearchReturnReturn {
	c.cs.s = append(c.cs.s, "RETURN", count)
	return (SFtSearchReturnReturn)(c)
}

func (c FtSearchWithsortkeys) Summarize() FtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (FtSearchSummarizeSummarize)(c)
}

func (c SFtSearchWithsortkeys) Summarize() SFtSearchSummarizeSummarize {
	c.cs.s = append(c.cs.s, "SUMMARIZE")
	return (SFtSearchSummarizeSummarize)(c)
}

func (c FtSearchWithsortkeys) Highlight() FtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (FtSearchHighlightHighlight)(c)
}

func (c SFtSearchWithsortkeys) Highlight() SFtSearchHighlightHighlight {
	c.cs.s = append(c.cs.s, "HIGHLIGHT")
	return (SFtSearchHighlightHighlight)(c)
}

func (c FtSearchWithsortkeys) Slop(slop int64) FtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (FtSearchSlop)(c)
}

func (c SFtSearchWithsortkeys) Slop(slop int64) SFtSearchSlop {
	c.cs.s = append(c.cs.s, "SLOP", strconv.FormatInt(slop, 10))
	return (SFtSearchSlop)(c)
}

func (c FtSearchWithsortkeys) Inorder() FtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (FtSearchTagsInorder)(c)
}

func (c SFtSearchWithsortkeys) Inorder() SFtSearchTagsInorder {
	c.cs.s = append(c.cs.s, "INORDER")
	return (SFtSearchTagsInorder)(c)
}

func (c FtSearchWithsortkeys) Language(language string) FtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (FtSearchLanguage)(c)
}

func (c SFtSearchWithsortkeys) Language(language string) SFtSearchLanguage {
	c.cs.s = append(c.cs.s, "LANGUAGE", language)
	return (SFtSearchLanguage)(c)
}

func (c FtSearchWithsortkeys) Expander(expander string) FtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (FtSearchExpander)(c)
}

func (c SFtSearchWithsortkeys) Expander(expander string) SFtSearchExpander {
	c.cs.s = append(c.cs.s, "EXPANDER", expander)
	return (SFtSearchExpander)(c)
}

func (c FtSearchWithsortkeys) Scorer(scorer string) FtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (FtSearchScorer)(c)
}

func (c SFtSearchWithsortkeys) Scorer(scorer string) SFtSearchScorer {
	c.cs.s = append(c.cs.s, "SCORER", scorer)
	return (SFtSearchScorer)(c)
}

func (c FtSearchWithsortkeys) Explainscore() FtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (FtSearchExplainscore)(c)
}

func (c SFtSearchWithsortkeys) Explainscore() SFtSearchExplainscore {
	c.cs.s = append(c.cs.s, "EXPLAINSCORE")
	return (SFtSearchExplainscore)(c)
}

func (c FtSearchWithsortkeys) Payload(payload string) FtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSearchPayload)(c)
}

func (c SFtSearchWithsortkeys) Payload(payload string) SFtSearchPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSearchPayload)(c)
}

func (c FtSearchWithsortkeys) Sortby(sortby string) FtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (FtSearchSortbySortby)(c)
}

func (c SFtSearchWithsortkeys) Sortby(sortby string) SFtSearchSortbySortby {
	c.cs.s = append(c.cs.s, "SORTBY", sortby)
	return (SFtSearchSortbySortby)(c)
}

func (c FtSearchWithsortkeys) Limit() FtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (FtSearchLimitLimit)(c)
}

func (c SFtSearchWithsortkeys) Limit() SFtSearchLimitLimit {
	c.cs.s = append(c.cs.s, "LIMIT")
	return (SFtSearchLimitLimit)(c)
}

func (c FtSearchWithsortkeys) Build() Completed {
	return Completed(c)
}

func (c SFtSearchWithsortkeys) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheck Completed

type SFtSpellcheck SCompleted

func (b *Builder) FtSpellcheck() (c FtSpellcheck) {
	c = FtSpellcheck{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SPELLCHECK")
	return c
}

func (b *SBuilder) FtSpellcheck() (c SFtSpellcheck) {
	c = SFtSpellcheck{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SPELLCHECK")
	return c
}

func (c FtSpellcheck) Index(index string) FtSpellcheckIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtSpellcheckIndex)(c)
}

func (c SFtSpellcheck) Index(index string) SFtSpellcheckIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtSpellcheckIndex)(c)
}

type FtSpellcheckDistance Completed

type SFtSpellcheckDistance SCompleted

func (c FtSpellcheckDistance) TermsInclude() FtSpellcheckTermsTermsInclude {
	c.cs.s = append(c.cs.s, "TERMS", "INCLUDE")
	return (FtSpellcheckTermsTermsInclude)(c)
}

func (c SFtSpellcheckDistance) TermsInclude() SFtSpellcheckTermsTermsInclude {
	c.cs.s = append(c.cs.s, "TERMS", "INCLUDE")
	return (SFtSpellcheckTermsTermsInclude)(c)
}

func (c FtSpellcheckDistance) TermsExclude() FtSpellcheckTermsTermsExclude {
	c.cs.s = append(c.cs.s, "TERMS", "EXCLUDE")
	return (FtSpellcheckTermsTermsExclude)(c)
}

func (c SFtSpellcheckDistance) TermsExclude() SFtSpellcheckTermsTermsExclude {
	c.cs.s = append(c.cs.s, "TERMS", "EXCLUDE")
	return (SFtSpellcheckTermsTermsExclude)(c)
}

func (c FtSpellcheckDistance) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckDistance) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckIndex Completed

type SFtSpellcheckIndex SCompleted

func (c FtSpellcheckIndex) Query(query string) FtSpellcheckQuery {
	c.cs.s = append(c.cs.s, query)
	return (FtSpellcheckQuery)(c)
}

func (c SFtSpellcheckIndex) Query(query string) SFtSpellcheckQuery {
	c.cs.s = append(c.cs.s, query)
	return (SFtSpellcheckQuery)(c)
}

type FtSpellcheckQuery Completed

type SFtSpellcheckQuery SCompleted

func (c FtSpellcheckQuery) Distance(distance int64) FtSpellcheckDistance {
	c.cs.s = append(c.cs.s, "DISTANCE", strconv.FormatInt(distance, 10))
	return (FtSpellcheckDistance)(c)
}

func (c SFtSpellcheckQuery) Distance(distance int64) SFtSpellcheckDistance {
	c.cs.s = append(c.cs.s, "DISTANCE", strconv.FormatInt(distance, 10))
	return (SFtSpellcheckDistance)(c)
}

func (c FtSpellcheckQuery) TermsInclude() FtSpellcheckTermsTermsInclude {
	c.cs.s = append(c.cs.s, "TERMS", "INCLUDE")
	return (FtSpellcheckTermsTermsInclude)(c)
}

func (c SFtSpellcheckQuery) TermsInclude() SFtSpellcheckTermsTermsInclude {
	c.cs.s = append(c.cs.s, "TERMS", "INCLUDE")
	return (SFtSpellcheckTermsTermsInclude)(c)
}

func (c FtSpellcheckQuery) TermsExclude() FtSpellcheckTermsTermsExclude {
	c.cs.s = append(c.cs.s, "TERMS", "EXCLUDE")
	return (FtSpellcheckTermsTermsExclude)(c)
}

func (c SFtSpellcheckQuery) TermsExclude() SFtSpellcheckTermsTermsExclude {
	c.cs.s = append(c.cs.s, "TERMS", "EXCLUDE")
	return (SFtSpellcheckTermsTermsExclude)(c)
}

func (c FtSpellcheckQuery) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckQuery) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckTermsDictionary Completed

type SFtSpellcheckTermsDictionary SCompleted

func (c FtSpellcheckTermsDictionary) Terms(terms ...string) FtSpellcheckTermsTerms {
	c.cs.s = append(c.cs.s, terms...)
	return (FtSpellcheckTermsTerms)(c)
}

func (c SFtSpellcheckTermsDictionary) Terms(terms ...string) SFtSpellcheckTermsTerms {
	c.cs.s = append(c.cs.s, terms...)
	return (SFtSpellcheckTermsTerms)(c)
}

func (c FtSpellcheckTermsDictionary) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckTermsDictionary) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckTermsTerms Completed

type SFtSpellcheckTermsTerms SCompleted

func (c FtSpellcheckTermsTerms) Terms(terms ...string) FtSpellcheckTermsTerms {
	c.cs.s = append(c.cs.s, terms...)
	return c
}

func (c SFtSpellcheckTermsTerms) Terms(terms ...string) SFtSpellcheckTermsTerms {
	c.cs.s = append(c.cs.s, terms...)
	return c
}

func (c FtSpellcheckTermsTerms) Build() Completed {
	return Completed(c)
}

func (c SFtSpellcheckTermsTerms) Build() SCompleted {
	return SCompleted(c)
}

type FtSpellcheckTermsTermsExclude Completed

type SFtSpellcheckTermsTermsExclude SCompleted

func (c FtSpellcheckTermsTermsExclude) Dictionary(dictionary string) FtSpellcheckTermsDictionary {
	c.cs.s = append(c.cs.s, dictionary)
	return (FtSpellcheckTermsDictionary)(c)
}

func (c SFtSpellcheckTermsTermsExclude) Dictionary(dictionary string) SFtSpellcheckTermsDictionary {
	c.cs.s = append(c.cs.s, dictionary)
	return (SFtSpellcheckTermsDictionary)(c)
}

type FtSpellcheckTermsTermsInclude Completed

type SFtSpellcheckTermsTermsInclude SCompleted

func (c FtSpellcheckTermsTermsInclude) Dictionary(dictionary string) FtSpellcheckTermsDictionary {
	c.cs.s = append(c.cs.s, dictionary)
	return (FtSpellcheckTermsDictionary)(c)
}

func (c SFtSpellcheckTermsTermsInclude) Dictionary(dictionary string) SFtSpellcheckTermsDictionary {
	c.cs.s = append(c.cs.s, dictionary)
	return (SFtSpellcheckTermsDictionary)(c)
}

type FtSugadd Completed

type SFtSugadd SCompleted

func (b *Builder) FtSugadd() (c FtSugadd) {
	c = FtSugadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGADD")
	return c
}

func (b *SBuilder) FtSugadd() (c SFtSugadd) {
	c = SFtSugadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGADD")
	return c
}

func (c FtSugadd) Key(key string) FtSugaddKey {
	c.cs.s = append(c.cs.s, key)
	return (FtSugaddKey)(c)
}

func (c SFtSugadd) Key(key string) SFtSugaddKey {
	c.cs.s = append(c.cs.s, key)
	return (SFtSugaddKey)(c)
}

type FtSugaddIncrementScoreIncr Completed

type SFtSugaddIncrementScoreIncr SCompleted

func (c FtSugaddIncrementScoreIncr) Payload(payload string) FtSugaddPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSugaddPayload)(c)
}

func (c SFtSugaddIncrementScoreIncr) Payload(payload string) SFtSugaddPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSugaddPayload)(c)
}

func (c FtSugaddIncrementScoreIncr) Build() Completed {
	return Completed(c)
}

func (c SFtSugaddIncrementScoreIncr) Build() SCompleted {
	return SCompleted(c)
}

type FtSugaddKey Completed

type SFtSugaddKey SCompleted

func (c FtSugaddKey) String(string string) FtSugaddString {
	c.cs.s = append(c.cs.s, string)
	return (FtSugaddString)(c)
}

func (c SFtSugaddKey) String(string string) SFtSugaddString {
	c.cs.s = append(c.cs.s, string)
	return (SFtSugaddString)(c)
}

type FtSugaddPayload Completed

type SFtSugaddPayload SCompleted

func (c FtSugaddPayload) Build() Completed {
	return Completed(c)
}

func (c SFtSugaddPayload) Build() SCompleted {
	return SCompleted(c)
}

type FtSugaddScore Completed

type SFtSugaddScore SCompleted

func (c FtSugaddScore) Incr() FtSugaddIncrementScoreIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (FtSugaddIncrementScoreIncr)(c)
}

func (c SFtSugaddScore) Incr() SFtSugaddIncrementScoreIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SFtSugaddIncrementScoreIncr)(c)
}

func (c FtSugaddScore) Payload(payload string) FtSugaddPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (FtSugaddPayload)(c)
}

func (c SFtSugaddScore) Payload(payload string) SFtSugaddPayload {
	c.cs.s = append(c.cs.s, "PAYLOAD", payload)
	return (SFtSugaddPayload)(c)
}

func (c FtSugaddScore) Build() Completed {
	return Completed(c)
}

func (c SFtSugaddScore) Build() SCompleted {
	return SCompleted(c)
}

type FtSugaddString Completed

type SFtSugaddString SCompleted

func (c FtSugaddString) Score(score float64) FtSugaddScore {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(score, 'f', -1, 64))
	return (FtSugaddScore)(c)
}

func (c SFtSugaddString) Score(score float64) SFtSugaddScore {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(score, 'f', -1, 64))
	return (SFtSugaddScore)(c)
}

type FtSugdel Completed

type SFtSugdel SCompleted

func (b *Builder) FtSugdel() (c FtSugdel) {
	c = FtSugdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGDEL")
	return c
}

func (b *SBuilder) FtSugdel() (c SFtSugdel) {
	c = SFtSugdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGDEL")
	return c
}

func (c FtSugdel) Key(key string) FtSugdelKey {
	c.cs.s = append(c.cs.s, key)
	return (FtSugdelKey)(c)
}

func (c SFtSugdel) Key(key string) SFtSugdelKey {
	c.cs.s = append(c.cs.s, key)
	return (SFtSugdelKey)(c)
}

type FtSugdelKey Completed

type SFtSugdelKey SCompleted

func (c FtSugdelKey) String(string string) FtSugdelString {
	c.cs.s = append(c.cs.s, string)
	return (FtSugdelString)(c)
}

func (c SFtSugdelKey) String(string string) SFtSugdelString {
	c.cs.s = append(c.cs.s, string)
	return (SFtSugdelString)(c)
}

type FtSugdelString Completed

type SFtSugdelString SCompleted

func (c FtSugdelString) Build() Completed {
	return Completed(c)
}

func (c SFtSugdelString) Build() SCompleted {
	return SCompleted(c)
}

type FtSugget Completed

type SFtSugget SCompleted

func (b *Builder) FtSugget() (c FtSugget) {
	c = FtSugget{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGGET")
	return c
}

func (b *SBuilder) FtSugget() (c SFtSugget) {
	c = SFtSugget{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGGET")
	return c
}

func (c FtSugget) Key(key string) FtSuggetKey {
	c.cs.s = append(c.cs.s, key)
	return (FtSuggetKey)(c)
}

func (c SFtSugget) Key(key string) SFtSuggetKey {
	c.cs.s = append(c.cs.s, key)
	return (SFtSuggetKey)(c)
}

type FtSuggetFuzzy Completed

type SFtSuggetFuzzy SCompleted

func (c FtSuggetFuzzy) Withscores() FtSuggetWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (FtSuggetWithscores)(c)
}

func (c SFtSuggetFuzzy) Withscores() SFtSuggetWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SFtSuggetWithscores)(c)
}

func (c FtSuggetFuzzy) Withpayloads() FtSuggetWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSuggetWithpayloads)(c)
}

func (c SFtSuggetFuzzy) Withpayloads() SFtSuggetWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSuggetWithpayloads)(c)
}

func (c FtSuggetFuzzy) Max(max int64) FtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetFuzzy) Max(max int64) SFtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetFuzzy) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetFuzzy) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetKey Completed

type SFtSuggetKey SCompleted

func (c FtSuggetKey) Prefix(prefix string) FtSuggetPrefix {
	c.cs.s = append(c.cs.s, prefix)
	return (FtSuggetPrefix)(c)
}

func (c SFtSuggetKey) Prefix(prefix string) SFtSuggetPrefix {
	c.cs.s = append(c.cs.s, prefix)
	return (SFtSuggetPrefix)(c)
}

type FtSuggetMax Completed

type SFtSuggetMax SCompleted

func (c FtSuggetMax) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetMax) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetPrefix Completed

type SFtSuggetPrefix SCompleted

func (c FtSuggetPrefix) Fuzzy() FtSuggetFuzzy {
	c.cs.s = append(c.cs.s, "FUZZY")
	return (FtSuggetFuzzy)(c)
}

func (c SFtSuggetPrefix) Fuzzy() SFtSuggetFuzzy {
	c.cs.s = append(c.cs.s, "FUZZY")
	return (SFtSuggetFuzzy)(c)
}

func (c FtSuggetPrefix) Withscores() FtSuggetWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (FtSuggetWithscores)(c)
}

func (c SFtSuggetPrefix) Withscores() SFtSuggetWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SFtSuggetWithscores)(c)
}

func (c FtSuggetPrefix) Withpayloads() FtSuggetWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSuggetWithpayloads)(c)
}

func (c SFtSuggetPrefix) Withpayloads() SFtSuggetWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSuggetWithpayloads)(c)
}

func (c FtSuggetPrefix) Max(max int64) FtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetPrefix) Max(max int64) SFtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetPrefix) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetPrefix) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetWithpayloads Completed

type SFtSuggetWithpayloads SCompleted

func (c FtSuggetWithpayloads) Max(max int64) FtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetWithpayloads) Max(max int64) SFtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetWithpayloads) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetWithpayloads) Build() SCompleted {
	return SCompleted(c)
}

type FtSuggetWithscores Completed

type SFtSuggetWithscores SCompleted

func (c FtSuggetWithscores) Withpayloads() FtSuggetWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (FtSuggetWithpayloads)(c)
}

func (c SFtSuggetWithscores) Withpayloads() SFtSuggetWithpayloads {
	c.cs.s = append(c.cs.s, "WITHPAYLOADS")
	return (SFtSuggetWithpayloads)(c)
}

func (c FtSuggetWithscores) Max(max int64) FtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (FtSuggetMax)(c)
}

func (c SFtSuggetWithscores) Max(max int64) SFtSuggetMax {
	c.cs.s = append(c.cs.s, "MAX", strconv.FormatInt(max, 10))
	return (SFtSuggetMax)(c)
}

func (c FtSuggetWithscores) Build() Completed {
	return Completed(c)
}

func (c SFtSuggetWithscores) Build() SCompleted {
	return SCompleted(c)
}

type FtSuglen Completed

type SFtSuglen SCompleted

func (b *Builder) FtSuglen() (c FtSuglen) {
	c = FtSuglen{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGLEN")
	return c
}

func (b *SBuilder) FtSuglen() (c SFtSuglen) {
	c = SFtSuglen{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SUGLEN")
	return c
}

func (c FtSuglen) Key(key string) FtSuglenKey {
	c.cs.s = append(c.cs.s, key)
	return (FtSuglenKey)(c)
}

func (c SFtSuglen) Key(key string) SFtSuglenKey {
	c.cs.s = append(c.cs.s, key)
	return (SFtSuglenKey)(c)
}

type FtSuglenKey Completed

type SFtSuglenKey SCompleted

func (c FtSuglenKey) Build() Completed {
	return Completed(c)
}

func (c SFtSuglenKey) Build() SCompleted {
	return SCompleted(c)
}

type FtSyndump Completed

type SFtSyndump SCompleted

func (b *Builder) FtSyndump() (c FtSyndump) {
	c = FtSyndump{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SYNDUMP")
	return c
}

func (b *SBuilder) FtSyndump() (c SFtSyndump) {
	c = SFtSyndump{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SYNDUMP")
	return c
}

func (c FtSyndump) Index(index string) FtSyndumpIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtSyndumpIndex)(c)
}

func (c SFtSyndump) Index(index string) SFtSyndumpIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtSyndumpIndex)(c)
}

type FtSyndumpIndex Completed

type SFtSyndumpIndex SCompleted

func (c FtSyndumpIndex) Build() Completed {
	return Completed(c)
}

func (c SFtSyndumpIndex) Build() SCompleted {
	return SCompleted(c)
}

type FtSynupdate Completed

type SFtSynupdate SCompleted

func (b *Builder) FtSynupdate() (c FtSynupdate) {
	c = FtSynupdate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SYNUPDATE")
	return c
}

func (b *SBuilder) FtSynupdate() (c SFtSynupdate) {
	c = SFtSynupdate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.SYNUPDATE")
	return c
}

func (c FtSynupdate) Index(index string) FtSynupdateIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtSynupdateIndex)(c)
}

func (c SFtSynupdate) Index(index string) SFtSynupdateIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtSynupdateIndex)(c)
}

type FtSynupdateIndex Completed

type SFtSynupdateIndex SCompleted

func (c FtSynupdateIndex) SynonymGroupId(synonymGroupId string) FtSynupdateSynonymGroupId {
	c.cs.s = append(c.cs.s, synonymGroupId)
	return (FtSynupdateSynonymGroupId)(c)
}

func (c SFtSynupdateIndex) SynonymGroupId(synonymGroupId string) SFtSynupdateSynonymGroupId {
	c.cs.s = append(c.cs.s, synonymGroupId)
	return (SFtSynupdateSynonymGroupId)(c)
}

type FtSynupdateSkipinitialscan Completed

type SFtSynupdateSkipinitialscan SCompleted

func (c FtSynupdateSkipinitialscan) Term(term ...string) FtSynupdateTerm {
	c.cs.s = append(c.cs.s, term...)
	return (FtSynupdateTerm)(c)
}

func (c SFtSynupdateSkipinitialscan) Term(term ...string) SFtSynupdateTerm {
	c.cs.s = append(c.cs.s, term...)
	return (SFtSynupdateTerm)(c)
}

type FtSynupdateSynonymGroupId Completed

type SFtSynupdateSynonymGroupId SCompleted

func (c FtSynupdateSynonymGroupId) Skipinitialscan() FtSynupdateSkipinitialscan {
	c.cs.s = append(c.cs.s, "SKIPINITIALSCAN")
	return (FtSynupdateSkipinitialscan)(c)
}

func (c SFtSynupdateSynonymGroupId) Skipinitialscan() SFtSynupdateSkipinitialscan {
	c.cs.s = append(c.cs.s, "SKIPINITIALSCAN")
	return (SFtSynupdateSkipinitialscan)(c)
}

func (c FtSynupdateSynonymGroupId) Term(term ...string) FtSynupdateTerm {
	c.cs.s = append(c.cs.s, term...)
	return (FtSynupdateTerm)(c)
}

func (c SFtSynupdateSynonymGroupId) Term(term ...string) SFtSynupdateTerm {
	c.cs.s = append(c.cs.s, term...)
	return (SFtSynupdateTerm)(c)
}

type FtSynupdateTerm Completed

type SFtSynupdateTerm SCompleted

func (c FtSynupdateTerm) Term(term ...string) FtSynupdateTerm {
	c.cs.s = append(c.cs.s, term...)
	return c
}

func (c SFtSynupdateTerm) Term(term ...string) SFtSynupdateTerm {
	c.cs.s = append(c.cs.s, term...)
	return c
}

func (c FtSynupdateTerm) Build() Completed {
	return Completed(c)
}

func (c SFtSynupdateTerm) Build() SCompleted {
	return SCompleted(c)
}

type FtTagvals Completed

type SFtTagvals SCompleted

func (b *Builder) FtTagvals() (c FtTagvals) {
	c = FtTagvals{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.TAGVALS")
	return c
}

func (b *SBuilder) FtTagvals() (c SFtTagvals) {
	c = SFtTagvals{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "FT.TAGVALS")
	return c
}

func (c FtTagvals) Index(index string) FtTagvalsIndex {
	c.cs.s = append(c.cs.s, index)
	return (FtTagvalsIndex)(c)
}

func (c SFtTagvals) Index(index string) SFtTagvalsIndex {
	c.cs.s = append(c.cs.s, index)
	return (SFtTagvalsIndex)(c)
}

type FtTagvalsFieldName Completed

type SFtTagvalsFieldName SCompleted

func (c FtTagvalsFieldName) Build() Completed {
	return Completed(c)
}

func (c SFtTagvalsFieldName) Build() SCompleted {
	return SCompleted(c)
}

type FtTagvalsIndex Completed

type SFtTagvalsIndex SCompleted

func (c FtTagvalsIndex) FieldName(fieldName string) FtTagvalsFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (FtTagvalsFieldName)(c)
}

func (c SFtTagvalsIndex) FieldName(fieldName string) SFtTagvalsFieldName {
	c.cs.s = append(c.cs.s, fieldName)
	return (SFtTagvalsFieldName)(c)
}

type Geoadd Completed

type SGeoadd SCompleted

func (b *Builder) Geoadd() (c Geoadd) {
	c = Geoadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEOADD")
	return c
}

func (b *SBuilder) Geoadd() (c SGeoadd) {
	c = SGeoadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEOADD")
	return c
}

func (c Geoadd) Key(key string) GeoaddKey {
	c.cs.s = append(c.cs.s, key)
	return (GeoaddKey)(c)
}

func (c SGeoadd) Key(key string) SGeoaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeoaddKey)(c)
}

type GeoaddChangeCh Completed

type SGeoaddChangeCh SCompleted

func (c GeoaddChangeCh) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddChangeCh) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddConditionNx Completed

type SGeoaddConditionNx SCompleted

func (c GeoaddConditionNx) Ch() GeoaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (GeoaddChangeCh)(c)
}

func (c SGeoaddConditionNx) Ch() SGeoaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SGeoaddChangeCh)(c)
}

func (c GeoaddConditionNx) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddConditionNx) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddConditionXx Completed

type SGeoaddConditionXx SCompleted

func (c GeoaddConditionXx) Ch() GeoaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (GeoaddChangeCh)(c)
}

func (c SGeoaddConditionXx) Ch() SGeoaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SGeoaddChangeCh)(c)
}

func (c GeoaddConditionXx) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddConditionXx) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddKey Completed

type SGeoaddKey SCompleted

func (c GeoaddKey) Nx() GeoaddConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (GeoaddConditionNx)(c)
}

func (c SGeoaddKey) Nx() SGeoaddConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SGeoaddConditionNx)(c)
}

func (c GeoaddKey) Xx() GeoaddConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (GeoaddConditionXx)(c)
}

func (c SGeoaddKey) Xx() SGeoaddConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SGeoaddConditionXx)(c)
}

func (c GeoaddKey) Ch() GeoaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (GeoaddChangeCh)(c)
}

func (c SGeoaddKey) Ch() SGeoaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SGeoaddChangeCh)(c)
}

func (c GeoaddKey) LongitudeLatitudeMember() GeoaddLongitudeLatitudeMember {
	return (GeoaddLongitudeLatitudeMember)(c)
}

func (c SGeoaddKey) LongitudeLatitudeMember() SGeoaddLongitudeLatitudeMember {
	return (SGeoaddLongitudeLatitudeMember)(c)
}

type GeoaddLongitudeLatitudeMember Completed

type SGeoaddLongitudeLatitudeMember SCompleted

func (c GeoaddLongitudeLatitudeMember) LongitudeLatitudeMember(longitude float64, latitude float64, member string) GeoaddLongitudeLatitudeMember {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64), member)
	return c
}

func (c SGeoaddLongitudeLatitudeMember) LongitudeLatitudeMember(longitude float64, latitude float64, member string) SGeoaddLongitudeLatitudeMember {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64), member)
	return c
}

func (c GeoaddLongitudeLatitudeMember) Build() Completed {
	return Completed(c)
}

func (c SGeoaddLongitudeLatitudeMember) Build() SCompleted {
	return SCompleted(c)
}

type Geodist Completed

type SGeodist SCompleted

func (b *Builder) Geodist() (c Geodist) {
	c = Geodist{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEODIST")
	return c
}

func (b *SBuilder) Geodist() (c SGeodist) {
	c = SGeodist{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEODIST")
	return c
}

func (c Geodist) Key(key string) GeodistKey {
	c.cs.s = append(c.cs.s, key)
	return (GeodistKey)(c)
}

func (c SGeodist) Key(key string) SGeodistKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeodistKey)(c)
}

type GeodistKey Completed

type SGeodistKey SCompleted

func (c GeodistKey) Member1(member1 string) GeodistMember1 {
	c.cs.s = append(c.cs.s, member1)
	return (GeodistMember1)(c)
}

func (c SGeodistKey) Member1(member1 string) SGeodistMember1 {
	c.cs.s = append(c.cs.s, member1)
	return (SGeodistMember1)(c)
}

type GeodistMember1 Completed

type SGeodistMember1 SCompleted

func (c GeodistMember1) Member2(member2 string) GeodistMember2 {
	c.cs.s = append(c.cs.s, member2)
	return (GeodistMember2)(c)
}

func (c SGeodistMember1) Member2(member2 string) SGeodistMember2 {
	c.cs.s = append(c.cs.s, member2)
	return (SGeodistMember2)(c)
}

type GeodistMember2 Completed

type SGeodistMember2 SCompleted

func (c GeodistMember2) M() GeodistUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeodistUnitM)(c)
}

func (c SGeodistMember2) M() SGeodistUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeodistUnitM)(c)
}

func (c GeodistMember2) Km() GeodistUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeodistUnitKm)(c)
}

func (c SGeodistMember2) Km() SGeodistUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeodistUnitKm)(c)
}

func (c GeodistMember2) Ft() GeodistUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeodistUnitFt)(c)
}

func (c SGeodistMember2) Ft() SGeodistUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeodistUnitFt)(c)
}

func (c GeodistMember2) Mi() GeodistUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeodistUnitMi)(c)
}

func (c SGeodistMember2) Mi() SGeodistUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeodistUnitMi)(c)
}

func (c GeodistMember2) Build() Completed {
	return Completed(c)
}

func (c SGeodistMember2) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistMember2) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistMember2) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitFt Completed

type SGeodistUnitFt SCompleted

func (c GeodistUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitKm Completed

type SGeodistUnitKm SCompleted

func (c GeodistUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitM Completed

type SGeodistUnitM SCompleted

func (c GeodistUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeodistUnitMi Completed

type SGeodistUnitMi SCompleted

func (c GeodistUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeodistUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeodistUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeodistUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type Geohash Completed

type SGeohash SCompleted

func (b *Builder) Geohash() (c Geohash) {
	c = Geohash{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEOHASH")
	return c
}

func (b *SBuilder) Geohash() (c SGeohash) {
	c = SGeohash{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEOHASH")
	return c
}

func (c Geohash) Key(key string) GeohashKey {
	c.cs.s = append(c.cs.s, key)
	return (GeohashKey)(c)
}

func (c SGeohash) Key(key string) SGeohashKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeohashKey)(c)
}

type GeohashKey Completed

type SGeohashKey SCompleted

func (c GeohashKey) Member(member ...string) GeohashMember {
	c.cs.s = append(c.cs.s, member...)
	return (GeohashMember)(c)
}

func (c SGeohashKey) Member(member ...string) SGeohashMember {
	c.cs.s = append(c.cs.s, member...)
	return (SGeohashMember)(c)
}

type GeohashMember Completed

type SGeohashMember SCompleted

func (c GeohashMember) Member(member ...string) GeohashMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SGeohashMember) Member(member ...string) SGeohashMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c GeohashMember) Build() Completed {
	return Completed(c)
}

func (c SGeohashMember) Build() SCompleted {
	return SCompleted(c)
}

func (c GeohashMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeohashMember) Cache() SCacheable {
	return SCacheable(c)
}

type Geopos Completed

type SGeopos SCompleted

func (b *Builder) Geopos() (c Geopos) {
	c = Geopos{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEOPOS")
	return c
}

func (b *SBuilder) Geopos() (c SGeopos) {
	c = SGeopos{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEOPOS")
	return c
}

func (c Geopos) Key(key string) GeoposKey {
	c.cs.s = append(c.cs.s, key)
	return (GeoposKey)(c)
}

func (c SGeopos) Key(key string) SGeoposKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeoposKey)(c)
}

type GeoposKey Completed

type SGeoposKey SCompleted

func (c GeoposKey) Member(member ...string) GeoposMember {
	c.cs.s = append(c.cs.s, member...)
	return (GeoposMember)(c)
}

func (c SGeoposKey) Member(member ...string) SGeoposMember {
	c.cs.s = append(c.cs.s, member...)
	return (SGeoposMember)(c)
}

type GeoposMember Completed

type SGeoposMember SCompleted

func (c GeoposMember) Member(member ...string) GeoposMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SGeoposMember) Member(member ...string) SGeoposMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c GeoposMember) Build() Completed {
	return Completed(c)
}

func (c SGeoposMember) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoposMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoposMember) Cache() SCacheable {
	return SCacheable(c)
}

type Georadius Completed

type SGeoradius SCompleted

func (b *Builder) Georadius() (c Georadius) {
	c = Georadius{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEORADIUS")
	return c
}

func (b *SBuilder) Georadius() (c SGeoradius) {
	c = SGeoradius{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEORADIUS")
	return c
}

func (c Georadius) Key(key string) GeoradiusKey {
	c.cs.s = append(c.cs.s, key)
	return (GeoradiusKey)(c)
}

func (c SGeoradius) Key(key string) SGeoradiusKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeoradiusKey)(c)
}

type GeoradiusCountAny Completed

type SGeoradiusCountAny SCompleted

func (c GeoradiusCountAny) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusCountAny) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusCountAny) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusCountAny) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusCountAny) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusCountAny) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusCountAny) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusCountAny) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusCountAny) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusCountCount Completed

type SGeoradiusCountCount SCompleted

func (c GeoradiusCountCount) Any() GeoradiusCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (GeoradiusCountAny)(c)
}

func (c SGeoradiusCountCount) Any() SGeoradiusCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (SGeoradiusCountAny)(c)
}

func (c GeoradiusCountCount) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusCountCount) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusCountCount) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusCountCount) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusCountCount) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusCountCount) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusCountCount) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusCountCount) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusCountCount) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusKey Completed

type SGeoradiusKey SCompleted

func (c GeoradiusKey) Longitude(longitude float64) GeoradiusLongitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (GeoradiusLongitude)(c)
}

func (c SGeoradiusKey) Longitude(longitude float64) SGeoradiusLongitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (SGeoradiusLongitude)(c)
}

type GeoradiusLatitude Completed

type SGeoradiusLatitude SCompleted

func (c GeoradiusLatitude) Radius(radius float64) GeoradiusRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusRadius)(c)
}

func (c SGeoradiusLatitude) Radius(radius float64) SGeoradiusRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusRadius)(c)
}

type GeoradiusLongitude Completed

type SGeoradiusLongitude SCompleted

func (c GeoradiusLongitude) Latitude(latitude float64) GeoradiusLatitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeoradiusLatitude)(c)
}

func (c SGeoradiusLongitude) Latitude(latitude float64) SGeoradiusLatitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeoradiusLatitude)(c)
}

type GeoradiusOrderAsc Completed

type SGeoradiusOrderAsc SCompleted

func (c GeoradiusOrderAsc) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusOrderAsc) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusOrderAsc) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusOrderAsc) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusOrderDesc Completed

type SGeoradiusOrderDesc SCompleted

func (c GeoradiusOrderDesc) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusOrderDesc) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusOrderDesc) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusOrderDesc) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusRadius Completed

type SGeoradiusRadius SCompleted

func (c GeoradiusRadius) M() GeoradiusUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeoradiusUnitM)(c)
}

func (c SGeoradiusRadius) M() SGeoradiusUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeoradiusUnitM)(c)
}

func (c GeoradiusRadius) Km() GeoradiusUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeoradiusUnitKm)(c)
}

func (c SGeoradiusRadius) Km() SGeoradiusUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeoradiusUnitKm)(c)
}

func (c GeoradiusRadius) Ft() GeoradiusUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeoradiusUnitFt)(c)
}

func (c SGeoradiusRadius) Ft() SGeoradiusUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeoradiusUnitFt)(c)
}

func (c GeoradiusRadius) Mi() GeoradiusUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeoradiusUnitMi)(c)
}

func (c SGeoradiusRadius) Mi() SGeoradiusUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeoradiusUnitMi)(c)
}

type GeoradiusRo Completed

type SGeoradiusRo SCompleted

func (b *Builder) GeoradiusRo() (c GeoradiusRo) {
	c = GeoradiusRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEORADIUS_RO")
	return c
}

func (b *SBuilder) GeoradiusRo() (c SGeoradiusRo) {
	c = SGeoradiusRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEORADIUS_RO")
	return c
}

func (c GeoradiusRo) Key(key string) GeoradiusRoKey {
	c.cs.s = append(c.cs.s, key)
	return (GeoradiusRoKey)(c)
}

func (c SGeoradiusRo) Key(key string) SGeoradiusRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeoradiusRoKey)(c)
}

type GeoradiusRoCountAny Completed

type SGeoradiusRoCountAny SCompleted

func (c GeoradiusRoCountAny) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoCountAny) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoCountAny) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoCountAny) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoCountAny) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoCountAny) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoCountAny) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoCountAny) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoCountAny) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoCountCount Completed

type SGeoradiusRoCountCount SCompleted

func (c GeoradiusRoCountCount) Any() GeoradiusRoCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (GeoradiusRoCountAny)(c)
}

func (c SGeoradiusRoCountCount) Any() SGeoradiusRoCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (SGeoradiusRoCountAny)(c)
}

func (c GeoradiusRoCountCount) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoCountCount) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoCountCount) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoCountCount) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoCountCount) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoCountCount) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoCountCount) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoCountCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoCountCount) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoKey Completed

type SGeoradiusRoKey SCompleted

func (c GeoradiusRoKey) Longitude(longitude float64) GeoradiusRoLongitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (GeoradiusRoLongitude)(c)
}

func (c SGeoradiusRoKey) Longitude(longitude float64) SGeoradiusRoLongitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(longitude, 'f', -1, 64))
	return (SGeoradiusRoLongitude)(c)
}

type GeoradiusRoLatitude Completed

type SGeoradiusRoLatitude SCompleted

func (c GeoradiusRoLatitude) Radius(radius float64) GeoradiusRoRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusRoRadius)(c)
}

func (c SGeoradiusRoLatitude) Radius(radius float64) SGeoradiusRoRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusRoRadius)(c)
}

type GeoradiusRoLongitude Completed

type SGeoradiusRoLongitude SCompleted

func (c GeoradiusRoLongitude) Latitude(latitude float64) GeoradiusRoLatitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeoradiusRoLatitude)(c)
}

func (c SGeoradiusRoLongitude) Latitude(latitude float64) SGeoradiusRoLatitude {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeoradiusRoLatitude)(c)
}

type GeoradiusRoOrderAsc Completed

type SGeoradiusRoOrderAsc SCompleted

func (c GeoradiusRoOrderAsc) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoOrderAsc) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoOrderDesc Completed

type SGeoradiusRoOrderDesc SCompleted

func (c GeoradiusRoOrderDesc) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoOrderDesc) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoRadius Completed

type SGeoradiusRoRadius SCompleted

func (c GeoradiusRoRadius) M() GeoradiusRoUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeoradiusRoUnitM)(c)
}

func (c SGeoradiusRoRadius) M() SGeoradiusRoUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeoradiusRoUnitM)(c)
}

func (c GeoradiusRoRadius) Km() GeoradiusRoUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeoradiusRoUnitKm)(c)
}

func (c SGeoradiusRoRadius) Km() SGeoradiusRoUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeoradiusRoUnitKm)(c)
}

func (c GeoradiusRoRadius) Ft() GeoradiusRoUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeoradiusRoUnitFt)(c)
}

func (c SGeoradiusRoRadius) Ft() SGeoradiusRoUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeoradiusRoUnitFt)(c)
}

func (c GeoradiusRoRadius) Mi() GeoradiusRoUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeoradiusRoUnitMi)(c)
}

func (c SGeoradiusRoRadius) Mi() SGeoradiusRoUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeoradiusRoUnitMi)(c)
}

type GeoradiusRoStoredist Completed

type SGeoradiusRoStoredist SCompleted

func (c GeoradiusRoStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoStoredist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoStoredist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoStoredist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitFt Completed

type SGeoradiusRoUnitFt SCompleted

func (c GeoradiusRoUnitFt) Withcoord() GeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitFt) Withcoord() SGeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitFt) Withdist() GeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitFt) Withdist() SGeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitFt) Withhash() GeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitFt) Withhash() SGeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitFt) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitFt) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitFt) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitFt) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitFt) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitFt) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitFt) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitFt) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitKm Completed

type SGeoradiusRoUnitKm SCompleted

func (c GeoradiusRoUnitKm) Withcoord() GeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitKm) Withcoord() SGeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitKm) Withdist() GeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitKm) Withdist() SGeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitKm) Withhash() GeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitKm) Withhash() SGeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitKm) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitKm) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitKm) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitKm) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitKm) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitKm) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitKm) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitKm) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitM Completed

type SGeoradiusRoUnitM SCompleted

func (c GeoradiusRoUnitM) Withcoord() GeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitM) Withcoord() SGeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitM) Withdist() GeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitM) Withdist() SGeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitM) Withhash() GeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitM) Withhash() SGeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitM) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitM) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitM) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitM) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitM) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitM) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitM) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitM) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoUnitMi Completed

type SGeoradiusRoUnitMi SCompleted

func (c GeoradiusRoUnitMi) Withcoord() GeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusRoWithcoord)(c)
}

func (c SGeoradiusRoUnitMi) Withcoord() SGeoradiusRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusRoWithcoord)(c)
}

func (c GeoradiusRoUnitMi) Withdist() GeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoUnitMi) Withdist() SGeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoUnitMi) Withhash() GeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoUnitMi) Withhash() SGeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoUnitMi) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoUnitMi) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoUnitMi) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoUnitMi) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoUnitMi) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoUnitMi) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoUnitMi) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoUnitMi) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoWithcoord Completed

type SGeoradiusRoWithcoord SCompleted

func (c GeoradiusRoWithcoord) Withdist() GeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusRoWithdist)(c)
}

func (c SGeoradiusRoWithcoord) Withdist() SGeoradiusRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusRoWithdist)(c)
}

func (c GeoradiusRoWithcoord) Withhash() GeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoWithcoord) Withhash() SGeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoWithcoord) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoWithcoord) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoWithcoord) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoWithcoord) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoWithcoord) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoWithcoord) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoWithcoord) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoWithcoord) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoWithcoord) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoWithcoord) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoWithcoord) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoWithdist Completed

type SGeoradiusRoWithdist SCompleted

func (c GeoradiusRoWithdist) Withhash() GeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusRoWithhash)(c)
}

func (c SGeoradiusRoWithdist) Withhash() SGeoradiusRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusRoWithhash)(c)
}

func (c GeoradiusRoWithdist) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoWithdist) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoWithdist) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoWithdist) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoWithdist) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoWithdist) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoWithdist) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoWithdist) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoWithdist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoWithdist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoWithdist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusRoWithhash Completed

type SGeoradiusRoWithhash SCompleted

func (c GeoradiusRoWithhash) Count(count int64) GeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusRoCountCount)(c)
}

func (c SGeoradiusRoWithhash) Count(count int64) SGeoradiusRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusRoCountCount)(c)
}

func (c GeoradiusRoWithhash) Asc() GeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusRoOrderAsc)(c)
}

func (c SGeoradiusRoWithhash) Asc() SGeoradiusRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusRoOrderAsc)(c)
}

func (c GeoradiusRoWithhash) Desc() GeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusRoOrderDesc)(c)
}

func (c SGeoradiusRoWithhash) Desc() SGeoradiusRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusRoOrderDesc)(c)
}

func (c GeoradiusRoWithhash) Storedist(key string) GeoradiusRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusRoStoredist)(c)
}

func (c SGeoradiusRoWithhash) Storedist(key string) SGeoradiusRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusRoStoredist)(c)
}

func (c GeoradiusRoWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusRoWithhash) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusRoWithhash) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusRoWithhash) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusStore Completed

type SGeoradiusStore SCompleted

func (c GeoradiusStore) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusStore) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusStore) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusStore) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusStoredist Completed

type SGeoradiusStoredist SCompleted

func (c GeoradiusStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusStoredist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitFt Completed

type SGeoradiusUnitFt SCompleted

func (c GeoradiusUnitFt) Withcoord() GeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitFt) Withcoord() SGeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitFt) Withdist() GeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitFt) Withdist() SGeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitFt) Withhash() GeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitFt) Withhash() SGeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitFt) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitFt) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitFt) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitFt) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitFt) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitFt) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitFt) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitFt) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitFt) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitFt) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitKm Completed

type SGeoradiusUnitKm SCompleted

func (c GeoradiusUnitKm) Withcoord() GeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitKm) Withcoord() SGeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitKm) Withdist() GeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitKm) Withdist() SGeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitKm) Withhash() GeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitKm) Withhash() SGeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitKm) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitKm) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitKm) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitKm) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitKm) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitKm) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitKm) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitKm) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitKm) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitKm) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitM Completed

type SGeoradiusUnitM SCompleted

func (c GeoradiusUnitM) Withcoord() GeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitM) Withcoord() SGeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitM) Withdist() GeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitM) Withdist() SGeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitM) Withhash() GeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitM) Withhash() SGeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitM) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitM) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitM) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitM) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitM) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitM) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitM) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitM) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitM) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitM) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusUnitMi Completed

type SGeoradiusUnitMi SCompleted

func (c GeoradiusUnitMi) Withcoord() GeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusWithcoord)(c)
}

func (c SGeoradiusUnitMi) Withcoord() SGeoradiusWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusWithcoord)(c)
}

func (c GeoradiusUnitMi) Withdist() GeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusUnitMi) Withdist() SGeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusUnitMi) Withhash() GeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusUnitMi) Withhash() SGeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusUnitMi) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusUnitMi) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusUnitMi) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusUnitMi) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusUnitMi) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusUnitMi) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusUnitMi) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusUnitMi) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusUnitMi) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusUnitMi) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusWithcoord Completed

type SGeoradiusWithcoord SCompleted

func (c GeoradiusWithcoord) Withdist() GeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusWithdist)(c)
}

func (c SGeoradiusWithcoord) Withdist() SGeoradiusWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusWithdist)(c)
}

func (c GeoradiusWithcoord) Withhash() GeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusWithcoord) Withhash() SGeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusWithcoord) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusWithcoord) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusWithcoord) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusWithcoord) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusWithcoord) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusWithcoord) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusWithcoord) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusWithcoord) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusWithcoord) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusWithcoord) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusWithcoord) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusWithdist Completed

type SGeoradiusWithdist SCompleted

func (c GeoradiusWithdist) Withhash() GeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusWithhash)(c)
}

func (c SGeoradiusWithdist) Withhash() SGeoradiusWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusWithhash)(c)
}

func (c GeoradiusWithdist) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusWithdist) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusWithdist) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusWithdist) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusWithdist) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusWithdist) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusWithdist) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusWithdist) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusWithdist) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusWithdist) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusWithdist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusWithhash Completed

type SGeoradiusWithhash SCompleted

func (c GeoradiusWithhash) Count(count int64) GeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusCountCount)(c)
}

func (c SGeoradiusWithhash) Count(count int64) SGeoradiusCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusCountCount)(c)
}

func (c GeoradiusWithhash) Asc() GeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusOrderAsc)(c)
}

func (c SGeoradiusWithhash) Asc() SGeoradiusOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusOrderAsc)(c)
}

func (c GeoradiusWithhash) Desc() GeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusOrderDesc)(c)
}

func (c SGeoradiusWithhash) Desc() SGeoradiusOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusOrderDesc)(c)
}

func (c GeoradiusWithhash) Store(key string) GeoradiusStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusStore)(c)
}

func (c SGeoradiusWithhash) Store(key string) SGeoradiusStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusStore)(c)
}

func (c GeoradiusWithhash) Storedist(key string) GeoradiusStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusStoredist)(c)
}

func (c SGeoradiusWithhash) Storedist(key string) SGeoradiusStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusStoredist)(c)
}

func (c GeoradiusWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusWithhash) Build() SCompleted {
	return SCompleted(c)
}

type Georadiusbymember Completed

type SGeoradiusbymember SCompleted

func (b *Builder) Georadiusbymember() (c Georadiusbymember) {
	c = Georadiusbymember{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEORADIUSBYMEMBER")
	return c
}

func (b *SBuilder) Georadiusbymember() (c SGeoradiusbymember) {
	c = SGeoradiusbymember{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEORADIUSBYMEMBER")
	return c
}

func (c Georadiusbymember) Key(key string) GeoradiusbymemberKey {
	c.cs.s = append(c.cs.s, key)
	return (GeoradiusbymemberKey)(c)
}

func (c SGeoradiusbymember) Key(key string) SGeoradiusbymemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeoradiusbymemberKey)(c)
}

type GeoradiusbymemberCountAny Completed

type SGeoradiusbymemberCountAny SCompleted

func (c GeoradiusbymemberCountAny) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberCountAny) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberCountAny) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberCountAny) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberCountAny) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberCountAny) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberCountAny) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberCountAny) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberCountAny) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberCountCount Completed

type SGeoradiusbymemberCountCount SCompleted

func (c GeoradiusbymemberCountCount) Any() GeoradiusbymemberCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (GeoradiusbymemberCountAny)(c)
}

func (c SGeoradiusbymemberCountCount) Any() SGeoradiusbymemberCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (SGeoradiusbymemberCountAny)(c)
}

func (c GeoradiusbymemberCountCount) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberCountCount) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberCountCount) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberCountCount) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberCountCount) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberCountCount) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberCountCount) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberCountCount) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberCountCount) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberKey Completed

type SGeoradiusbymemberKey SCompleted

func (c GeoradiusbymemberKey) Member(member string) GeoradiusbymemberMember {
	c.cs.s = append(c.cs.s, member)
	return (GeoradiusbymemberMember)(c)
}

func (c SGeoradiusbymemberKey) Member(member string) SGeoradiusbymemberMember {
	c.cs.s = append(c.cs.s, member)
	return (SGeoradiusbymemberMember)(c)
}

type GeoradiusbymemberMember Completed

type SGeoradiusbymemberMember SCompleted

func (c GeoradiusbymemberMember) Radius(radius float64) GeoradiusbymemberRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusbymemberRadius)(c)
}

func (c SGeoradiusbymemberMember) Radius(radius float64) SGeoradiusbymemberRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusbymemberRadius)(c)
}

type GeoradiusbymemberOrderAsc Completed

type SGeoradiusbymemberOrderAsc SCompleted

func (c GeoradiusbymemberOrderAsc) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberOrderAsc) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberOrderAsc) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberOrderAsc) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberOrderDesc Completed

type SGeoradiusbymemberOrderDesc SCompleted

func (c GeoradiusbymemberOrderDesc) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberOrderDesc) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberOrderDesc) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberOrderDesc) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberRadius Completed

type SGeoradiusbymemberRadius SCompleted

func (c GeoradiusbymemberRadius) M() GeoradiusbymemberUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeoradiusbymemberUnitM)(c)
}

func (c SGeoradiusbymemberRadius) M() SGeoradiusbymemberUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeoradiusbymemberUnitM)(c)
}

func (c GeoradiusbymemberRadius) Km() GeoradiusbymemberUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeoradiusbymemberUnitKm)(c)
}

func (c SGeoradiusbymemberRadius) Km() SGeoradiusbymemberUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeoradiusbymemberUnitKm)(c)
}

func (c GeoradiusbymemberRadius) Ft() GeoradiusbymemberUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeoradiusbymemberUnitFt)(c)
}

func (c SGeoradiusbymemberRadius) Ft() SGeoradiusbymemberUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeoradiusbymemberUnitFt)(c)
}

func (c GeoradiusbymemberRadius) Mi() GeoradiusbymemberUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeoradiusbymemberUnitMi)(c)
}

func (c SGeoradiusbymemberRadius) Mi() SGeoradiusbymemberUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeoradiusbymemberUnitMi)(c)
}

type GeoradiusbymemberRo Completed

type SGeoradiusbymemberRo SCompleted

func (b *Builder) GeoradiusbymemberRo() (c GeoradiusbymemberRo) {
	c = GeoradiusbymemberRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEORADIUSBYMEMBER_RO")
	return c
}

func (b *SBuilder) GeoradiusbymemberRo() (c SGeoradiusbymemberRo) {
	c = SGeoradiusbymemberRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEORADIUSBYMEMBER_RO")
	return c
}

func (c GeoradiusbymemberRo) Key(key string) GeoradiusbymemberRoKey {
	c.cs.s = append(c.cs.s, key)
	return (GeoradiusbymemberRoKey)(c)
}

func (c SGeoradiusbymemberRo) Key(key string) SGeoradiusbymemberRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeoradiusbymemberRoKey)(c)
}

type GeoradiusbymemberRoCountAny Completed

type SGeoradiusbymemberRoCountAny SCompleted

func (c GeoradiusbymemberRoCountAny) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoCountAny) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoCountAny) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoCountAny) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoCountAny) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoCountAny) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoCountAny) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoCountAny) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoCountAny) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoCountCount Completed

type SGeoradiusbymemberRoCountCount SCompleted

func (c GeoradiusbymemberRoCountCount) Any() GeoradiusbymemberRoCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (GeoradiusbymemberRoCountAny)(c)
}

func (c SGeoradiusbymemberRoCountCount) Any() SGeoradiusbymemberRoCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (SGeoradiusbymemberRoCountAny)(c)
}

func (c GeoradiusbymemberRoCountCount) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoCountCount) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoCountCount) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoCountCount) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoCountCount) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoCountCount) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoCountCount) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoCountCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoCountCount) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoKey Completed

type SGeoradiusbymemberRoKey SCompleted

func (c GeoradiusbymemberRoKey) Member(member string) GeoradiusbymemberRoMember {
	c.cs.s = append(c.cs.s, member)
	return (GeoradiusbymemberRoMember)(c)
}

func (c SGeoradiusbymemberRoKey) Member(member string) SGeoradiusbymemberRoMember {
	c.cs.s = append(c.cs.s, member)
	return (SGeoradiusbymemberRoMember)(c)
}

type GeoradiusbymemberRoMember Completed

type SGeoradiusbymemberRoMember SCompleted

func (c GeoradiusbymemberRoMember) Radius(radius float64) GeoradiusbymemberRoRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeoradiusbymemberRoRadius)(c)
}

func (c SGeoradiusbymemberRoMember) Radius(radius float64) SGeoradiusbymemberRoRadius {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeoradiusbymemberRoRadius)(c)
}

type GeoradiusbymemberRoOrderAsc Completed

type SGeoradiusbymemberRoOrderAsc SCompleted

func (c GeoradiusbymemberRoOrderAsc) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoOrderAsc) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoOrderDesc Completed

type SGeoradiusbymemberRoOrderDesc SCompleted

func (c GeoradiusbymemberRoOrderDesc) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoOrderDesc) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoRadius Completed

type SGeoradiusbymemberRoRadius SCompleted

func (c GeoradiusbymemberRoRadius) M() GeoradiusbymemberRoUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeoradiusbymemberRoUnitM)(c)
}

func (c SGeoradiusbymemberRoRadius) M() SGeoradiusbymemberRoUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeoradiusbymemberRoUnitM)(c)
}

func (c GeoradiusbymemberRoRadius) Km() GeoradiusbymemberRoUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeoradiusbymemberRoUnitKm)(c)
}

func (c SGeoradiusbymemberRoRadius) Km() SGeoradiusbymemberRoUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeoradiusbymemberRoUnitKm)(c)
}

func (c GeoradiusbymemberRoRadius) Ft() GeoradiusbymemberRoUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeoradiusbymemberRoUnitFt)(c)
}

func (c SGeoradiusbymemberRoRadius) Ft() SGeoradiusbymemberRoUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeoradiusbymemberRoUnitFt)(c)
}

func (c GeoradiusbymemberRoRadius) Mi() GeoradiusbymemberRoUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeoradiusbymemberRoUnitMi)(c)
}

func (c SGeoradiusbymemberRoRadius) Mi() SGeoradiusbymemberRoUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeoradiusbymemberRoUnitMi)(c)
}

type GeoradiusbymemberRoStoredist Completed

type SGeoradiusbymemberRoStoredist SCompleted

func (c GeoradiusbymemberRoStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoStoredist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoStoredist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoStoredist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitFt Completed

type SGeoradiusbymemberRoUnitFt SCompleted

func (c GeoradiusbymemberRoUnitFt) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitFt) Withdist() GeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitFt) Withhash() GeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitFt) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitFt) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitFt) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitFt) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitFt) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitKm Completed

type SGeoradiusbymemberRoUnitKm SCompleted

func (c GeoradiusbymemberRoUnitKm) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitKm) Withdist() GeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitKm) Withhash() GeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitKm) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitKm) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitKm) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitKm) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitKm) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitM Completed

type SGeoradiusbymemberRoUnitM SCompleted

func (c GeoradiusbymemberRoUnitM) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitM) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitM) Withdist() GeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitM) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitM) Withhash() GeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitM) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitM) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitM) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitM) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitM) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitM) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitM) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitM) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitM) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoUnitMi Completed

type SGeoradiusbymemberRoUnitMi SCompleted

func (c GeoradiusbymemberRoUnitMi) Withcoord() GeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberRoWithcoord)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Withcoord() SGeoradiusbymemberRoWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberRoWithcoord)(c)
}

func (c GeoradiusbymemberRoUnitMi) Withdist() GeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoUnitMi) Withhash() GeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoUnitMi) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoUnitMi) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoUnitMi) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoUnitMi) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoUnitMi) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoWithcoord Completed

type SGeoradiusbymemberRoWithcoord SCompleted

func (c GeoradiusbymemberRoWithcoord) Withdist() GeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberRoWithdist)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Withdist() SGeoradiusbymemberRoWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberRoWithdist)(c)
}

func (c GeoradiusbymemberRoWithcoord) Withhash() GeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoWithcoord) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoWithcoord) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoWithcoord) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoWithcoord) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoWithcoord) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoWithcoord) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoWithcoord) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoWithcoord) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoWithdist Completed

type SGeoradiusbymemberRoWithdist SCompleted

func (c GeoradiusbymemberRoWithdist) Withhash() GeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberRoWithhash)(c)
}

func (c SGeoradiusbymemberRoWithdist) Withhash() SGeoradiusbymemberRoWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberRoWithhash)(c)
}

func (c GeoradiusbymemberRoWithdist) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoWithdist) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoWithdist) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoWithdist) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoWithdist) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoWithdist) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoWithdist) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoWithdist) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoWithdist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoWithdist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoWithdist) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberRoWithhash Completed

type SGeoradiusbymemberRoWithhash SCompleted

func (c GeoradiusbymemberRoWithhash) Count(count int64) GeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberRoCountCount)(c)
}

func (c SGeoradiusbymemberRoWithhash) Count(count int64) SGeoradiusbymemberRoCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberRoCountCount)(c)
}

func (c GeoradiusbymemberRoWithhash) Asc() GeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberRoOrderAsc)(c)
}

func (c SGeoradiusbymemberRoWithhash) Asc() SGeoradiusbymemberRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberRoOrderAsc)(c)
}

func (c GeoradiusbymemberRoWithhash) Desc() GeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberRoOrderDesc)(c)
}

func (c SGeoradiusbymemberRoWithhash) Desc() SGeoradiusbymemberRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberRoOrderDesc)(c)
}

func (c GeoradiusbymemberRoWithhash) Storedist(key string) GeoradiusbymemberRoStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberRoStoredist)(c)
}

func (c SGeoradiusbymemberRoWithhash) Storedist(key string) SGeoradiusbymemberRoStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberRoStoredist)(c)
}

func (c GeoradiusbymemberRoWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberRoWithhash) Build() SCompleted {
	return SCompleted(c)
}

func (c GeoradiusbymemberRoWithhash) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeoradiusbymemberRoWithhash) Cache() SCacheable {
	return SCacheable(c)
}

type GeoradiusbymemberStore Completed

type SGeoradiusbymemberStore SCompleted

func (c GeoradiusbymemberStore) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberStore) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberStore) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberStore) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberStoredist Completed

type SGeoradiusbymemberStoredist SCompleted

func (c GeoradiusbymemberStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberStoredist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitFt Completed

type SGeoradiusbymemberUnitFt SCompleted

func (c GeoradiusbymemberUnitFt) Withcoord() GeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitFt) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitFt) Withdist() GeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitFt) Withdist() SGeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitFt) Withhash() GeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitFt) Withhash() SGeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitFt) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitFt) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitFt) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitFt) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitFt) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitFt) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitFt) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitFt) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitFt) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitFt) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitKm Completed

type SGeoradiusbymemberUnitKm SCompleted

func (c GeoradiusbymemberUnitKm) Withcoord() GeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitKm) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitKm) Withdist() GeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitKm) Withdist() SGeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitKm) Withhash() GeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitKm) Withhash() SGeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitKm) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitKm) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitKm) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitKm) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitKm) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitKm) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitKm) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitKm) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitKm) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitKm) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitM Completed

type SGeoradiusbymemberUnitM SCompleted

func (c GeoradiusbymemberUnitM) Withcoord() GeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitM) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitM) Withdist() GeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitM) Withdist() SGeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitM) Withhash() GeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitM) Withhash() SGeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitM) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitM) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitM) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitM) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitM) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitM) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitM) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitM) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitM) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitM) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberUnitMi Completed

type SGeoradiusbymemberUnitMi SCompleted

func (c GeoradiusbymemberUnitMi) Withcoord() GeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeoradiusbymemberWithcoord)(c)
}

func (c SGeoradiusbymemberUnitMi) Withcoord() SGeoradiusbymemberWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeoradiusbymemberWithcoord)(c)
}

func (c GeoradiusbymemberUnitMi) Withdist() GeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberUnitMi) Withdist() SGeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberUnitMi) Withhash() GeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberUnitMi) Withhash() SGeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberUnitMi) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberUnitMi) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberUnitMi) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberUnitMi) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberUnitMi) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberUnitMi) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberUnitMi) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberUnitMi) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberUnitMi) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberUnitMi) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberWithcoord Completed

type SGeoradiusbymemberWithcoord SCompleted

func (c GeoradiusbymemberWithcoord) Withdist() GeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeoradiusbymemberWithdist)(c)
}

func (c SGeoradiusbymemberWithcoord) Withdist() SGeoradiusbymemberWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeoradiusbymemberWithdist)(c)
}

func (c GeoradiusbymemberWithcoord) Withhash() GeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberWithcoord) Withhash() SGeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberWithcoord) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberWithcoord) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberWithcoord) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberWithcoord) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberWithcoord) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberWithcoord) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberWithcoord) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberWithcoord) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberWithcoord) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberWithcoord) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberWithcoord) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberWithdist Completed

type SGeoradiusbymemberWithdist SCompleted

func (c GeoradiusbymemberWithdist) Withhash() GeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeoradiusbymemberWithhash)(c)
}

func (c SGeoradiusbymemberWithdist) Withhash() SGeoradiusbymemberWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeoradiusbymemberWithhash)(c)
}

func (c GeoradiusbymemberWithdist) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberWithdist) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberWithdist) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberWithdist) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberWithdist) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberWithdist) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberWithdist) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberWithdist) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberWithdist) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberWithdist) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberWithdist) Build() SCompleted {
	return SCompleted(c)
}

type GeoradiusbymemberWithhash Completed

type SGeoradiusbymemberWithhash SCompleted

func (c GeoradiusbymemberWithhash) Count(count int64) GeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeoradiusbymemberCountCount)(c)
}

func (c SGeoradiusbymemberWithhash) Count(count int64) SGeoradiusbymemberCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeoradiusbymemberCountCount)(c)
}

func (c GeoradiusbymemberWithhash) Asc() GeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeoradiusbymemberOrderAsc)(c)
}

func (c SGeoradiusbymemberWithhash) Asc() SGeoradiusbymemberOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeoradiusbymemberOrderAsc)(c)
}

func (c GeoradiusbymemberWithhash) Desc() GeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeoradiusbymemberOrderDesc)(c)
}

func (c SGeoradiusbymemberWithhash) Desc() SGeoradiusbymemberOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeoradiusbymemberOrderDesc)(c)
}

func (c GeoradiusbymemberWithhash) Store(key string) GeoradiusbymemberStore {
	c.cs.s = append(c.cs.s, "STORE", key)
	return (GeoradiusbymemberStore)(c)
}

func (c SGeoradiusbymemberWithhash) Store(key string) SGeoradiusbymemberStore {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STORE", key)
	return (SGeoradiusbymemberStore)(c)
}

func (c GeoradiusbymemberWithhash) Storedist(key string) GeoradiusbymemberStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (GeoradiusbymemberStoredist)(c)
}

func (c SGeoradiusbymemberWithhash) Storedist(key string) SGeoradiusbymemberStoredist {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, "STOREDIST", key)
	return (SGeoradiusbymemberStoredist)(c)
}

func (c GeoradiusbymemberWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeoradiusbymemberWithhash) Build() SCompleted {
	return SCompleted(c)
}

type Geosearch Completed

type SGeosearch SCompleted

func (b *Builder) Geosearch() (c Geosearch) {
	c = Geosearch{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEOSEARCH")
	return c
}

func (b *SBuilder) Geosearch() (c SGeosearch) {
	c = SGeosearch{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GEOSEARCH")
	return c
}

func (c Geosearch) Key(key string) GeosearchKey {
	c.cs.s = append(c.cs.s, key)
	return (GeosearchKey)(c)
}

func (c SGeosearch) Key(key string) SGeosearchKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGeosearchKey)(c)
}

type GeosearchBoxBybox Completed

type SGeosearchBoxBybox SCompleted

func (c GeosearchBoxBybox) Height(height float64) GeosearchBoxHeight {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(height, 'f', -1, 64))
	return (GeosearchBoxHeight)(c)
}

func (c SGeosearchBoxBybox) Height(height float64) SGeosearchBoxHeight {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(height, 'f', -1, 64))
	return (SGeosearchBoxHeight)(c)
}

type GeosearchBoxHeight Completed

type SGeosearchBoxHeight SCompleted

func (c GeosearchBoxHeight) M() GeosearchBoxUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeosearchBoxUnitM)(c)
}

func (c SGeosearchBoxHeight) M() SGeosearchBoxUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeosearchBoxUnitM)(c)
}

func (c GeosearchBoxHeight) Km() GeosearchBoxUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeosearchBoxUnitKm)(c)
}

func (c SGeosearchBoxHeight) Km() SGeosearchBoxUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeosearchBoxUnitKm)(c)
}

func (c GeosearchBoxHeight) Ft() GeosearchBoxUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeosearchBoxUnitFt)(c)
}

func (c SGeosearchBoxHeight) Ft() SGeosearchBoxUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeosearchBoxUnitFt)(c)
}

func (c GeosearchBoxHeight) Mi() GeosearchBoxUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeosearchBoxUnitMi)(c)
}

func (c SGeosearchBoxHeight) Mi() SGeosearchBoxUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeosearchBoxUnitMi)(c)
}

type GeosearchBoxUnitFt Completed

type SGeosearchBoxUnitFt SCompleted

func (c GeosearchBoxUnitFt) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitFt) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitFt) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitFt) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitFt) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitFt) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitFt) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitFt) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitFt) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitFt) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitFt) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitFt) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchBoxUnitKm Completed

type SGeosearchBoxUnitKm SCompleted

func (c GeosearchBoxUnitKm) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitKm) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitKm) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitKm) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitKm) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitKm) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitKm) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitKm) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitKm) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitKm) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitKm) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitKm) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchBoxUnitM Completed

type SGeosearchBoxUnitM SCompleted

func (c GeosearchBoxUnitM) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitM) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitM) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitM) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitM) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitM) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitM) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitM) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitM) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitM) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitM) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitM) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchBoxUnitMi Completed

type SGeosearchBoxUnitMi SCompleted

func (c GeosearchBoxUnitMi) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchBoxUnitMi) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchBoxUnitMi) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchBoxUnitMi) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchBoxUnitMi) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchBoxUnitMi) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchBoxUnitMi) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchBoxUnitMi) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchBoxUnitMi) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchBoxUnitMi) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchBoxUnitMi) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchBoxUnitMi) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchBoxUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchBoxUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchBoxUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchBoxUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleByradius Completed

type SGeosearchCircleByradius SCompleted

func (c GeosearchCircleByradius) M() GeosearchCircleUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeosearchCircleUnitM)(c)
}

func (c SGeosearchCircleByradius) M() SGeosearchCircleUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeosearchCircleUnitM)(c)
}

func (c GeosearchCircleByradius) Km() GeosearchCircleUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeosearchCircleUnitKm)(c)
}

func (c SGeosearchCircleByradius) Km() SGeosearchCircleUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeosearchCircleUnitKm)(c)
}

func (c GeosearchCircleByradius) Ft() GeosearchCircleUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeosearchCircleUnitFt)(c)
}

func (c SGeosearchCircleByradius) Ft() SGeosearchCircleUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeosearchCircleUnitFt)(c)
}

func (c GeosearchCircleByradius) Mi() GeosearchCircleUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeosearchCircleUnitMi)(c)
}

func (c SGeosearchCircleByradius) Mi() SGeosearchCircleUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeosearchCircleUnitMi)(c)
}

type GeosearchCircleUnitFt Completed

type SGeosearchCircleUnitFt SCompleted

func (c GeosearchCircleUnitFt) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitFt) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitFt) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitFt) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitFt) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitFt) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitFt) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitFt) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitFt) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitFt) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitFt) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitFt) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitFt) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitFt) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitFt) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitFt) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitFt) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleUnitKm Completed

type SGeosearchCircleUnitKm SCompleted

func (c GeosearchCircleUnitKm) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitKm) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitKm) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitKm) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitKm) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitKm) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitKm) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitKm) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitKm) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitKm) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitKm) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitKm) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitKm) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitKm) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitKm) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitKm) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitKm) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleUnitM Completed

type SGeosearchCircleUnitM SCompleted

func (c GeosearchCircleUnitM) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitM) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitM) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitM) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitM) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitM) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitM) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitM) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitM) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitM) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitM) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitM) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitM) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitM) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitM) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitM) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitM) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCircleUnitMi Completed

type SGeosearchCircleUnitMi SCompleted

func (c GeosearchCircleUnitMi) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchCircleUnitMi) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchCircleUnitMi) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchCircleUnitMi) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchCircleUnitMi) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchCircleUnitMi) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchCircleUnitMi) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchCircleUnitMi) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchCircleUnitMi) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCircleUnitMi) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCircleUnitMi) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCircleUnitMi) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCircleUnitMi) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCircleUnitMi) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCircleUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCircleUnitMi) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCircleUnitMi) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCircleUnitMi) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCountAny Completed

type SGeosearchCountAny SCompleted

func (c GeosearchCountAny) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCountAny) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCountAny) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCountAny) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCountAny) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCountAny) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCountAny) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCountAny) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCountAny) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchCountCount Completed

type SGeosearchCountCount SCompleted

func (c GeosearchCountCount) Any() GeosearchCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (GeosearchCountAny)(c)
}

func (c SGeosearchCountCount) Any() SGeosearchCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (SGeosearchCountAny)(c)
}

func (c GeosearchCountCount) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchCountCount) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchCountCount) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchCountCount) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchCountCount) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchCountCount) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeosearchCountCount) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchCountCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchCountCount) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchFromlonlat Completed

type SGeosearchFromlonlat SCompleted

func (c GeosearchFromlonlat) Byradius(radius float64) GeosearchCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchCircleByradius)(c)
}

func (c SGeosearchFromlonlat) Byradius(radius float64) SGeosearchCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchCircleByradius)(c)
}

func (c GeosearchFromlonlat) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchFromlonlat) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchFromlonlat) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchFromlonlat) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchFromlonlat) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchFromlonlat) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchFromlonlat) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchFromlonlat) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchFromlonlat) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchFromlonlat) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchFromlonlat) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchFromlonlat) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchFromlonlat) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchFromlonlat) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchFromlonlat) Build() Completed {
	return Completed(c)
}

func (c SGeosearchFromlonlat) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchFromlonlat) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchFromlonlat) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchFrommember Completed

type SGeosearchFrommember SCompleted

func (c GeosearchFrommember) Fromlonlat(longitude float64, latitude float64) GeosearchFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchFromlonlat)(c)
}

func (c SGeosearchFrommember) Fromlonlat(longitude float64, latitude float64) SGeosearchFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchFromlonlat)(c)
}

func (c GeosearchFrommember) Byradius(radius float64) GeosearchCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchCircleByradius)(c)
}

func (c SGeosearchFrommember) Byradius(radius float64) SGeosearchCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchCircleByradius)(c)
}

func (c GeosearchFrommember) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchFrommember) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchFrommember) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchFrommember) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchFrommember) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchFrommember) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchFrommember) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchFrommember) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchFrommember) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchFrommember) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchFrommember) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchFrommember) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchFrommember) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchFrommember) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchFrommember) Build() Completed {
	return Completed(c)
}

func (c SGeosearchFrommember) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchFrommember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchFrommember) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchKey Completed

type SGeosearchKey SCompleted

func (c GeosearchKey) Frommember(member string) GeosearchFrommember {
	c.cs.s = append(c.cs.s, "FROMMEMBER", member)
	return (GeosearchFrommember)(c)
}

func (c SGeosearchKey) Frommember(member string) SGeosearchFrommember {
	c.cs.s = append(c.cs.s, "FROMMEMBER", member)
	return (SGeosearchFrommember)(c)
}

func (c GeosearchKey) Fromlonlat(longitude float64, latitude float64) GeosearchFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchFromlonlat)(c)
}

func (c SGeosearchKey) Fromlonlat(longitude float64, latitude float64) SGeosearchFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchFromlonlat)(c)
}

func (c GeosearchKey) Byradius(radius float64) GeosearchCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchCircleByradius)(c)
}

func (c SGeosearchKey) Byradius(radius float64) SGeosearchCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchCircleByradius)(c)
}

func (c GeosearchKey) Bybox(width float64) GeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchBoxBybox)(c)
}

func (c SGeosearchKey) Bybox(width float64) SGeosearchBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchBoxBybox)(c)
}

func (c GeosearchKey) Asc() GeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchOrderAsc)(c)
}

func (c SGeosearchKey) Asc() SGeosearchOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchOrderAsc)(c)
}

func (c GeosearchKey) Desc() GeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchOrderDesc)(c)
}

func (c SGeosearchKey) Desc() SGeosearchOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchOrderDesc)(c)
}

func (c GeosearchKey) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchKey) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchKey) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchKey) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchKey) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchKey) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchKey) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchKey) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchKey) Build() Completed {
	return Completed(c)
}

func (c SGeosearchKey) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchKey) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchOrderAsc Completed

type SGeosearchOrderAsc SCompleted

func (c GeosearchOrderAsc) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchOrderAsc) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchOrderAsc) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchOrderAsc) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchOrderAsc) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchOrderAsc) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchOrderAsc) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchOrderAsc) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchOrderDesc Completed

type SGeosearchOrderDesc SCompleted

func (c GeosearchOrderDesc) Count(count int64) GeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchCountCount)(c)
}

func (c SGeosearchOrderDesc) Count(count int64) SGeosearchCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchCountCount)(c)
}

func (c GeosearchOrderDesc) Withcoord() GeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (GeosearchWithcoord)(c)
}

func (c SGeosearchOrderDesc) Withcoord() SGeosearchWithcoord {
	c.cs.s = append(c.cs.s, "WITHCOORD")
	return (SGeosearchWithcoord)(c)
}

func (c GeosearchOrderDesc) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchOrderDesc) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchOrderDesc) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchOrderDesc) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchWithcoord Completed

type SGeosearchWithcoord SCompleted

func (c GeosearchWithcoord) Withdist() GeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (GeosearchWithdist)(c)
}

func (c SGeosearchWithcoord) Withdist() SGeosearchWithdist {
	c.cs.s = append(c.cs.s, "WITHDIST")
	return (SGeosearchWithdist)(c)
}

func (c GeosearchWithcoord) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchWithcoord) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchWithcoord) Build() Completed {
	return Completed(c)
}

func (c SGeosearchWithcoord) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchWithcoord) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchWithcoord) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchWithdist Completed

type SGeosearchWithdist SCompleted

func (c GeosearchWithdist) Withhash() GeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (GeosearchWithhash)(c)
}

func (c SGeosearchWithdist) Withhash() SGeosearchWithhash {
	c.cs.s = append(c.cs.s, "WITHHASH")
	return (SGeosearchWithhash)(c)
}

func (c GeosearchWithdist) Build() Completed {
	return Completed(c)
}

func (c SGeosearchWithdist) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchWithdist) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchWithdist) Cache() SCacheable {
	return SCacheable(c)
}

type GeosearchWithhash Completed

type SGeosearchWithhash SCompleted

func (c GeosearchWithhash) Build() Completed {
	return Completed(c)
}

func (c SGeosearchWithhash) Build() SCompleted {
	return SCompleted(c)
}

func (c GeosearchWithhash) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGeosearchWithhash) Cache() SCacheable {
	return SCacheable(c)
}

type Geosearchstore Completed

type SGeosearchstore SCompleted

func (b *Builder) Geosearchstore() (c Geosearchstore) {
	c = Geosearchstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEOSEARCHSTORE")
	return c
}

func (b *SBuilder) Geosearchstore() (c SGeosearchstore) {
	c = SGeosearchstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GEOSEARCHSTORE")
	return c
}

func (c Geosearchstore) Destination(destination string) GeosearchstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (GeosearchstoreDestination)(c)
}

func (c SGeosearchstore) Destination(destination string) SGeosearchstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SGeosearchstoreDestination)(c)
}

type GeosearchstoreBoxBybox Completed

type SGeosearchstoreBoxBybox SCompleted

func (c GeosearchstoreBoxBybox) Height(height float64) GeosearchstoreBoxHeight {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(height, 'f', -1, 64))
	return (GeosearchstoreBoxHeight)(c)
}

func (c SGeosearchstoreBoxBybox) Height(height float64) SGeosearchstoreBoxHeight {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(height, 'f', -1, 64))
	return (SGeosearchstoreBoxHeight)(c)
}

type GeosearchstoreBoxHeight Completed

type SGeosearchstoreBoxHeight SCompleted

func (c GeosearchstoreBoxHeight) M() GeosearchstoreBoxUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeosearchstoreBoxUnitM)(c)
}

func (c SGeosearchstoreBoxHeight) M() SGeosearchstoreBoxUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeosearchstoreBoxUnitM)(c)
}

func (c GeosearchstoreBoxHeight) Km() GeosearchstoreBoxUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeosearchstoreBoxUnitKm)(c)
}

func (c SGeosearchstoreBoxHeight) Km() SGeosearchstoreBoxUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeosearchstoreBoxUnitKm)(c)
}

func (c GeosearchstoreBoxHeight) Ft() GeosearchstoreBoxUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeosearchstoreBoxUnitFt)(c)
}

func (c SGeosearchstoreBoxHeight) Ft() SGeosearchstoreBoxUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeosearchstoreBoxUnitFt)(c)
}

func (c GeosearchstoreBoxHeight) Mi() GeosearchstoreBoxUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeosearchstoreBoxUnitMi)(c)
}

func (c SGeosearchstoreBoxHeight) Mi() SGeosearchstoreBoxUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeosearchstoreBoxUnitMi)(c)
}

type GeosearchstoreBoxUnitFt Completed

type SGeosearchstoreBoxUnitFt SCompleted

func (c GeosearchstoreBoxUnitFt) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitFt) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitFt) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitFt) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitFt) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitFt) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitFt) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitFt) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreBoxUnitKm Completed

type SGeosearchstoreBoxUnitKm SCompleted

func (c GeosearchstoreBoxUnitKm) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitKm) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitKm) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitKm) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitKm) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitKm) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitKm) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitKm) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreBoxUnitM Completed

type SGeosearchstoreBoxUnitM SCompleted

func (c GeosearchstoreBoxUnitM) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitM) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitM) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitM) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitM) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitM) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitM) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitM) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreBoxUnitMi Completed

type SGeosearchstoreBoxUnitMi SCompleted

func (c GeosearchstoreBoxUnitMi) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreBoxUnitMi) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreBoxUnitMi) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreBoxUnitMi) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreBoxUnitMi) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreBoxUnitMi) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreBoxUnitMi) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreBoxUnitMi) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreBoxUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreBoxUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleByradius Completed

type SGeosearchstoreCircleByradius SCompleted

func (c GeosearchstoreCircleByradius) M() GeosearchstoreCircleUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (GeosearchstoreCircleUnitM)(c)
}

func (c SGeosearchstoreCircleByradius) M() SGeosearchstoreCircleUnitM {
	c.cs.s = append(c.cs.s, "m")
	return (SGeosearchstoreCircleUnitM)(c)
}

func (c GeosearchstoreCircleByradius) Km() GeosearchstoreCircleUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (GeosearchstoreCircleUnitKm)(c)
}

func (c SGeosearchstoreCircleByradius) Km() SGeosearchstoreCircleUnitKm {
	c.cs.s = append(c.cs.s, "km")
	return (SGeosearchstoreCircleUnitKm)(c)
}

func (c GeosearchstoreCircleByradius) Ft() GeosearchstoreCircleUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (GeosearchstoreCircleUnitFt)(c)
}

func (c SGeosearchstoreCircleByradius) Ft() SGeosearchstoreCircleUnitFt {
	c.cs.s = append(c.cs.s, "ft")
	return (SGeosearchstoreCircleUnitFt)(c)
}

func (c GeosearchstoreCircleByradius) Mi() GeosearchstoreCircleUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (GeosearchstoreCircleUnitMi)(c)
}

func (c SGeosearchstoreCircleByradius) Mi() SGeosearchstoreCircleUnitMi {
	c.cs.s = append(c.cs.s, "mi")
	return (SGeosearchstoreCircleUnitMi)(c)
}

type GeosearchstoreCircleUnitFt Completed

type SGeosearchstoreCircleUnitFt SCompleted

func (c GeosearchstoreCircleUnitFt) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitFt) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitFt) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitFt) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitFt) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitFt) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitFt) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitFt) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitFt) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitFt) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitFt) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitFt) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleUnitKm Completed

type SGeosearchstoreCircleUnitKm SCompleted

func (c GeosearchstoreCircleUnitKm) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitKm) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitKm) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitKm) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitKm) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitKm) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitKm) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitKm) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitKm) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitKm) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitKm) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitKm) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleUnitM Completed

type SGeosearchstoreCircleUnitM SCompleted

func (c GeosearchstoreCircleUnitM) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitM) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitM) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitM) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitM) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitM) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitM) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitM) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitM) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitM) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitM) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitM) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCircleUnitMi Completed

type SGeosearchstoreCircleUnitMi SCompleted

func (c GeosearchstoreCircleUnitMi) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreCircleUnitMi) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreCircleUnitMi) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreCircleUnitMi) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreCircleUnitMi) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreCircleUnitMi) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreCircleUnitMi) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreCircleUnitMi) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreCircleUnitMi) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCircleUnitMi) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCircleUnitMi) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCircleUnitMi) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCountAny Completed

type SGeosearchstoreCountAny SCompleted

func (c GeosearchstoreCountAny) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCountAny) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCountAny) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCountAny) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreCountCount Completed

type SGeosearchstoreCountCount SCompleted

func (c GeosearchstoreCountCount) Any() GeosearchstoreCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (GeosearchstoreCountAny)(c)
}

func (c SGeosearchstoreCountCount) Any() SGeosearchstoreCountAny {
	c.cs.s = append(c.cs.s, "ANY")
	return (SGeosearchstoreCountAny)(c)
}

func (c GeosearchstoreCountCount) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreCountCount) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreCountCount) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreCountCount) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreDestination Completed

type SGeosearchstoreDestination SCompleted

func (c GeosearchstoreDestination) Source(source string) GeosearchstoreSource {
	c.cs.s = append(c.cs.s, source)
	return (GeosearchstoreSource)(c)
}

func (c SGeosearchstoreDestination) Source(source string) SGeosearchstoreSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SGeosearchstoreSource)(c)
}

type GeosearchstoreFromlonlat Completed

type SGeosearchstoreFromlonlat SCompleted

func (c GeosearchstoreFromlonlat) Byradius(radius float64) GeosearchstoreCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchstoreCircleByradius)(c)
}

func (c SGeosearchstoreFromlonlat) Byradius(radius float64) SGeosearchstoreCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchstoreCircleByradius)(c)
}

func (c GeosearchstoreFromlonlat) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreFromlonlat) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreFromlonlat) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreFromlonlat) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreFromlonlat) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreFromlonlat) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreFromlonlat) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreFromlonlat) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreFromlonlat) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreFromlonlat) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreFromlonlat) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreFromlonlat) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreFrommember Completed

type SGeosearchstoreFrommember SCompleted

func (c GeosearchstoreFrommember) Fromlonlat(longitude float64, latitude float64) GeosearchstoreFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchstoreFromlonlat)(c)
}

func (c SGeosearchstoreFrommember) Fromlonlat(longitude float64, latitude float64) SGeosearchstoreFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchstoreFromlonlat)(c)
}

func (c GeosearchstoreFrommember) Byradius(radius float64) GeosearchstoreCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchstoreCircleByradius)(c)
}

func (c SGeosearchstoreFrommember) Byradius(radius float64) SGeosearchstoreCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchstoreCircleByradius)(c)
}

func (c GeosearchstoreFrommember) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreFrommember) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreFrommember) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreFrommember) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreFrommember) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreFrommember) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreFrommember) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreFrommember) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreFrommember) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreFrommember) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreFrommember) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreFrommember) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreOrderAsc Completed

type SGeosearchstoreOrderAsc SCompleted

func (c GeosearchstoreOrderAsc) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreOrderAsc) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreOrderAsc) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreOrderAsc) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreOrderDesc Completed

type SGeosearchstoreOrderDesc SCompleted

func (c GeosearchstoreOrderDesc) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreOrderDesc) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreOrderDesc) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreOrderDesc) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreSource Completed

type SGeosearchstoreSource SCompleted

func (c GeosearchstoreSource) Frommember(member string) GeosearchstoreFrommember {
	c.cs.s = append(c.cs.s, "FROMMEMBER", member)
	return (GeosearchstoreFrommember)(c)
}

func (c SGeosearchstoreSource) Frommember(member string) SGeosearchstoreFrommember {
	c.cs.s = append(c.cs.s, "FROMMEMBER", member)
	return (SGeosearchstoreFrommember)(c)
}

func (c GeosearchstoreSource) Fromlonlat(longitude float64, latitude float64) GeosearchstoreFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (GeosearchstoreFromlonlat)(c)
}

func (c SGeosearchstoreSource) Fromlonlat(longitude float64, latitude float64) SGeosearchstoreFromlonlat {
	c.cs.s = append(c.cs.s, "FROMLONLAT", strconv.FormatFloat(longitude, 'f', -1, 64), strconv.FormatFloat(latitude, 'f', -1, 64))
	return (SGeosearchstoreFromlonlat)(c)
}

func (c GeosearchstoreSource) Byradius(radius float64) GeosearchstoreCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (GeosearchstoreCircleByradius)(c)
}

func (c SGeosearchstoreSource) Byradius(radius float64) SGeosearchstoreCircleByradius {
	c.cs.s = append(c.cs.s, "BYRADIUS", strconv.FormatFloat(radius, 'f', -1, 64))
	return (SGeosearchstoreCircleByradius)(c)
}

func (c GeosearchstoreSource) Bybox(width float64) GeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (GeosearchstoreBoxBybox)(c)
}

func (c SGeosearchstoreSource) Bybox(width float64) SGeosearchstoreBoxBybox {
	c.cs.s = append(c.cs.s, "BYBOX", strconv.FormatFloat(width, 'f', -1, 64))
	return (SGeosearchstoreBoxBybox)(c)
}

func (c GeosearchstoreSource) Asc() GeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (GeosearchstoreOrderAsc)(c)
}

func (c SGeosearchstoreSource) Asc() SGeosearchstoreOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SGeosearchstoreOrderAsc)(c)
}

func (c GeosearchstoreSource) Desc() GeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (GeosearchstoreOrderDesc)(c)
}

func (c SGeosearchstoreSource) Desc() SGeosearchstoreOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SGeosearchstoreOrderDesc)(c)
}

func (c GeosearchstoreSource) Count(count int64) GeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (GeosearchstoreCountCount)(c)
}

func (c SGeosearchstoreSource) Count(count int64) SGeosearchstoreCountCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SGeosearchstoreCountCount)(c)
}

func (c GeosearchstoreSource) Storedist() GeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (GeosearchstoreStoredist)(c)
}

func (c SGeosearchstoreSource) Storedist() SGeosearchstoreStoredist {
	c.cs.s = append(c.cs.s, "STOREDIST")
	return (SGeosearchstoreStoredist)(c)
}

func (c GeosearchstoreSource) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreSource) Build() SCompleted {
	return SCompleted(c)
}

type GeosearchstoreStoredist Completed

type SGeosearchstoreStoredist SCompleted

func (c GeosearchstoreStoredist) Build() Completed {
	return Completed(c)
}

func (c SGeosearchstoreStoredist) Build() SCompleted {
	return SCompleted(c)
}

type Get Completed

type SGet SCompleted

func (b *Builder) Get() (c Get) {
	c = Get{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GET")
	return c
}

func (b *SBuilder) Get() (c SGet) {
	c = SGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GET")
	return c
}

func (c Get) Key(key string) GetKey {
	c.cs.s = append(c.cs.s, key)
	return (GetKey)(c)
}

func (c SGet) Key(key string) SGetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGetKey)(c)
}

type GetKey Completed

type SGetKey SCompleted

func (c GetKey) Build() Completed {
	return Completed(c)
}

func (c SGetKey) Build() SCompleted {
	return SCompleted(c)
}

func (c GetKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGetKey) Cache() SCacheable {
	return SCacheable(c)
}

type Getbit Completed

type SGetbit SCompleted

func (b *Builder) Getbit() (c Getbit) {
	c = Getbit{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GETBIT")
	return c
}

func (b *SBuilder) Getbit() (c SGetbit) {
	c = SGetbit{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GETBIT")
	return c
}

func (c Getbit) Key(key string) GetbitKey {
	c.cs.s = append(c.cs.s, key)
	return (GetbitKey)(c)
}

func (c SGetbit) Key(key string) SGetbitKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGetbitKey)(c)
}

type GetbitKey Completed

type SGetbitKey SCompleted

func (c GetbitKey) Offset(offset int64) GetbitOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (GetbitOffset)(c)
}

func (c SGetbitKey) Offset(offset int64) SGetbitOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (SGetbitOffset)(c)
}

type GetbitOffset Completed

type SGetbitOffset SCompleted

func (c GetbitOffset) Build() Completed {
	return Completed(c)
}

func (c SGetbitOffset) Build() SCompleted {
	return SCompleted(c)
}

func (c GetbitOffset) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGetbitOffset) Cache() SCacheable {
	return SCacheable(c)
}

type Getdel Completed

type SGetdel SCompleted

func (b *Builder) Getdel() (c Getdel) {
	c = Getdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GETDEL")
	return c
}

func (b *SBuilder) Getdel() (c SGetdel) {
	c = SGetdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GETDEL")
	return c
}

func (c Getdel) Key(key string) GetdelKey {
	c.cs.s = append(c.cs.s, key)
	return (GetdelKey)(c)
}

func (c SGetdel) Key(key string) SGetdelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGetdelKey)(c)
}

type GetdelKey Completed

type SGetdelKey SCompleted

func (c GetdelKey) Build() Completed {
	return Completed(c)
}

func (c SGetdelKey) Build() SCompleted {
	return SCompleted(c)
}

type Getex Completed

type SGetex SCompleted

func (b *Builder) Getex() (c Getex) {
	c = Getex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GETEX")
	return c
}

func (b *SBuilder) Getex() (c SGetex) {
	c = SGetex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GETEX")
	return c
}

func (c Getex) Key(key string) GetexKey {
	c.cs.s = append(c.cs.s, key)
	return (GetexKey)(c)
}

func (c SGetex) Key(key string) SGetexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGetexKey)(c)
}

type GetexExpirationExSeconds Completed

type SGetexExpirationExSeconds SCompleted

func (c GetexExpirationExSeconds) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationExSeconds) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationExatTimestamp Completed

type SGetexExpirationExatTimestamp SCompleted

func (c GetexExpirationExatTimestamp) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationExatTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationPersist Completed

type SGetexExpirationPersist SCompleted

func (c GetexExpirationPersist) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationPersist) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationPxMilliseconds Completed

type SGetexExpirationPxMilliseconds SCompleted

func (c GetexExpirationPxMilliseconds) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationPxMilliseconds) Build() SCompleted {
	return SCompleted(c)
}

type GetexExpirationPxatMillisecondsTimestamp Completed

type SGetexExpirationPxatMillisecondsTimestamp SCompleted

func (c GetexExpirationPxatMillisecondsTimestamp) Build() Completed {
	return Completed(c)
}

func (c SGetexExpirationPxatMillisecondsTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type GetexKey Completed

type SGetexKey SCompleted

func (c GetexKey) ExSeconds(seconds int64) GetexExpirationExSeconds {
	c.cs.s = append(c.cs.s, "EX", strconv.FormatInt(seconds, 10))
	return (GetexExpirationExSeconds)(c)
}

func (c SGetexKey) ExSeconds(seconds int64) SGetexExpirationExSeconds {
	c.cs.s = append(c.cs.s, "EX", strconv.FormatInt(seconds, 10))
	return (SGetexExpirationExSeconds)(c)
}

func (c GetexKey) PxMilliseconds(milliseconds int64) GetexExpirationPxMilliseconds {
	c.cs.s = append(c.cs.s, "PX", strconv.FormatInt(milliseconds, 10))
	return (GetexExpirationPxMilliseconds)(c)
}

func (c SGetexKey) PxMilliseconds(milliseconds int64) SGetexExpirationPxMilliseconds {
	c.cs.s = append(c.cs.s, "PX", strconv.FormatInt(milliseconds, 10))
	return (SGetexExpirationPxMilliseconds)(c)
}

func (c GetexKey) ExatTimestamp(timestamp int64) GetexExpirationExatTimestamp {
	c.cs.s = append(c.cs.s, "EXAT", strconv.FormatInt(timestamp, 10))
	return (GetexExpirationExatTimestamp)(c)
}

func (c SGetexKey) ExatTimestamp(timestamp int64) SGetexExpirationExatTimestamp {
	c.cs.s = append(c.cs.s, "EXAT", strconv.FormatInt(timestamp, 10))
	return (SGetexExpirationExatTimestamp)(c)
}

func (c GetexKey) PxatMillisecondsTimestamp(millisecondsTimestamp int64) GetexExpirationPxatMillisecondsTimestamp {
	c.cs.s = append(c.cs.s, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (GetexExpirationPxatMillisecondsTimestamp)(c)
}

func (c SGetexKey) PxatMillisecondsTimestamp(millisecondsTimestamp int64) SGetexExpirationPxatMillisecondsTimestamp {
	c.cs.s = append(c.cs.s, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (SGetexExpirationPxatMillisecondsTimestamp)(c)
}

func (c GetexKey) Persist() GetexExpirationPersist {
	c.cs.s = append(c.cs.s, "PERSIST")
	return (GetexExpirationPersist)(c)
}

func (c SGetexKey) Persist() SGetexExpirationPersist {
	c.cs.s = append(c.cs.s, "PERSIST")
	return (SGetexExpirationPersist)(c)
}

func (c GetexKey) Build() Completed {
	return Completed(c)
}

func (c SGetexKey) Build() SCompleted {
	return SCompleted(c)
}

type Getrange Completed

type SGetrange SCompleted

func (b *Builder) Getrange() (c Getrange) {
	c = Getrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GETRANGE")
	return c
}

func (b *SBuilder) Getrange() (c SGetrange) {
	c = SGetrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GETRANGE")
	return c
}

func (c Getrange) Key(key string) GetrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (GetrangeKey)(c)
}

func (c SGetrange) Key(key string) SGetrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGetrangeKey)(c)
}

type GetrangeEnd Completed

type SGetrangeEnd SCompleted

func (c GetrangeEnd) Build() Completed {
	return Completed(c)
}

func (c SGetrangeEnd) Build() SCompleted {
	return SCompleted(c)
}

func (c GetrangeEnd) Cache() Cacheable {
	return Cacheable(c)
}

func (c SGetrangeEnd) Cache() SCacheable {
	return SCacheable(c)
}

type GetrangeKey Completed

type SGetrangeKey SCompleted

func (c GetrangeKey) Start(start int64) GetrangeStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (GetrangeStart)(c)
}

func (c SGetrangeKey) Start(start int64) SGetrangeStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SGetrangeStart)(c)
}

type GetrangeStart Completed

type SGetrangeStart SCompleted

func (c GetrangeStart) End(end int64) GetrangeEnd {
	c.cs.s = append(c.cs.s, strconv.FormatInt(end, 10))
	return (GetrangeEnd)(c)
}

func (c SGetrangeStart) End(end int64) SGetrangeEnd {
	c.cs.s = append(c.cs.s, strconv.FormatInt(end, 10))
	return (SGetrangeEnd)(c)
}

type Getset Completed

type SGetset SCompleted

func (b *Builder) Getset() (c Getset) {
	c = Getset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GETSET")
	return c
}

func (b *SBuilder) Getset() (c SGetset) {
	c = SGetset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GETSET")
	return c
}

func (c Getset) Key(key string) GetsetKey {
	c.cs.s = append(c.cs.s, key)
	return (GetsetKey)(c)
}

func (c SGetset) Key(key string) SGetsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SGetsetKey)(c)
}

type GetsetKey Completed

type SGetsetKey SCompleted

func (c GetsetKey) Value(value string) GetsetValue {
	c.cs.s = append(c.cs.s, value)
	return (GetsetValue)(c)
}

func (c SGetsetKey) Value(value string) SGetsetValue {
	c.cs.s = append(c.cs.s, value)
	return (SGetsetValue)(c)
}

type GetsetValue Completed

type SGetsetValue SCompleted

func (c GetsetValue) Build() Completed {
	return Completed(c)
}

func (c SGetsetValue) Build() SCompleted {
	return SCompleted(c)
}

type GraphConfigGet Completed

type SGraphConfigGet SCompleted

func (b *Builder) GraphConfigGet() (c GraphConfigGet) {
	c = GraphConfigGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.CONFIG", "GET")
	return c
}

func (b *SBuilder) GraphConfigGet() (c SGraphConfigGet) {
	c = SGraphConfigGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.CONFIG", "GET")
	return c
}

func (c GraphConfigGet) Name(name string) GraphConfigGetName {
	c.cs.s = append(c.cs.s, name)
	return (GraphConfigGetName)(c)
}

func (c SGraphConfigGet) Name(name string) SGraphConfigGetName {
	c.cs.s = append(c.cs.s, name)
	return (SGraphConfigGetName)(c)
}

type GraphConfigGetName Completed

type SGraphConfigGetName SCompleted

func (c GraphConfigGetName) Build() Completed {
	return Completed(c)
}

func (c SGraphConfigGetName) Build() SCompleted {
	return SCompleted(c)
}

type GraphConfigSet Completed

type SGraphConfigSet SCompleted

func (b *Builder) GraphConfigSet() (c GraphConfigSet) {
	c = GraphConfigSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.CONFIG", "SET")
	return c
}

func (b *SBuilder) GraphConfigSet() (c SGraphConfigSet) {
	c = SGraphConfigSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.CONFIG", "SET")
	return c
}

func (c GraphConfigSet) Name(name string) GraphConfigSetName {
	c.cs.s = append(c.cs.s, name)
	return (GraphConfigSetName)(c)
}

func (c SGraphConfigSet) Name(name string) SGraphConfigSetName {
	c.cs.s = append(c.cs.s, name)
	return (SGraphConfigSetName)(c)
}

type GraphConfigSetName Completed

type SGraphConfigSetName SCompleted

func (c GraphConfigSetName) Value(value string) GraphConfigSetValue {
	c.cs.s = append(c.cs.s, value)
	return (GraphConfigSetValue)(c)
}

func (c SGraphConfigSetName) Value(value string) SGraphConfigSetValue {
	c.cs.s = append(c.cs.s, value)
	return (SGraphConfigSetValue)(c)
}

type GraphConfigSetValue Completed

type SGraphConfigSetValue SCompleted

func (c GraphConfigSetValue) Build() Completed {
	return Completed(c)
}

func (c SGraphConfigSetValue) Build() SCompleted {
	return SCompleted(c)
}

type GraphDelete Completed

type SGraphDelete SCompleted

func (b *Builder) GraphDelete() (c GraphDelete) {
	c = GraphDelete{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.DELETE")
	return c
}

func (b *SBuilder) GraphDelete() (c SGraphDelete) {
	c = SGraphDelete{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.DELETE")
	return c
}

func (c GraphDelete) Graph(graph string) GraphDeleteGraph {
	c.cs.s = append(c.cs.s, graph)
	return (GraphDeleteGraph)(c)
}

func (c SGraphDelete) Graph(graph string) SGraphDeleteGraph {
	c.ks = checkSlot(c.ks, slot(graph))
	c.cs.s = append(c.cs.s, graph)
	return (SGraphDeleteGraph)(c)
}

type GraphDeleteGraph Completed

type SGraphDeleteGraph SCompleted

func (c GraphDeleteGraph) Build() Completed {
	return Completed(c)
}

func (c SGraphDeleteGraph) Build() SCompleted {
	return SCompleted(c)
}

type GraphExplain Completed

type SGraphExplain SCompleted

func (b *Builder) GraphExplain() (c GraphExplain) {
	c = GraphExplain{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.EXPLAIN")
	return c
}

func (b *SBuilder) GraphExplain() (c SGraphExplain) {
	c = SGraphExplain{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.EXPLAIN")
	return c
}

func (c GraphExplain) Graph(graph string) GraphExplainGraph {
	c.cs.s = append(c.cs.s, graph)
	return (GraphExplainGraph)(c)
}

func (c SGraphExplain) Graph(graph string) SGraphExplainGraph {
	c.ks = checkSlot(c.ks, slot(graph))
	c.cs.s = append(c.cs.s, graph)
	return (SGraphExplainGraph)(c)
}

type GraphExplainGraph Completed

type SGraphExplainGraph SCompleted

func (c GraphExplainGraph) Query(query string) GraphExplainQuery {
	c.cs.s = append(c.cs.s, query)
	return (GraphExplainQuery)(c)
}

func (c SGraphExplainGraph) Query(query string) SGraphExplainQuery {
	c.cs.s = append(c.cs.s, query)
	return (SGraphExplainQuery)(c)
}

type GraphExplainQuery Completed

type SGraphExplainQuery SCompleted

func (c GraphExplainQuery) Build() Completed {
	return Completed(c)
}

func (c SGraphExplainQuery) Build() SCompleted {
	return SCompleted(c)
}

type GraphList Completed

type SGraphList SCompleted

func (b *Builder) GraphList() (c GraphList) {
	c = GraphList{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.LIST")
	return c
}

func (b *SBuilder) GraphList() (c SGraphList) {
	c = SGraphList{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.LIST")
	return c
}

func (c GraphList) Build() Completed {
	return Completed(c)
}

func (c SGraphList) Build() SCompleted {
	return SCompleted(c)
}

type GraphProfile Completed

type SGraphProfile SCompleted

func (b *Builder) GraphProfile() (c GraphProfile) {
	c = GraphProfile{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.PROFILE")
	return c
}

func (b *SBuilder) GraphProfile() (c SGraphProfile) {
	c = SGraphProfile{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.PROFILE")
	return c
}

func (c GraphProfile) Graph(graph string) GraphProfileGraph {
	c.cs.s = append(c.cs.s, graph)
	return (GraphProfileGraph)(c)
}

func (c SGraphProfile) Graph(graph string) SGraphProfileGraph {
	c.ks = checkSlot(c.ks, slot(graph))
	c.cs.s = append(c.cs.s, graph)
	return (SGraphProfileGraph)(c)
}

type GraphProfileGraph Completed

type SGraphProfileGraph SCompleted

func (c GraphProfileGraph) Query(query string) GraphProfileQuery {
	c.cs.s = append(c.cs.s, query)
	return (GraphProfileQuery)(c)
}

func (c SGraphProfileGraph) Query(query string) SGraphProfileQuery {
	c.cs.s = append(c.cs.s, query)
	return (SGraphProfileQuery)(c)
}

type GraphProfileQuery Completed

type SGraphProfileQuery SCompleted

func (c GraphProfileQuery) Build() Completed {
	return Completed(c)
}

func (c SGraphProfileQuery) Build() SCompleted {
	return SCompleted(c)
}

type GraphQuery Completed

type SGraphQuery SCompleted

func (b *Builder) GraphQuery() (c GraphQuery) {
	c = GraphQuery{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.QUERY")
	return c
}

func (b *SBuilder) GraphQuery() (c SGraphQuery) {
	c = SGraphQuery{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "GRAPH.QUERY")
	return c
}

func (c GraphQuery) Graph(graph string) GraphQueryGraph {
	c.cs.s = append(c.cs.s, graph)
	return (GraphQueryGraph)(c)
}

func (c SGraphQuery) Graph(graph string) SGraphQueryGraph {
	c.ks = checkSlot(c.ks, slot(graph))
	c.cs.s = append(c.cs.s, graph)
	return (SGraphQueryGraph)(c)
}

type GraphQueryGraph Completed

type SGraphQueryGraph SCompleted

func (c GraphQueryGraph) Query(query string) GraphQueryQuery {
	c.cs.s = append(c.cs.s, query)
	return (GraphQueryQuery)(c)
}

func (c SGraphQueryGraph) Query(query string) SGraphQueryQuery {
	c.cs.s = append(c.cs.s, query)
	return (SGraphQueryQuery)(c)
}

type GraphQueryQuery Completed

type SGraphQueryQuery SCompleted

func (c GraphQueryQuery) Build() Completed {
	return Completed(c)
}

func (c SGraphQueryQuery) Build() SCompleted {
	return SCompleted(c)
}

type GraphRoQuery Completed

type SGraphRoQuery SCompleted

func (b *Builder) GraphRoQuery() (c GraphRoQuery) {
	c = GraphRoQuery{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.RO_QUERY")
	return c
}

func (b *SBuilder) GraphRoQuery() (c SGraphRoQuery) {
	c = SGraphRoQuery{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.RO_QUERY")
	return c
}

func (c GraphRoQuery) Graph(graph string) GraphRoQueryGraph {
	c.cs.s = append(c.cs.s, graph)
	return (GraphRoQueryGraph)(c)
}

func (c SGraphRoQuery) Graph(graph string) SGraphRoQueryGraph {
	c.ks = checkSlot(c.ks, slot(graph))
	c.cs.s = append(c.cs.s, graph)
	return (SGraphRoQueryGraph)(c)
}

type GraphRoQueryGraph Completed

type SGraphRoQueryGraph SCompleted

func (c GraphRoQueryGraph) Query(query string) GraphRoQueryQuery {
	c.cs.s = append(c.cs.s, query)
	return (GraphRoQueryQuery)(c)
}

func (c SGraphRoQueryGraph) Query(query string) SGraphRoQueryQuery {
	c.cs.s = append(c.cs.s, query)
	return (SGraphRoQueryQuery)(c)
}

type GraphRoQueryQuery Completed

type SGraphRoQueryQuery SCompleted

func (c GraphRoQueryQuery) Build() Completed {
	return Completed(c)
}

func (c SGraphRoQueryQuery) Build() SCompleted {
	return SCompleted(c)
}

type GraphSlowlog Completed

type SGraphSlowlog SCompleted

func (b *Builder) GraphSlowlog() (c GraphSlowlog) {
	c = GraphSlowlog{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.SLOWLOG")
	return c
}

func (b *SBuilder) GraphSlowlog() (c SGraphSlowlog) {
	c = SGraphSlowlog{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "GRAPH.SLOWLOG")
	return c
}

func (c GraphSlowlog) Graph(graph string) GraphSlowlogGraph {
	c.cs.s = append(c.cs.s, graph)
	return (GraphSlowlogGraph)(c)
}

func (c SGraphSlowlog) Graph(graph string) SGraphSlowlogGraph {
	c.ks = checkSlot(c.ks, slot(graph))
	c.cs.s = append(c.cs.s, graph)
	return (SGraphSlowlogGraph)(c)
}

type GraphSlowlogGraph Completed

type SGraphSlowlogGraph SCompleted

func (c GraphSlowlogGraph) Build() Completed {
	return Completed(c)
}

func (c SGraphSlowlogGraph) Build() SCompleted {
	return SCompleted(c)
}

type Hdel Completed

type SHdel SCompleted

func (b *Builder) Hdel() (c Hdel) {
	c = Hdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HDEL")
	return c
}

func (b *SBuilder) Hdel() (c SHdel) {
	c = SHdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HDEL")
	return c
}

func (c Hdel) Key(key string) HdelKey {
	c.cs.s = append(c.cs.s, key)
	return (HdelKey)(c)
}

func (c SHdel) Key(key string) SHdelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHdelKey)(c)
}

type HdelField Completed

type SHdelField SCompleted

func (c HdelField) Field(field ...string) HdelField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SHdelField) Field(field ...string) SHdelField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c HdelField) Build() Completed {
	return Completed(c)
}

func (c SHdelField) Build() SCompleted {
	return SCompleted(c)
}

type HdelKey Completed

type SHdelKey SCompleted

func (c HdelKey) Field(field ...string) HdelField {
	c.cs.s = append(c.cs.s, field...)
	return (HdelField)(c)
}

func (c SHdelKey) Field(field ...string) SHdelField {
	c.cs.s = append(c.cs.s, field...)
	return (SHdelField)(c)
}

type Hello Completed

type SHello SCompleted

func (b *Builder) Hello() (c Hello) {
	c = Hello{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HELLO")
	return c
}

func (b *SBuilder) Hello() (c SHello) {
	c = SHello{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HELLO")
	return c
}

func (c Hello) Protover(protover int64) HelloArgumentsProtover {
	c.cs.s = append(c.cs.s, strconv.FormatInt(protover, 10))
	return (HelloArgumentsProtover)(c)
}

func (c SHello) Protover(protover int64) SHelloArgumentsProtover {
	c.cs.s = append(c.cs.s, strconv.FormatInt(protover, 10))
	return (SHelloArgumentsProtover)(c)
}

func (c Hello) Build() Completed {
	return Completed(c)
}

func (c SHello) Build() SCompleted {
	return SCompleted(c)
}

type HelloArgumentsAuth Completed

type SHelloArgumentsAuth SCompleted

func (c HelloArgumentsAuth) Setname(clientname string) HelloArgumentsSetname {
	c.cs.s = append(c.cs.s, "SETNAME", clientname)
	return (HelloArgumentsSetname)(c)
}

func (c SHelloArgumentsAuth) Setname(clientname string) SHelloArgumentsSetname {
	c.cs.s = append(c.cs.s, "SETNAME", clientname)
	return (SHelloArgumentsSetname)(c)
}

func (c HelloArgumentsAuth) Build() Completed {
	return Completed(c)
}

func (c SHelloArgumentsAuth) Build() SCompleted {
	return SCompleted(c)
}

type HelloArgumentsProtover Completed

type SHelloArgumentsProtover SCompleted

func (c HelloArgumentsProtover) Auth(username string, password string) HelloArgumentsAuth {
	c.cs.s = append(c.cs.s, "AUTH", username, password)
	return (HelloArgumentsAuth)(c)
}

func (c SHelloArgumentsProtover) Auth(username string, password string) SHelloArgumentsAuth {
	c.cs.s = append(c.cs.s, "AUTH", username, password)
	return (SHelloArgumentsAuth)(c)
}

func (c HelloArgumentsProtover) Setname(clientname string) HelloArgumentsSetname {
	c.cs.s = append(c.cs.s, "SETNAME", clientname)
	return (HelloArgumentsSetname)(c)
}

func (c SHelloArgumentsProtover) Setname(clientname string) SHelloArgumentsSetname {
	c.cs.s = append(c.cs.s, "SETNAME", clientname)
	return (SHelloArgumentsSetname)(c)
}

func (c HelloArgumentsProtover) Build() Completed {
	return Completed(c)
}

func (c SHelloArgumentsProtover) Build() SCompleted {
	return SCompleted(c)
}

type HelloArgumentsSetname Completed

type SHelloArgumentsSetname SCompleted

func (c HelloArgumentsSetname) Build() Completed {
	return Completed(c)
}

func (c SHelloArgumentsSetname) Build() SCompleted {
	return SCompleted(c)
}

type Hexists Completed

type SHexists SCompleted

func (b *Builder) Hexists() (c Hexists) {
	c = Hexists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HEXISTS")
	return c
}

func (b *SBuilder) Hexists() (c SHexists) {
	c = SHexists{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HEXISTS")
	return c
}

func (c Hexists) Key(key string) HexistsKey {
	c.cs.s = append(c.cs.s, key)
	return (HexistsKey)(c)
}

func (c SHexists) Key(key string) SHexistsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHexistsKey)(c)
}

type HexistsField Completed

type SHexistsField SCompleted

func (c HexistsField) Build() Completed {
	return Completed(c)
}

func (c SHexistsField) Build() SCompleted {
	return SCompleted(c)
}

func (c HexistsField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHexistsField) Cache() SCacheable {
	return SCacheable(c)
}

type HexistsKey Completed

type SHexistsKey SCompleted

func (c HexistsKey) Field(field string) HexistsField {
	c.cs.s = append(c.cs.s, field)
	return (HexistsField)(c)
}

func (c SHexistsKey) Field(field string) SHexistsField {
	c.cs.s = append(c.cs.s, field)
	return (SHexistsField)(c)
}

type Hget Completed

type SHget SCompleted

func (b *Builder) Hget() (c Hget) {
	c = Hget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HGET")
	return c
}

func (b *SBuilder) Hget() (c SHget) {
	c = SHget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HGET")
	return c
}

func (c Hget) Key(key string) HgetKey {
	c.cs.s = append(c.cs.s, key)
	return (HgetKey)(c)
}

func (c SHget) Key(key string) SHgetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHgetKey)(c)
}

type HgetField Completed

type SHgetField SCompleted

func (c HgetField) Build() Completed {
	return Completed(c)
}

func (c SHgetField) Build() SCompleted {
	return SCompleted(c)
}

func (c HgetField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHgetField) Cache() SCacheable {
	return SCacheable(c)
}

type HgetKey Completed

type SHgetKey SCompleted

func (c HgetKey) Field(field string) HgetField {
	c.cs.s = append(c.cs.s, field)
	return (HgetField)(c)
}

func (c SHgetKey) Field(field string) SHgetField {
	c.cs.s = append(c.cs.s, field)
	return (SHgetField)(c)
}

type Hgetall Completed

type SHgetall SCompleted

func (b *Builder) Hgetall() (c Hgetall) {
	c = Hgetall{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HGETALL")
	return c
}

func (b *SBuilder) Hgetall() (c SHgetall) {
	c = SHgetall{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HGETALL")
	return c
}

func (c Hgetall) Key(key string) HgetallKey {
	c.cs.s = append(c.cs.s, key)
	return (HgetallKey)(c)
}

func (c SHgetall) Key(key string) SHgetallKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHgetallKey)(c)
}

type HgetallKey Completed

type SHgetallKey SCompleted

func (c HgetallKey) Build() Completed {
	return Completed(c)
}

func (c SHgetallKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HgetallKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHgetallKey) Cache() SCacheable {
	return SCacheable(c)
}

type Hincrby Completed

type SHincrby SCompleted

func (b *Builder) Hincrby() (c Hincrby) {
	c = Hincrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HINCRBY")
	return c
}

func (b *SBuilder) Hincrby() (c SHincrby) {
	c = SHincrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HINCRBY")
	return c
}

func (c Hincrby) Key(key string) HincrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (HincrbyKey)(c)
}

func (c SHincrby) Key(key string) SHincrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHincrbyKey)(c)
}

type HincrbyField Completed

type SHincrbyField SCompleted

func (c HincrbyField) Increment(increment int64) HincrbyIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (HincrbyIncrement)(c)
}

func (c SHincrbyField) Increment(increment int64) SHincrbyIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (SHincrbyIncrement)(c)
}

type HincrbyIncrement Completed

type SHincrbyIncrement SCompleted

func (c HincrbyIncrement) Build() Completed {
	return Completed(c)
}

func (c SHincrbyIncrement) Build() SCompleted {
	return SCompleted(c)
}

type HincrbyKey Completed

type SHincrbyKey SCompleted

func (c HincrbyKey) Field(field string) HincrbyField {
	c.cs.s = append(c.cs.s, field)
	return (HincrbyField)(c)
}

func (c SHincrbyKey) Field(field string) SHincrbyField {
	c.cs.s = append(c.cs.s, field)
	return (SHincrbyField)(c)
}

type Hincrbyfloat Completed

type SHincrbyfloat SCompleted

func (b *Builder) Hincrbyfloat() (c Hincrbyfloat) {
	c = Hincrbyfloat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HINCRBYFLOAT")
	return c
}

func (b *SBuilder) Hincrbyfloat() (c SHincrbyfloat) {
	c = SHincrbyfloat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HINCRBYFLOAT")
	return c
}

func (c Hincrbyfloat) Key(key string) HincrbyfloatKey {
	c.cs.s = append(c.cs.s, key)
	return (HincrbyfloatKey)(c)
}

func (c SHincrbyfloat) Key(key string) SHincrbyfloatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHincrbyfloatKey)(c)
}

type HincrbyfloatField Completed

type SHincrbyfloatField SCompleted

func (c HincrbyfloatField) Increment(increment float64) HincrbyfloatIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(increment, 'f', -1, 64))
	return (HincrbyfloatIncrement)(c)
}

func (c SHincrbyfloatField) Increment(increment float64) SHincrbyfloatIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(increment, 'f', -1, 64))
	return (SHincrbyfloatIncrement)(c)
}

type HincrbyfloatIncrement Completed

type SHincrbyfloatIncrement SCompleted

func (c HincrbyfloatIncrement) Build() Completed {
	return Completed(c)
}

func (c SHincrbyfloatIncrement) Build() SCompleted {
	return SCompleted(c)
}

type HincrbyfloatKey Completed

type SHincrbyfloatKey SCompleted

func (c HincrbyfloatKey) Field(field string) HincrbyfloatField {
	c.cs.s = append(c.cs.s, field)
	return (HincrbyfloatField)(c)
}

func (c SHincrbyfloatKey) Field(field string) SHincrbyfloatField {
	c.cs.s = append(c.cs.s, field)
	return (SHincrbyfloatField)(c)
}

type Hkeys Completed

type SHkeys SCompleted

func (b *Builder) Hkeys() (c Hkeys) {
	c = Hkeys{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HKEYS")
	return c
}

func (b *SBuilder) Hkeys() (c SHkeys) {
	c = SHkeys{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HKEYS")
	return c
}

func (c Hkeys) Key(key string) HkeysKey {
	c.cs.s = append(c.cs.s, key)
	return (HkeysKey)(c)
}

func (c SHkeys) Key(key string) SHkeysKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHkeysKey)(c)
}

type HkeysKey Completed

type SHkeysKey SCompleted

func (c HkeysKey) Build() Completed {
	return Completed(c)
}

func (c SHkeysKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HkeysKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHkeysKey) Cache() SCacheable {
	return SCacheable(c)
}

type Hlen Completed

type SHlen SCompleted

func (b *Builder) Hlen() (c Hlen) {
	c = Hlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HLEN")
	return c
}

func (b *SBuilder) Hlen() (c SHlen) {
	c = SHlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HLEN")
	return c
}

func (c Hlen) Key(key string) HlenKey {
	c.cs.s = append(c.cs.s, key)
	return (HlenKey)(c)
}

func (c SHlen) Key(key string) SHlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHlenKey)(c)
}

type HlenKey Completed

type SHlenKey SCompleted

func (c HlenKey) Build() Completed {
	return Completed(c)
}

func (c SHlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type Hmget Completed

type SHmget SCompleted

func (b *Builder) Hmget() (c Hmget) {
	c = Hmget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HMGET")
	return c
}

func (b *SBuilder) Hmget() (c SHmget) {
	c = SHmget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HMGET")
	return c
}

func (c Hmget) Key(key string) HmgetKey {
	c.cs.s = append(c.cs.s, key)
	return (HmgetKey)(c)
}

func (c SHmget) Key(key string) SHmgetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHmgetKey)(c)
}

type HmgetField Completed

type SHmgetField SCompleted

func (c HmgetField) Field(field ...string) HmgetField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c SHmgetField) Field(field ...string) SHmgetField {
	c.cs.s = append(c.cs.s, field...)
	return c
}

func (c HmgetField) Build() Completed {
	return Completed(c)
}

func (c SHmgetField) Build() SCompleted {
	return SCompleted(c)
}

func (c HmgetField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHmgetField) Cache() SCacheable {
	return SCacheable(c)
}

type HmgetKey Completed

type SHmgetKey SCompleted

func (c HmgetKey) Field(field ...string) HmgetField {
	c.cs.s = append(c.cs.s, field...)
	return (HmgetField)(c)
}

func (c SHmgetKey) Field(field ...string) SHmgetField {
	c.cs.s = append(c.cs.s, field...)
	return (SHmgetField)(c)
}

type Hmset Completed

type SHmset SCompleted

func (b *Builder) Hmset() (c Hmset) {
	c = Hmset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HMSET")
	return c
}

func (b *SBuilder) Hmset() (c SHmset) {
	c = SHmset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HMSET")
	return c
}

func (c Hmset) Key(key string) HmsetKey {
	c.cs.s = append(c.cs.s, key)
	return (HmsetKey)(c)
}

func (c SHmset) Key(key string) SHmsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHmsetKey)(c)
}

type HmsetFieldValue Completed

type SHmsetFieldValue SCompleted

func (c HmsetFieldValue) FieldValue(field string, value string) HmsetFieldValue {
	c.cs.s = append(c.cs.s, field, value)
	return c
}

func (c SHmsetFieldValue) FieldValue(field string, value string) SHmsetFieldValue {
	c.cs.s = append(c.cs.s, field, value)
	return c
}

func (c HmsetFieldValue) Build() Completed {
	return Completed(c)
}

func (c SHmsetFieldValue) Build() SCompleted {
	return SCompleted(c)
}

type HmsetKey Completed

type SHmsetKey SCompleted

func (c HmsetKey) FieldValue() HmsetFieldValue {
	return (HmsetFieldValue)(c)
}

func (c SHmsetKey) FieldValue() SHmsetFieldValue {
	return (SHmsetFieldValue)(c)
}

type Hrandfield Completed

type SHrandfield SCompleted

func (b *Builder) Hrandfield() (c Hrandfield) {
	c = Hrandfield{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HRANDFIELD")
	return c
}

func (b *SBuilder) Hrandfield() (c SHrandfield) {
	c = SHrandfield{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HRANDFIELD")
	return c
}

func (c Hrandfield) Key(key string) HrandfieldKey {
	c.cs.s = append(c.cs.s, key)
	return (HrandfieldKey)(c)
}

func (c SHrandfield) Key(key string) SHrandfieldKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHrandfieldKey)(c)
}

type HrandfieldKey Completed

type SHrandfieldKey SCompleted

func (c HrandfieldKey) Count(count int64) HrandfieldOptionsCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (HrandfieldOptionsCount)(c)
}

func (c SHrandfieldKey) Count(count int64) SHrandfieldOptionsCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SHrandfieldOptionsCount)(c)
}

func (c HrandfieldKey) Build() Completed {
	return Completed(c)
}

func (c SHrandfieldKey) Build() SCompleted {
	return SCompleted(c)
}

type HrandfieldOptionsCount Completed

type SHrandfieldOptionsCount SCompleted

func (c HrandfieldOptionsCount) Withvalues() HrandfieldOptionsWithvalues {
	c.cs.s = append(c.cs.s, "WITHVALUES")
	return (HrandfieldOptionsWithvalues)(c)
}

func (c SHrandfieldOptionsCount) Withvalues() SHrandfieldOptionsWithvalues {
	c.cs.s = append(c.cs.s, "WITHVALUES")
	return (SHrandfieldOptionsWithvalues)(c)
}

func (c HrandfieldOptionsCount) Build() Completed {
	return Completed(c)
}

func (c SHrandfieldOptionsCount) Build() SCompleted {
	return SCompleted(c)
}

type HrandfieldOptionsWithvalues Completed

type SHrandfieldOptionsWithvalues SCompleted

func (c HrandfieldOptionsWithvalues) Build() Completed {
	return Completed(c)
}

func (c SHrandfieldOptionsWithvalues) Build() SCompleted {
	return SCompleted(c)
}

type Hscan Completed

type SHscan SCompleted

func (b *Builder) Hscan() (c Hscan) {
	c = Hscan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HSCAN")
	return c
}

func (b *SBuilder) Hscan() (c SHscan) {
	c = SHscan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HSCAN")
	return c
}

func (c Hscan) Key(key string) HscanKey {
	c.cs.s = append(c.cs.s, key)
	return (HscanKey)(c)
}

func (c SHscan) Key(key string) SHscanKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHscanKey)(c)
}

type HscanCount Completed

type SHscanCount SCompleted

func (c HscanCount) Build() Completed {
	return Completed(c)
}

func (c SHscanCount) Build() SCompleted {
	return SCompleted(c)
}

type HscanCursor Completed

type SHscanCursor SCompleted

func (c HscanCursor) Match(pattern string) HscanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (HscanMatch)(c)
}

func (c SHscanCursor) Match(pattern string) SHscanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (SHscanMatch)(c)
}

func (c HscanCursor) Count(count int64) HscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (HscanCount)(c)
}

func (c SHscanCursor) Count(count int64) SHscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SHscanCount)(c)
}

func (c HscanCursor) Build() Completed {
	return Completed(c)
}

func (c SHscanCursor) Build() SCompleted {
	return SCompleted(c)
}

type HscanKey Completed

type SHscanKey SCompleted

func (c HscanKey) Cursor(cursor int64) HscanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (HscanCursor)(c)
}

func (c SHscanKey) Cursor(cursor int64) SHscanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (SHscanCursor)(c)
}

type HscanMatch Completed

type SHscanMatch SCompleted

func (c HscanMatch) Count(count int64) HscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (HscanCount)(c)
}

func (c SHscanMatch) Count(count int64) SHscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SHscanCount)(c)
}

func (c HscanMatch) Build() Completed {
	return Completed(c)
}

func (c SHscanMatch) Build() SCompleted {
	return SCompleted(c)
}

type Hset Completed

type SHset SCompleted

func (b *Builder) Hset() (c Hset) {
	c = Hset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HSET")
	return c
}

func (b *SBuilder) Hset() (c SHset) {
	c = SHset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HSET")
	return c
}

func (c Hset) Key(key string) HsetKey {
	c.cs.s = append(c.cs.s, key)
	return (HsetKey)(c)
}

func (c SHset) Key(key string) SHsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHsetKey)(c)
}

type HsetFieldValue Completed

type SHsetFieldValue SCompleted

func (c HsetFieldValue) FieldValue(field string, value string) HsetFieldValue {
	c.cs.s = append(c.cs.s, field, value)
	return c
}

func (c SHsetFieldValue) FieldValue(field string, value string) SHsetFieldValue {
	c.cs.s = append(c.cs.s, field, value)
	return c
}

func (c HsetFieldValue) Build() Completed {
	return Completed(c)
}

func (c SHsetFieldValue) Build() SCompleted {
	return SCompleted(c)
}

type HsetKey Completed

type SHsetKey SCompleted

func (c HsetKey) FieldValue() HsetFieldValue {
	return (HsetFieldValue)(c)
}

func (c SHsetKey) FieldValue() SHsetFieldValue {
	return (SHsetFieldValue)(c)
}

type Hsetnx Completed

type SHsetnx SCompleted

func (b *Builder) Hsetnx() (c Hsetnx) {
	c = Hsetnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HSETNX")
	return c
}

func (b *SBuilder) Hsetnx() (c SHsetnx) {
	c = SHsetnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "HSETNX")
	return c
}

func (c Hsetnx) Key(key string) HsetnxKey {
	c.cs.s = append(c.cs.s, key)
	return (HsetnxKey)(c)
}

func (c SHsetnx) Key(key string) SHsetnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHsetnxKey)(c)
}

type HsetnxField Completed

type SHsetnxField SCompleted

func (c HsetnxField) Value(value string) HsetnxValue {
	c.cs.s = append(c.cs.s, value)
	return (HsetnxValue)(c)
}

func (c SHsetnxField) Value(value string) SHsetnxValue {
	c.cs.s = append(c.cs.s, value)
	return (SHsetnxValue)(c)
}

type HsetnxKey Completed

type SHsetnxKey SCompleted

func (c HsetnxKey) Field(field string) HsetnxField {
	c.cs.s = append(c.cs.s, field)
	return (HsetnxField)(c)
}

func (c SHsetnxKey) Field(field string) SHsetnxField {
	c.cs.s = append(c.cs.s, field)
	return (SHsetnxField)(c)
}

type HsetnxValue Completed

type SHsetnxValue SCompleted

func (c HsetnxValue) Build() Completed {
	return Completed(c)
}

func (c SHsetnxValue) Build() SCompleted {
	return SCompleted(c)
}

type Hstrlen Completed

type SHstrlen SCompleted

func (b *Builder) Hstrlen() (c Hstrlen) {
	c = Hstrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HSTRLEN")
	return c
}

func (b *SBuilder) Hstrlen() (c SHstrlen) {
	c = SHstrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HSTRLEN")
	return c
}

func (c Hstrlen) Key(key string) HstrlenKey {
	c.cs.s = append(c.cs.s, key)
	return (HstrlenKey)(c)
}

func (c SHstrlen) Key(key string) SHstrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHstrlenKey)(c)
}

type HstrlenField Completed

type SHstrlenField SCompleted

func (c HstrlenField) Build() Completed {
	return Completed(c)
}

func (c SHstrlenField) Build() SCompleted {
	return SCompleted(c)
}

func (c HstrlenField) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHstrlenField) Cache() SCacheable {
	return SCacheable(c)
}

type HstrlenKey Completed

type SHstrlenKey SCompleted

func (c HstrlenKey) Field(field string) HstrlenField {
	c.cs.s = append(c.cs.s, field)
	return (HstrlenField)(c)
}

func (c SHstrlenKey) Field(field string) SHstrlenField {
	c.cs.s = append(c.cs.s, field)
	return (SHstrlenField)(c)
}

type Hvals Completed

type SHvals SCompleted

func (b *Builder) Hvals() (c Hvals) {
	c = Hvals{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HVALS")
	return c
}

func (b *SBuilder) Hvals() (c SHvals) {
	c = SHvals{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "HVALS")
	return c
}

func (c Hvals) Key(key string) HvalsKey {
	c.cs.s = append(c.cs.s, key)
	return (HvalsKey)(c)
}

func (c SHvals) Key(key string) SHvalsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SHvalsKey)(c)
}

type HvalsKey Completed

type SHvalsKey SCompleted

func (c HvalsKey) Build() Completed {
	return Completed(c)
}

func (c SHvalsKey) Build() SCompleted {
	return SCompleted(c)
}

func (c HvalsKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SHvalsKey) Cache() SCacheable {
	return SCacheable(c)
}

type Incr Completed

type SIncr SCompleted

func (b *Builder) Incr() (c Incr) {
	c = Incr{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INCR")
	return c
}

func (b *SBuilder) Incr() (c SIncr) {
	c = SIncr{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INCR")
	return c
}

func (c Incr) Key(key string) IncrKey {
	c.cs.s = append(c.cs.s, key)
	return (IncrKey)(c)
}

func (c SIncr) Key(key string) SIncrKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SIncrKey)(c)
}

type IncrKey Completed

type SIncrKey SCompleted

func (c IncrKey) Build() Completed {
	return Completed(c)
}

func (c SIncrKey) Build() SCompleted {
	return SCompleted(c)
}

type Incrby Completed

type SIncrby SCompleted

func (b *Builder) Incrby() (c Incrby) {
	c = Incrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INCRBY")
	return c
}

func (b *SBuilder) Incrby() (c SIncrby) {
	c = SIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INCRBY")
	return c
}

func (c Incrby) Key(key string) IncrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (IncrbyKey)(c)
}

func (c SIncrby) Key(key string) SIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SIncrbyKey)(c)
}

type IncrbyIncrement Completed

type SIncrbyIncrement SCompleted

func (c IncrbyIncrement) Build() Completed {
	return Completed(c)
}

func (c SIncrbyIncrement) Build() SCompleted {
	return SCompleted(c)
}

type IncrbyKey Completed

type SIncrbyKey SCompleted

func (c IncrbyKey) Increment(increment int64) IncrbyIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (IncrbyIncrement)(c)
}

func (c SIncrbyKey) Increment(increment int64) SIncrbyIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (SIncrbyIncrement)(c)
}

type Incrbyfloat Completed

type SIncrbyfloat SCompleted

func (b *Builder) Incrbyfloat() (c Incrbyfloat) {
	c = Incrbyfloat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INCRBYFLOAT")
	return c
}

func (b *SBuilder) Incrbyfloat() (c SIncrbyfloat) {
	c = SIncrbyfloat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INCRBYFLOAT")
	return c
}

func (c Incrbyfloat) Key(key string) IncrbyfloatKey {
	c.cs.s = append(c.cs.s, key)
	return (IncrbyfloatKey)(c)
}

func (c SIncrbyfloat) Key(key string) SIncrbyfloatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SIncrbyfloatKey)(c)
}

type IncrbyfloatIncrement Completed

type SIncrbyfloatIncrement SCompleted

func (c IncrbyfloatIncrement) Build() Completed {
	return Completed(c)
}

func (c SIncrbyfloatIncrement) Build() SCompleted {
	return SCompleted(c)
}

type IncrbyfloatKey Completed

type SIncrbyfloatKey SCompleted

func (c IncrbyfloatKey) Increment(increment float64) IncrbyfloatIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(increment, 'f', -1, 64))
	return (IncrbyfloatIncrement)(c)
}

func (c SIncrbyfloatKey) Increment(increment float64) SIncrbyfloatIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(increment, 'f', -1, 64))
	return (SIncrbyfloatIncrement)(c)
}

type Info Completed

type SInfo SCompleted

func (b *Builder) Info() (c Info) {
	c = Info{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INFO")
	return c
}

func (b *SBuilder) Info() (c SInfo) {
	c = SInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "INFO")
	return c
}

func (c Info) Section(section string) InfoSection {
	c.cs.s = append(c.cs.s, section)
	return (InfoSection)(c)
}

func (c SInfo) Section(section string) SInfoSection {
	c.cs.s = append(c.cs.s, section)
	return (SInfoSection)(c)
}

func (c Info) Build() Completed {
	return Completed(c)
}

func (c SInfo) Build() SCompleted {
	return SCompleted(c)
}

type InfoSection Completed

type SInfoSection SCompleted

func (c InfoSection) Build() Completed {
	return Completed(c)
}

func (c SInfoSection) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrappend Completed

type SJsonArrappend SCompleted

func (b *Builder) JsonArrappend() (c JsonArrappend) {
	c = JsonArrappend{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRAPPEND")
	return c
}

func (b *SBuilder) JsonArrappend() (c SJsonArrappend) {
	c = SJsonArrappend{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRAPPEND")
	return c
}

func (c JsonArrappend) Key(key string) JsonArrappendKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonArrappendKey)(c)
}

func (c SJsonArrappend) Key(key string) SJsonArrappendKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonArrappendKey)(c)
}

type JsonArrappendKey Completed

type SJsonArrappendKey SCompleted

func (c JsonArrappendKey) Path(path string) JsonArrappendPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonArrappendPath)(c)
}

func (c SJsonArrappendKey) Path(path string) SJsonArrappendPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonArrappendPath)(c)
}

func (c JsonArrappendKey) Value(value ...string) JsonArrappendValue {
	c.cs.s = append(c.cs.s, value...)
	return (JsonArrappendValue)(c)
}

func (c SJsonArrappendKey) Value(value ...string) SJsonArrappendValue {
	c.cs.s = append(c.cs.s, value...)
	return (SJsonArrappendValue)(c)
}

type JsonArrappendPath Completed

type SJsonArrappendPath SCompleted

func (c JsonArrappendPath) Value(value ...string) JsonArrappendValue {
	c.cs.s = append(c.cs.s, value...)
	return (JsonArrappendValue)(c)
}

func (c SJsonArrappendPath) Value(value ...string) SJsonArrappendValue {
	c.cs.s = append(c.cs.s, value...)
	return (SJsonArrappendValue)(c)
}

type JsonArrappendValue Completed

type SJsonArrappendValue SCompleted

func (c JsonArrappendValue) Value(value ...string) JsonArrappendValue {
	c.cs.s = append(c.cs.s, value...)
	return c
}

func (c SJsonArrappendValue) Value(value ...string) SJsonArrappendValue {
	c.cs.s = append(c.cs.s, value...)
	return c
}

func (c JsonArrappendValue) Build() Completed {
	return Completed(c)
}

func (c SJsonArrappendValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrindex Completed

type SJsonArrindex SCompleted

func (b *Builder) JsonArrindex() (c JsonArrindex) {
	c = JsonArrindex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.ARRINDEX")
	return c
}

func (b *SBuilder) JsonArrindex() (c SJsonArrindex) {
	c = SJsonArrindex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.ARRINDEX")
	return c
}

func (c JsonArrindex) Key(key string) JsonArrindexKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonArrindexKey)(c)
}

func (c SJsonArrindex) Key(key string) SJsonArrindexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonArrindexKey)(c)
}

type JsonArrindexKey Completed

type SJsonArrindexKey SCompleted

func (c JsonArrindexKey) Path(path string) JsonArrindexPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonArrindexPath)(c)
}

func (c SJsonArrindexKey) Path(path string) SJsonArrindexPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonArrindexPath)(c)
}

type JsonArrindexPath Completed

type SJsonArrindexPath SCompleted

func (c JsonArrindexPath) Value(value string) JsonArrindexValue {
	c.cs.s = append(c.cs.s, value)
	return (JsonArrindexValue)(c)
}

func (c SJsonArrindexPath) Value(value string) SJsonArrindexValue {
	c.cs.s = append(c.cs.s, value)
	return (SJsonArrindexValue)(c)
}

type JsonArrindexStartStart Completed

type SJsonArrindexStartStart SCompleted

func (c JsonArrindexStartStart) Stop(stop int64) JsonArrindexStartStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (JsonArrindexStartStop)(c)
}

func (c SJsonArrindexStartStart) Stop(stop int64) SJsonArrindexStartStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (SJsonArrindexStartStop)(c)
}

func (c JsonArrindexStartStart) Build() Completed {
	return Completed(c)
}

func (c SJsonArrindexStartStart) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrindexStartStart) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrindexStartStart) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrindexStartStop Completed

type SJsonArrindexStartStop SCompleted

func (c JsonArrindexStartStop) Build() Completed {
	return Completed(c)
}

func (c SJsonArrindexStartStop) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrindexStartStop) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrindexStartStop) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrindexValue Completed

type SJsonArrindexValue SCompleted

func (c JsonArrindexValue) Start(start int64) JsonArrindexStartStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (JsonArrindexStartStart)(c)
}

func (c SJsonArrindexValue) Start(start int64) SJsonArrindexStartStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SJsonArrindexStartStart)(c)
}

func (c JsonArrindexValue) Build() Completed {
	return Completed(c)
}

func (c SJsonArrindexValue) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrindexValue) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrindexValue) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrinsert Completed

type SJsonArrinsert SCompleted

func (b *Builder) JsonArrinsert() (c JsonArrinsert) {
	c = JsonArrinsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRINSERT")
	return c
}

func (b *SBuilder) JsonArrinsert() (c SJsonArrinsert) {
	c = SJsonArrinsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRINSERT")
	return c
}

func (c JsonArrinsert) Key(key string) JsonArrinsertKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonArrinsertKey)(c)
}

func (c SJsonArrinsert) Key(key string) SJsonArrinsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonArrinsertKey)(c)
}

type JsonArrinsertIndex Completed

type SJsonArrinsertIndex SCompleted

func (c JsonArrinsertIndex) Value(value ...string) JsonArrinsertValue {
	c.cs.s = append(c.cs.s, value...)
	return (JsonArrinsertValue)(c)
}

func (c SJsonArrinsertIndex) Value(value ...string) SJsonArrinsertValue {
	c.cs.s = append(c.cs.s, value...)
	return (SJsonArrinsertValue)(c)
}

type JsonArrinsertKey Completed

type SJsonArrinsertKey SCompleted

func (c JsonArrinsertKey) Path(path string) JsonArrinsertPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonArrinsertPath)(c)
}

func (c SJsonArrinsertKey) Path(path string) SJsonArrinsertPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonArrinsertPath)(c)
}

type JsonArrinsertPath Completed

type SJsonArrinsertPath SCompleted

func (c JsonArrinsertPath) Index(index int64) JsonArrinsertIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (JsonArrinsertIndex)(c)
}

func (c SJsonArrinsertPath) Index(index int64) SJsonArrinsertIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (SJsonArrinsertIndex)(c)
}

type JsonArrinsertValue Completed

type SJsonArrinsertValue SCompleted

func (c JsonArrinsertValue) Value(value ...string) JsonArrinsertValue {
	c.cs.s = append(c.cs.s, value...)
	return c
}

func (c SJsonArrinsertValue) Value(value ...string) SJsonArrinsertValue {
	c.cs.s = append(c.cs.s, value...)
	return c
}

func (c JsonArrinsertValue) Build() Completed {
	return Completed(c)
}

func (c SJsonArrinsertValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrlen Completed

type SJsonArrlen SCompleted

func (b *Builder) JsonArrlen() (c JsonArrlen) {
	c = JsonArrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.ARRLEN")
	return c
}

func (b *SBuilder) JsonArrlen() (c SJsonArrlen) {
	c = SJsonArrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.ARRLEN")
	return c
}

func (c JsonArrlen) Key(key string) JsonArrlenKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonArrlenKey)(c)
}

func (c SJsonArrlen) Key(key string) SJsonArrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonArrlenKey)(c)
}

type JsonArrlenKey Completed

type SJsonArrlenKey SCompleted

func (c JsonArrlenKey) Path(path ...string) JsonArrlenPath {
	c.cs.s = append(c.cs.s, path...)
	return (JsonArrlenPath)(c)
}

func (c SJsonArrlenKey) Path(path ...string) SJsonArrlenPath {
	c.cs.s = append(c.cs.s, path...)
	return (SJsonArrlenPath)(c)
}

type JsonArrlenPath Completed

type SJsonArrlenPath SCompleted

func (c JsonArrlenPath) Path(path ...string) JsonArrlenPath {
	c.cs.s = append(c.cs.s, path...)
	return c
}

func (c SJsonArrlenPath) Path(path ...string) SJsonArrlenPath {
	c.cs.s = append(c.cs.s, path...)
	return c
}

func (c JsonArrlenPath) Build() Completed {
	return Completed(c)
}

func (c SJsonArrlenPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonArrlenPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonArrlenPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonArrpop Completed

type SJsonArrpop SCompleted

func (b *Builder) JsonArrpop() (c JsonArrpop) {
	c = JsonArrpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRPOP")
	return c
}

func (b *SBuilder) JsonArrpop() (c SJsonArrpop) {
	c = SJsonArrpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRPOP")
	return c
}

func (c JsonArrpop) Key(key string) JsonArrpopKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonArrpopKey)(c)
}

func (c SJsonArrpop) Key(key string) SJsonArrpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonArrpopKey)(c)
}

type JsonArrpopKey Completed

type SJsonArrpopKey SCompleted

func (c JsonArrpopKey) Path(path string) JsonArrpopPathPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonArrpopPathPath)(c)
}

func (c SJsonArrpopKey) Path(path string) SJsonArrpopPathPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonArrpopPathPath)(c)
}

func (c JsonArrpopKey) Build() Completed {
	return Completed(c)
}

func (c SJsonArrpopKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrpopPathIndex Completed

type SJsonArrpopPathIndex SCompleted

func (c JsonArrpopPathIndex) Build() Completed {
	return Completed(c)
}

func (c SJsonArrpopPathIndex) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrpopPathPath Completed

type SJsonArrpopPathPath SCompleted

func (c JsonArrpopPathPath) Index(index int64) JsonArrpopPathIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (JsonArrpopPathIndex)(c)
}

func (c SJsonArrpopPathPath) Index(index int64) SJsonArrpopPathIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (SJsonArrpopPathIndex)(c)
}

func (c JsonArrpopPathPath) Build() Completed {
	return Completed(c)
}

func (c SJsonArrpopPathPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonArrtrim Completed

type SJsonArrtrim SCompleted

func (b *Builder) JsonArrtrim() (c JsonArrtrim) {
	c = JsonArrtrim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRTRIM")
	return c
}

func (b *SBuilder) JsonArrtrim() (c SJsonArrtrim) {
	c = SJsonArrtrim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.ARRTRIM")
	return c
}

func (c JsonArrtrim) Key(key string) JsonArrtrimKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonArrtrimKey)(c)
}

func (c SJsonArrtrim) Key(key string) SJsonArrtrimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonArrtrimKey)(c)
}

type JsonArrtrimKey Completed

type SJsonArrtrimKey SCompleted

func (c JsonArrtrimKey) Path(path string) JsonArrtrimPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonArrtrimPath)(c)
}

func (c SJsonArrtrimKey) Path(path string) SJsonArrtrimPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonArrtrimPath)(c)
}

type JsonArrtrimPath Completed

type SJsonArrtrimPath SCompleted

func (c JsonArrtrimPath) Start(start int64) JsonArrtrimStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (JsonArrtrimStart)(c)
}

func (c SJsonArrtrimPath) Start(start int64) SJsonArrtrimStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SJsonArrtrimStart)(c)
}

type JsonArrtrimStart Completed

type SJsonArrtrimStart SCompleted

func (c JsonArrtrimStart) Stop(stop int64) JsonArrtrimStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (JsonArrtrimStop)(c)
}

func (c SJsonArrtrimStart) Stop(stop int64) SJsonArrtrimStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (SJsonArrtrimStop)(c)
}

type JsonArrtrimStop Completed

type SJsonArrtrimStop SCompleted

func (c JsonArrtrimStop) Build() Completed {
	return Completed(c)
}

func (c SJsonArrtrimStop) Build() SCompleted {
	return SCompleted(c)
}

type JsonClear Completed

type SJsonClear SCompleted

func (b *Builder) JsonClear() (c JsonClear) {
	c = JsonClear{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.CLEAR")
	return c
}

func (b *SBuilder) JsonClear() (c SJsonClear) {
	c = SJsonClear{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.CLEAR")
	return c
}

func (c JsonClear) Key(key string) JsonClearKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonClearKey)(c)
}

func (c SJsonClear) Key(key string) SJsonClearKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonClearKey)(c)
}

type JsonClearKey Completed

type SJsonClearKey SCompleted

func (c JsonClearKey) Path(path string) JsonClearPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonClearPath)(c)
}

func (c SJsonClearKey) Path(path string) SJsonClearPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonClearPath)(c)
}

func (c JsonClearKey) Build() Completed {
	return Completed(c)
}

func (c SJsonClearKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonClearPath Completed

type SJsonClearPath SCompleted

func (c JsonClearPath) Build() Completed {
	return Completed(c)
}

func (c SJsonClearPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonDel Completed

type SJsonDel SCompleted

func (b *Builder) JsonDel() (c JsonDel) {
	c = JsonDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.DEL")
	return c
}

func (b *SBuilder) JsonDel() (c SJsonDel) {
	c = SJsonDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.DEL")
	return c
}

func (c JsonDel) Key(key string) JsonDelKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonDelKey)(c)
}

func (c SJsonDel) Key(key string) SJsonDelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonDelKey)(c)
}

type JsonDelKey Completed

type SJsonDelKey SCompleted

func (c JsonDelKey) Path(path string) JsonDelPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonDelPath)(c)
}

func (c SJsonDelKey) Path(path string) SJsonDelPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonDelPath)(c)
}

func (c JsonDelKey) Build() Completed {
	return Completed(c)
}

func (c SJsonDelKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonDelPath Completed

type SJsonDelPath SCompleted

func (c JsonDelPath) Build() Completed {
	return Completed(c)
}

func (c SJsonDelPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonGet Completed

type SJsonGet SCompleted

func (b *Builder) JsonGet() (c JsonGet) {
	c = JsonGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.GET")
	return c
}

func (b *SBuilder) JsonGet() (c SJsonGet) {
	c = SJsonGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.GET")
	return c
}

func (c JsonGet) Key(key string) JsonGetKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonGetKey)(c)
}

func (c SJsonGet) Key(key string) SJsonGetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonGetKey)(c)
}

type JsonGetIndent Completed

type SJsonGetIndent SCompleted

func (c JsonGetIndent) Newline(newline string) JsonGetNewline {
	c.cs.s = append(c.cs.s, "NEWLINE", newline)
	return (JsonGetNewline)(c)
}

func (c SJsonGetIndent) Newline(newline string) SJsonGetNewline {
	c.cs.s = append(c.cs.s, "NEWLINE", newline)
	return (SJsonGetNewline)(c)
}

func (c JsonGetIndent) Space(space string) JsonGetSpace {
	c.cs.s = append(c.cs.s, "SPACE", space)
	return (JsonGetSpace)(c)
}

func (c SJsonGetIndent) Space(space string) SJsonGetSpace {
	c.cs.s = append(c.cs.s, "SPACE", space)
	return (SJsonGetSpace)(c)
}

func (c JsonGetIndent) Paths(paths ...string) JsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetIndent) Paths(paths ...string) SJsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetIndent) Build() Completed {
	return Completed(c)
}

func (c SJsonGetIndent) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetIndent) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetIndent) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetKey Completed

type SJsonGetKey SCompleted

func (c JsonGetKey) Indent(indent string) JsonGetIndent {
	c.cs.s = append(c.cs.s, "INDENT", indent)
	return (JsonGetIndent)(c)
}

func (c SJsonGetKey) Indent(indent string) SJsonGetIndent {
	c.cs.s = append(c.cs.s, "INDENT", indent)
	return (SJsonGetIndent)(c)
}

func (c JsonGetKey) Newline(newline string) JsonGetNewline {
	c.cs.s = append(c.cs.s, "NEWLINE", newline)
	return (JsonGetNewline)(c)
}

func (c SJsonGetKey) Newline(newline string) SJsonGetNewline {
	c.cs.s = append(c.cs.s, "NEWLINE", newline)
	return (SJsonGetNewline)(c)
}

func (c JsonGetKey) Space(space string) JsonGetSpace {
	c.cs.s = append(c.cs.s, "SPACE", space)
	return (JsonGetSpace)(c)
}

func (c SJsonGetKey) Space(space string) SJsonGetSpace {
	c.cs.s = append(c.cs.s, "SPACE", space)
	return (SJsonGetSpace)(c)
}

func (c JsonGetKey) Paths(paths ...string) JsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetKey) Paths(paths ...string) SJsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetKey) Build() Completed {
	return Completed(c)
}

func (c SJsonGetKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetNewline Completed

type SJsonGetNewline SCompleted

func (c JsonGetNewline) Space(space string) JsonGetSpace {
	c.cs.s = append(c.cs.s, "SPACE", space)
	return (JsonGetSpace)(c)
}

func (c SJsonGetNewline) Space(space string) SJsonGetSpace {
	c.cs.s = append(c.cs.s, "SPACE", space)
	return (SJsonGetSpace)(c)
}

func (c JsonGetNewline) Paths(paths ...string) JsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetNewline) Paths(paths ...string) SJsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetNewline) Build() Completed {
	return Completed(c)
}

func (c SJsonGetNewline) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetNewline) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetNewline) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetPaths Completed

type SJsonGetPaths SCompleted

func (c JsonGetPaths) Paths(paths ...string) JsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return c
}

func (c SJsonGetPaths) Paths(paths ...string) SJsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return c
}

func (c JsonGetPaths) Build() Completed {
	return Completed(c)
}

func (c SJsonGetPaths) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetPaths) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetPaths) Cache() SCacheable {
	return SCacheable(c)
}

type JsonGetSpace Completed

type SJsonGetSpace SCompleted

func (c JsonGetSpace) Paths(paths ...string) JsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (JsonGetPaths)(c)
}

func (c SJsonGetSpace) Paths(paths ...string) SJsonGetPaths {
	c.cs.s = append(c.cs.s, paths...)
	return (SJsonGetPaths)(c)
}

func (c JsonGetSpace) Build() Completed {
	return Completed(c)
}

func (c SJsonGetSpace) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonGetSpace) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonGetSpace) Cache() SCacheable {
	return SCacheable(c)
}

type JsonMget Completed

type SJsonMget SCompleted

func (b *Builder) JsonMget() (c JsonMget) {
	c = JsonMget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.MGET")
	return c
}

func (b *SBuilder) JsonMget() (c SJsonMget) {
	c = SJsonMget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.MGET")
	return c
}

func (c JsonMget) Key(key ...string) JsonMgetKey {
	c.cs.s = append(c.cs.s, key...)
	return (JsonMgetKey)(c)
}

func (c SJsonMget) Key(key ...string) SJsonMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SJsonMgetKey)(c)
}

type JsonMgetKey Completed

type SJsonMgetKey SCompleted

func (c JsonMgetKey) Key(key ...string) JsonMgetKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SJsonMgetKey) Key(key ...string) SJsonMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c JsonMgetKey) Path(path string) JsonMgetPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonMgetPath)(c)
}

func (c SJsonMgetKey) Path(path string) SJsonMgetPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonMgetPath)(c)
}

type JsonMgetPath Completed

type SJsonMgetPath SCompleted

func (c JsonMgetPath) Build() Completed {
	return Completed(c)
}

func (c SJsonMgetPath) Build() SCompleted {
	return SCompleted(c)
}

type JsonNumincrby Completed

type SJsonNumincrby SCompleted

func (b *Builder) JsonNumincrby() (c JsonNumincrby) {
	c = JsonNumincrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.NUMINCRBY")
	return c
}

func (b *SBuilder) JsonNumincrby() (c SJsonNumincrby) {
	c = SJsonNumincrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.NUMINCRBY")
	return c
}

func (c JsonNumincrby) Key(key string) JsonNumincrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonNumincrbyKey)(c)
}

func (c SJsonNumincrby) Key(key string) SJsonNumincrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonNumincrbyKey)(c)
}

type JsonNumincrbyKey Completed

type SJsonNumincrbyKey SCompleted

func (c JsonNumincrbyKey) Path(path string) JsonNumincrbyPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonNumincrbyPath)(c)
}

func (c SJsonNumincrbyKey) Path(path string) SJsonNumincrbyPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonNumincrbyPath)(c)
}

type JsonNumincrbyPath Completed

type SJsonNumincrbyPath SCompleted

func (c JsonNumincrbyPath) Value(value float64) JsonNumincrbyValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (JsonNumincrbyValue)(c)
}

func (c SJsonNumincrbyPath) Value(value float64) SJsonNumincrbyValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (SJsonNumincrbyValue)(c)
}

type JsonNumincrbyValue Completed

type SJsonNumincrbyValue SCompleted

func (c JsonNumincrbyValue) Build() Completed {
	return Completed(c)
}

func (c SJsonNumincrbyValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonObjkeys Completed

type SJsonObjkeys SCompleted

func (b *Builder) JsonObjkeys() (c JsonObjkeys) {
	c = JsonObjkeys{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.OBJKEYS")
	return c
}

func (b *SBuilder) JsonObjkeys() (c SJsonObjkeys) {
	c = SJsonObjkeys{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.OBJKEYS")
	return c
}

func (c JsonObjkeys) Key(key string) JsonObjkeysKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonObjkeysKey)(c)
}

func (c SJsonObjkeys) Key(key string) SJsonObjkeysKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonObjkeysKey)(c)
}

type JsonObjkeysKey Completed

type SJsonObjkeysKey SCompleted

func (c JsonObjkeysKey) Path(path string) JsonObjkeysPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonObjkeysPath)(c)
}

func (c SJsonObjkeysKey) Path(path string) SJsonObjkeysPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonObjkeysPath)(c)
}

func (c JsonObjkeysKey) Build() Completed {
	return Completed(c)
}

func (c SJsonObjkeysKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjkeysKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjkeysKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonObjkeysPath Completed

type SJsonObjkeysPath SCompleted

func (c JsonObjkeysPath) Build() Completed {
	return Completed(c)
}

func (c SJsonObjkeysPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjkeysPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjkeysPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonObjlen Completed

type SJsonObjlen SCompleted

func (b *Builder) JsonObjlen() (c JsonObjlen) {
	c = JsonObjlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.OBJLEN")
	return c
}

func (b *SBuilder) JsonObjlen() (c SJsonObjlen) {
	c = SJsonObjlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.OBJLEN")
	return c
}

func (c JsonObjlen) Key(key string) JsonObjlenKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonObjlenKey)(c)
}

func (c SJsonObjlen) Key(key string) SJsonObjlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonObjlenKey)(c)
}

type JsonObjlenKey Completed

type SJsonObjlenKey SCompleted

func (c JsonObjlenKey) Path(path string) JsonObjlenPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonObjlenPath)(c)
}

func (c SJsonObjlenKey) Path(path string) SJsonObjlenPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonObjlenPath)(c)
}

func (c JsonObjlenKey) Build() Completed {
	return Completed(c)
}

func (c SJsonObjlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonObjlenPath Completed

type SJsonObjlenPath SCompleted

func (c JsonObjlenPath) Build() Completed {
	return Completed(c)
}

func (c SJsonObjlenPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonObjlenPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonObjlenPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonResp Completed

type SJsonResp SCompleted

func (b *Builder) JsonResp() (c JsonResp) {
	c = JsonResp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.RESP")
	return c
}

func (b *SBuilder) JsonResp() (c SJsonResp) {
	c = SJsonResp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.RESP")
	return c
}

func (c JsonResp) Key(key string) JsonRespKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonRespKey)(c)
}

func (c SJsonResp) Key(key string) SJsonRespKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonRespKey)(c)
}

type JsonRespKey Completed

type SJsonRespKey SCompleted

func (c JsonRespKey) Path(path string) JsonRespPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonRespPath)(c)
}

func (c SJsonRespKey) Path(path string) SJsonRespPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonRespPath)(c)
}

func (c JsonRespKey) Build() Completed {
	return Completed(c)
}

func (c SJsonRespKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonRespKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonRespKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonRespPath Completed

type SJsonRespPath SCompleted

func (c JsonRespPath) Build() Completed {
	return Completed(c)
}

func (c SJsonRespPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonRespPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonRespPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonSet Completed

type SJsonSet SCompleted

func (b *Builder) JsonSet() (c JsonSet) {
	c = JsonSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.SET")
	return c
}

func (b *SBuilder) JsonSet() (c SJsonSet) {
	c = SJsonSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.SET")
	return c
}

func (c JsonSet) Key(key string) JsonSetKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonSetKey)(c)
}

func (c SJsonSet) Key(key string) SJsonSetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonSetKey)(c)
}

type JsonSetConditionNx Completed

type SJsonSetConditionNx SCompleted

func (c JsonSetConditionNx) Build() Completed {
	return Completed(c)
}

func (c SJsonSetConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type JsonSetConditionXx Completed

type SJsonSetConditionXx SCompleted

func (c JsonSetConditionXx) Build() Completed {
	return Completed(c)
}

func (c SJsonSetConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type JsonSetKey Completed

type SJsonSetKey SCompleted

func (c JsonSetKey) Path(path string) JsonSetPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonSetPath)(c)
}

func (c SJsonSetKey) Path(path string) SJsonSetPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonSetPath)(c)
}

type JsonSetPath Completed

type SJsonSetPath SCompleted

func (c JsonSetPath) Value(value string) JsonSetValue {
	c.cs.s = append(c.cs.s, value)
	return (JsonSetValue)(c)
}

func (c SJsonSetPath) Value(value string) SJsonSetValue {
	c.cs.s = append(c.cs.s, value)
	return (SJsonSetValue)(c)
}

type JsonSetValue Completed

type SJsonSetValue SCompleted

func (c JsonSetValue) Nx() JsonSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (JsonSetConditionNx)(c)
}

func (c SJsonSetValue) Nx() SJsonSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SJsonSetConditionNx)(c)
}

func (c JsonSetValue) Xx() JsonSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (JsonSetConditionXx)(c)
}

func (c SJsonSetValue) Xx() SJsonSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SJsonSetConditionXx)(c)
}

func (c JsonSetValue) Build() Completed {
	return Completed(c)
}

func (c SJsonSetValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonStrappend Completed

type SJsonStrappend SCompleted

func (b *Builder) JsonStrappend() (c JsonStrappend) {
	c = JsonStrappend{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.STRAPPEND")
	return c
}

func (b *SBuilder) JsonStrappend() (c SJsonStrappend) {
	c = SJsonStrappend{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.STRAPPEND")
	return c
}

func (c JsonStrappend) Key(key string) JsonStrappendKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonStrappendKey)(c)
}

func (c SJsonStrappend) Key(key string) SJsonStrappendKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonStrappendKey)(c)
}

type JsonStrappendKey Completed

type SJsonStrappendKey SCompleted

func (c JsonStrappendKey) Path(path string) JsonStrappendPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonStrappendPath)(c)
}

func (c SJsonStrappendKey) Path(path string) SJsonStrappendPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonStrappendPath)(c)
}

func (c JsonStrappendKey) Value(value string) JsonStrappendValue {
	c.cs.s = append(c.cs.s, value)
	return (JsonStrappendValue)(c)
}

func (c SJsonStrappendKey) Value(value string) SJsonStrappendValue {
	c.cs.s = append(c.cs.s, value)
	return (SJsonStrappendValue)(c)
}

type JsonStrappendPath Completed

type SJsonStrappendPath SCompleted

func (c JsonStrappendPath) Value(value string) JsonStrappendValue {
	c.cs.s = append(c.cs.s, value)
	return (JsonStrappendValue)(c)
}

func (c SJsonStrappendPath) Value(value string) SJsonStrappendValue {
	c.cs.s = append(c.cs.s, value)
	return (SJsonStrappendValue)(c)
}

type JsonStrappendValue Completed

type SJsonStrappendValue SCompleted

func (c JsonStrappendValue) Build() Completed {
	return Completed(c)
}

func (c SJsonStrappendValue) Build() SCompleted {
	return SCompleted(c)
}

type JsonStrlen Completed

type SJsonStrlen SCompleted

func (b *Builder) JsonStrlen() (c JsonStrlen) {
	c = JsonStrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.STRLEN")
	return c
}

func (b *SBuilder) JsonStrlen() (c SJsonStrlen) {
	c = SJsonStrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.STRLEN")
	return c
}

func (c JsonStrlen) Key(key string) JsonStrlenKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonStrlenKey)(c)
}

func (c SJsonStrlen) Key(key string) SJsonStrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonStrlenKey)(c)
}

type JsonStrlenKey Completed

type SJsonStrlenKey SCompleted

func (c JsonStrlenKey) Path(path string) JsonStrlenPath {
	c.cs.s = append(c.cs.s, path)
	return (JsonStrlenPath)(c)
}

func (c SJsonStrlenKey) Path(path string) SJsonStrlenPath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonStrlenPath)(c)
}

func (c JsonStrlenKey) Build() Completed {
	return Completed(c)
}

func (c SJsonStrlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonStrlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonStrlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonStrlenPath Completed

type SJsonStrlenPath SCompleted

func (c JsonStrlenPath) Build() Completed {
	return Completed(c)
}

func (c SJsonStrlenPath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonStrlenPath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonStrlenPath) Cache() SCacheable {
	return SCacheable(c)
}

type JsonToggle Completed

type SJsonToggle SCompleted

func (b *Builder) JsonToggle() (c JsonToggle) {
	c = JsonToggle{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.TOGGLE")
	return c
}

func (b *SBuilder) JsonToggle() (c SJsonToggle) {
	c = SJsonToggle{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "JSON.TOGGLE")
	return c
}

func (c JsonToggle) Key(key string) JsonToggleKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonToggleKey)(c)
}

func (c SJsonToggle) Key(key string) SJsonToggleKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonToggleKey)(c)
}

type JsonToggleKey Completed

type SJsonToggleKey SCompleted

func (c JsonToggleKey) Path(path string) JsonTogglePath {
	c.cs.s = append(c.cs.s, path)
	return (JsonTogglePath)(c)
}

func (c SJsonToggleKey) Path(path string) SJsonTogglePath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonTogglePath)(c)
}

func (c JsonToggleKey) Build() Completed {
	return Completed(c)
}

func (c SJsonToggleKey) Build() SCompleted {
	return SCompleted(c)
}

type JsonTogglePath Completed

type SJsonTogglePath SCompleted

func (c JsonTogglePath) Build() Completed {
	return Completed(c)
}

func (c SJsonTogglePath) Build() SCompleted {
	return SCompleted(c)
}

type JsonType Completed

type SJsonType SCompleted

func (b *Builder) JsonType() (c JsonType) {
	c = JsonType{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.TYPE")
	return c
}

func (b *SBuilder) JsonType() (c SJsonType) {
	c = SJsonType{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "JSON.TYPE")
	return c
}

func (c JsonType) Key(key string) JsonTypeKey {
	c.cs.s = append(c.cs.s, key)
	return (JsonTypeKey)(c)
}

func (c SJsonType) Key(key string) SJsonTypeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SJsonTypeKey)(c)
}

type JsonTypeKey Completed

type SJsonTypeKey SCompleted

func (c JsonTypeKey) Path(path string) JsonTypePath {
	c.cs.s = append(c.cs.s, path)
	return (JsonTypePath)(c)
}

func (c SJsonTypeKey) Path(path string) SJsonTypePath {
	c.cs.s = append(c.cs.s, path)
	return (SJsonTypePath)(c)
}

func (c JsonTypeKey) Build() Completed {
	return Completed(c)
}

func (c SJsonTypeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonTypeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonTypeKey) Cache() SCacheable {
	return SCacheable(c)
}

type JsonTypePath Completed

type SJsonTypePath SCompleted

func (c JsonTypePath) Build() Completed {
	return Completed(c)
}

func (c SJsonTypePath) Build() SCompleted {
	return SCompleted(c)
}

func (c JsonTypePath) Cache() Cacheable {
	return Cacheable(c)
}

func (c SJsonTypePath) Cache() SCacheable {
	return SCacheable(c)
}

type Keys Completed

type SKeys SCompleted

func (b *Builder) Keys() (c Keys) {
	c = Keys{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "KEYS")
	return c
}

func (b *SBuilder) Keys() (c SKeys) {
	c = SKeys{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "KEYS")
	return c
}

func (c Keys) Pattern(pattern string) KeysPattern {
	c.cs.s = append(c.cs.s, pattern)
	return (KeysPattern)(c)
}

func (c SKeys) Pattern(pattern string) SKeysPattern {
	c.cs.s = append(c.cs.s, pattern)
	return (SKeysPattern)(c)
}

type KeysPattern Completed

type SKeysPattern SCompleted

func (c KeysPattern) Build() Completed {
	return Completed(c)
}

func (c SKeysPattern) Build() SCompleted {
	return SCompleted(c)
}

type Lastsave Completed

type SLastsave SCompleted

func (b *Builder) Lastsave() (c Lastsave) {
	c = Lastsave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LASTSAVE")
	return c
}

func (b *SBuilder) Lastsave() (c SLastsave) {
	c = SLastsave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LASTSAVE")
	return c
}

func (c Lastsave) Build() Completed {
	return Completed(c)
}

func (c SLastsave) Build() SCompleted {
	return SCompleted(c)
}

type LatencyDoctor Completed

type SLatencyDoctor SCompleted

func (b *Builder) LatencyDoctor() (c LatencyDoctor) {
	c = LatencyDoctor{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "DOCTOR")
	return c
}

func (b *SBuilder) LatencyDoctor() (c SLatencyDoctor) {
	c = SLatencyDoctor{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "DOCTOR")
	return c
}

func (c LatencyDoctor) Build() Completed {
	return Completed(c)
}

func (c SLatencyDoctor) Build() SCompleted {
	return SCompleted(c)
}

type LatencyGraph Completed

type SLatencyGraph SCompleted

func (b *Builder) LatencyGraph() (c LatencyGraph) {
	c = LatencyGraph{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "GRAPH")
	return c
}

func (b *SBuilder) LatencyGraph() (c SLatencyGraph) {
	c = SLatencyGraph{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "GRAPH")
	return c
}

func (c LatencyGraph) Event(event string) LatencyGraphEvent {
	c.cs.s = append(c.cs.s, event)
	return (LatencyGraphEvent)(c)
}

func (c SLatencyGraph) Event(event string) SLatencyGraphEvent {
	c.cs.s = append(c.cs.s, event)
	return (SLatencyGraphEvent)(c)
}

type LatencyGraphEvent Completed

type SLatencyGraphEvent SCompleted

func (c LatencyGraphEvent) Build() Completed {
	return Completed(c)
}

func (c SLatencyGraphEvent) Build() SCompleted {
	return SCompleted(c)
}

type LatencyHelp Completed

type SLatencyHelp SCompleted

func (b *Builder) LatencyHelp() (c LatencyHelp) {
	c = LatencyHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "HELP")
	return c
}

func (b *SBuilder) LatencyHelp() (c SLatencyHelp) {
	c = SLatencyHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "HELP")
	return c
}

func (c LatencyHelp) Build() Completed {
	return Completed(c)
}

func (c SLatencyHelp) Build() SCompleted {
	return SCompleted(c)
}

type LatencyHistory Completed

type SLatencyHistory SCompleted

func (b *Builder) LatencyHistory() (c LatencyHistory) {
	c = LatencyHistory{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "HISTORY")
	return c
}

func (b *SBuilder) LatencyHistory() (c SLatencyHistory) {
	c = SLatencyHistory{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "HISTORY")
	return c
}

func (c LatencyHistory) Event(event string) LatencyHistoryEvent {
	c.cs.s = append(c.cs.s, event)
	return (LatencyHistoryEvent)(c)
}

func (c SLatencyHistory) Event(event string) SLatencyHistoryEvent {
	c.cs.s = append(c.cs.s, event)
	return (SLatencyHistoryEvent)(c)
}

type LatencyHistoryEvent Completed

type SLatencyHistoryEvent SCompleted

func (c LatencyHistoryEvent) Build() Completed {
	return Completed(c)
}

func (c SLatencyHistoryEvent) Build() SCompleted {
	return SCompleted(c)
}

type LatencyLatest Completed

type SLatencyLatest SCompleted

func (b *Builder) LatencyLatest() (c LatencyLatest) {
	c = LatencyLatest{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "LATEST")
	return c
}

func (b *SBuilder) LatencyLatest() (c SLatencyLatest) {
	c = SLatencyLatest{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "LATEST")
	return c
}

func (c LatencyLatest) Build() Completed {
	return Completed(c)
}

func (c SLatencyLatest) Build() SCompleted {
	return SCompleted(c)
}

type LatencyReset Completed

type SLatencyReset SCompleted

func (b *Builder) LatencyReset() (c LatencyReset) {
	c = LatencyReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "RESET")
	return c
}

func (b *SBuilder) LatencyReset() (c SLatencyReset) {
	c = SLatencyReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LATENCY", "RESET")
	return c
}

func (c LatencyReset) Event(event ...string) LatencyResetEvent {
	c.cs.s = append(c.cs.s, event...)
	return (LatencyResetEvent)(c)
}

func (c SLatencyReset) Event(event ...string) SLatencyResetEvent {
	c.cs.s = append(c.cs.s, event...)
	return (SLatencyResetEvent)(c)
}

func (c LatencyReset) Build() Completed {
	return Completed(c)
}

func (c SLatencyReset) Build() SCompleted {
	return SCompleted(c)
}

type LatencyResetEvent Completed

type SLatencyResetEvent SCompleted

func (c LatencyResetEvent) Event(event ...string) LatencyResetEvent {
	c.cs.s = append(c.cs.s, event...)
	return c
}

func (c SLatencyResetEvent) Event(event ...string) SLatencyResetEvent {
	c.cs.s = append(c.cs.s, event...)
	return c
}

func (c LatencyResetEvent) Build() Completed {
	return Completed(c)
}

func (c SLatencyResetEvent) Build() SCompleted {
	return SCompleted(c)
}

type Lcs Completed

type SLcs SCompleted

func (b *Builder) Lcs() (c Lcs) {
	c = Lcs{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LCS")
	return c
}

func (b *SBuilder) Lcs() (c SLcs) {
	c = SLcs{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LCS")
	return c
}

func (c Lcs) Key1(key1 string) LcsKey1 {
	c.cs.s = append(c.cs.s, key1)
	return (LcsKey1)(c)
}

func (c SLcs) Key1(key1 string) SLcsKey1 {
	c.ks = checkSlot(c.ks, slot(key1))
	c.cs.s = append(c.cs.s, key1)
	return (SLcsKey1)(c)
}

type LcsIdx Completed

type SLcsIdx SCompleted

func (c LcsIdx) Minmatchlen(len int64) LcsMinmatchlen {
	c.cs.s = append(c.cs.s, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (LcsMinmatchlen)(c)
}

func (c SLcsIdx) Minmatchlen(len int64) SLcsMinmatchlen {
	c.cs.s = append(c.cs.s, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (SLcsMinmatchlen)(c)
}

func (c LcsIdx) Withmatchlen() LcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsIdx) Withmatchlen() SLcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsIdx) Build() Completed {
	return Completed(c)
}

func (c SLcsIdx) Build() SCompleted {
	return SCompleted(c)
}

type LcsKey1 Completed

type SLcsKey1 SCompleted

func (c LcsKey1) Key2(key2 string) LcsKey2 {
	c.cs.s = append(c.cs.s, key2)
	return (LcsKey2)(c)
}

func (c SLcsKey1) Key2(key2 string) SLcsKey2 {
	c.ks = checkSlot(c.ks, slot(key2))
	c.cs.s = append(c.cs.s, key2)
	return (SLcsKey2)(c)
}

type LcsKey2 Completed

type SLcsKey2 SCompleted

func (c LcsKey2) Len() LcsLen {
	c.cs.s = append(c.cs.s, "LEN")
	return (LcsLen)(c)
}

func (c SLcsKey2) Len() SLcsLen {
	c.cs.s = append(c.cs.s, "LEN")
	return (SLcsLen)(c)
}

func (c LcsKey2) Idx() LcsIdx {
	c.cs.s = append(c.cs.s, "IDX")
	return (LcsIdx)(c)
}

func (c SLcsKey2) Idx() SLcsIdx {
	c.cs.s = append(c.cs.s, "IDX")
	return (SLcsIdx)(c)
}

func (c LcsKey2) Minmatchlen(len int64) LcsMinmatchlen {
	c.cs.s = append(c.cs.s, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (LcsMinmatchlen)(c)
}

func (c SLcsKey2) Minmatchlen(len int64) SLcsMinmatchlen {
	c.cs.s = append(c.cs.s, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (SLcsMinmatchlen)(c)
}

func (c LcsKey2) Withmatchlen() LcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsKey2) Withmatchlen() SLcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsKey2) Build() Completed {
	return Completed(c)
}

func (c SLcsKey2) Build() SCompleted {
	return SCompleted(c)
}

type LcsLen Completed

type SLcsLen SCompleted

func (c LcsLen) Idx() LcsIdx {
	c.cs.s = append(c.cs.s, "IDX")
	return (LcsIdx)(c)
}

func (c SLcsLen) Idx() SLcsIdx {
	c.cs.s = append(c.cs.s, "IDX")
	return (SLcsIdx)(c)
}

func (c LcsLen) Minmatchlen(len int64) LcsMinmatchlen {
	c.cs.s = append(c.cs.s, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (LcsMinmatchlen)(c)
}

func (c SLcsLen) Minmatchlen(len int64) SLcsMinmatchlen {
	c.cs.s = append(c.cs.s, "MINMATCHLEN", strconv.FormatInt(len, 10))
	return (SLcsMinmatchlen)(c)
}

func (c LcsLen) Withmatchlen() LcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsLen) Withmatchlen() SLcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsLen) Build() Completed {
	return Completed(c)
}

func (c SLcsLen) Build() SCompleted {
	return SCompleted(c)
}

type LcsMinmatchlen Completed

type SLcsMinmatchlen SCompleted

func (c LcsMinmatchlen) Withmatchlen() LcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (LcsWithmatchlen)(c)
}

func (c SLcsMinmatchlen) Withmatchlen() SLcsWithmatchlen {
	c.cs.s = append(c.cs.s, "WITHMATCHLEN")
	return (SLcsWithmatchlen)(c)
}

func (c LcsMinmatchlen) Build() Completed {
	return Completed(c)
}

func (c SLcsMinmatchlen) Build() SCompleted {
	return SCompleted(c)
}

type LcsWithmatchlen Completed

type SLcsWithmatchlen SCompleted

func (c LcsWithmatchlen) Build() Completed {
	return Completed(c)
}

func (c SLcsWithmatchlen) Build() SCompleted {
	return SCompleted(c)
}

type Lindex Completed

type SLindex SCompleted

func (b *Builder) Lindex() (c Lindex) {
	c = Lindex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LINDEX")
	return c
}

func (b *SBuilder) Lindex() (c SLindex) {
	c = SLindex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LINDEX")
	return c
}

func (c Lindex) Key(key string) LindexKey {
	c.cs.s = append(c.cs.s, key)
	return (LindexKey)(c)
}

func (c SLindex) Key(key string) SLindexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLindexKey)(c)
}

type LindexIndex Completed

type SLindexIndex SCompleted

func (c LindexIndex) Build() Completed {
	return Completed(c)
}

func (c SLindexIndex) Build() SCompleted {
	return SCompleted(c)
}

func (c LindexIndex) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLindexIndex) Cache() SCacheable {
	return SCacheable(c)
}

type LindexKey Completed

type SLindexKey SCompleted

func (c LindexKey) Index(index int64) LindexIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (LindexIndex)(c)
}

func (c SLindexKey) Index(index int64) SLindexIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (SLindexIndex)(c)
}

type Linsert Completed

type SLinsert SCompleted

func (b *Builder) Linsert() (c Linsert) {
	c = Linsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LINSERT")
	return c
}

func (b *SBuilder) Linsert() (c SLinsert) {
	c = SLinsert{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LINSERT")
	return c
}

func (c Linsert) Key(key string) LinsertKey {
	c.cs.s = append(c.cs.s, key)
	return (LinsertKey)(c)
}

func (c SLinsert) Key(key string) SLinsertKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLinsertKey)(c)
}

type LinsertElement Completed

type SLinsertElement SCompleted

func (c LinsertElement) Build() Completed {
	return Completed(c)
}

func (c SLinsertElement) Build() SCompleted {
	return SCompleted(c)
}

type LinsertKey Completed

type SLinsertKey SCompleted

func (c LinsertKey) Before() LinsertWhereBefore {
	c.cs.s = append(c.cs.s, "BEFORE")
	return (LinsertWhereBefore)(c)
}

func (c SLinsertKey) Before() SLinsertWhereBefore {
	c.cs.s = append(c.cs.s, "BEFORE")
	return (SLinsertWhereBefore)(c)
}

func (c LinsertKey) After() LinsertWhereAfter {
	c.cs.s = append(c.cs.s, "AFTER")
	return (LinsertWhereAfter)(c)
}

func (c SLinsertKey) After() SLinsertWhereAfter {
	c.cs.s = append(c.cs.s, "AFTER")
	return (SLinsertWhereAfter)(c)
}

type LinsertPivot Completed

type SLinsertPivot SCompleted

func (c LinsertPivot) Element(element string) LinsertElement {
	c.cs.s = append(c.cs.s, element)
	return (LinsertElement)(c)
}

func (c SLinsertPivot) Element(element string) SLinsertElement {
	c.cs.s = append(c.cs.s, element)
	return (SLinsertElement)(c)
}

type LinsertWhereAfter Completed

type SLinsertWhereAfter SCompleted

func (c LinsertWhereAfter) Pivot(pivot string) LinsertPivot {
	c.cs.s = append(c.cs.s, pivot)
	return (LinsertPivot)(c)
}

func (c SLinsertWhereAfter) Pivot(pivot string) SLinsertPivot {
	c.cs.s = append(c.cs.s, pivot)
	return (SLinsertPivot)(c)
}

type LinsertWhereBefore Completed

type SLinsertWhereBefore SCompleted

func (c LinsertWhereBefore) Pivot(pivot string) LinsertPivot {
	c.cs.s = append(c.cs.s, pivot)
	return (LinsertPivot)(c)
}

func (c SLinsertWhereBefore) Pivot(pivot string) SLinsertPivot {
	c.cs.s = append(c.cs.s, pivot)
	return (SLinsertPivot)(c)
}

type Llen Completed

type SLlen SCompleted

func (b *Builder) Llen() (c Llen) {
	c = Llen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LLEN")
	return c
}

func (b *SBuilder) Llen() (c SLlen) {
	c = SLlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LLEN")
	return c
}

func (c Llen) Key(key string) LlenKey {
	c.cs.s = append(c.cs.s, key)
	return (LlenKey)(c)
}

func (c SLlen) Key(key string) SLlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLlenKey)(c)
}

type LlenKey Completed

type SLlenKey SCompleted

func (c LlenKey) Build() Completed {
	return Completed(c)
}

func (c SLlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c LlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type Lmove Completed

type SLmove SCompleted

func (b *Builder) Lmove() (c Lmove) {
	c = Lmove{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LMOVE")
	return c
}

func (b *SBuilder) Lmove() (c SLmove) {
	c = SLmove{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LMOVE")
	return c
}

func (c Lmove) Source(source string) LmoveSource {
	c.cs.s = append(c.cs.s, source)
	return (LmoveSource)(c)
}

func (c SLmove) Source(source string) SLmoveSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SLmoveSource)(c)
}

type LmoveDestination Completed

type SLmoveDestination SCompleted

func (c LmoveDestination) Left() LmoveWherefromLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (LmoveWherefromLeft)(c)
}

func (c SLmoveDestination) Left() SLmoveWherefromLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SLmoveWherefromLeft)(c)
}

func (c LmoveDestination) Right() LmoveWherefromRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (LmoveWherefromRight)(c)
}

func (c SLmoveDestination) Right() SLmoveWherefromRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SLmoveWherefromRight)(c)
}

type LmoveSource Completed

type SLmoveSource SCompleted

func (c LmoveSource) Destination(destination string) LmoveDestination {
	c.cs.s = append(c.cs.s, destination)
	return (LmoveDestination)(c)
}

func (c SLmoveSource) Destination(destination string) SLmoveDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SLmoveDestination)(c)
}

type LmoveWherefromLeft Completed

type SLmoveWherefromLeft SCompleted

func (c LmoveWherefromLeft) Left() LmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (LmoveWheretoLeft)(c)
}

func (c SLmoveWherefromLeft) Left() SLmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SLmoveWheretoLeft)(c)
}

func (c LmoveWherefromLeft) Right() LmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (LmoveWheretoRight)(c)
}

func (c SLmoveWherefromLeft) Right() SLmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SLmoveWheretoRight)(c)
}

type LmoveWherefromRight Completed

type SLmoveWherefromRight SCompleted

func (c LmoveWherefromRight) Left() LmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (LmoveWheretoLeft)(c)
}

func (c SLmoveWherefromRight) Left() SLmoveWheretoLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SLmoveWheretoLeft)(c)
}

func (c LmoveWherefromRight) Right() LmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (LmoveWheretoRight)(c)
}

func (c SLmoveWherefromRight) Right() SLmoveWheretoRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SLmoveWheretoRight)(c)
}

type LmoveWheretoLeft Completed

type SLmoveWheretoLeft SCompleted

func (c LmoveWheretoLeft) Build() Completed {
	return Completed(c)
}

func (c SLmoveWheretoLeft) Build() SCompleted {
	return SCompleted(c)
}

type LmoveWheretoRight Completed

type SLmoveWheretoRight SCompleted

func (c LmoveWheretoRight) Build() Completed {
	return Completed(c)
}

func (c SLmoveWheretoRight) Build() SCompleted {
	return SCompleted(c)
}

type Lmpop Completed

type SLmpop SCompleted

func (b *Builder) Lmpop() (c Lmpop) {
	c = Lmpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LMPOP")
	return c
}

func (b *SBuilder) Lmpop() (c SLmpop) {
	c = SLmpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LMPOP")
	return c
}

func (c Lmpop) Numkeys(numkeys int64) LmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (LmpopNumkeys)(c)
}

func (c SLmpop) Numkeys(numkeys int64) SLmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SLmpopNumkeys)(c)
}

type LmpopCount Completed

type SLmpopCount SCompleted

func (c LmpopCount) Build() Completed {
	return Completed(c)
}

func (c SLmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type LmpopKey Completed

type SLmpopKey SCompleted

func (c LmpopKey) Key(key ...string) LmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SLmpopKey) Key(key ...string) SLmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c LmpopKey) Left() LmpopWhereLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (LmpopWhereLeft)(c)
}

func (c SLmpopKey) Left() SLmpopWhereLeft {
	c.cs.s = append(c.cs.s, "LEFT")
	return (SLmpopWhereLeft)(c)
}

func (c LmpopKey) Right() LmpopWhereRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (LmpopWhereRight)(c)
}

func (c SLmpopKey) Right() SLmpopWhereRight {
	c.cs.s = append(c.cs.s, "RIGHT")
	return (SLmpopWhereRight)(c)
}

type LmpopNumkeys Completed

type SLmpopNumkeys SCompleted

func (c LmpopNumkeys) Key(key ...string) LmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return (LmpopKey)(c)
}

func (c SLmpopNumkeys) Key(key ...string) SLmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SLmpopKey)(c)
}

type LmpopWhereLeft Completed

type SLmpopWhereLeft SCompleted

func (c LmpopWhereLeft) Count(count int64) LmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (LmpopCount)(c)
}

func (c SLmpopWhereLeft) Count(count int64) SLmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SLmpopCount)(c)
}

func (c LmpopWhereLeft) Build() Completed {
	return Completed(c)
}

func (c SLmpopWhereLeft) Build() SCompleted {
	return SCompleted(c)
}

type LmpopWhereRight Completed

type SLmpopWhereRight SCompleted

func (c LmpopWhereRight) Count(count int64) LmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (LmpopCount)(c)
}

func (c SLmpopWhereRight) Count(count int64) SLmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SLmpopCount)(c)
}

func (c LmpopWhereRight) Build() Completed {
	return Completed(c)
}

func (c SLmpopWhereRight) Build() SCompleted {
	return SCompleted(c)
}

type Lolwut Completed

type SLolwut SCompleted

func (b *Builder) Lolwut() (c Lolwut) {
	c = Lolwut{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LOLWUT")
	return c
}

func (b *SBuilder) Lolwut() (c SLolwut) {
	c = SLolwut{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LOLWUT")
	return c
}

func (c Lolwut) Version(version int64) LolwutVersion {
	c.cs.s = append(c.cs.s, "VERSION", strconv.FormatInt(version, 10))
	return (LolwutVersion)(c)
}

func (c SLolwut) Version(version int64) SLolwutVersion {
	c.cs.s = append(c.cs.s, "VERSION", strconv.FormatInt(version, 10))
	return (SLolwutVersion)(c)
}

func (c Lolwut) Build() Completed {
	return Completed(c)
}

func (c SLolwut) Build() SCompleted {
	return SCompleted(c)
}

type LolwutVersion Completed

type SLolwutVersion SCompleted

func (c LolwutVersion) Build() Completed {
	return Completed(c)
}

func (c SLolwutVersion) Build() SCompleted {
	return SCompleted(c)
}

type Lpop Completed

type SLpop SCompleted

func (b *Builder) Lpop() (c Lpop) {
	c = Lpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LPOP")
	return c
}

func (b *SBuilder) Lpop() (c SLpop) {
	c = SLpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LPOP")
	return c
}

func (c Lpop) Key(key string) LpopKey {
	c.cs.s = append(c.cs.s, key)
	return (LpopKey)(c)
}

func (c SLpop) Key(key string) SLpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLpopKey)(c)
}

type LpopCount Completed

type SLpopCount SCompleted

func (c LpopCount) Build() Completed {
	return Completed(c)
}

func (c SLpopCount) Build() SCompleted {
	return SCompleted(c)
}

type LpopKey Completed

type SLpopKey SCompleted

func (c LpopKey) Count(count int64) LpopCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (LpopCount)(c)
}

func (c SLpopKey) Count(count int64) SLpopCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SLpopCount)(c)
}

func (c LpopKey) Build() Completed {
	return Completed(c)
}

func (c SLpopKey) Build() SCompleted {
	return SCompleted(c)
}

type Lpos Completed

type SLpos SCompleted

func (b *Builder) Lpos() (c Lpos) {
	c = Lpos{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LPOS")
	return c
}

func (b *SBuilder) Lpos() (c SLpos) {
	c = SLpos{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LPOS")
	return c
}

func (c Lpos) Key(key string) LposKey {
	c.cs.s = append(c.cs.s, key)
	return (LposKey)(c)
}

func (c SLpos) Key(key string) SLposKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLposKey)(c)
}

type LposCount Completed

type SLposCount SCompleted

func (c LposCount) Maxlen(len int64) LposMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN", strconv.FormatInt(len, 10))
	return (LposMaxlen)(c)
}

func (c SLposCount) Maxlen(len int64) SLposMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN", strconv.FormatInt(len, 10))
	return (SLposMaxlen)(c)
}

func (c LposCount) Build() Completed {
	return Completed(c)
}

func (c SLposCount) Build() SCompleted {
	return SCompleted(c)
}

func (c LposCount) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposCount) Cache() SCacheable {
	return SCacheable(c)
}

type LposElement Completed

type SLposElement SCompleted

func (c LposElement) Rank(rank int64) LposRank {
	c.cs.s = append(c.cs.s, "RANK", strconv.FormatInt(rank, 10))
	return (LposRank)(c)
}

func (c SLposElement) Rank(rank int64) SLposRank {
	c.cs.s = append(c.cs.s, "RANK", strconv.FormatInt(rank, 10))
	return (SLposRank)(c)
}

func (c LposElement) Count(numMatches int64) LposCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(numMatches, 10))
	return (LposCount)(c)
}

func (c SLposElement) Count(numMatches int64) SLposCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(numMatches, 10))
	return (SLposCount)(c)
}

func (c LposElement) Maxlen(len int64) LposMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN", strconv.FormatInt(len, 10))
	return (LposMaxlen)(c)
}

func (c SLposElement) Maxlen(len int64) SLposMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN", strconv.FormatInt(len, 10))
	return (SLposMaxlen)(c)
}

func (c LposElement) Build() Completed {
	return Completed(c)
}

func (c SLposElement) Build() SCompleted {
	return SCompleted(c)
}

func (c LposElement) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposElement) Cache() SCacheable {
	return SCacheable(c)
}

type LposKey Completed

type SLposKey SCompleted

func (c LposKey) Element(element string) LposElement {
	c.cs.s = append(c.cs.s, element)
	return (LposElement)(c)
}

func (c SLposKey) Element(element string) SLposElement {
	c.cs.s = append(c.cs.s, element)
	return (SLposElement)(c)
}

type LposMaxlen Completed

type SLposMaxlen SCompleted

func (c LposMaxlen) Build() Completed {
	return Completed(c)
}

func (c SLposMaxlen) Build() SCompleted {
	return SCompleted(c)
}

func (c LposMaxlen) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposMaxlen) Cache() SCacheable {
	return SCacheable(c)
}

type LposRank Completed

type SLposRank SCompleted

func (c LposRank) Count(numMatches int64) LposCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(numMatches, 10))
	return (LposCount)(c)
}

func (c SLposRank) Count(numMatches int64) SLposCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(numMatches, 10))
	return (SLposCount)(c)
}

func (c LposRank) Maxlen(len int64) LposMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN", strconv.FormatInt(len, 10))
	return (LposMaxlen)(c)
}

func (c SLposRank) Maxlen(len int64) SLposMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN", strconv.FormatInt(len, 10))
	return (SLposMaxlen)(c)
}

func (c LposRank) Build() Completed {
	return Completed(c)
}

func (c SLposRank) Build() SCompleted {
	return SCompleted(c)
}

func (c LposRank) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLposRank) Cache() SCacheable {
	return SCacheable(c)
}

type Lpush Completed

type SLpush SCompleted

func (b *Builder) Lpush() (c Lpush) {
	c = Lpush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LPUSH")
	return c
}

func (b *SBuilder) Lpush() (c SLpush) {
	c = SLpush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LPUSH")
	return c
}

func (c Lpush) Key(key string) LpushKey {
	c.cs.s = append(c.cs.s, key)
	return (LpushKey)(c)
}

func (c SLpush) Key(key string) SLpushKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLpushKey)(c)
}

type LpushElement Completed

type SLpushElement SCompleted

func (c LpushElement) Element(element ...string) LpushElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c SLpushElement) Element(element ...string) SLpushElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c LpushElement) Build() Completed {
	return Completed(c)
}

func (c SLpushElement) Build() SCompleted {
	return SCompleted(c)
}

type LpushKey Completed

type SLpushKey SCompleted

func (c LpushKey) Element(element ...string) LpushElement {
	c.cs.s = append(c.cs.s, element...)
	return (LpushElement)(c)
}

func (c SLpushKey) Element(element ...string) SLpushElement {
	c.cs.s = append(c.cs.s, element...)
	return (SLpushElement)(c)
}

type Lpushx Completed

type SLpushx SCompleted

func (b *Builder) Lpushx() (c Lpushx) {
	c = Lpushx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LPUSHX")
	return c
}

func (b *SBuilder) Lpushx() (c SLpushx) {
	c = SLpushx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LPUSHX")
	return c
}

func (c Lpushx) Key(key string) LpushxKey {
	c.cs.s = append(c.cs.s, key)
	return (LpushxKey)(c)
}

func (c SLpushx) Key(key string) SLpushxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLpushxKey)(c)
}

type LpushxElement Completed

type SLpushxElement SCompleted

func (c LpushxElement) Element(element ...string) LpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c SLpushxElement) Element(element ...string) SLpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c LpushxElement) Build() Completed {
	return Completed(c)
}

func (c SLpushxElement) Build() SCompleted {
	return SCompleted(c)
}

type LpushxKey Completed

type SLpushxKey SCompleted

func (c LpushxKey) Element(element ...string) LpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return (LpushxElement)(c)
}

func (c SLpushxKey) Element(element ...string) SLpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return (SLpushxElement)(c)
}

type Lrange Completed

type SLrange SCompleted

func (b *Builder) Lrange() (c Lrange) {
	c = Lrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LRANGE")
	return c
}

func (b *SBuilder) Lrange() (c SLrange) {
	c = SLrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "LRANGE")
	return c
}

func (c Lrange) Key(key string) LrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (LrangeKey)(c)
}

func (c SLrange) Key(key string) SLrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLrangeKey)(c)
}

type LrangeKey Completed

type SLrangeKey SCompleted

func (c LrangeKey) Start(start int64) LrangeStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (LrangeStart)(c)
}

func (c SLrangeKey) Start(start int64) SLrangeStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SLrangeStart)(c)
}

type LrangeStart Completed

type SLrangeStart SCompleted

func (c LrangeStart) Stop(stop int64) LrangeStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (LrangeStop)(c)
}

func (c SLrangeStart) Stop(stop int64) SLrangeStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (SLrangeStop)(c)
}

type LrangeStop Completed

type SLrangeStop SCompleted

func (c LrangeStop) Build() Completed {
	return Completed(c)
}

func (c SLrangeStop) Build() SCompleted {
	return SCompleted(c)
}

func (c LrangeStop) Cache() Cacheable {
	return Cacheable(c)
}

func (c SLrangeStop) Cache() SCacheable {
	return SCacheable(c)
}

type Lrem Completed

type SLrem SCompleted

func (b *Builder) Lrem() (c Lrem) {
	c = Lrem{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LREM")
	return c
}

func (b *SBuilder) Lrem() (c SLrem) {
	c = SLrem{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LREM")
	return c
}

func (c Lrem) Key(key string) LremKey {
	c.cs.s = append(c.cs.s, key)
	return (LremKey)(c)
}

func (c SLrem) Key(key string) SLremKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLremKey)(c)
}

type LremCount Completed

type SLremCount SCompleted

func (c LremCount) Element(element string) LremElement {
	c.cs.s = append(c.cs.s, element)
	return (LremElement)(c)
}

func (c SLremCount) Element(element string) SLremElement {
	c.cs.s = append(c.cs.s, element)
	return (SLremElement)(c)
}

type LremElement Completed

type SLremElement SCompleted

func (c LremElement) Build() Completed {
	return Completed(c)
}

func (c SLremElement) Build() SCompleted {
	return SCompleted(c)
}

type LremKey Completed

type SLremKey SCompleted

func (c LremKey) Count(count int64) LremCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (LremCount)(c)
}

func (c SLremKey) Count(count int64) SLremCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SLremCount)(c)
}

type Lset Completed

type SLset SCompleted

func (b *Builder) Lset() (c Lset) {
	c = Lset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LSET")
	return c
}

func (b *SBuilder) Lset() (c SLset) {
	c = SLset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LSET")
	return c
}

func (c Lset) Key(key string) LsetKey {
	c.cs.s = append(c.cs.s, key)
	return (LsetKey)(c)
}

func (c SLset) Key(key string) SLsetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLsetKey)(c)
}

type LsetElement Completed

type SLsetElement SCompleted

func (c LsetElement) Build() Completed {
	return Completed(c)
}

func (c SLsetElement) Build() SCompleted {
	return SCompleted(c)
}

type LsetIndex Completed

type SLsetIndex SCompleted

func (c LsetIndex) Element(element string) LsetElement {
	c.cs.s = append(c.cs.s, element)
	return (LsetElement)(c)
}

func (c SLsetIndex) Element(element string) SLsetElement {
	c.cs.s = append(c.cs.s, element)
	return (SLsetElement)(c)
}

type LsetKey Completed

type SLsetKey SCompleted

func (c LsetKey) Index(index int64) LsetIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (LsetIndex)(c)
}

func (c SLsetKey) Index(index int64) SLsetIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (SLsetIndex)(c)
}

type Ltrim Completed

type SLtrim SCompleted

func (b *Builder) Ltrim() (c Ltrim) {
	c = Ltrim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LTRIM")
	return c
}

func (b *SBuilder) Ltrim() (c SLtrim) {
	c = SLtrim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "LTRIM")
	return c
}

func (c Ltrim) Key(key string) LtrimKey {
	c.cs.s = append(c.cs.s, key)
	return (LtrimKey)(c)
}

func (c SLtrim) Key(key string) SLtrimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SLtrimKey)(c)
}

type LtrimKey Completed

type SLtrimKey SCompleted

func (c LtrimKey) Start(start int64) LtrimStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (LtrimStart)(c)
}

func (c SLtrimKey) Start(start int64) SLtrimStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SLtrimStart)(c)
}

type LtrimStart Completed

type SLtrimStart SCompleted

func (c LtrimStart) Stop(stop int64) LtrimStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (LtrimStop)(c)
}

func (c SLtrimStart) Stop(stop int64) SLtrimStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (SLtrimStop)(c)
}

type LtrimStop Completed

type SLtrimStop SCompleted

func (c LtrimStop) Build() Completed {
	return Completed(c)
}

func (c SLtrimStop) Build() SCompleted {
	return SCompleted(c)
}

type MemoryDoctor Completed

type SMemoryDoctor SCompleted

func (b *Builder) MemoryDoctor() (c MemoryDoctor) {
	c = MemoryDoctor{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "DOCTOR")
	return c
}

func (b *SBuilder) MemoryDoctor() (c SMemoryDoctor) {
	c = SMemoryDoctor{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "DOCTOR")
	return c
}

func (c MemoryDoctor) Build() Completed {
	return Completed(c)
}

func (c SMemoryDoctor) Build() SCompleted {
	return SCompleted(c)
}

type MemoryHelp Completed

type SMemoryHelp SCompleted

func (b *Builder) MemoryHelp() (c MemoryHelp) {
	c = MemoryHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MEMORY", "HELP")
	return c
}

func (b *SBuilder) MemoryHelp() (c SMemoryHelp) {
	c = SMemoryHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MEMORY", "HELP")
	return c
}

func (c MemoryHelp) Build() Completed {
	return Completed(c)
}

func (c SMemoryHelp) Build() SCompleted {
	return SCompleted(c)
}

type MemoryMallocStats Completed

type SMemoryMallocStats SCompleted

func (b *Builder) MemoryMallocStats() (c MemoryMallocStats) {
	c = MemoryMallocStats{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "MALLOC-STATS")
	return c
}

func (b *SBuilder) MemoryMallocStats() (c SMemoryMallocStats) {
	c = SMemoryMallocStats{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "MALLOC-STATS")
	return c
}

func (c MemoryMallocStats) Build() Completed {
	return Completed(c)
}

func (c SMemoryMallocStats) Build() SCompleted {
	return SCompleted(c)
}

type MemoryPurge Completed

type SMemoryPurge SCompleted

func (b *Builder) MemoryPurge() (c MemoryPurge) {
	c = MemoryPurge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MEMORY", "PURGE")
	return c
}

func (b *SBuilder) MemoryPurge() (c SMemoryPurge) {
	c = SMemoryPurge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MEMORY", "PURGE")
	return c
}

func (c MemoryPurge) Build() Completed {
	return Completed(c)
}

func (c SMemoryPurge) Build() SCompleted {
	return SCompleted(c)
}

type MemoryStats Completed

type SMemoryStats SCompleted

func (b *Builder) MemoryStats() (c MemoryStats) {
	c = MemoryStats{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "STATS")
	return c
}

func (b *SBuilder) MemoryStats() (c SMemoryStats) {
	c = SMemoryStats{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "STATS")
	return c
}

func (c MemoryStats) Build() Completed {
	return Completed(c)
}

func (c SMemoryStats) Build() SCompleted {
	return SCompleted(c)
}

type MemoryUsage Completed

type SMemoryUsage SCompleted

func (b *Builder) MemoryUsage() (c MemoryUsage) {
	c = MemoryUsage{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "USAGE")
	return c
}

func (b *SBuilder) MemoryUsage() (c SMemoryUsage) {
	c = SMemoryUsage{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MEMORY", "USAGE")
	return c
}

func (c MemoryUsage) Key(key string) MemoryUsageKey {
	c.cs.s = append(c.cs.s, key)
	return (MemoryUsageKey)(c)
}

func (c SMemoryUsage) Key(key string) SMemoryUsageKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SMemoryUsageKey)(c)
}

type MemoryUsageKey Completed

type SMemoryUsageKey SCompleted

func (c MemoryUsageKey) Samples(count int64) MemoryUsageSamples {
	c.cs.s = append(c.cs.s, "SAMPLES", strconv.FormatInt(count, 10))
	return (MemoryUsageSamples)(c)
}

func (c SMemoryUsageKey) Samples(count int64) SMemoryUsageSamples {
	c.cs.s = append(c.cs.s, "SAMPLES", strconv.FormatInt(count, 10))
	return (SMemoryUsageSamples)(c)
}

func (c MemoryUsageKey) Build() Completed {
	return Completed(c)
}

func (c SMemoryUsageKey) Build() SCompleted {
	return SCompleted(c)
}

type MemoryUsageSamples Completed

type SMemoryUsageSamples SCompleted

func (c MemoryUsageSamples) Build() Completed {
	return Completed(c)
}

func (c SMemoryUsageSamples) Build() SCompleted {
	return SCompleted(c)
}

type Mget Completed

type SMget SCompleted

func (b *Builder) Mget() (c Mget) {
	c = Mget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MGET")
	return c
}

func (b *SBuilder) Mget() (c SMget) {
	c = SMget{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "MGET")
	return c
}

func (c Mget) Key(key ...string) MgetKey {
	c.cs.s = append(c.cs.s, key...)
	return (MgetKey)(c)
}

func (c SMget) Key(key ...string) SMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SMgetKey)(c)
}

type MgetKey Completed

type SMgetKey SCompleted

func (c MgetKey) Key(key ...string) MgetKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SMgetKey) Key(key ...string) SMgetKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c MgetKey) Build() Completed {
	return Completed(c)
}

func (c SMgetKey) Build() SCompleted {
	return SCompleted(c)
}

type Migrate Completed

type SMigrate SCompleted

func (b *Builder) Migrate() (c Migrate) {
	c = Migrate{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "MIGRATE")
	return c
}

func (b *SBuilder) Migrate() (c SMigrate) {
	c = SMigrate{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "MIGRATE")
	return c
}

func (c Migrate) Host(host string) MigrateHost {
	c.cs.s = append(c.cs.s, host)
	return (MigrateHost)(c)
}

func (c SMigrate) Host(host string) SMigrateHost {
	c.cs.s = append(c.cs.s, host)
	return (SMigrateHost)(c)
}

type MigrateAuth Completed

type SMigrateAuth SCompleted

func (c MigrateAuth) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateAuth) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateAuth) Keys(key ...string) MigrateKeys {
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateAuth) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateAuth) Build() Completed {
	return Completed(c)
}

func (c SMigrateAuth) Build() SCompleted {
	return SCompleted(c)
}

type MigrateAuth2 Completed

type SMigrateAuth2 SCompleted

func (c MigrateAuth2) Keys(key ...string) MigrateKeys {
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateAuth2) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateAuth2) Build() Completed {
	return Completed(c)
}

func (c SMigrateAuth2) Build() SCompleted {
	return SCompleted(c)
}

type MigrateCopy Completed

type SMigrateCopy SCompleted

func (c MigrateCopy) Replace() MigrateReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (MigrateReplace)(c)
}

func (c SMigrateCopy) Replace() SMigrateReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (SMigrateReplace)(c)
}

func (c MigrateCopy) Auth(password string) MigrateAuth {
	c.cs.s = append(c.cs.s, "AUTH", password)
	return (MigrateAuth)(c)
}

func (c SMigrateCopy) Auth(password string) SMigrateAuth {
	c.cs.s = append(c.cs.s, "AUTH", password)
	return (SMigrateAuth)(c)
}

func (c MigrateCopy) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateCopy) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateCopy) Keys(key ...string) MigrateKeys {
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateCopy) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateCopy) Build() Completed {
	return Completed(c)
}

func (c SMigrateCopy) Build() SCompleted {
	return SCompleted(c)
}

type MigrateDestinationDb Completed

type SMigrateDestinationDb SCompleted

func (c MigrateDestinationDb) Timeout(timeout int64) MigrateTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timeout, 10))
	return (MigrateTimeout)(c)
}

func (c SMigrateDestinationDb) Timeout(timeout int64) SMigrateTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timeout, 10))
	return (SMigrateTimeout)(c)
}

type MigrateHost Completed

type SMigrateHost SCompleted

func (c MigrateHost) Port(port string) MigratePort {
	c.cs.s = append(c.cs.s, port)
	return (MigratePort)(c)
}

func (c SMigrateHost) Port(port string) SMigratePort {
	c.cs.s = append(c.cs.s, port)
	return (SMigratePort)(c)
}

type MigrateKey Completed

type SMigrateKey SCompleted

func (c MigrateKey) DestinationDb(destinationDb int64) MigrateDestinationDb {
	c.cs.s = append(c.cs.s, strconv.FormatInt(destinationDb, 10))
	return (MigrateDestinationDb)(c)
}

func (c SMigrateKey) DestinationDb(destinationDb int64) SMigrateDestinationDb {
	c.cs.s = append(c.cs.s, strconv.FormatInt(destinationDb, 10))
	return (SMigrateDestinationDb)(c)
}

type MigrateKeyEmpty Completed

type SMigrateKeyEmpty SCompleted

func (c MigrateKeyEmpty) DestinationDb(destinationDb int64) MigrateDestinationDb {
	c.cs.s = append(c.cs.s, strconv.FormatInt(destinationDb, 10))
	return (MigrateDestinationDb)(c)
}

func (c SMigrateKeyEmpty) DestinationDb(destinationDb int64) SMigrateDestinationDb {
	c.cs.s = append(c.cs.s, strconv.FormatInt(destinationDb, 10))
	return (SMigrateDestinationDb)(c)
}

type MigrateKeys Completed

type SMigrateKeys SCompleted

func (c MigrateKeys) Keys(key ...string) MigrateKeys {
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SMigrateKeys) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c MigrateKeys) Build() Completed {
	return Completed(c)
}

func (c SMigrateKeys) Build() SCompleted {
	return SCompleted(c)
}

type MigratePort Completed

type SMigratePort SCompleted

func (c MigratePort) Key() MigrateKey {
	c.cs.s = append(c.cs.s, "key")
	return (MigrateKey)(c)
}

func (c SMigratePort) Key() SMigrateKey {
	c.cs.s = append(c.cs.s, "key")
	return (SMigrateKey)(c)
}

func (c MigratePort) Empty() MigrateKeyEmpty {
	c.cs.s = append(c.cs.s, "")
	return (MigrateKeyEmpty)(c)
}

func (c SMigratePort) Empty() SMigrateKeyEmpty {
	c.cs.s = append(c.cs.s, "")
	return (SMigrateKeyEmpty)(c)
}

type MigrateReplace Completed

type SMigrateReplace SCompleted

func (c MigrateReplace) Auth(password string) MigrateAuth {
	c.cs.s = append(c.cs.s, "AUTH", password)
	return (MigrateAuth)(c)
}

func (c SMigrateReplace) Auth(password string) SMigrateAuth {
	c.cs.s = append(c.cs.s, "AUTH", password)
	return (SMigrateAuth)(c)
}

func (c MigrateReplace) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateReplace) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateReplace) Keys(key ...string) MigrateKeys {
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateReplace) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateReplace) Build() Completed {
	return Completed(c)
}

func (c SMigrateReplace) Build() SCompleted {
	return SCompleted(c)
}

type MigrateTimeout Completed

type SMigrateTimeout SCompleted

func (c MigrateTimeout) Copy() MigrateCopy {
	c.cs.s = append(c.cs.s, "COPY")
	return (MigrateCopy)(c)
}

func (c SMigrateTimeout) Copy() SMigrateCopy {
	c.cs.s = append(c.cs.s, "COPY")
	return (SMigrateCopy)(c)
}

func (c MigrateTimeout) Replace() MigrateReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (MigrateReplace)(c)
}

func (c SMigrateTimeout) Replace() SMigrateReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (SMigrateReplace)(c)
}

func (c MigrateTimeout) Auth(password string) MigrateAuth {
	c.cs.s = append(c.cs.s, "AUTH", password)
	return (MigrateAuth)(c)
}

func (c SMigrateTimeout) Auth(password string) SMigrateAuth {
	c.cs.s = append(c.cs.s, "AUTH", password)
	return (SMigrateAuth)(c)
}

func (c MigrateTimeout) Auth2(usernamePassword string) MigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (MigrateAuth2)(c)
}

func (c SMigrateTimeout) Auth2(usernamePassword string) SMigrateAuth2 {
	c.cs.s = append(c.cs.s, "AUTH2", usernamePassword)
	return (SMigrateAuth2)(c)
}

func (c MigrateTimeout) Keys(key ...string) MigrateKeys {
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (MigrateKeys)(c)
}

func (c SMigrateTimeout) Keys(key ...string) SMigrateKeys {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, "KEYS")
	c.cs.s = append(c.cs.s, key...)
	return (SMigrateKeys)(c)
}

func (c MigrateTimeout) Build() Completed {
	return Completed(c)
}

func (c SMigrateTimeout) Build() SCompleted {
	return SCompleted(c)
}

type ModuleList Completed

type SModuleList SCompleted

func (b *Builder) ModuleList() (c ModuleList) {
	c = ModuleList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MODULE", "LIST")
	return c
}

func (b *SBuilder) ModuleList() (c SModuleList) {
	c = SModuleList{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MODULE", "LIST")
	return c
}

func (c ModuleList) Build() Completed {
	return Completed(c)
}

func (c SModuleList) Build() SCompleted {
	return SCompleted(c)
}

type ModuleLoad Completed

type SModuleLoad SCompleted

func (b *Builder) ModuleLoad() (c ModuleLoad) {
	c = ModuleLoad{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MODULE", "LOAD")
	return c
}

func (b *SBuilder) ModuleLoad() (c SModuleLoad) {
	c = SModuleLoad{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MODULE", "LOAD")
	return c
}

func (c ModuleLoad) Path(path string) ModuleLoadPath {
	c.cs.s = append(c.cs.s, path)
	return (ModuleLoadPath)(c)
}

func (c SModuleLoad) Path(path string) SModuleLoadPath {
	c.cs.s = append(c.cs.s, path)
	return (SModuleLoadPath)(c)
}

type ModuleLoadArg Completed

type SModuleLoadArg SCompleted

func (c ModuleLoadArg) Arg(arg ...string) ModuleLoadArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c SModuleLoadArg) Arg(arg ...string) SModuleLoadArg {
	c.cs.s = append(c.cs.s, arg...)
	return c
}

func (c ModuleLoadArg) Build() Completed {
	return Completed(c)
}

func (c SModuleLoadArg) Build() SCompleted {
	return SCompleted(c)
}

type ModuleLoadPath Completed

type SModuleLoadPath SCompleted

func (c ModuleLoadPath) Arg(arg ...string) ModuleLoadArg {
	c.cs.s = append(c.cs.s, arg...)
	return (ModuleLoadArg)(c)
}

func (c SModuleLoadPath) Arg(arg ...string) SModuleLoadArg {
	c.cs.s = append(c.cs.s, arg...)
	return (SModuleLoadArg)(c)
}

func (c ModuleLoadPath) Build() Completed {
	return Completed(c)
}

func (c SModuleLoadPath) Build() SCompleted {
	return SCompleted(c)
}

type ModuleUnload Completed

type SModuleUnload SCompleted

func (b *Builder) ModuleUnload() (c ModuleUnload) {
	c = ModuleUnload{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MODULE", "UNLOAD")
	return c
}

func (b *SBuilder) ModuleUnload() (c SModuleUnload) {
	c = SModuleUnload{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MODULE", "UNLOAD")
	return c
}

func (c ModuleUnload) Name(name string) ModuleUnloadName {
	c.cs.s = append(c.cs.s, name)
	return (ModuleUnloadName)(c)
}

func (c SModuleUnload) Name(name string) SModuleUnloadName {
	c.cs.s = append(c.cs.s, name)
	return (SModuleUnloadName)(c)
}

type ModuleUnloadName Completed

type SModuleUnloadName SCompleted

func (c ModuleUnloadName) Build() Completed {
	return Completed(c)
}

func (c SModuleUnloadName) Build() SCompleted {
	return SCompleted(c)
}

type Monitor Completed

type SMonitor SCompleted

func (b *Builder) Monitor() (c Monitor) {
	c = Monitor{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MONITOR")
	return c
}

func (b *SBuilder) Monitor() (c SMonitor) {
	c = SMonitor{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MONITOR")
	return c
}

func (c Monitor) Build() Completed {
	return Completed(c)
}

func (c SMonitor) Build() SCompleted {
	return SCompleted(c)
}

type Move Completed

type SMove SCompleted

func (b *Builder) Move() (c Move) {
	c = Move{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MOVE")
	return c
}

func (b *SBuilder) Move() (c SMove) {
	c = SMove{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MOVE")
	return c
}

func (c Move) Key(key string) MoveKey {
	c.cs.s = append(c.cs.s, key)
	return (MoveKey)(c)
}

func (c SMove) Key(key string) SMoveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SMoveKey)(c)
}

type MoveDb Completed

type SMoveDb SCompleted

func (c MoveDb) Build() Completed {
	return Completed(c)
}

func (c SMoveDb) Build() SCompleted {
	return SCompleted(c)
}

type MoveKey Completed

type SMoveKey SCompleted

func (c MoveKey) Db(db int64) MoveDb {
	c.cs.s = append(c.cs.s, strconv.FormatInt(db, 10))
	return (MoveDb)(c)
}

func (c SMoveKey) Db(db int64) SMoveDb {
	c.cs.s = append(c.cs.s, strconv.FormatInt(db, 10))
	return (SMoveDb)(c)
}

type Mset Completed

type SMset SCompleted

func (b *Builder) Mset() (c Mset) {
	c = Mset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MSET")
	return c
}

func (b *SBuilder) Mset() (c SMset) {
	c = SMset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MSET")
	return c
}

func (c Mset) KeyValue() MsetKeyValue {
	return (MsetKeyValue)(c)
}

func (c SMset) KeyValue() SMsetKeyValue {
	return (SMsetKeyValue)(c)
}

type MsetKeyValue Completed

type SMsetKeyValue SCompleted

func (c MsetKeyValue) KeyValue(key string, value string) MsetKeyValue {
	c.cs.s = append(c.cs.s, key, value)
	return c
}

func (c SMsetKeyValue) KeyValue(key string, value string) SMsetKeyValue {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key, value)
	return c
}

func (c MsetKeyValue) Build() Completed {
	return Completed(c)
}

func (c SMsetKeyValue) Build() SCompleted {
	return SCompleted(c)
}

type Msetnx Completed

type SMsetnx SCompleted

func (b *Builder) Msetnx() (c Msetnx) {
	c = Msetnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MSETNX")
	return c
}

func (b *SBuilder) Msetnx() (c SMsetnx) {
	c = SMsetnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MSETNX")
	return c
}

func (c Msetnx) KeyValue() MsetnxKeyValue {
	return (MsetnxKeyValue)(c)
}

func (c SMsetnx) KeyValue() SMsetnxKeyValue {
	return (SMsetnxKeyValue)(c)
}

type MsetnxKeyValue Completed

type SMsetnxKeyValue SCompleted

func (c MsetnxKeyValue) KeyValue(key string, value string) MsetnxKeyValue {
	c.cs.s = append(c.cs.s, key, value)
	return c
}

func (c SMsetnxKeyValue) KeyValue(key string, value string) SMsetnxKeyValue {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key, value)
	return c
}

func (c MsetnxKeyValue) Build() Completed {
	return Completed(c)
}

func (c SMsetnxKeyValue) Build() SCompleted {
	return SCompleted(c)
}

type Multi Completed

type SMulti SCompleted

func (b *Builder) Multi() (c Multi) {
	c = Multi{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MULTI")
	return c
}

func (b *SBuilder) Multi() (c SMulti) {
	c = SMulti{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "MULTI")
	return c
}

func (c Multi) Build() Completed {
	return Completed(c)
}

func (c SMulti) Build() SCompleted {
	return SCompleted(c)
}

type ObjectEncoding Completed

type SObjectEncoding SCompleted

func (b *Builder) ObjectEncoding() (c ObjectEncoding) {
	c = ObjectEncoding{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "ENCODING")
	return c
}

func (b *SBuilder) ObjectEncoding() (c SObjectEncoding) {
	c = SObjectEncoding{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "ENCODING")
	return c
}

func (c ObjectEncoding) Key(key string) ObjectEncodingKey {
	c.cs.s = append(c.cs.s, key)
	return (ObjectEncodingKey)(c)
}

func (c SObjectEncoding) Key(key string) SObjectEncodingKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SObjectEncodingKey)(c)
}

type ObjectEncodingKey Completed

type SObjectEncodingKey SCompleted

func (c ObjectEncodingKey) Build() Completed {
	return Completed(c)
}

func (c SObjectEncodingKey) Build() SCompleted {
	return SCompleted(c)
}

type ObjectFreq Completed

type SObjectFreq SCompleted

func (b *Builder) ObjectFreq() (c ObjectFreq) {
	c = ObjectFreq{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "FREQ")
	return c
}

func (b *SBuilder) ObjectFreq() (c SObjectFreq) {
	c = SObjectFreq{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "FREQ")
	return c
}

func (c ObjectFreq) Key(key string) ObjectFreqKey {
	c.cs.s = append(c.cs.s, key)
	return (ObjectFreqKey)(c)
}

func (c SObjectFreq) Key(key string) SObjectFreqKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SObjectFreqKey)(c)
}

type ObjectFreqKey Completed

type SObjectFreqKey SCompleted

func (c ObjectFreqKey) Build() Completed {
	return Completed(c)
}

func (c SObjectFreqKey) Build() SCompleted {
	return SCompleted(c)
}

type ObjectHelp Completed

type SObjectHelp SCompleted

func (b *Builder) ObjectHelp() (c ObjectHelp) {
	c = ObjectHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "HELP")
	return c
}

func (b *SBuilder) ObjectHelp() (c SObjectHelp) {
	c = SObjectHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "HELP")
	return c
}

func (c ObjectHelp) Build() Completed {
	return Completed(c)
}

func (c SObjectHelp) Build() SCompleted {
	return SCompleted(c)
}

type ObjectIdletime Completed

type SObjectIdletime SCompleted

func (b *Builder) ObjectIdletime() (c ObjectIdletime) {
	c = ObjectIdletime{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "IDLETIME")
	return c
}

func (b *SBuilder) ObjectIdletime() (c SObjectIdletime) {
	c = SObjectIdletime{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "IDLETIME")
	return c
}

func (c ObjectIdletime) Key(key string) ObjectIdletimeKey {
	c.cs.s = append(c.cs.s, key)
	return (ObjectIdletimeKey)(c)
}

func (c SObjectIdletime) Key(key string) SObjectIdletimeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SObjectIdletimeKey)(c)
}

type ObjectIdletimeKey Completed

type SObjectIdletimeKey SCompleted

func (c ObjectIdletimeKey) Build() Completed {
	return Completed(c)
}

func (c SObjectIdletimeKey) Build() SCompleted {
	return SCompleted(c)
}

type ObjectRefcount Completed

type SObjectRefcount SCompleted

func (b *Builder) ObjectRefcount() (c ObjectRefcount) {
	c = ObjectRefcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "REFCOUNT")
	return c
}

func (b *SBuilder) ObjectRefcount() (c SObjectRefcount) {
	c = SObjectRefcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "OBJECT", "REFCOUNT")
	return c
}

func (c ObjectRefcount) Key(key string) ObjectRefcountKey {
	c.cs.s = append(c.cs.s, key)
	return (ObjectRefcountKey)(c)
}

func (c SObjectRefcount) Key(key string) SObjectRefcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SObjectRefcountKey)(c)
}

type ObjectRefcountKey Completed

type SObjectRefcountKey SCompleted

func (c ObjectRefcountKey) Build() Completed {
	return Completed(c)
}

func (c SObjectRefcountKey) Build() SCompleted {
	return SCompleted(c)
}

type Persist Completed

type SPersist SCompleted

func (b *Builder) Persist() (c Persist) {
	c = Persist{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PERSIST")
	return c
}

func (b *SBuilder) Persist() (c SPersist) {
	c = SPersist{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PERSIST")
	return c
}

func (c Persist) Key(key string) PersistKey {
	c.cs.s = append(c.cs.s, key)
	return (PersistKey)(c)
}

func (c SPersist) Key(key string) SPersistKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPersistKey)(c)
}

type PersistKey Completed

type SPersistKey SCompleted

func (c PersistKey) Build() Completed {
	return Completed(c)
}

func (c SPersistKey) Build() SCompleted {
	return SCompleted(c)
}

type Pexpire Completed

type SPexpire SCompleted

func (b *Builder) Pexpire() (c Pexpire) {
	c = Pexpire{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PEXPIRE")
	return c
}

func (b *SBuilder) Pexpire() (c SPexpire) {
	c = SPexpire{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PEXPIRE")
	return c
}

func (c Pexpire) Key(key string) PexpireKey {
	c.cs.s = append(c.cs.s, key)
	return (PexpireKey)(c)
}

func (c SPexpire) Key(key string) SPexpireKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPexpireKey)(c)
}

type PexpireConditionGt Completed

type SPexpireConditionGt SCompleted

func (c PexpireConditionGt) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireConditionLt Completed

type SPexpireConditionLt SCompleted

func (c PexpireConditionLt) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireConditionNx Completed

type SPexpireConditionNx SCompleted

func (c PexpireConditionNx) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireConditionXx Completed

type SPexpireConditionXx SCompleted

func (c PexpireConditionXx) Build() Completed {
	return Completed(c)
}

func (c SPexpireConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireKey Completed

type SPexpireKey SCompleted

func (c PexpireKey) Milliseconds(milliseconds int64) PexpireMilliseconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(milliseconds, 10))
	return (PexpireMilliseconds)(c)
}

func (c SPexpireKey) Milliseconds(milliseconds int64) SPexpireMilliseconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(milliseconds, 10))
	return (SPexpireMilliseconds)(c)
}

type PexpireMilliseconds Completed

type SPexpireMilliseconds SCompleted

func (c PexpireMilliseconds) Nx() PexpireConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (PexpireConditionNx)(c)
}

func (c SPexpireMilliseconds) Nx() SPexpireConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SPexpireConditionNx)(c)
}

func (c PexpireMilliseconds) Xx() PexpireConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (PexpireConditionXx)(c)
}

func (c SPexpireMilliseconds) Xx() SPexpireConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SPexpireConditionXx)(c)
}

func (c PexpireMilliseconds) Gt() PexpireConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (PexpireConditionGt)(c)
}

func (c SPexpireMilliseconds) Gt() SPexpireConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SPexpireConditionGt)(c)
}

func (c PexpireMilliseconds) Lt() PexpireConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (PexpireConditionLt)(c)
}

func (c SPexpireMilliseconds) Lt() SPexpireConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SPexpireConditionLt)(c)
}

func (c PexpireMilliseconds) Build() Completed {
	return Completed(c)
}

func (c SPexpireMilliseconds) Build() SCompleted {
	return SCompleted(c)
}

type Pexpireat Completed

type SPexpireat SCompleted

func (b *Builder) Pexpireat() (c Pexpireat) {
	c = Pexpireat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PEXPIREAT")
	return c
}

func (b *SBuilder) Pexpireat() (c SPexpireat) {
	c = SPexpireat{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PEXPIREAT")
	return c
}

func (c Pexpireat) Key(key string) PexpireatKey {
	c.cs.s = append(c.cs.s, key)
	return (PexpireatKey)(c)
}

func (c SPexpireat) Key(key string) SPexpireatKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPexpireatKey)(c)
}

type PexpireatConditionGt Completed

type SPexpireatConditionGt SCompleted

func (c PexpireatConditionGt) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionGt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatConditionLt Completed

type SPexpireatConditionLt SCompleted

func (c PexpireatConditionLt) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionLt) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatConditionNx Completed

type SPexpireatConditionNx SCompleted

func (c PexpireatConditionNx) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatConditionXx Completed

type SPexpireatConditionXx SCompleted

func (c PexpireatConditionXx) Build() Completed {
	return Completed(c)
}

func (c SPexpireatConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type PexpireatKey Completed

type SPexpireatKey SCompleted

func (c PexpireatKey) MillisecondsTimestamp(millisecondsTimestamp int64) PexpireatMillisecondsTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(millisecondsTimestamp, 10))
	return (PexpireatMillisecondsTimestamp)(c)
}

func (c SPexpireatKey) MillisecondsTimestamp(millisecondsTimestamp int64) SPexpireatMillisecondsTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(millisecondsTimestamp, 10))
	return (SPexpireatMillisecondsTimestamp)(c)
}

type PexpireatMillisecondsTimestamp Completed

type SPexpireatMillisecondsTimestamp SCompleted

func (c PexpireatMillisecondsTimestamp) Nx() PexpireatConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (PexpireatConditionNx)(c)
}

func (c SPexpireatMillisecondsTimestamp) Nx() SPexpireatConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SPexpireatConditionNx)(c)
}

func (c PexpireatMillisecondsTimestamp) Xx() PexpireatConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (PexpireatConditionXx)(c)
}

func (c SPexpireatMillisecondsTimestamp) Xx() SPexpireatConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SPexpireatConditionXx)(c)
}

func (c PexpireatMillisecondsTimestamp) Gt() PexpireatConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (PexpireatConditionGt)(c)
}

func (c SPexpireatMillisecondsTimestamp) Gt() SPexpireatConditionGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SPexpireatConditionGt)(c)
}

func (c PexpireatMillisecondsTimestamp) Lt() PexpireatConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (PexpireatConditionLt)(c)
}

func (c SPexpireatMillisecondsTimestamp) Lt() SPexpireatConditionLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SPexpireatConditionLt)(c)
}

func (c PexpireatMillisecondsTimestamp) Build() Completed {
	return Completed(c)
}

func (c SPexpireatMillisecondsTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type Pexpiretime Completed

type SPexpiretime SCompleted

func (b *Builder) Pexpiretime() (c Pexpiretime) {
	c = Pexpiretime{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PEXPIRETIME")
	return c
}

func (b *SBuilder) Pexpiretime() (c SPexpiretime) {
	c = SPexpiretime{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PEXPIRETIME")
	return c
}

func (c Pexpiretime) Key(key string) PexpiretimeKey {
	c.cs.s = append(c.cs.s, key)
	return (PexpiretimeKey)(c)
}

func (c SPexpiretime) Key(key string) SPexpiretimeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPexpiretimeKey)(c)
}

type PexpiretimeKey Completed

type SPexpiretimeKey SCompleted

func (c PexpiretimeKey) Build() Completed {
	return Completed(c)
}

func (c SPexpiretimeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c PexpiretimeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SPexpiretimeKey) Cache() SCacheable {
	return SCacheable(c)
}

type Pfadd Completed

type SPfadd SCompleted

func (b *Builder) Pfadd() (c Pfadd) {
	c = Pfadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PFADD")
	return c
}

func (b *SBuilder) Pfadd() (c SPfadd) {
	c = SPfadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PFADD")
	return c
}

func (c Pfadd) Key(key string) PfaddKey {
	c.cs.s = append(c.cs.s, key)
	return (PfaddKey)(c)
}

func (c SPfadd) Key(key string) SPfaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPfaddKey)(c)
}

type PfaddElement Completed

type SPfaddElement SCompleted

func (c PfaddElement) Element(element ...string) PfaddElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c SPfaddElement) Element(element ...string) SPfaddElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c PfaddElement) Build() Completed {
	return Completed(c)
}

func (c SPfaddElement) Build() SCompleted {
	return SCompleted(c)
}

type PfaddKey Completed

type SPfaddKey SCompleted

func (c PfaddKey) Element(element ...string) PfaddElement {
	c.cs.s = append(c.cs.s, element...)
	return (PfaddElement)(c)
}

func (c SPfaddKey) Element(element ...string) SPfaddElement {
	c.cs.s = append(c.cs.s, element...)
	return (SPfaddElement)(c)
}

func (c PfaddKey) Build() Completed {
	return Completed(c)
}

func (c SPfaddKey) Build() SCompleted {
	return SCompleted(c)
}

type Pfcount Completed

type SPfcount SCompleted

func (b *Builder) Pfcount() (c Pfcount) {
	c = Pfcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PFCOUNT")
	return c
}

func (b *SBuilder) Pfcount() (c SPfcount) {
	c = SPfcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PFCOUNT")
	return c
}

func (c Pfcount) Key(key ...string) PfcountKey {
	c.cs.s = append(c.cs.s, key...)
	return (PfcountKey)(c)
}

func (c SPfcount) Key(key ...string) SPfcountKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SPfcountKey)(c)
}

type PfcountKey Completed

type SPfcountKey SCompleted

func (c PfcountKey) Key(key ...string) PfcountKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SPfcountKey) Key(key ...string) SPfcountKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c PfcountKey) Build() Completed {
	return Completed(c)
}

func (c SPfcountKey) Build() SCompleted {
	return SCompleted(c)
}

type Pfmerge Completed

type SPfmerge SCompleted

func (b *Builder) Pfmerge() (c Pfmerge) {
	c = Pfmerge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PFMERGE")
	return c
}

func (b *SBuilder) Pfmerge() (c SPfmerge) {
	c = SPfmerge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PFMERGE")
	return c
}

func (c Pfmerge) Destkey(destkey string) PfmergeDestkey {
	c.cs.s = append(c.cs.s, destkey)
	return (PfmergeDestkey)(c)
}

func (c SPfmerge) Destkey(destkey string) SPfmergeDestkey {
	c.ks = checkSlot(c.ks, slot(destkey))
	c.cs.s = append(c.cs.s, destkey)
	return (SPfmergeDestkey)(c)
}

type PfmergeDestkey Completed

type SPfmergeDestkey SCompleted

func (c PfmergeDestkey) Sourcekey(sourcekey ...string) PfmergeSourcekey {
	c.cs.s = append(c.cs.s, sourcekey...)
	return (PfmergeSourcekey)(c)
}

func (c SPfmergeDestkey) Sourcekey(sourcekey ...string) SPfmergeSourcekey {
	for _, k := range sourcekey {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, sourcekey...)
	return (SPfmergeSourcekey)(c)
}

type PfmergeSourcekey Completed

type SPfmergeSourcekey SCompleted

func (c PfmergeSourcekey) Sourcekey(sourcekey ...string) PfmergeSourcekey {
	c.cs.s = append(c.cs.s, sourcekey...)
	return c
}

func (c SPfmergeSourcekey) Sourcekey(sourcekey ...string) SPfmergeSourcekey {
	for _, k := range sourcekey {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, sourcekey...)
	return c
}

func (c PfmergeSourcekey) Build() Completed {
	return Completed(c)
}

func (c SPfmergeSourcekey) Build() SCompleted {
	return SCompleted(c)
}

type Ping Completed

type SPing SCompleted

func (b *Builder) Ping() (c Ping) {
	c = Ping{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PING")
	return c
}

func (b *SBuilder) Ping() (c SPing) {
	c = SPing{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PING")
	return c
}

func (c Ping) Message(message string) PingMessage {
	c.cs.s = append(c.cs.s, message)
	return (PingMessage)(c)
}

func (c SPing) Message(message string) SPingMessage {
	c.cs.s = append(c.cs.s, message)
	return (SPingMessage)(c)
}

func (c Ping) Build() Completed {
	return Completed(c)
}

func (c SPing) Build() SCompleted {
	return SCompleted(c)
}

type PingMessage Completed

type SPingMessage SCompleted

func (c PingMessage) Build() Completed {
	return Completed(c)
}

func (c SPingMessage) Build() SCompleted {
	return SCompleted(c)
}

type Psetex Completed

type SPsetex SCompleted

func (b *Builder) Psetex() (c Psetex) {
	c = Psetex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PSETEX")
	return c
}

func (b *SBuilder) Psetex() (c SPsetex) {
	c = SPsetex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PSETEX")
	return c
}

func (c Psetex) Key(key string) PsetexKey {
	c.cs.s = append(c.cs.s, key)
	return (PsetexKey)(c)
}

func (c SPsetex) Key(key string) SPsetexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPsetexKey)(c)
}

type PsetexKey Completed

type SPsetexKey SCompleted

func (c PsetexKey) Milliseconds(milliseconds int64) PsetexMilliseconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(milliseconds, 10))
	return (PsetexMilliseconds)(c)
}

func (c SPsetexKey) Milliseconds(milliseconds int64) SPsetexMilliseconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(milliseconds, 10))
	return (SPsetexMilliseconds)(c)
}

type PsetexMilliseconds Completed

type SPsetexMilliseconds SCompleted

func (c PsetexMilliseconds) Value(value string) PsetexValue {
	c.cs.s = append(c.cs.s, value)
	return (PsetexValue)(c)
}

func (c SPsetexMilliseconds) Value(value string) SPsetexValue {
	c.cs.s = append(c.cs.s, value)
	return (SPsetexValue)(c)
}

type PsetexValue Completed

type SPsetexValue SCompleted

func (c PsetexValue) Build() Completed {
	return Completed(c)
}

func (c SPsetexValue) Build() SCompleted {
	return SCompleted(c)
}

type Psubscribe Completed

type SPsubscribe SCompleted

func (b *Builder) Psubscribe() (c Psubscribe) {
	c = Psubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "PSUBSCRIBE")
	return c
}

func (b *SBuilder) Psubscribe() (c SPsubscribe) {
	c = SPsubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "PSUBSCRIBE")
	return c
}

func (c Psubscribe) Pattern(pattern ...string) PsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return (PsubscribePattern)(c)
}

func (c SPsubscribe) Pattern(pattern ...string) SPsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return (SPsubscribePattern)(c)
}

type PsubscribePattern Completed

type SPsubscribePattern SCompleted

func (c PsubscribePattern) Pattern(pattern ...string) PsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c SPsubscribePattern) Pattern(pattern ...string) SPsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c PsubscribePattern) Build() Completed {
	return Completed(c)
}

func (c SPsubscribePattern) Build() SCompleted {
	return SCompleted(c)
}

type Psync Completed

type SPsync SCompleted

func (b *Builder) Psync() (c Psync) {
	c = Psync{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PSYNC")
	return c
}

func (b *SBuilder) Psync() (c SPsync) {
	c = SPsync{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PSYNC")
	return c
}

func (c Psync) Replicationid(replicationid int64) PsyncReplicationid {
	c.cs.s = append(c.cs.s, strconv.FormatInt(replicationid, 10))
	return (PsyncReplicationid)(c)
}

func (c SPsync) Replicationid(replicationid int64) SPsyncReplicationid {
	c.cs.s = append(c.cs.s, strconv.FormatInt(replicationid, 10))
	return (SPsyncReplicationid)(c)
}

type PsyncOffset Completed

type SPsyncOffset SCompleted

func (c PsyncOffset) Build() Completed {
	return Completed(c)
}

func (c SPsyncOffset) Build() SCompleted {
	return SCompleted(c)
}

type PsyncReplicationid Completed

type SPsyncReplicationid SCompleted

func (c PsyncReplicationid) Offset(offset int64) PsyncOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (PsyncOffset)(c)
}

func (c SPsyncReplicationid) Offset(offset int64) SPsyncOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (SPsyncOffset)(c)
}

type Pttl Completed

type SPttl SCompleted

func (b *Builder) Pttl() (c Pttl) {
	c = Pttl{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PTTL")
	return c
}

func (b *SBuilder) Pttl() (c SPttl) {
	c = SPttl{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PTTL")
	return c
}

func (c Pttl) Key(key string) PttlKey {
	c.cs.s = append(c.cs.s, key)
	return (PttlKey)(c)
}

func (c SPttl) Key(key string) SPttlKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SPttlKey)(c)
}

type PttlKey Completed

type SPttlKey SCompleted

func (c PttlKey) Build() Completed {
	return Completed(c)
}

func (c SPttlKey) Build() SCompleted {
	return SCompleted(c)
}

func (c PttlKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SPttlKey) Cache() SCacheable {
	return SCacheable(c)
}

type Publish Completed

type SPublish SCompleted

func (b *Builder) Publish() (c Publish) {
	c = Publish{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PUBLISH")
	return c
}

func (b *SBuilder) Publish() (c SPublish) {
	c = SPublish{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "PUBLISH")
	return c
}

func (c Publish) Channel(channel string) PublishChannel {
	c.cs.s = append(c.cs.s, channel)
	return (PublishChannel)(c)
}

func (c SPublish) Channel(channel string) SPublishChannel {
	c.cs.s = append(c.cs.s, channel)
	return (SPublishChannel)(c)
}

type PublishChannel Completed

type SPublishChannel SCompleted

func (c PublishChannel) Message(message string) PublishMessage {
	c.cs.s = append(c.cs.s, message)
	return (PublishMessage)(c)
}

func (c SPublishChannel) Message(message string) SPublishMessage {
	c.cs.s = append(c.cs.s, message)
	return (SPublishMessage)(c)
}

type PublishMessage Completed

type SPublishMessage SCompleted

func (c PublishMessage) Build() Completed {
	return Completed(c)
}

func (c SPublishMessage) Build() SCompleted {
	return SCompleted(c)
}

type PubsubChannels Completed

type SPubsubChannels SCompleted

func (b *Builder) PubsubChannels() (c PubsubChannels) {
	c = PubsubChannels{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "CHANNELS")
	return c
}

func (b *SBuilder) PubsubChannels() (c SPubsubChannels) {
	c = SPubsubChannels{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "CHANNELS")
	return c
}

func (c PubsubChannels) Pattern(pattern string) PubsubChannelsPattern {
	c.cs.s = append(c.cs.s, pattern)
	return (PubsubChannelsPattern)(c)
}

func (c SPubsubChannels) Pattern(pattern string) SPubsubChannelsPattern {
	c.cs.s = append(c.cs.s, pattern)
	return (SPubsubChannelsPattern)(c)
}

func (c PubsubChannels) Build() Completed {
	return Completed(c)
}

func (c SPubsubChannels) Build() SCompleted {
	return SCompleted(c)
}

type PubsubChannelsPattern Completed

type SPubsubChannelsPattern SCompleted

func (c PubsubChannelsPattern) Build() Completed {
	return Completed(c)
}

func (c SPubsubChannelsPattern) Build() SCompleted {
	return SCompleted(c)
}

type PubsubHelp Completed

type SPubsubHelp SCompleted

func (b *Builder) PubsubHelp() (c PubsubHelp) {
	c = PubsubHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "HELP")
	return c
}

func (b *SBuilder) PubsubHelp() (c SPubsubHelp) {
	c = SPubsubHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "HELP")
	return c
}

func (c PubsubHelp) Build() Completed {
	return Completed(c)
}

func (c SPubsubHelp) Build() SCompleted {
	return SCompleted(c)
}

type PubsubNumpat Completed

type SPubsubNumpat SCompleted

func (b *Builder) PubsubNumpat() (c PubsubNumpat) {
	c = PubsubNumpat{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "NUMPAT")
	return c
}

func (b *SBuilder) PubsubNumpat() (c SPubsubNumpat) {
	c = SPubsubNumpat{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "NUMPAT")
	return c
}

func (c PubsubNumpat) Build() Completed {
	return Completed(c)
}

func (c SPubsubNumpat) Build() SCompleted {
	return SCompleted(c)
}

type PubsubNumsub Completed

type SPubsubNumsub SCompleted

func (b *Builder) PubsubNumsub() (c PubsubNumsub) {
	c = PubsubNumsub{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "NUMSUB")
	return c
}

func (b *SBuilder) PubsubNumsub() (c SPubsubNumsub) {
	c = SPubsubNumsub{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "PUBSUB", "NUMSUB")
	return c
}

func (c PubsubNumsub) Channel(channel ...string) PubsubNumsubChannel {
	c.cs.s = append(c.cs.s, channel...)
	return (PubsubNumsubChannel)(c)
}

func (c SPubsubNumsub) Channel(channel ...string) SPubsubNumsubChannel {
	c.cs.s = append(c.cs.s, channel...)
	return (SPubsubNumsubChannel)(c)
}

func (c PubsubNumsub) Build() Completed {
	return Completed(c)
}

func (c SPubsubNumsub) Build() SCompleted {
	return SCompleted(c)
}

type PubsubNumsubChannel Completed

type SPubsubNumsubChannel SCompleted

func (c PubsubNumsubChannel) Channel(channel ...string) PubsubNumsubChannel {
	c.cs.s = append(c.cs.s, channel...)
	return c
}

func (c SPubsubNumsubChannel) Channel(channel ...string) SPubsubNumsubChannel {
	c.cs.s = append(c.cs.s, channel...)
	return c
}

func (c PubsubNumsubChannel) Build() Completed {
	return Completed(c)
}

func (c SPubsubNumsubChannel) Build() SCompleted {
	return SCompleted(c)
}

type Punsubscribe Completed

type SPunsubscribe SCompleted

func (b *Builder) Punsubscribe() (c Punsubscribe) {
	c = Punsubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "PUNSUBSCRIBE")
	return c
}

func (b *SBuilder) Punsubscribe() (c SPunsubscribe) {
	c = SPunsubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "PUNSUBSCRIBE")
	return c
}

func (c Punsubscribe) Pattern(pattern ...string) PunsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return (PunsubscribePattern)(c)
}

func (c SPunsubscribe) Pattern(pattern ...string) SPunsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return (SPunsubscribePattern)(c)
}

func (c Punsubscribe) Build() Completed {
	return Completed(c)
}

func (c SPunsubscribe) Build() SCompleted {
	return SCompleted(c)
}

type PunsubscribePattern Completed

type SPunsubscribePattern SCompleted

func (c PunsubscribePattern) Pattern(pattern ...string) PunsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c SPunsubscribePattern) Pattern(pattern ...string) SPunsubscribePattern {
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c PunsubscribePattern) Build() Completed {
	return Completed(c)
}

func (c SPunsubscribePattern) Build() SCompleted {
	return SCompleted(c)
}

type Quit Completed

type SQuit SCompleted

func (b *Builder) Quit() (c Quit) {
	c = Quit{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "QUIT")
	return c
}

func (b *SBuilder) Quit() (c SQuit) {
	c = SQuit{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "QUIT")
	return c
}

func (c Quit) Build() Completed {
	return Completed(c)
}

func (c SQuit) Build() SCompleted {
	return SCompleted(c)
}

type Randomkey Completed

type SRandomkey SCompleted

func (b *Builder) Randomkey() (c Randomkey) {
	c = Randomkey{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "RANDOMKEY")
	return c
}

func (b *SBuilder) Randomkey() (c SRandomkey) {
	c = SRandomkey{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "RANDOMKEY")
	return c
}

func (c Randomkey) Build() Completed {
	return Completed(c)
}

func (c SRandomkey) Build() SCompleted {
	return SCompleted(c)
}

type Readonly Completed

type SReadonly SCompleted

func (b *Builder) Readonly() (c Readonly) {
	c = Readonly{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "READONLY")
	return c
}

func (b *SBuilder) Readonly() (c SReadonly) {
	c = SReadonly{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "READONLY")
	return c
}

func (c Readonly) Build() Completed {
	return Completed(c)
}

func (c SReadonly) Build() SCompleted {
	return SCompleted(c)
}

type Readwrite Completed

type SReadwrite SCompleted

func (b *Builder) Readwrite() (c Readwrite) {
	c = Readwrite{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "READWRITE")
	return c
}

func (b *SBuilder) Readwrite() (c SReadwrite) {
	c = SReadwrite{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "READWRITE")
	return c
}

func (c Readwrite) Build() Completed {
	return Completed(c)
}

func (c SReadwrite) Build() SCompleted {
	return SCompleted(c)
}

type Rename Completed

type SRename SCompleted

func (b *Builder) Rename() (c Rename) {
	c = Rename{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RENAME")
	return c
}

func (b *SBuilder) Rename() (c SRename) {
	c = SRename{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RENAME")
	return c
}

func (c Rename) Key(key string) RenameKey {
	c.cs.s = append(c.cs.s, key)
	return (RenameKey)(c)
}

func (c SRename) Key(key string) SRenameKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SRenameKey)(c)
}

type RenameKey Completed

type SRenameKey SCompleted

func (c RenameKey) Newkey(newkey string) RenameNewkey {
	c.cs.s = append(c.cs.s, newkey)
	return (RenameNewkey)(c)
}

func (c SRenameKey) Newkey(newkey string) SRenameNewkey {
	c.ks = checkSlot(c.ks, slot(newkey))
	c.cs.s = append(c.cs.s, newkey)
	return (SRenameNewkey)(c)
}

type RenameNewkey Completed

type SRenameNewkey SCompleted

func (c RenameNewkey) Build() Completed {
	return Completed(c)
}

func (c SRenameNewkey) Build() SCompleted {
	return SCompleted(c)
}

type Renamenx Completed

type SRenamenx SCompleted

func (b *Builder) Renamenx() (c Renamenx) {
	c = Renamenx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RENAMENX")
	return c
}

func (b *SBuilder) Renamenx() (c SRenamenx) {
	c = SRenamenx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RENAMENX")
	return c
}

func (c Renamenx) Key(key string) RenamenxKey {
	c.cs.s = append(c.cs.s, key)
	return (RenamenxKey)(c)
}

func (c SRenamenx) Key(key string) SRenamenxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SRenamenxKey)(c)
}

type RenamenxKey Completed

type SRenamenxKey SCompleted

func (c RenamenxKey) Newkey(newkey string) RenamenxNewkey {
	c.cs.s = append(c.cs.s, newkey)
	return (RenamenxNewkey)(c)
}

func (c SRenamenxKey) Newkey(newkey string) SRenamenxNewkey {
	c.ks = checkSlot(c.ks, slot(newkey))
	c.cs.s = append(c.cs.s, newkey)
	return (SRenamenxNewkey)(c)
}

type RenamenxNewkey Completed

type SRenamenxNewkey SCompleted

func (c RenamenxNewkey) Build() Completed {
	return Completed(c)
}

func (c SRenamenxNewkey) Build() SCompleted {
	return SCompleted(c)
}

type Replicaof Completed

type SReplicaof SCompleted

func (b *Builder) Replicaof() (c Replicaof) {
	c = Replicaof{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "REPLICAOF")
	return c
}

func (b *SBuilder) Replicaof() (c SReplicaof) {
	c = SReplicaof{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "REPLICAOF")
	return c
}

func (c Replicaof) Host(host string) ReplicaofHost {
	c.cs.s = append(c.cs.s, host)
	return (ReplicaofHost)(c)
}

func (c SReplicaof) Host(host string) SReplicaofHost {
	c.cs.s = append(c.cs.s, host)
	return (SReplicaofHost)(c)
}

type ReplicaofHost Completed

type SReplicaofHost SCompleted

func (c ReplicaofHost) Port(port string) ReplicaofPort {
	c.cs.s = append(c.cs.s, port)
	return (ReplicaofPort)(c)
}

func (c SReplicaofHost) Port(port string) SReplicaofPort {
	c.cs.s = append(c.cs.s, port)
	return (SReplicaofPort)(c)
}

type ReplicaofPort Completed

type SReplicaofPort SCompleted

func (c ReplicaofPort) Build() Completed {
	return Completed(c)
}

func (c SReplicaofPort) Build() SCompleted {
	return SCompleted(c)
}

type Reset Completed

type SReset SCompleted

func (b *Builder) Reset() (c Reset) {
	c = Reset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RESET")
	return c
}

func (b *SBuilder) Reset() (c SReset) {
	c = SReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RESET")
	return c
}

func (c Reset) Build() Completed {
	return Completed(c)
}

func (c SReset) Build() SCompleted {
	return SCompleted(c)
}

type Restore Completed

type SRestore SCompleted

func (b *Builder) Restore() (c Restore) {
	c = Restore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RESTORE")
	return c
}

func (b *SBuilder) Restore() (c SRestore) {
	c = SRestore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RESTORE")
	return c
}

func (c Restore) Key(key string) RestoreKey {
	c.cs.s = append(c.cs.s, key)
	return (RestoreKey)(c)
}

func (c SRestore) Key(key string) SRestoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SRestoreKey)(c)
}

type RestoreAbsttl Completed

type SRestoreAbsttl SCompleted

func (c RestoreAbsttl) Idletime(seconds int64) RestoreIdletime {
	c.cs.s = append(c.cs.s, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (RestoreIdletime)(c)
}

func (c SRestoreAbsttl) Idletime(seconds int64) SRestoreIdletime {
	c.cs.s = append(c.cs.s, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (SRestoreIdletime)(c)
}

func (c RestoreAbsttl) Freq(frequency int64) RestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreAbsttl) Freq(frequency int64) SRestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreAbsttl) Build() Completed {
	return Completed(c)
}

func (c SRestoreAbsttl) Build() SCompleted {
	return SCompleted(c)
}

type RestoreFreq Completed

type SRestoreFreq SCompleted

func (c RestoreFreq) Build() Completed {
	return Completed(c)
}

func (c SRestoreFreq) Build() SCompleted {
	return SCompleted(c)
}

type RestoreIdletime Completed

type SRestoreIdletime SCompleted

func (c RestoreIdletime) Freq(frequency int64) RestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreIdletime) Freq(frequency int64) SRestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreIdletime) Build() Completed {
	return Completed(c)
}

func (c SRestoreIdletime) Build() SCompleted {
	return SCompleted(c)
}

type RestoreKey Completed

type SRestoreKey SCompleted

func (c RestoreKey) Ttl(ttl int64) RestoreTtl {
	c.cs.s = append(c.cs.s, strconv.FormatInt(ttl, 10))
	return (RestoreTtl)(c)
}

func (c SRestoreKey) Ttl(ttl int64) SRestoreTtl {
	c.cs.s = append(c.cs.s, strconv.FormatInt(ttl, 10))
	return (SRestoreTtl)(c)
}

type RestoreReplace Completed

type SRestoreReplace SCompleted

func (c RestoreReplace) Absttl() RestoreAbsttl {
	c.cs.s = append(c.cs.s, "ABSTTL")
	return (RestoreAbsttl)(c)
}

func (c SRestoreReplace) Absttl() SRestoreAbsttl {
	c.cs.s = append(c.cs.s, "ABSTTL")
	return (SRestoreAbsttl)(c)
}

func (c RestoreReplace) Idletime(seconds int64) RestoreIdletime {
	c.cs.s = append(c.cs.s, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (RestoreIdletime)(c)
}

func (c SRestoreReplace) Idletime(seconds int64) SRestoreIdletime {
	c.cs.s = append(c.cs.s, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (SRestoreIdletime)(c)
}

func (c RestoreReplace) Freq(frequency int64) RestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreReplace) Freq(frequency int64) SRestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreReplace) Build() Completed {
	return Completed(c)
}

func (c SRestoreReplace) Build() SCompleted {
	return SCompleted(c)
}

type RestoreSerializedValue Completed

type SRestoreSerializedValue SCompleted

func (c RestoreSerializedValue) Replace() RestoreReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (RestoreReplace)(c)
}

func (c SRestoreSerializedValue) Replace() SRestoreReplace {
	c.cs.s = append(c.cs.s, "REPLACE")
	return (SRestoreReplace)(c)
}

func (c RestoreSerializedValue) Absttl() RestoreAbsttl {
	c.cs.s = append(c.cs.s, "ABSTTL")
	return (RestoreAbsttl)(c)
}

func (c SRestoreSerializedValue) Absttl() SRestoreAbsttl {
	c.cs.s = append(c.cs.s, "ABSTTL")
	return (SRestoreAbsttl)(c)
}

func (c RestoreSerializedValue) Idletime(seconds int64) RestoreIdletime {
	c.cs.s = append(c.cs.s, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (RestoreIdletime)(c)
}

func (c SRestoreSerializedValue) Idletime(seconds int64) SRestoreIdletime {
	c.cs.s = append(c.cs.s, "IDLETIME", strconv.FormatInt(seconds, 10))
	return (SRestoreIdletime)(c)
}

func (c RestoreSerializedValue) Freq(frequency int64) RestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (RestoreFreq)(c)
}

func (c SRestoreSerializedValue) Freq(frequency int64) SRestoreFreq {
	c.cs.s = append(c.cs.s, "FREQ", strconv.FormatInt(frequency, 10))
	return (SRestoreFreq)(c)
}

func (c RestoreSerializedValue) Build() Completed {
	return Completed(c)
}

func (c SRestoreSerializedValue) Build() SCompleted {
	return SCompleted(c)
}

type RestoreTtl Completed

type SRestoreTtl SCompleted

func (c RestoreTtl) SerializedValue(serializedValue string) RestoreSerializedValue {
	c.cs.s = append(c.cs.s, serializedValue)
	return (RestoreSerializedValue)(c)
}

func (c SRestoreTtl) SerializedValue(serializedValue string) SRestoreSerializedValue {
	c.cs.s = append(c.cs.s, serializedValue)
	return (SRestoreSerializedValue)(c)
}

type Role Completed

type SRole SCompleted

func (b *Builder) Role() (c Role) {
	c = Role{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ROLE")
	return c
}

func (b *SBuilder) Role() (c SRole) {
	c = SRole{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ROLE")
	return c
}

func (c Role) Build() Completed {
	return Completed(c)
}

func (c SRole) Build() SCompleted {
	return SCompleted(c)
}

type Rpop Completed

type SRpop SCompleted

func (b *Builder) Rpop() (c Rpop) {
	c = Rpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPOP")
	return c
}

func (b *SBuilder) Rpop() (c SRpop) {
	c = SRpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPOP")
	return c
}

func (c Rpop) Key(key string) RpopKey {
	c.cs.s = append(c.cs.s, key)
	return (RpopKey)(c)
}

func (c SRpop) Key(key string) SRpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SRpopKey)(c)
}

type RpopCount Completed

type SRpopCount SCompleted

func (c RpopCount) Build() Completed {
	return Completed(c)
}

func (c SRpopCount) Build() SCompleted {
	return SCompleted(c)
}

type RpopKey Completed

type SRpopKey SCompleted

func (c RpopKey) Count(count int64) RpopCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (RpopCount)(c)
}

func (c SRpopKey) Count(count int64) SRpopCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SRpopCount)(c)
}

func (c RpopKey) Build() Completed {
	return Completed(c)
}

func (c SRpopKey) Build() SCompleted {
	return SCompleted(c)
}

type Rpoplpush Completed

type SRpoplpush SCompleted

func (b *Builder) Rpoplpush() (c Rpoplpush) {
	c = Rpoplpush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPOPLPUSH")
	return c
}

func (b *SBuilder) Rpoplpush() (c SRpoplpush) {
	c = SRpoplpush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPOPLPUSH")
	return c
}

func (c Rpoplpush) Source(source string) RpoplpushSource {
	c.cs.s = append(c.cs.s, source)
	return (RpoplpushSource)(c)
}

func (c SRpoplpush) Source(source string) SRpoplpushSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SRpoplpushSource)(c)
}

type RpoplpushDestination Completed

type SRpoplpushDestination SCompleted

func (c RpoplpushDestination) Build() Completed {
	return Completed(c)
}

func (c SRpoplpushDestination) Build() SCompleted {
	return SCompleted(c)
}

type RpoplpushSource Completed

type SRpoplpushSource SCompleted

func (c RpoplpushSource) Destination(destination string) RpoplpushDestination {
	c.cs.s = append(c.cs.s, destination)
	return (RpoplpushDestination)(c)
}

func (c SRpoplpushSource) Destination(destination string) SRpoplpushDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SRpoplpushDestination)(c)
}

type Rpush Completed

type SRpush SCompleted

func (b *Builder) Rpush() (c Rpush) {
	c = Rpush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPUSH")
	return c
}

func (b *SBuilder) Rpush() (c SRpush) {
	c = SRpush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPUSH")
	return c
}

func (c Rpush) Key(key string) RpushKey {
	c.cs.s = append(c.cs.s, key)
	return (RpushKey)(c)
}

func (c SRpush) Key(key string) SRpushKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SRpushKey)(c)
}

type RpushElement Completed

type SRpushElement SCompleted

func (c RpushElement) Element(element ...string) RpushElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c SRpushElement) Element(element ...string) SRpushElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c RpushElement) Build() Completed {
	return Completed(c)
}

func (c SRpushElement) Build() SCompleted {
	return SCompleted(c)
}

type RpushKey Completed

type SRpushKey SCompleted

func (c RpushKey) Element(element ...string) RpushElement {
	c.cs.s = append(c.cs.s, element...)
	return (RpushElement)(c)
}

func (c SRpushKey) Element(element ...string) SRpushElement {
	c.cs.s = append(c.cs.s, element...)
	return (SRpushElement)(c)
}

type Rpushx Completed

type SRpushx SCompleted

func (b *Builder) Rpushx() (c Rpushx) {
	c = Rpushx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPUSHX")
	return c
}

func (b *SBuilder) Rpushx() (c SRpushx) {
	c = SRpushx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "RPUSHX")
	return c
}

func (c Rpushx) Key(key string) RpushxKey {
	c.cs.s = append(c.cs.s, key)
	return (RpushxKey)(c)
}

func (c SRpushx) Key(key string) SRpushxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SRpushxKey)(c)
}

type RpushxElement Completed

type SRpushxElement SCompleted

func (c RpushxElement) Element(element ...string) RpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c SRpushxElement) Element(element ...string) SRpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return c
}

func (c RpushxElement) Build() Completed {
	return Completed(c)
}

func (c SRpushxElement) Build() SCompleted {
	return SCompleted(c)
}

type RpushxKey Completed

type SRpushxKey SCompleted

func (c RpushxKey) Element(element ...string) RpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return (RpushxElement)(c)
}

func (c SRpushxKey) Element(element ...string) SRpushxElement {
	c.cs.s = append(c.cs.s, element...)
	return (SRpushxElement)(c)
}

type Sadd Completed

type SSadd SCompleted

func (b *Builder) Sadd() (c Sadd) {
	c = Sadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SADD")
	return c
}

func (b *SBuilder) Sadd() (c SSadd) {
	c = SSadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SADD")
	return c
}

func (c Sadd) Key(key string) SaddKey {
	c.cs.s = append(c.cs.s, key)
	return (SaddKey)(c)
}

func (c SSadd) Key(key string) SSaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSaddKey)(c)
}

type SaddKey Completed

type SSaddKey SCompleted

func (c SaddKey) Member(member ...string) SaddMember {
	c.cs.s = append(c.cs.s, member...)
	return (SaddMember)(c)
}

func (c SSaddKey) Member(member ...string) SSaddMember {
	c.cs.s = append(c.cs.s, member...)
	return (SSaddMember)(c)
}

type SaddMember Completed

type SSaddMember SCompleted

func (c SaddMember) Member(member ...string) SaddMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SSaddMember) Member(member ...string) SSaddMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SaddMember) Build() Completed {
	return Completed(c)
}

func (c SSaddMember) Build() SCompleted {
	return SCompleted(c)
}

type Save Completed

type SSave SCompleted

func (b *Builder) Save() (c Save) {
	c = Save{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SAVE")
	return c
}

func (b *SBuilder) Save() (c SSave) {
	c = SSave{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SAVE")
	return c
}

func (c Save) Build() Completed {
	return Completed(c)
}

func (c SSave) Build() SCompleted {
	return SCompleted(c)
}

type Scan Completed

type SScan SCompleted

func (b *Builder) Scan() (c Scan) {
	c = Scan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SCAN")
	return c
}

func (b *SBuilder) Scan() (c SScan) {
	c = SScan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SCAN")
	return c
}

func (c Scan) Cursor(cursor int64) ScanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (ScanCursor)(c)
}

func (c SScan) Cursor(cursor int64) SScanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (SScanCursor)(c)
}

type ScanCount Completed

type SScanCount SCompleted

func (c ScanCount) Type(typ string) ScanType {
	c.cs.s = append(c.cs.s, "TYPE", typ)
	return (ScanType)(c)
}

func (c SScanCount) Type(typ string) SScanType {
	c.cs.s = append(c.cs.s, "TYPE", typ)
	return (SScanType)(c)
}

func (c ScanCount) Build() Completed {
	return Completed(c)
}

func (c SScanCount) Build() SCompleted {
	return SCompleted(c)
}

type ScanCursor Completed

type SScanCursor SCompleted

func (c ScanCursor) Match(pattern string) ScanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (ScanMatch)(c)
}

func (c SScanCursor) Match(pattern string) SScanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (SScanMatch)(c)
}

func (c ScanCursor) Count(count int64) ScanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (ScanCount)(c)
}

func (c SScanCursor) Count(count int64) SScanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SScanCount)(c)
}

func (c ScanCursor) Type(typ string) ScanType {
	c.cs.s = append(c.cs.s, "TYPE", typ)
	return (ScanType)(c)
}

func (c SScanCursor) Type(typ string) SScanType {
	c.cs.s = append(c.cs.s, "TYPE", typ)
	return (SScanType)(c)
}

func (c ScanCursor) Build() Completed {
	return Completed(c)
}

func (c SScanCursor) Build() SCompleted {
	return SCompleted(c)
}

type ScanMatch Completed

type SScanMatch SCompleted

func (c ScanMatch) Count(count int64) ScanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (ScanCount)(c)
}

func (c SScanMatch) Count(count int64) SScanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SScanCount)(c)
}

func (c ScanMatch) Type(typ string) ScanType {
	c.cs.s = append(c.cs.s, "TYPE", typ)
	return (ScanType)(c)
}

func (c SScanMatch) Type(typ string) SScanType {
	c.cs.s = append(c.cs.s, "TYPE", typ)
	return (SScanType)(c)
}

func (c ScanMatch) Build() Completed {
	return Completed(c)
}

func (c SScanMatch) Build() SCompleted {
	return SCompleted(c)
}

type ScanType Completed

type SScanType SCompleted

func (c ScanType) Build() Completed {
	return Completed(c)
}

func (c SScanType) Build() SCompleted {
	return SCompleted(c)
}

type Scard Completed

type SScard SCompleted

func (b *Builder) Scard() (c Scard) {
	c = Scard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SCARD")
	return c
}

func (b *SBuilder) Scard() (c SScard) {
	c = SScard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SCARD")
	return c
}

func (c Scard) Key(key string) ScardKey {
	c.cs.s = append(c.cs.s, key)
	return (ScardKey)(c)
}

func (c SScard) Key(key string) SScardKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SScardKey)(c)
}

type ScardKey Completed

type SScardKey SCompleted

func (c ScardKey) Build() Completed {
	return Completed(c)
}

func (c SScardKey) Build() SCompleted {
	return SCompleted(c)
}

func (c ScardKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SScardKey) Cache() SCacheable {
	return SCacheable(c)
}

type ScriptDebug Completed

type SScriptDebug SCompleted

func (b *Builder) ScriptDebug() (c ScriptDebug) {
	c = ScriptDebug{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "DEBUG")
	return c
}

func (b *SBuilder) ScriptDebug() (c SScriptDebug) {
	c = SScriptDebug{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "DEBUG")
	return c
}

func (c ScriptDebug) Yes() ScriptDebugModeYes {
	c.cs.s = append(c.cs.s, "YES")
	return (ScriptDebugModeYes)(c)
}

func (c SScriptDebug) Yes() SScriptDebugModeYes {
	c.cs.s = append(c.cs.s, "YES")
	return (SScriptDebugModeYes)(c)
}

func (c ScriptDebug) Sync() ScriptDebugModeSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (ScriptDebugModeSync)(c)
}

func (c SScriptDebug) Sync() SScriptDebugModeSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (SScriptDebugModeSync)(c)
}

func (c ScriptDebug) No() ScriptDebugModeNo {
	c.cs.s = append(c.cs.s, "NO")
	return (ScriptDebugModeNo)(c)
}

func (c SScriptDebug) No() SScriptDebugModeNo {
	c.cs.s = append(c.cs.s, "NO")
	return (SScriptDebugModeNo)(c)
}

type ScriptDebugModeNo Completed

type SScriptDebugModeNo SCompleted

func (c ScriptDebugModeNo) Build() Completed {
	return Completed(c)
}

func (c SScriptDebugModeNo) Build() SCompleted {
	return SCompleted(c)
}

type ScriptDebugModeSync Completed

type SScriptDebugModeSync SCompleted

func (c ScriptDebugModeSync) Build() Completed {
	return Completed(c)
}

func (c SScriptDebugModeSync) Build() SCompleted {
	return SCompleted(c)
}

type ScriptDebugModeYes Completed

type SScriptDebugModeYes SCompleted

func (c ScriptDebugModeYes) Build() Completed {
	return Completed(c)
}

func (c SScriptDebugModeYes) Build() SCompleted {
	return SCompleted(c)
}

type ScriptExists Completed

type SScriptExists SCompleted

func (b *Builder) ScriptExists() (c ScriptExists) {
	c = ScriptExists{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "EXISTS")
	return c
}

func (b *SBuilder) ScriptExists() (c SScriptExists) {
	c = SScriptExists{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "EXISTS")
	return c
}

func (c ScriptExists) Sha1(sha1 ...string) ScriptExistsSha1 {
	c.cs.s = append(c.cs.s, sha1...)
	return (ScriptExistsSha1)(c)
}

func (c SScriptExists) Sha1(sha1 ...string) SScriptExistsSha1 {
	c.cs.s = append(c.cs.s, sha1...)
	return (SScriptExistsSha1)(c)
}

type ScriptExistsSha1 Completed

type SScriptExistsSha1 SCompleted

func (c ScriptExistsSha1) Sha1(sha1 ...string) ScriptExistsSha1 {
	c.cs.s = append(c.cs.s, sha1...)
	return c
}

func (c SScriptExistsSha1) Sha1(sha1 ...string) SScriptExistsSha1 {
	c.cs.s = append(c.cs.s, sha1...)
	return c
}

func (c ScriptExistsSha1) Build() Completed {
	return Completed(c)
}

func (c SScriptExistsSha1) Build() SCompleted {
	return SCompleted(c)
}

type ScriptFlush Completed

type SScriptFlush SCompleted

func (b *Builder) ScriptFlush() (c ScriptFlush) {
	c = ScriptFlush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "FLUSH")
	return c
}

func (b *SBuilder) ScriptFlush() (c SScriptFlush) {
	c = SScriptFlush{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "FLUSH")
	return c
}

func (c ScriptFlush) Async() ScriptFlushAsync {
	c.cs.s = append(c.cs.s, "ASYNC")
	return (ScriptFlushAsync)(c)
}

func (c SScriptFlush) Async() SScriptFlushAsync {
	c.cs.s = append(c.cs.s, "ASYNC")
	return (SScriptFlushAsync)(c)
}

func (c ScriptFlush) Sync() ScriptFlushAsyncSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (ScriptFlushAsyncSync)(c)
}

func (c SScriptFlush) Sync() SScriptFlushAsyncSync {
	c.cs.s = append(c.cs.s, "SYNC")
	return (SScriptFlushAsyncSync)(c)
}

func (c ScriptFlush) Build() Completed {
	return Completed(c)
}

func (c SScriptFlush) Build() SCompleted {
	return SCompleted(c)
}

type ScriptFlushAsync Completed

type SScriptFlushAsync SCompleted

func (c ScriptFlushAsync) Build() Completed {
	return Completed(c)
}

func (c SScriptFlushAsync) Build() SCompleted {
	return SCompleted(c)
}

type ScriptFlushAsyncSync Completed

type SScriptFlushAsyncSync SCompleted

func (c ScriptFlushAsyncSync) Build() Completed {
	return Completed(c)
}

func (c SScriptFlushAsyncSync) Build() SCompleted {
	return SCompleted(c)
}

type ScriptKill Completed

type SScriptKill SCompleted

func (b *Builder) ScriptKill() (c ScriptKill) {
	c = ScriptKill{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "KILL")
	return c
}

func (b *SBuilder) ScriptKill() (c SScriptKill) {
	c = SScriptKill{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "KILL")
	return c
}

func (c ScriptKill) Build() Completed {
	return Completed(c)
}

func (c SScriptKill) Build() SCompleted {
	return SCompleted(c)
}

type ScriptLoad Completed

type SScriptLoad SCompleted

func (b *Builder) ScriptLoad() (c ScriptLoad) {
	c = ScriptLoad{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "LOAD")
	return c
}

func (b *SBuilder) ScriptLoad() (c SScriptLoad) {
	c = SScriptLoad{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SCRIPT", "LOAD")
	return c
}

func (c ScriptLoad) Script(script string) ScriptLoadScript {
	c.cs.s = append(c.cs.s, script)
	return (ScriptLoadScript)(c)
}

func (c SScriptLoad) Script(script string) SScriptLoadScript {
	c.cs.s = append(c.cs.s, script)
	return (SScriptLoadScript)(c)
}

type ScriptLoadScript Completed

type SScriptLoadScript SCompleted

func (c ScriptLoadScript) Build() Completed {
	return Completed(c)
}

func (c SScriptLoadScript) Build() SCompleted {
	return SCompleted(c)
}

type Sdiff Completed

type SSdiff SCompleted

func (b *Builder) Sdiff() (c Sdiff) {
	c = Sdiff{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SDIFF")
	return c
}

func (b *SBuilder) Sdiff() (c SSdiff) {
	c = SSdiff{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SDIFF")
	return c
}

func (c Sdiff) Key(key ...string) SdiffKey {
	c.cs.s = append(c.cs.s, key...)
	return (SdiffKey)(c)
}

func (c SSdiff) Key(key ...string) SSdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSdiffKey)(c)
}

type SdiffKey Completed

type SSdiffKey SCompleted

func (c SdiffKey) Key(key ...string) SdiffKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSdiffKey) Key(key ...string) SSdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SdiffKey) Build() Completed {
	return Completed(c)
}

func (c SSdiffKey) Build() SCompleted {
	return SCompleted(c)
}

type Sdiffstore Completed

type SSdiffstore SCompleted

func (b *Builder) Sdiffstore() (c Sdiffstore) {
	c = Sdiffstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SDIFFSTORE")
	return c
}

func (b *SBuilder) Sdiffstore() (c SSdiffstore) {
	c = SSdiffstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SDIFFSTORE")
	return c
}

func (c Sdiffstore) Destination(destination string) SdiffstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (SdiffstoreDestination)(c)
}

func (c SSdiffstore) Destination(destination string) SSdiffstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SSdiffstoreDestination)(c)
}

type SdiffstoreDestination Completed

type SSdiffstoreDestination SCompleted

func (c SdiffstoreDestination) Key(key ...string) SdiffstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return (SdiffstoreKey)(c)
}

func (c SSdiffstoreDestination) Key(key ...string) SSdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSdiffstoreKey)(c)
}

type SdiffstoreKey Completed

type SSdiffstoreKey SCompleted

func (c SdiffstoreKey) Key(key ...string) SdiffstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSdiffstoreKey) Key(key ...string) SSdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SdiffstoreKey) Build() Completed {
	return Completed(c)
}

func (c SSdiffstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type Select Completed

type SSelect SCompleted

func (b *Builder) Select() (c Select) {
	c = Select{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SELECT")
	return c
}

func (b *SBuilder) Select() (c SSelect) {
	c = SSelect{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SELECT")
	return c
}

func (c Select) Index(index int64) SelectIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (SelectIndex)(c)
}

func (c SSelect) Index(index int64) SSelectIndex {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index, 10))
	return (SSelectIndex)(c)
}

type SelectIndex Completed

type SSelectIndex SCompleted

func (c SelectIndex) Build() Completed {
	return Completed(c)
}

func (c SSelectIndex) Build() SCompleted {
	return SCompleted(c)
}

type Set Completed

type SSet SCompleted

func (b *Builder) Set() (c Set) {
	c = Set{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SET")
	return c
}

func (b *SBuilder) Set() (c SSet) {
	c = SSet{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SET")
	return c
}

func (c Set) Key(key string) SetKey {
	c.cs.s = append(c.cs.s, key)
	return (SetKey)(c)
}

func (c SSet) Key(key string) SSetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSetKey)(c)
}

type SetConditionNx Completed

type SSetConditionNx SCompleted

func (c SetConditionNx) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetConditionNx) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetConditionNx) Build() Completed {
	return Completed(c)
}

func (c SSetConditionNx) Build() SCompleted {
	return SCompleted(c)
}

type SetConditionXx Completed

type SSetConditionXx SCompleted

func (c SetConditionXx) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetConditionXx) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetConditionXx) Build() Completed {
	return Completed(c)
}

func (c SSetConditionXx) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationExSeconds Completed

type SSetExpirationExSeconds SCompleted

func (c SetExpirationExSeconds) Nx() SetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationExSeconds) Nx() SSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationExSeconds) Xx() SetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationExSeconds) Xx() SSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationExSeconds) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationExSeconds) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationExSeconds) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationExSeconds) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationExatTimestamp Completed

type SSetExpirationExatTimestamp SCompleted

func (c SetExpirationExatTimestamp) Nx() SetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationExatTimestamp) Nx() SSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationExatTimestamp) Xx() SetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationExatTimestamp) Xx() SSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationExatTimestamp) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationExatTimestamp) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationExatTimestamp) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationExatTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationKeepttl Completed

type SSetExpirationKeepttl SCompleted

func (c SetExpirationKeepttl) Nx() SetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationKeepttl) Nx() SSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationKeepttl) Xx() SetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationKeepttl) Xx() SSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationKeepttl) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationKeepttl) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationKeepttl) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationKeepttl) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationPxMilliseconds Completed

type SSetExpirationPxMilliseconds SCompleted

func (c SetExpirationPxMilliseconds) Nx() SetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationPxMilliseconds) Nx() SSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationPxMilliseconds) Xx() SetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationPxMilliseconds) Xx() SSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationPxMilliseconds) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationPxMilliseconds) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationPxMilliseconds) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationPxMilliseconds) Build() SCompleted {
	return SCompleted(c)
}

type SetExpirationPxatMillisecondsTimestamp Completed

type SSetExpirationPxatMillisecondsTimestamp SCompleted

func (c SetExpirationPxatMillisecondsTimestamp) Nx() SetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SetConditionNx)(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Nx() SSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SSetConditionNx)(c)
}

func (c SetExpirationPxatMillisecondsTimestamp) Xx() SetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SetConditionXx)(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Xx() SSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SSetConditionXx)(c)
}

func (c SetExpirationPxatMillisecondsTimestamp) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetExpirationPxatMillisecondsTimestamp) Build() Completed {
	return Completed(c)
}

func (c SSetExpirationPxatMillisecondsTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type SetGet Completed

type SSetGet SCompleted

func (c SetGet) Build() Completed {
	return Completed(c)
}

func (c SSetGet) Build() SCompleted {
	return SCompleted(c)
}

type SetKey Completed

type SSetKey SCompleted

func (c SetKey) Value(value string) SetValue {
	c.cs.s = append(c.cs.s, value)
	return (SetValue)(c)
}

func (c SSetKey) Value(value string) SSetValue {
	c.cs.s = append(c.cs.s, value)
	return (SSetValue)(c)
}

type SetValue Completed

type SSetValue SCompleted

func (c SetValue) ExSeconds(seconds int64) SetExpirationExSeconds {
	c.cs.s = append(c.cs.s, "EX", strconv.FormatInt(seconds, 10))
	return (SetExpirationExSeconds)(c)
}

func (c SSetValue) ExSeconds(seconds int64) SSetExpirationExSeconds {
	c.cs.s = append(c.cs.s, "EX", strconv.FormatInt(seconds, 10))
	return (SSetExpirationExSeconds)(c)
}

func (c SetValue) PxMilliseconds(milliseconds int64) SetExpirationPxMilliseconds {
	c.cs.s = append(c.cs.s, "PX", strconv.FormatInt(milliseconds, 10))
	return (SetExpirationPxMilliseconds)(c)
}

func (c SSetValue) PxMilliseconds(milliseconds int64) SSetExpirationPxMilliseconds {
	c.cs.s = append(c.cs.s, "PX", strconv.FormatInt(milliseconds, 10))
	return (SSetExpirationPxMilliseconds)(c)
}

func (c SetValue) ExatTimestamp(timestamp int64) SetExpirationExatTimestamp {
	c.cs.s = append(c.cs.s, "EXAT", strconv.FormatInt(timestamp, 10))
	return (SetExpirationExatTimestamp)(c)
}

func (c SSetValue) ExatTimestamp(timestamp int64) SSetExpirationExatTimestamp {
	c.cs.s = append(c.cs.s, "EXAT", strconv.FormatInt(timestamp, 10))
	return (SSetExpirationExatTimestamp)(c)
}

func (c SetValue) PxatMillisecondsTimestamp(millisecondsTimestamp int64) SetExpirationPxatMillisecondsTimestamp {
	c.cs.s = append(c.cs.s, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (SetExpirationPxatMillisecondsTimestamp)(c)
}

func (c SSetValue) PxatMillisecondsTimestamp(millisecondsTimestamp int64) SSetExpirationPxatMillisecondsTimestamp {
	c.cs.s = append(c.cs.s, "PXAT", strconv.FormatInt(millisecondsTimestamp, 10))
	return (SSetExpirationPxatMillisecondsTimestamp)(c)
}

func (c SetValue) Keepttl() SetExpirationKeepttl {
	c.cs.s = append(c.cs.s, "KEEPTTL")
	return (SetExpirationKeepttl)(c)
}

func (c SSetValue) Keepttl() SSetExpirationKeepttl {
	c.cs.s = append(c.cs.s, "KEEPTTL")
	return (SSetExpirationKeepttl)(c)
}

func (c SetValue) Nx() SetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SetConditionNx)(c)
}

func (c SSetValue) Nx() SSetConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SSetConditionNx)(c)
}

func (c SetValue) Xx() SetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SetConditionXx)(c)
}

func (c SSetValue) Xx() SSetConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SSetConditionXx)(c)
}

func (c SetValue) Get() SetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SetGet)(c)
}

func (c SSetValue) Get() SSetGet {
	c.cs.s = append(c.cs.s, "GET")
	return (SSetGet)(c)
}

func (c SetValue) Build() Completed {
	return Completed(c)
}

func (c SSetValue) Build() SCompleted {
	return SCompleted(c)
}

type Setbit Completed

type SSetbit SCompleted

func (b *Builder) Setbit() (c Setbit) {
	c = Setbit{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETBIT")
	return c
}

func (b *SBuilder) Setbit() (c SSetbit) {
	c = SSetbit{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETBIT")
	return c
}

func (c Setbit) Key(key string) SetbitKey {
	c.cs.s = append(c.cs.s, key)
	return (SetbitKey)(c)
}

func (c SSetbit) Key(key string) SSetbitKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSetbitKey)(c)
}

type SetbitKey Completed

type SSetbitKey SCompleted

func (c SetbitKey) Offset(offset int64) SetbitOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (SetbitOffset)(c)
}

func (c SSetbitKey) Offset(offset int64) SSetbitOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (SSetbitOffset)(c)
}

type SetbitOffset Completed

type SSetbitOffset SCompleted

func (c SetbitOffset) Value(value int64) SetbitValue {
	c.cs.s = append(c.cs.s, strconv.FormatInt(value, 10))
	return (SetbitValue)(c)
}

func (c SSetbitOffset) Value(value int64) SSetbitValue {
	c.cs.s = append(c.cs.s, strconv.FormatInt(value, 10))
	return (SSetbitValue)(c)
}

type SetbitValue Completed

type SSetbitValue SCompleted

func (c SetbitValue) Build() Completed {
	return Completed(c)
}

func (c SSetbitValue) Build() SCompleted {
	return SCompleted(c)
}

type Setex Completed

type SSetex SCompleted

func (b *Builder) Setex() (c Setex) {
	c = Setex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETEX")
	return c
}

func (b *SBuilder) Setex() (c SSetex) {
	c = SSetex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETEX")
	return c
}

func (c Setex) Key(key string) SetexKey {
	c.cs.s = append(c.cs.s, key)
	return (SetexKey)(c)
}

func (c SSetex) Key(key string) SSetexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSetexKey)(c)
}

type SetexKey Completed

type SSetexKey SCompleted

func (c SetexKey) Seconds(seconds int64) SetexSeconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(seconds, 10))
	return (SetexSeconds)(c)
}

func (c SSetexKey) Seconds(seconds int64) SSetexSeconds {
	c.cs.s = append(c.cs.s, strconv.FormatInt(seconds, 10))
	return (SSetexSeconds)(c)
}

type SetexSeconds Completed

type SSetexSeconds SCompleted

func (c SetexSeconds) Value(value string) SetexValue {
	c.cs.s = append(c.cs.s, value)
	return (SetexValue)(c)
}

func (c SSetexSeconds) Value(value string) SSetexValue {
	c.cs.s = append(c.cs.s, value)
	return (SSetexValue)(c)
}

type SetexValue Completed

type SSetexValue SCompleted

func (c SetexValue) Build() Completed {
	return Completed(c)
}

func (c SSetexValue) Build() SCompleted {
	return SCompleted(c)
}

type Setnx Completed

type SSetnx SCompleted

func (b *Builder) Setnx() (c Setnx) {
	c = Setnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETNX")
	return c
}

func (b *SBuilder) Setnx() (c SSetnx) {
	c = SSetnx{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETNX")
	return c
}

func (c Setnx) Key(key string) SetnxKey {
	c.cs.s = append(c.cs.s, key)
	return (SetnxKey)(c)
}

func (c SSetnx) Key(key string) SSetnxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSetnxKey)(c)
}

type SetnxKey Completed

type SSetnxKey SCompleted

func (c SetnxKey) Value(value string) SetnxValue {
	c.cs.s = append(c.cs.s, value)
	return (SetnxValue)(c)
}

func (c SSetnxKey) Value(value string) SSetnxValue {
	c.cs.s = append(c.cs.s, value)
	return (SSetnxValue)(c)
}

type SetnxValue Completed

type SSetnxValue SCompleted

func (c SetnxValue) Build() Completed {
	return Completed(c)
}

func (c SSetnxValue) Build() SCompleted {
	return SCompleted(c)
}

type Setrange Completed

type SSetrange SCompleted

func (b *Builder) Setrange() (c Setrange) {
	c = Setrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETRANGE")
	return c
}

func (b *SBuilder) Setrange() (c SSetrange) {
	c = SSetrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SETRANGE")
	return c
}

func (c Setrange) Key(key string) SetrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (SetrangeKey)(c)
}

func (c SSetrange) Key(key string) SSetrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSetrangeKey)(c)
}

type SetrangeKey Completed

type SSetrangeKey SCompleted

func (c SetrangeKey) Offset(offset int64) SetrangeOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (SetrangeOffset)(c)
}

func (c SSetrangeKey) Offset(offset int64) SSetrangeOffset {
	c.cs.s = append(c.cs.s, strconv.FormatInt(offset, 10))
	return (SSetrangeOffset)(c)
}

type SetrangeOffset Completed

type SSetrangeOffset SCompleted

func (c SetrangeOffset) Value(value string) SetrangeValue {
	c.cs.s = append(c.cs.s, value)
	return (SetrangeValue)(c)
}

func (c SSetrangeOffset) Value(value string) SSetrangeValue {
	c.cs.s = append(c.cs.s, value)
	return (SSetrangeValue)(c)
}

type SetrangeValue Completed

type SSetrangeValue SCompleted

func (c SetrangeValue) Build() Completed {
	return Completed(c)
}

func (c SSetrangeValue) Build() SCompleted {
	return SCompleted(c)
}

type Shutdown Completed

type SShutdown SCompleted

func (b *Builder) Shutdown() (c Shutdown) {
	c = Shutdown{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SHUTDOWN")
	return c
}

func (b *SBuilder) Shutdown() (c SShutdown) {
	c = SShutdown{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SHUTDOWN")
	return c
}

func (c Shutdown) Nosave() ShutdownSaveModeNosave {
	c.cs.s = append(c.cs.s, "NOSAVE")
	return (ShutdownSaveModeNosave)(c)
}

func (c SShutdown) Nosave() SShutdownSaveModeNosave {
	c.cs.s = append(c.cs.s, "NOSAVE")
	return (SShutdownSaveModeNosave)(c)
}

func (c Shutdown) Save() ShutdownSaveModeSave {
	c.cs.s = append(c.cs.s, "SAVE")
	return (ShutdownSaveModeSave)(c)
}

func (c SShutdown) Save() SShutdownSaveModeSave {
	c.cs.s = append(c.cs.s, "SAVE")
	return (SShutdownSaveModeSave)(c)
}

func (c Shutdown) Build() Completed {
	return Completed(c)
}

func (c SShutdown) Build() SCompleted {
	return SCompleted(c)
}

type ShutdownSaveModeNosave Completed

type SShutdownSaveModeNosave SCompleted

func (c ShutdownSaveModeNosave) Build() Completed {
	return Completed(c)
}

func (c SShutdownSaveModeNosave) Build() SCompleted {
	return SCompleted(c)
}

type ShutdownSaveModeSave Completed

type SShutdownSaveModeSave SCompleted

func (c ShutdownSaveModeSave) Build() Completed {
	return Completed(c)
}

func (c SShutdownSaveModeSave) Build() SCompleted {
	return SCompleted(c)
}

type Sinter Completed

type SSinter SCompleted

func (b *Builder) Sinter() (c Sinter) {
	c = Sinter{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SINTER")
	return c
}

func (b *SBuilder) Sinter() (c SSinter) {
	c = SSinter{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SINTER")
	return c
}

func (c Sinter) Key(key ...string) SinterKey {
	c.cs.s = append(c.cs.s, key...)
	return (SinterKey)(c)
}

func (c SSinter) Key(key ...string) SSinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSinterKey)(c)
}

type SinterKey Completed

type SSinterKey SCompleted

func (c SinterKey) Key(key ...string) SinterKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSinterKey) Key(key ...string) SSinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SinterKey) Build() Completed {
	return Completed(c)
}

func (c SSinterKey) Build() SCompleted {
	return SCompleted(c)
}

type Sintercard Completed

type SSintercard SCompleted

func (b *Builder) Sintercard() (c Sintercard) {
	c = Sintercard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SINTERCARD")
	return c
}

func (b *SBuilder) Sintercard() (c SSintercard) {
	c = SSintercard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SINTERCARD")
	return c
}

func (c Sintercard) Numkeys(numkeys int64) SintercardNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SintercardNumkeys)(c)
}

func (c SSintercard) Numkeys(numkeys int64) SSintercardNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SSintercardNumkeys)(c)
}

type SintercardKey Completed

type SSintercardKey SCompleted

func (c SintercardKey) Key(key ...string) SintercardKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSintercardKey) Key(key ...string) SSintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SintercardKey) Limit(limit int64) SintercardLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(limit, 10))
	return (SintercardLimit)(c)
}

func (c SSintercardKey) Limit(limit int64) SSintercardLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(limit, 10))
	return (SSintercardLimit)(c)
}

func (c SintercardKey) Build() Completed {
	return Completed(c)
}

func (c SSintercardKey) Build() SCompleted {
	return SCompleted(c)
}

type SintercardLimit Completed

type SSintercardLimit SCompleted

func (c SintercardLimit) Build() Completed {
	return Completed(c)
}

func (c SSintercardLimit) Build() SCompleted {
	return SCompleted(c)
}

type SintercardNumkeys Completed

type SSintercardNumkeys SCompleted

func (c SintercardNumkeys) Key(key ...string) SintercardKey {
	c.cs.s = append(c.cs.s, key...)
	return (SintercardKey)(c)
}

func (c SSintercardNumkeys) Key(key ...string) SSintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSintercardKey)(c)
}

type Sinterstore Completed

type SSinterstore SCompleted

func (b *Builder) Sinterstore() (c Sinterstore) {
	c = Sinterstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SINTERSTORE")
	return c
}

func (b *SBuilder) Sinterstore() (c SSinterstore) {
	c = SSinterstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SINTERSTORE")
	return c
}

func (c Sinterstore) Destination(destination string) SinterstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (SinterstoreDestination)(c)
}

func (c SSinterstore) Destination(destination string) SSinterstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SSinterstoreDestination)(c)
}

type SinterstoreDestination Completed

type SSinterstoreDestination SCompleted

func (c SinterstoreDestination) Key(key ...string) SinterstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return (SinterstoreKey)(c)
}

func (c SSinterstoreDestination) Key(key ...string) SSinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSinterstoreKey)(c)
}

type SinterstoreKey Completed

type SSinterstoreKey SCompleted

func (c SinterstoreKey) Key(key ...string) SinterstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSinterstoreKey) Key(key ...string) SSinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SinterstoreKey) Build() Completed {
	return Completed(c)
}

func (c SSinterstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type Sismember Completed

type SSismember SCompleted

func (b *Builder) Sismember() (c Sismember) {
	c = Sismember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SISMEMBER")
	return c
}

func (b *SBuilder) Sismember() (c SSismember) {
	c = SSismember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SISMEMBER")
	return c
}

func (c Sismember) Key(key string) SismemberKey {
	c.cs.s = append(c.cs.s, key)
	return (SismemberKey)(c)
}

func (c SSismember) Key(key string) SSismemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSismemberKey)(c)
}

type SismemberKey Completed

type SSismemberKey SCompleted

func (c SismemberKey) Member(member string) SismemberMember {
	c.cs.s = append(c.cs.s, member)
	return (SismemberMember)(c)
}

func (c SSismemberKey) Member(member string) SSismemberMember {
	c.cs.s = append(c.cs.s, member)
	return (SSismemberMember)(c)
}

type SismemberMember Completed

type SSismemberMember SCompleted

func (c SismemberMember) Build() Completed {
	return Completed(c)
}

func (c SSismemberMember) Build() SCompleted {
	return SCompleted(c)
}

func (c SismemberMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSismemberMember) Cache() SCacheable {
	return SCacheable(c)
}

type Slaveof Completed

type SSlaveof SCompleted

func (b *Builder) Slaveof() (c Slaveof) {
	c = Slaveof{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SLAVEOF")
	return c
}

func (b *SBuilder) Slaveof() (c SSlaveof) {
	c = SSlaveof{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SLAVEOF")
	return c
}

func (c Slaveof) Host(host string) SlaveofHost {
	c.cs.s = append(c.cs.s, host)
	return (SlaveofHost)(c)
}

func (c SSlaveof) Host(host string) SSlaveofHost {
	c.cs.s = append(c.cs.s, host)
	return (SSlaveofHost)(c)
}

type SlaveofHost Completed

type SSlaveofHost SCompleted

func (c SlaveofHost) Port(port string) SlaveofPort {
	c.cs.s = append(c.cs.s, port)
	return (SlaveofPort)(c)
}

func (c SSlaveofHost) Port(port string) SSlaveofPort {
	c.cs.s = append(c.cs.s, port)
	return (SSlaveofPort)(c)
}

type SlaveofPort Completed

type SSlaveofPort SCompleted

func (c SlaveofPort) Build() Completed {
	return Completed(c)
}

func (c SSlaveofPort) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogGet Completed

type SSlowlogGet SCompleted

func (b *Builder) SlowlogGet() (c SlowlogGet) {
	c = SlowlogGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SLOWLOG", "GET")
	return c
}

func (b *SBuilder) SlowlogGet() (c SSlowlogGet) {
	c = SSlowlogGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SLOWLOG", "GET")
	return c
}

func (c SlowlogGet) Count(count int64) SlowlogGetCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SlowlogGetCount)(c)
}

func (c SSlowlogGet) Count(count int64) SSlowlogGetCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SSlowlogGetCount)(c)
}

func (c SlowlogGet) Build() Completed {
	return Completed(c)
}

func (c SSlowlogGet) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogGetCount Completed

type SSlowlogGetCount SCompleted

func (c SlowlogGetCount) Build() Completed {
	return Completed(c)
}

func (c SSlowlogGetCount) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogHelp Completed

type SSlowlogHelp SCompleted

func (b *Builder) SlowlogHelp() (c SlowlogHelp) {
	c = SlowlogHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SLOWLOG", "HELP")
	return c
}

func (b *SBuilder) SlowlogHelp() (c SSlowlogHelp) {
	c = SSlowlogHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SLOWLOG", "HELP")
	return c
}

func (c SlowlogHelp) Build() Completed {
	return Completed(c)
}

func (c SSlowlogHelp) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogLen Completed

type SSlowlogLen SCompleted

func (b *Builder) SlowlogLen() (c SlowlogLen) {
	c = SlowlogLen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SLOWLOG", "LEN")
	return c
}

func (b *SBuilder) SlowlogLen() (c SSlowlogLen) {
	c = SSlowlogLen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SLOWLOG", "LEN")
	return c
}

func (c SlowlogLen) Build() Completed {
	return Completed(c)
}

func (c SSlowlogLen) Build() SCompleted {
	return SCompleted(c)
}

type SlowlogReset Completed

type SSlowlogReset SCompleted

func (b *Builder) SlowlogReset() (c SlowlogReset) {
	c = SlowlogReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SLOWLOG", "RESET")
	return c
}

func (b *SBuilder) SlowlogReset() (c SSlowlogReset) {
	c = SSlowlogReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SLOWLOG", "RESET")
	return c
}

func (c SlowlogReset) Build() Completed {
	return Completed(c)
}

func (c SSlowlogReset) Build() SCompleted {
	return SCompleted(c)
}

type Smembers Completed

type SSmembers SCompleted

func (b *Builder) Smembers() (c Smembers) {
	c = Smembers{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SMEMBERS")
	return c
}

func (b *SBuilder) Smembers() (c SSmembers) {
	c = SSmembers{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SMEMBERS")
	return c
}

func (c Smembers) Key(key string) SmembersKey {
	c.cs.s = append(c.cs.s, key)
	return (SmembersKey)(c)
}

func (c SSmembers) Key(key string) SSmembersKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSmembersKey)(c)
}

type SmembersKey Completed

type SSmembersKey SCompleted

func (c SmembersKey) Build() Completed {
	return Completed(c)
}

func (c SSmembersKey) Build() SCompleted {
	return SCompleted(c)
}

func (c SmembersKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSmembersKey) Cache() SCacheable {
	return SCacheable(c)
}

type Smismember Completed

type SSmismember SCompleted

func (b *Builder) Smismember() (c Smismember) {
	c = Smismember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SMISMEMBER")
	return c
}

func (b *SBuilder) Smismember() (c SSmismember) {
	c = SSmismember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SMISMEMBER")
	return c
}

func (c Smismember) Key(key string) SmismemberKey {
	c.cs.s = append(c.cs.s, key)
	return (SmismemberKey)(c)
}

func (c SSmismember) Key(key string) SSmismemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSmismemberKey)(c)
}

type SmismemberKey Completed

type SSmismemberKey SCompleted

func (c SmismemberKey) Member(member ...string) SmismemberMember {
	c.cs.s = append(c.cs.s, member...)
	return (SmismemberMember)(c)
}

func (c SSmismemberKey) Member(member ...string) SSmismemberMember {
	c.cs.s = append(c.cs.s, member...)
	return (SSmismemberMember)(c)
}

type SmismemberMember Completed

type SSmismemberMember SCompleted

func (c SmismemberMember) Member(member ...string) SmismemberMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SSmismemberMember) Member(member ...string) SSmismemberMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SmismemberMember) Build() Completed {
	return Completed(c)
}

func (c SSmismemberMember) Build() SCompleted {
	return SCompleted(c)
}

func (c SmismemberMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSmismemberMember) Cache() SCacheable {
	return SCacheable(c)
}

type Smove Completed

type SSmove SCompleted

func (b *Builder) Smove() (c Smove) {
	c = Smove{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SMOVE")
	return c
}

func (b *SBuilder) Smove() (c SSmove) {
	c = SSmove{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SMOVE")
	return c
}

func (c Smove) Source(source string) SmoveSource {
	c.cs.s = append(c.cs.s, source)
	return (SmoveSource)(c)
}

func (c SSmove) Source(source string) SSmoveSource {
	c.ks = checkSlot(c.ks, slot(source))
	c.cs.s = append(c.cs.s, source)
	return (SSmoveSource)(c)
}

type SmoveDestination Completed

type SSmoveDestination SCompleted

func (c SmoveDestination) Member(member string) SmoveMember {
	c.cs.s = append(c.cs.s, member)
	return (SmoveMember)(c)
}

func (c SSmoveDestination) Member(member string) SSmoveMember {
	c.cs.s = append(c.cs.s, member)
	return (SSmoveMember)(c)
}

type SmoveMember Completed

type SSmoveMember SCompleted

func (c SmoveMember) Build() Completed {
	return Completed(c)
}

func (c SSmoveMember) Build() SCompleted {
	return SCompleted(c)
}

type SmoveSource Completed

type SSmoveSource SCompleted

func (c SmoveSource) Destination(destination string) SmoveDestination {
	c.cs.s = append(c.cs.s, destination)
	return (SmoveDestination)(c)
}

func (c SSmoveSource) Destination(destination string) SSmoveDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SSmoveDestination)(c)
}

type Sort Completed

type SSort SCompleted

func (b *Builder) Sort() (c Sort) {
	c = Sort{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SORT")
	return c
}

func (b *SBuilder) Sort() (c SSort) {
	c = SSort{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SORT")
	return c
}

func (c Sort) Key(key string) SortKey {
	c.cs.s = append(c.cs.s, key)
	return (SortKey)(c)
}

func (c SSort) Key(key string) SSortKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSortKey)(c)
}

type SortBy Completed

type SSortBy SCompleted

func (c SortBy) Limit(offset int64, count int64) SortLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortLimit)(c)
}

func (c SSortBy) Limit(offset int64, count int64) SSortLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortLimit)(c)
}

func (c SortBy) Get(pattern ...string) SortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SortGet)(c)
}

func (c SSortBy) Get(pattern ...string) SSortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SSortGet)(c)
}

func (c SortBy) Asc() SortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortBy) Asc() SSortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortBy) Desc() SortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortBy) Desc() SSortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortBy) Alpha() SortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortBy) Alpha() SSortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortBy) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortBy) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortBy) Build() Completed {
	return Completed(c)
}

func (c SSortBy) Build() SCompleted {
	return SCompleted(c)
}

type SortGet Completed

type SSortGet SCompleted

func (c SortGet) Get(pattern ...string) SortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c SSortGet) Get(pattern ...string) SSortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c SortGet) Asc() SortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortGet) Asc() SSortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortGet) Desc() SortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortGet) Desc() SSortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortGet) Alpha() SortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortGet) Alpha() SSortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortGet) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortGet) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortGet) Build() Completed {
	return Completed(c)
}

func (c SSortGet) Build() SCompleted {
	return SCompleted(c)
}

type SortKey Completed

type SSortKey SCompleted

func (c SortKey) By(pattern string) SortBy {
	c.cs.s = append(c.cs.s, "BY", pattern)
	return (SortBy)(c)
}

func (c SSortKey) By(pattern string) SSortBy {
	c.cs.s = append(c.cs.s, "BY", pattern)
	return (SSortBy)(c)
}

func (c SortKey) Limit(offset int64, count int64) SortLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortLimit)(c)
}

func (c SSortKey) Limit(offset int64, count int64) SSortLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortLimit)(c)
}

func (c SortKey) Get(pattern ...string) SortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SortGet)(c)
}

func (c SSortKey) Get(pattern ...string) SSortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SSortGet)(c)
}

func (c SortKey) Asc() SortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortKey) Asc() SSortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortKey) Desc() SortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortKey) Desc() SSortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortKey) Alpha() SortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortKey) Alpha() SSortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortKey) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortKey) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortKey) Build() Completed {
	return Completed(c)
}

func (c SSortKey) Build() SCompleted {
	return SCompleted(c)
}

type SortLimit Completed

type SSortLimit SCompleted

func (c SortLimit) Get(pattern ...string) SortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SortGet)(c)
}

func (c SSortLimit) Get(pattern ...string) SSortGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SSortGet)(c)
}

func (c SortLimit) Asc() SortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortOrderAsc)(c)
}

func (c SSortLimit) Asc() SSortOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortOrderAsc)(c)
}

func (c SortLimit) Desc() SortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortOrderDesc)(c)
}

func (c SSortLimit) Desc() SSortOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortOrderDesc)(c)
}

func (c SortLimit) Alpha() SortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortLimit) Alpha() SSortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortLimit) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortLimit) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortLimit) Build() Completed {
	return Completed(c)
}

func (c SSortLimit) Build() SCompleted {
	return SCompleted(c)
}

type SortOrderAsc Completed

type SSortOrderAsc SCompleted

func (c SortOrderAsc) Alpha() SortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortOrderAsc) Alpha() SSortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortOrderAsc) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortOrderAsc) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SSortOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

type SortOrderDesc Completed

type SSortOrderDesc SCompleted

func (c SortOrderDesc) Alpha() SortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortSortingAlpha)(c)
}

func (c SSortOrderDesc) Alpha() SSortSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortSortingAlpha)(c)
}

func (c SortOrderDesc) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortOrderDesc) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SSortOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

type SortRo Completed

type SSortRo SCompleted

func (b *Builder) SortRo() (c SortRo) {
	c = SortRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SORT_RO")
	return c
}

func (b *SBuilder) SortRo() (c SSortRo) {
	c = SSortRo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SORT_RO")
	return c
}

func (c SortRo) Key(key string) SortRoKey {
	c.cs.s = append(c.cs.s, key)
	return (SortRoKey)(c)
}

func (c SSortRo) Key(key string) SSortRoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSortRoKey)(c)
}

type SortRoBy Completed

type SSortRoBy SCompleted

func (c SortRoBy) Limit(offset int64, count int64) SortRoLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortRoLimit)(c)
}

func (c SSortRoBy) Limit(offset int64, count int64) SSortRoLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortRoLimit)(c)
}

func (c SortRoBy) Get(pattern ...string) SortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SortRoGet)(c)
}

func (c SSortRoBy) Get(pattern ...string) SSortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SSortRoGet)(c)
}

func (c SortRoBy) Asc() SortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoBy) Asc() SSortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoBy) Desc() SortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoBy) Desc() SSortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoBy) Alpha() SortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoBy) Alpha() SSortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoBy) Build() Completed {
	return Completed(c)
}

func (c SSortRoBy) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoBy) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoBy) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoGet Completed

type SSortRoGet SCompleted

func (c SortRoGet) Get(pattern ...string) SortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c SSortRoGet) Get(pattern ...string) SSortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return c
}

func (c SortRoGet) Asc() SortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoGet) Asc() SSortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoGet) Desc() SortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoGet) Desc() SSortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoGet) Alpha() SortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoGet) Alpha() SSortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoGet) Build() Completed {
	return Completed(c)
}

func (c SSortRoGet) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoGet) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoGet) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoKey Completed

type SSortRoKey SCompleted

func (c SortRoKey) By(pattern string) SortRoBy {
	c.cs.s = append(c.cs.s, "BY", pattern)
	return (SortRoBy)(c)
}

func (c SSortRoKey) By(pattern string) SSortRoBy {
	c.cs.s = append(c.cs.s, "BY", pattern)
	return (SSortRoBy)(c)
}

func (c SortRoKey) Limit(offset int64, count int64) SortRoLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SortRoLimit)(c)
}

func (c SSortRoKey) Limit(offset int64, count int64) SSortRoLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SSortRoLimit)(c)
}

func (c SortRoKey) Get(pattern ...string) SortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SortRoGet)(c)
}

func (c SSortRoKey) Get(pattern ...string) SSortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SSortRoGet)(c)
}

func (c SortRoKey) Asc() SortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoKey) Asc() SSortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoKey) Desc() SortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoKey) Desc() SSortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoKey) Alpha() SortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoKey) Alpha() SSortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoKey) Build() Completed {
	return Completed(c)
}

func (c SSortRoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoKey) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoLimit Completed

type SSortRoLimit SCompleted

func (c SortRoLimit) Get(pattern ...string) SortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SortRoGet)(c)
}

func (c SSortRoLimit) Get(pattern ...string) SSortRoGet {
	c.cs.s = append(c.cs.s, "GET")
	c.cs.s = append(c.cs.s, pattern...)
	return (SSortRoGet)(c)
}

func (c SortRoLimit) Asc() SortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SortRoOrderAsc)(c)
}

func (c SSortRoLimit) Asc() SSortRoOrderAsc {
	c.cs.s = append(c.cs.s, "ASC")
	return (SSortRoOrderAsc)(c)
}

func (c SortRoLimit) Desc() SortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SortRoOrderDesc)(c)
}

func (c SSortRoLimit) Desc() SSortRoOrderDesc {
	c.cs.s = append(c.cs.s, "DESC")
	return (SSortRoOrderDesc)(c)
}

func (c SortRoLimit) Alpha() SortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoLimit) Alpha() SSortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoLimit) Build() Completed {
	return Completed(c)
}

func (c SSortRoLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoLimit) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoOrderAsc Completed

type SSortRoOrderAsc SCompleted

func (c SortRoOrderAsc) Alpha() SortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoOrderAsc) Alpha() SSortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoOrderAsc) Build() Completed {
	return Completed(c)
}

func (c SSortRoOrderAsc) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoOrderAsc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoOrderAsc) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoOrderDesc Completed

type SSortRoOrderDesc SCompleted

func (c SortRoOrderDesc) Alpha() SortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SortRoSortingAlpha)(c)
}

func (c SSortRoOrderDesc) Alpha() SSortRoSortingAlpha {
	c.cs.s = append(c.cs.s, "ALPHA")
	return (SSortRoSortingAlpha)(c)
}

func (c SortRoOrderDesc) Build() Completed {
	return Completed(c)
}

func (c SSortRoOrderDesc) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoOrderDesc) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoOrderDesc) Cache() SCacheable {
	return SCacheable(c)
}

type SortRoSortingAlpha Completed

type SSortRoSortingAlpha SCompleted

func (c SortRoSortingAlpha) Build() Completed {
	return Completed(c)
}

func (c SSortRoSortingAlpha) Build() SCompleted {
	return SCompleted(c)
}

func (c SortRoSortingAlpha) Cache() Cacheable {
	return Cacheable(c)
}

func (c SSortRoSortingAlpha) Cache() SCacheable {
	return SCacheable(c)
}

type SortSortingAlpha Completed

type SSortSortingAlpha SCompleted

func (c SortSortingAlpha) Store(destination string) SortStore {
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SortStore)(c)
}

func (c SSortSortingAlpha) Store(destination string) SSortStore {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, "STORE", destination)
	return (SSortStore)(c)
}

func (c SortSortingAlpha) Build() Completed {
	return Completed(c)
}

func (c SSortSortingAlpha) Build() SCompleted {
	return SCompleted(c)
}

type SortStore Completed

type SSortStore SCompleted

func (c SortStore) Build() Completed {
	return Completed(c)
}

func (c SSortStore) Build() SCompleted {
	return SCompleted(c)
}

type Spop Completed

type SSpop SCompleted

func (b *Builder) Spop() (c Spop) {
	c = Spop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SPOP")
	return c
}

func (b *SBuilder) Spop() (c SSpop) {
	c = SSpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SPOP")
	return c
}

func (c Spop) Key(key string) SpopKey {
	c.cs.s = append(c.cs.s, key)
	return (SpopKey)(c)
}

func (c SSpop) Key(key string) SSpopKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSpopKey)(c)
}

type SpopCount Completed

type SSpopCount SCompleted

func (c SpopCount) Build() Completed {
	return Completed(c)
}

func (c SSpopCount) Build() SCompleted {
	return SCompleted(c)
}

type SpopKey Completed

type SSpopKey SCompleted

func (c SpopKey) Count(count int64) SpopCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SpopCount)(c)
}

func (c SSpopKey) Count(count int64) SSpopCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SSpopCount)(c)
}

func (c SpopKey) Build() Completed {
	return Completed(c)
}

func (c SSpopKey) Build() SCompleted {
	return SCompleted(c)
}

type Srandmember Completed

type SSrandmember SCompleted

func (b *Builder) Srandmember() (c Srandmember) {
	c = Srandmember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SRANDMEMBER")
	return c
}

func (b *SBuilder) Srandmember() (c SSrandmember) {
	c = SSrandmember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SRANDMEMBER")
	return c
}

func (c Srandmember) Key(key string) SrandmemberKey {
	c.cs.s = append(c.cs.s, key)
	return (SrandmemberKey)(c)
}

func (c SSrandmember) Key(key string) SSrandmemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSrandmemberKey)(c)
}

type SrandmemberCount Completed

type SSrandmemberCount SCompleted

func (c SrandmemberCount) Build() Completed {
	return Completed(c)
}

func (c SSrandmemberCount) Build() SCompleted {
	return SCompleted(c)
}

type SrandmemberKey Completed

type SSrandmemberKey SCompleted

func (c SrandmemberKey) Count(count int64) SrandmemberCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SrandmemberCount)(c)
}

func (c SSrandmemberKey) Count(count int64) SSrandmemberCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SSrandmemberCount)(c)
}

func (c SrandmemberKey) Build() Completed {
	return Completed(c)
}

func (c SSrandmemberKey) Build() SCompleted {
	return SCompleted(c)
}

type Srem Completed

type SSrem SCompleted

func (b *Builder) Srem() (c Srem) {
	c = Srem{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SREM")
	return c
}

func (b *SBuilder) Srem() (c SSrem) {
	c = SSrem{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SREM")
	return c
}

func (c Srem) Key(key string) SremKey {
	c.cs.s = append(c.cs.s, key)
	return (SremKey)(c)
}

func (c SSrem) Key(key string) SSremKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSremKey)(c)
}

type SremKey Completed

type SSremKey SCompleted

func (c SremKey) Member(member ...string) SremMember {
	c.cs.s = append(c.cs.s, member...)
	return (SremMember)(c)
}

func (c SSremKey) Member(member ...string) SSremMember {
	c.cs.s = append(c.cs.s, member...)
	return (SSremMember)(c)
}

type SremMember Completed

type SSremMember SCompleted

func (c SremMember) Member(member ...string) SremMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SSremMember) Member(member ...string) SSremMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SremMember) Build() Completed {
	return Completed(c)
}

func (c SSremMember) Build() SCompleted {
	return SCompleted(c)
}

type Sscan Completed

type SSscan SCompleted

func (b *Builder) Sscan() (c Sscan) {
	c = Sscan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SSCAN")
	return c
}

func (b *SBuilder) Sscan() (c SSscan) {
	c = SSscan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SSCAN")
	return c
}

func (c Sscan) Key(key string) SscanKey {
	c.cs.s = append(c.cs.s, key)
	return (SscanKey)(c)
}

func (c SSscan) Key(key string) SSscanKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SSscanKey)(c)
}

type SscanCount Completed

type SSscanCount SCompleted

func (c SscanCount) Build() Completed {
	return Completed(c)
}

func (c SSscanCount) Build() SCompleted {
	return SCompleted(c)
}

type SscanCursor Completed

type SSscanCursor SCompleted

func (c SscanCursor) Match(pattern string) SscanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (SscanMatch)(c)
}

func (c SSscanCursor) Match(pattern string) SSscanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (SSscanMatch)(c)
}

func (c SscanCursor) Count(count int64) SscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SscanCount)(c)
}

func (c SSscanCursor) Count(count int64) SSscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SSscanCount)(c)
}

func (c SscanCursor) Build() Completed {
	return Completed(c)
}

func (c SSscanCursor) Build() SCompleted {
	return SCompleted(c)
}

type SscanKey Completed

type SSscanKey SCompleted

func (c SscanKey) Cursor(cursor int64) SscanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (SscanCursor)(c)
}

func (c SSscanKey) Cursor(cursor int64) SSscanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (SSscanCursor)(c)
}

type SscanMatch Completed

type SSscanMatch SCompleted

func (c SscanMatch) Count(count int64) SscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SscanCount)(c)
}

func (c SSscanMatch) Count(count int64) SSscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SSscanCount)(c)
}

func (c SscanMatch) Build() Completed {
	return Completed(c)
}

func (c SSscanMatch) Build() SCompleted {
	return SCompleted(c)
}

type Strlen Completed

type SStrlen SCompleted

func (b *Builder) Strlen() (c Strlen) {
	c = Strlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "STRLEN")
	return c
}

func (b *SBuilder) Strlen() (c SStrlen) {
	c = SStrlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "STRLEN")
	return c
}

func (c Strlen) Key(key string) StrlenKey {
	c.cs.s = append(c.cs.s, key)
	return (StrlenKey)(c)
}

func (c SStrlen) Key(key string) SStrlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SStrlenKey)(c)
}

type StrlenKey Completed

type SStrlenKey SCompleted

func (c StrlenKey) Build() Completed {
	return Completed(c)
}

func (c SStrlenKey) Build() SCompleted {
	return SCompleted(c)
}

func (c StrlenKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SStrlenKey) Cache() SCacheable {
	return SCacheable(c)
}

type Subscribe Completed

type SSubscribe SCompleted

func (b *Builder) Subscribe() (c Subscribe) {
	c = Subscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "SUBSCRIBE")
	return c
}

func (b *SBuilder) Subscribe() (c SSubscribe) {
	c = SSubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "SUBSCRIBE")
	return c
}

func (c Subscribe) Channel(channel ...string) SubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return (SubscribeChannel)(c)
}

func (c SSubscribe) Channel(channel ...string) SSubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return (SSubscribeChannel)(c)
}

type SubscribeChannel Completed

type SSubscribeChannel SCompleted

func (c SubscribeChannel) Channel(channel ...string) SubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return c
}

func (c SSubscribeChannel) Channel(channel ...string) SSubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return c
}

func (c SubscribeChannel) Build() Completed {
	return Completed(c)
}

func (c SSubscribeChannel) Build() SCompleted {
	return SCompleted(c)
}

type Sunion Completed

type SSunion SCompleted

func (b *Builder) Sunion() (c Sunion) {
	c = Sunion{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SUNION")
	return c
}

func (b *SBuilder) Sunion() (c SSunion) {
	c = SSunion{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "SUNION")
	return c
}

func (c Sunion) Key(key ...string) SunionKey {
	c.cs.s = append(c.cs.s, key...)
	return (SunionKey)(c)
}

func (c SSunion) Key(key ...string) SSunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSunionKey)(c)
}

type SunionKey Completed

type SSunionKey SCompleted

func (c SunionKey) Key(key ...string) SunionKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSunionKey) Key(key ...string) SSunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SunionKey) Build() Completed {
	return Completed(c)
}

func (c SSunionKey) Build() SCompleted {
	return SCompleted(c)
}

type Sunionstore Completed

type SSunionstore SCompleted

func (b *Builder) Sunionstore() (c Sunionstore) {
	c = Sunionstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SUNIONSTORE")
	return c
}

func (b *SBuilder) Sunionstore() (c SSunionstore) {
	c = SSunionstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SUNIONSTORE")
	return c
}

func (c Sunionstore) Destination(destination string) SunionstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (SunionstoreDestination)(c)
}

func (c SSunionstore) Destination(destination string) SSunionstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SSunionstoreDestination)(c)
}

type SunionstoreDestination Completed

type SSunionstoreDestination SCompleted

func (c SunionstoreDestination) Key(key ...string) SunionstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return (SunionstoreKey)(c)
}

func (c SSunionstoreDestination) Key(key ...string) SSunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SSunionstoreKey)(c)
}

type SunionstoreKey Completed

type SSunionstoreKey SCompleted

func (c SunionstoreKey) Key(key ...string) SunionstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SSunionstoreKey) Key(key ...string) SSunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SunionstoreKey) Build() Completed {
	return Completed(c)
}

func (c SSunionstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type Swapdb Completed

type SSwapdb SCompleted

func (b *Builder) Swapdb() (c Swapdb) {
	c = Swapdb{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SWAPDB")
	return c
}

func (b *SBuilder) Swapdb() (c SSwapdb) {
	c = SSwapdb{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SWAPDB")
	return c
}

func (c Swapdb) Index1(index1 int64) SwapdbIndex1 {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index1, 10))
	return (SwapdbIndex1)(c)
}

func (c SSwapdb) Index1(index1 int64) SSwapdbIndex1 {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index1, 10))
	return (SSwapdbIndex1)(c)
}

type SwapdbIndex1 Completed

type SSwapdbIndex1 SCompleted

func (c SwapdbIndex1) Index2(index2 int64) SwapdbIndex2 {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index2, 10))
	return (SwapdbIndex2)(c)
}

func (c SSwapdbIndex1) Index2(index2 int64) SSwapdbIndex2 {
	c.cs.s = append(c.cs.s, strconv.FormatInt(index2, 10))
	return (SSwapdbIndex2)(c)
}

type SwapdbIndex2 Completed

type SSwapdbIndex2 SCompleted

func (c SwapdbIndex2) Build() Completed {
	return Completed(c)
}

func (c SSwapdbIndex2) Build() SCompleted {
	return SCompleted(c)
}

type Sync Completed

type SSync SCompleted

func (b *Builder) Sync() (c Sync) {
	c = Sync{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SYNC")
	return c
}

func (b *SBuilder) Sync() (c SSync) {
	c = SSync{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "SYNC")
	return c
}

func (c Sync) Build() Completed {
	return Completed(c)
}

func (c SSync) Build() SCompleted {
	return SCompleted(c)
}

type TdigestAdd Completed

type STdigestAdd SCompleted

func (b *Builder) TdigestAdd() (c TdigestAdd) {
	c = TdigestAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.ADD")
	return c
}

func (b *SBuilder) TdigestAdd() (c STdigestAdd) {
	c = STdigestAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.ADD")
	return c
}

func (c TdigestAdd) Key(key string) TdigestAddKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestAddKey)(c)
}

func (c STdigestAdd) Key(key string) STdigestAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestAddKey)(c)
}

type TdigestAddKey Completed

type STdigestAddKey SCompleted

func (c TdigestAddKey) Value(value float64) TdigestAddValuesValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (TdigestAddValuesValue)(c)
}

func (c STdigestAddKey) Value(value float64) STdigestAddValuesValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (STdigestAddValuesValue)(c)
}

type TdigestAddValuesValue Completed

type STdigestAddValuesValue SCompleted

func (c TdigestAddValuesValue) Weight(weight float64) TdigestAddValuesWeight {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(weight, 'f', -1, 64))
	return (TdigestAddValuesWeight)(c)
}

func (c STdigestAddValuesValue) Weight(weight float64) STdigestAddValuesWeight {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(weight, 'f', -1, 64))
	return (STdigestAddValuesWeight)(c)
}

type TdigestAddValuesWeight Completed

type STdigestAddValuesWeight SCompleted

func (c TdigestAddValuesWeight) Value(value float64) TdigestAddValuesValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (TdigestAddValuesValue)(c)
}

func (c STdigestAddValuesWeight) Value(value float64) STdigestAddValuesValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (STdigestAddValuesValue)(c)
}

func (c TdigestAddValuesWeight) Build() Completed {
	return Completed(c)
}

func (c STdigestAddValuesWeight) Build() SCompleted {
	return SCompleted(c)
}

type TdigestCdf Completed

type STdigestCdf SCompleted

func (b *Builder) TdigestCdf() (c TdigestCdf) {
	c = TdigestCdf{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.CDF")
	return c
}

func (b *SBuilder) TdigestCdf() (c STdigestCdf) {
	c = STdigestCdf{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.CDF")
	return c
}

func (c TdigestCdf) Key(key string) TdigestCdfKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestCdfKey)(c)
}

func (c STdigestCdf) Key(key string) STdigestCdfKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestCdfKey)(c)
}

type TdigestCdfKey Completed

type STdigestCdfKey SCompleted

func (c TdigestCdfKey) Value(value float64) TdigestCdfValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (TdigestCdfValue)(c)
}

func (c STdigestCdfKey) Value(value float64) STdigestCdfValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (STdigestCdfValue)(c)
}

type TdigestCdfValue Completed

type STdigestCdfValue SCompleted

func (c TdigestCdfValue) Build() Completed {
	return Completed(c)
}

func (c STdigestCdfValue) Build() SCompleted {
	return SCompleted(c)
}

type TdigestCreate Completed

type STdigestCreate SCompleted

func (b *Builder) TdigestCreate() (c TdigestCreate) {
	c = TdigestCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.CREATE")
	return c
}

func (b *SBuilder) TdigestCreate() (c STdigestCreate) {
	c = STdigestCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.CREATE")
	return c
}

func (c TdigestCreate) Key(key string) TdigestCreateKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestCreateKey)(c)
}

func (c STdigestCreate) Key(key string) STdigestCreateKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestCreateKey)(c)
}

type TdigestCreateCompression Completed

type STdigestCreateCompression SCompleted

func (c TdigestCreateCompression) Build() Completed {
	return Completed(c)
}

func (c STdigestCreateCompression) Build() SCompleted {
	return SCompleted(c)
}

type TdigestCreateKey Completed

type STdigestCreateKey SCompleted

func (c TdigestCreateKey) Compression(compression int64) TdigestCreateCompression {
	c.cs.s = append(c.cs.s, strconv.FormatInt(compression, 10))
	return (TdigestCreateCompression)(c)
}

func (c STdigestCreateKey) Compression(compression int64) STdigestCreateCompression {
	c.cs.s = append(c.cs.s, strconv.FormatInt(compression, 10))
	return (STdigestCreateCompression)(c)
}

type TdigestInfo Completed

type STdigestInfo SCompleted

func (b *Builder) TdigestInfo() (c TdigestInfo) {
	c = TdigestInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.INFO")
	return c
}

func (b *SBuilder) TdigestInfo() (c STdigestInfo) {
	c = STdigestInfo{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.INFO")
	return c
}

func (c TdigestInfo) Key(key string) TdigestInfoKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestInfoKey)(c)
}

func (c STdigestInfo) Key(key string) STdigestInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestInfoKey)(c)
}

type TdigestInfoKey Completed

type STdigestInfoKey SCompleted

func (c TdigestInfoKey) Build() Completed {
	return Completed(c)
}

func (c STdigestInfoKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestMax Completed

type STdigestMax SCompleted

func (b *Builder) TdigestMax() (c TdigestMax) {
	c = TdigestMax{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.MAX")
	return c
}

func (b *SBuilder) TdigestMax() (c STdigestMax) {
	c = STdigestMax{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.MAX")
	return c
}

func (c TdigestMax) Key(key string) TdigestMaxKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestMaxKey)(c)
}

func (c STdigestMax) Key(key string) STdigestMaxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestMaxKey)(c)
}

type TdigestMaxKey Completed

type STdigestMaxKey SCompleted

func (c TdigestMaxKey) Build() Completed {
	return Completed(c)
}

func (c STdigestMaxKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestMerge Completed

type STdigestMerge SCompleted

func (b *Builder) TdigestMerge() (c TdigestMerge) {
	c = TdigestMerge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.MERGE")
	return c
}

func (b *SBuilder) TdigestMerge() (c STdigestMerge) {
	c = STdigestMerge{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.MERGE")
	return c
}

func (c TdigestMerge) ToKey(toKey string) TdigestMergeToKey {
	c.cs.s = append(c.cs.s, toKey)
	return (TdigestMergeToKey)(c)
}

func (c STdigestMerge) ToKey(toKey string) STdigestMergeToKey {
	c.ks = checkSlot(c.ks, slot(toKey))
	c.cs.s = append(c.cs.s, toKey)
	return (STdigestMergeToKey)(c)
}

type TdigestMergeFromKey Completed

type STdigestMergeFromKey SCompleted

func (c TdigestMergeFromKey) Build() Completed {
	return Completed(c)
}

func (c STdigestMergeFromKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestMergeToKey Completed

type STdigestMergeToKey SCompleted

func (c TdigestMergeToKey) FromKey(fromKey string) TdigestMergeFromKey {
	c.cs.s = append(c.cs.s, fromKey)
	return (TdigestMergeFromKey)(c)
}

func (c STdigestMergeToKey) FromKey(fromKey string) STdigestMergeFromKey {
	c.ks = checkSlot(c.ks, slot(fromKey))
	c.cs.s = append(c.cs.s, fromKey)
	return (STdigestMergeFromKey)(c)
}

type TdigestMin Completed

type STdigestMin SCompleted

func (b *Builder) TdigestMin() (c TdigestMin) {
	c = TdigestMin{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.MIN")
	return c
}

func (b *SBuilder) TdigestMin() (c STdigestMin) {
	c = STdigestMin{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.MIN")
	return c
}

func (c TdigestMin) Key(key string) TdigestMinKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestMinKey)(c)
}

func (c STdigestMin) Key(key string) STdigestMinKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestMinKey)(c)
}

type TdigestMinKey Completed

type STdigestMinKey SCompleted

func (c TdigestMinKey) Build() Completed {
	return Completed(c)
}

func (c STdigestMinKey) Build() SCompleted {
	return SCompleted(c)
}

type TdigestQuantile Completed

type STdigestQuantile SCompleted

func (b *Builder) TdigestQuantile() (c TdigestQuantile) {
	c = TdigestQuantile{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.QUANTILE")
	return c
}

func (b *SBuilder) TdigestQuantile() (c STdigestQuantile) {
	c = STdigestQuantile{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.QUANTILE")
	return c
}

func (c TdigestQuantile) Key(key string) TdigestQuantileKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestQuantileKey)(c)
}

func (c STdigestQuantile) Key(key string) STdigestQuantileKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestQuantileKey)(c)
}

type TdigestQuantileKey Completed

type STdigestQuantileKey SCompleted

func (c TdigestQuantileKey) Quantile(quantile float64) TdigestQuantileQuantile {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(quantile, 'f', -1, 64))
	return (TdigestQuantileQuantile)(c)
}

func (c STdigestQuantileKey) Quantile(quantile float64) STdigestQuantileQuantile {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(quantile, 'f', -1, 64))
	return (STdigestQuantileQuantile)(c)
}

type TdigestQuantileQuantile Completed

type STdigestQuantileQuantile SCompleted

func (c TdigestQuantileQuantile) Build() Completed {
	return Completed(c)
}

func (c STdigestQuantileQuantile) Build() SCompleted {
	return SCompleted(c)
}

type TdigestReset Completed

type STdigestReset SCompleted

func (b *Builder) TdigestReset() (c TdigestReset) {
	c = TdigestReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.RESET")
	return c
}

func (b *SBuilder) TdigestReset() (c STdigestReset) {
	c = STdigestReset{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TDIGEST.RESET")
	return c
}

func (c TdigestReset) Key(key string) TdigestResetKey {
	c.cs.s = append(c.cs.s, key)
	return (TdigestResetKey)(c)
}

func (c STdigestReset) Key(key string) STdigestResetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STdigestResetKey)(c)
}

type TdigestResetKey Completed

type STdigestResetKey SCompleted

func (c TdigestResetKey) Build() Completed {
	return Completed(c)
}

func (c STdigestResetKey) Build() SCompleted {
	return SCompleted(c)
}

type Time Completed

type STime SCompleted

func (b *Builder) Time() (c Time) {
	c = Time{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TIME")
	return c
}

func (b *SBuilder) Time() (c STime) {
	c = STime{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TIME")
	return c
}

func (c Time) Build() Completed {
	return Completed(c)
}

func (c STime) Build() SCompleted {
	return SCompleted(c)
}

type TopkAdd Completed

type STopkAdd SCompleted

func (b *Builder) TopkAdd() (c TopkAdd) {
	c = TopkAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TOPK.ADD")
	return c
}

func (b *SBuilder) TopkAdd() (c STopkAdd) {
	c = STopkAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TOPK.ADD")
	return c
}

func (c TopkAdd) Key(key string) TopkAddKey {
	c.cs.s = append(c.cs.s, key)
	return (TopkAddKey)(c)
}

func (c STopkAdd) Key(key string) STopkAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STopkAddKey)(c)
}

type TopkAddItems Completed

type STopkAddItems SCompleted

func (c TopkAddItems) Items(items ...string) TopkAddItems {
	c.cs.s = append(c.cs.s, items...)
	return c
}

func (c STopkAddItems) Items(items ...string) STopkAddItems {
	c.cs.s = append(c.cs.s, items...)
	return c
}

func (c TopkAddItems) Build() Completed {
	return Completed(c)
}

func (c STopkAddItems) Build() SCompleted {
	return SCompleted(c)
}

type TopkAddKey Completed

type STopkAddKey SCompleted

func (c TopkAddKey) Items(items ...string) TopkAddItems {
	c.cs.s = append(c.cs.s, items...)
	return (TopkAddItems)(c)
}

func (c STopkAddKey) Items(items ...string) STopkAddItems {
	c.cs.s = append(c.cs.s, items...)
	return (STopkAddItems)(c)
}

type TopkIncrby Completed

type STopkIncrby SCompleted

func (b *Builder) TopkIncrby() (c TopkIncrby) {
	c = TopkIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TOPK.INCRBY")
	return c
}

func (b *SBuilder) TopkIncrby() (c STopkIncrby) {
	c = STopkIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TOPK.INCRBY")
	return c
}

func (c TopkIncrby) Key(key string) TopkIncrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (TopkIncrbyKey)(c)
}

func (c STopkIncrby) Key(key string) STopkIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STopkIncrbyKey)(c)
}

type TopkIncrbyItemsIncrement Completed

type STopkIncrbyItemsIncrement SCompleted

func (c TopkIncrbyItemsIncrement) Item(item string) TopkIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (TopkIncrbyItemsItem)(c)
}

func (c STopkIncrbyItemsIncrement) Item(item string) STopkIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (STopkIncrbyItemsItem)(c)
}

func (c TopkIncrbyItemsIncrement) Build() Completed {
	return Completed(c)
}

func (c STopkIncrbyItemsIncrement) Build() SCompleted {
	return SCompleted(c)
}

type TopkIncrbyItemsItem Completed

type STopkIncrbyItemsItem SCompleted

func (c TopkIncrbyItemsItem) Increment(increment int64) TopkIncrbyItemsIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (TopkIncrbyItemsIncrement)(c)
}

func (c STopkIncrbyItemsItem) Increment(increment int64) STopkIncrbyItemsIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (STopkIncrbyItemsIncrement)(c)
}

type TopkIncrbyKey Completed

type STopkIncrbyKey SCompleted

func (c TopkIncrbyKey) Item(item string) TopkIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (TopkIncrbyItemsItem)(c)
}

func (c STopkIncrbyKey) Item(item string) STopkIncrbyItemsItem {
	c.cs.s = append(c.cs.s, item)
	return (STopkIncrbyItemsItem)(c)
}

type TopkInfo Completed

type STopkInfo SCompleted

func (b *Builder) TopkInfo() (c TopkInfo) {
	c = TopkInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOPK.INFO")
	return c
}

func (b *SBuilder) TopkInfo() (c STopkInfo) {
	c = STopkInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOPK.INFO")
	return c
}

func (c TopkInfo) Key(key string) TopkInfoKey {
	c.cs.s = append(c.cs.s, key)
	return (TopkInfoKey)(c)
}

func (c STopkInfo) Key(key string) STopkInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STopkInfoKey)(c)
}

type TopkInfoKey Completed

type STopkInfoKey SCompleted

func (c TopkInfoKey) Build() Completed {
	return Completed(c)
}

func (c STopkInfoKey) Build() SCompleted {
	return SCompleted(c)
}

func (c TopkInfoKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c STopkInfoKey) Cache() SCacheable {
	return SCacheable(c)
}

type TopkList Completed

type STopkList SCompleted

func (b *Builder) TopkList() (c TopkList) {
	c = TopkList{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOPK.LIST")
	return c
}

func (b *SBuilder) TopkList() (c STopkList) {
	c = STopkList{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOPK.LIST")
	return c
}

func (c TopkList) Key(key string) TopkListKey {
	c.cs.s = append(c.cs.s, key)
	return (TopkListKey)(c)
}

func (c STopkList) Key(key string) STopkListKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STopkListKey)(c)
}

type TopkListKey Completed

type STopkListKey SCompleted

func (c TopkListKey) Numkeys(numkeys int64) TopkListNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (TopkListNumkeys)(c)
}

func (c STopkListKey) Numkeys(numkeys int64) STopkListNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (STopkListNumkeys)(c)
}

type TopkListNumkeys Completed

type STopkListNumkeys SCompleted

func (c TopkListNumkeys) Withcount() TopkListWithcount {
	c.cs.s = append(c.cs.s, "WITHCOUNT")
	return (TopkListWithcount)(c)
}

func (c STopkListNumkeys) Withcount() STopkListWithcount {
	c.cs.s = append(c.cs.s, "WITHCOUNT")
	return (STopkListWithcount)(c)
}

type TopkListWithcount Completed

type STopkListWithcount SCompleted

func (c TopkListWithcount) Build() Completed {
	return Completed(c)
}

func (c STopkListWithcount) Build() SCompleted {
	return SCompleted(c)
}

func (c TopkListWithcount) Cache() Cacheable {
	return Cacheable(c)
}

func (c STopkListWithcount) Cache() SCacheable {
	return SCacheable(c)
}

type TopkQuery Completed

type STopkQuery SCompleted

func (b *Builder) TopkQuery() (c TopkQuery) {
	c = TopkQuery{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOPK.QUERY")
	return c
}

func (b *SBuilder) TopkQuery() (c STopkQuery) {
	c = STopkQuery{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOPK.QUERY")
	return c
}

func (c TopkQuery) Key(key string) TopkQueryKey {
	c.cs.s = append(c.cs.s, key)
	return (TopkQueryKey)(c)
}

func (c STopkQuery) Key(key string) STopkQueryKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STopkQueryKey)(c)
}

type TopkQueryItem Completed

type STopkQueryItem SCompleted

func (c TopkQueryItem) Item(item ...string) TopkQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c STopkQueryItem) Item(item ...string) STopkQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return c
}

func (c TopkQueryItem) Build() Completed {
	return Completed(c)
}

func (c STopkQueryItem) Build() SCompleted {
	return SCompleted(c)
}

func (c TopkQueryItem) Cache() Cacheable {
	return Cacheable(c)
}

func (c STopkQueryItem) Cache() SCacheable {
	return SCacheable(c)
}

type TopkQueryKey Completed

type STopkQueryKey SCompleted

func (c TopkQueryKey) Item(item ...string) TopkQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return (TopkQueryItem)(c)
}

func (c STopkQueryKey) Item(item ...string) STopkQueryItem {
	c.cs.s = append(c.cs.s, item...)
	return (STopkQueryItem)(c)
}

type TopkReserve Completed

type STopkReserve SCompleted

func (b *Builder) TopkReserve() (c TopkReserve) {
	c = TopkReserve{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TOPK.RESERVE")
	return c
}

func (b *SBuilder) TopkReserve() (c STopkReserve) {
	c = STopkReserve{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TOPK.RESERVE")
	return c
}

func (c TopkReserve) Key(key string) TopkReserveKey {
	c.cs.s = append(c.cs.s, key)
	return (TopkReserveKey)(c)
}

func (c STopkReserve) Key(key string) STopkReserveKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STopkReserveKey)(c)
}

type TopkReserveKey Completed

type STopkReserveKey SCompleted

func (c TopkReserveKey) Topk(topk int64) TopkReserveTopk {
	c.cs.s = append(c.cs.s, strconv.FormatInt(topk, 10))
	return (TopkReserveTopk)(c)
}

func (c STopkReserveKey) Topk(topk int64) STopkReserveTopk {
	c.cs.s = append(c.cs.s, strconv.FormatInt(topk, 10))
	return (STopkReserveTopk)(c)
}

type TopkReserveParamsDecay Completed

type STopkReserveParamsDecay SCompleted

func (c TopkReserveParamsDecay) Build() Completed {
	return Completed(c)
}

func (c STopkReserveParamsDecay) Build() SCompleted {
	return SCompleted(c)
}

type TopkReserveParamsDepth Completed

type STopkReserveParamsDepth SCompleted

func (c TopkReserveParamsDepth) Decay(decay float64) TopkReserveParamsDecay {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(decay, 'f', -1, 64))
	return (TopkReserveParamsDecay)(c)
}

func (c STopkReserveParamsDepth) Decay(decay float64) STopkReserveParamsDecay {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(decay, 'f', -1, 64))
	return (STopkReserveParamsDecay)(c)
}

type TopkReserveParamsWidth Completed

type STopkReserveParamsWidth SCompleted

func (c TopkReserveParamsWidth) Depth(depth int64) TopkReserveParamsDepth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(depth, 10))
	return (TopkReserveParamsDepth)(c)
}

func (c STopkReserveParamsWidth) Depth(depth int64) STopkReserveParamsDepth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(depth, 10))
	return (STopkReserveParamsDepth)(c)
}

type TopkReserveTopk Completed

type STopkReserveTopk SCompleted

func (c TopkReserveTopk) Width(width int64) TopkReserveParamsWidth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(width, 10))
	return (TopkReserveParamsWidth)(c)
}

func (c STopkReserveTopk) Width(width int64) STopkReserveParamsWidth {
	c.cs.s = append(c.cs.s, strconv.FormatInt(width, 10))
	return (STopkReserveParamsWidth)(c)
}

func (c TopkReserveTopk) Build() Completed {
	return Completed(c)
}

func (c STopkReserveTopk) Build() SCompleted {
	return SCompleted(c)
}

type Touch Completed

type STouch SCompleted

func (b *Builder) Touch() (c Touch) {
	c = Touch{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOUCH")
	return c
}

func (b *SBuilder) Touch() (c STouch) {
	c = STouch{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TOUCH")
	return c
}

func (c Touch) Key(key ...string) TouchKey {
	c.cs.s = append(c.cs.s, key...)
	return (TouchKey)(c)
}

func (c STouch) Key(key ...string) STouchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (STouchKey)(c)
}

type TouchKey Completed

type STouchKey SCompleted

func (c TouchKey) Key(key ...string) TouchKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c STouchKey) Key(key ...string) STouchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c TouchKey) Build() Completed {
	return Completed(c)
}

func (c STouchKey) Build() SCompleted {
	return SCompleted(c)
}

type TsAdd Completed

type STsAdd SCompleted

func (b *Builder) TsAdd() (c TsAdd) {
	c = TsAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.ADD")
	return c
}

func (b *SBuilder) TsAdd() (c STsAdd) {
	c = STsAdd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.ADD")
	return c
}

func (c TsAdd) Key(key string) TsAddKey {
	c.cs.s = append(c.cs.s, key)
	return (TsAddKey)(c)
}

func (c STsAdd) Key(key string) STsAddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsAddKey)(c)
}

type TsAddChunkSize Completed

type STsAddChunkSize SCompleted

func (c TsAddChunkSize) OnDuplicateBlock() TsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (TsAddOnDuplicateBlock)(c)
}

func (c STsAddChunkSize) OnDuplicateBlock() STsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (STsAddOnDuplicateBlock)(c)
}

func (c TsAddChunkSize) OnDuplicateFirst() TsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (TsAddOnDuplicateFirst)(c)
}

func (c STsAddChunkSize) OnDuplicateFirst() STsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (STsAddOnDuplicateFirst)(c)
}

func (c TsAddChunkSize) OnDuplicateLast() TsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (TsAddOnDuplicateLast)(c)
}

func (c STsAddChunkSize) OnDuplicateLast() STsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (STsAddOnDuplicateLast)(c)
}

func (c TsAddChunkSize) OnDuplicateMin() TsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (TsAddOnDuplicateMin)(c)
}

func (c STsAddChunkSize) OnDuplicateMin() STsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (STsAddOnDuplicateMin)(c)
}

func (c TsAddChunkSize) OnDuplicateMax() TsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (TsAddOnDuplicateMax)(c)
}

func (c STsAddChunkSize) OnDuplicateMax() STsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (STsAddOnDuplicateMax)(c)
}

func (c TsAddChunkSize) OnDuplicateSum() TsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (TsAddOnDuplicateSum)(c)
}

func (c STsAddChunkSize) OnDuplicateSum() STsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (STsAddOnDuplicateSum)(c)
}

func (c TsAddChunkSize) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddChunkSize) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddChunkSize) Build() Completed {
	return Completed(c)
}

func (c STsAddChunkSize) Build() SCompleted {
	return SCompleted(c)
}

type TsAddEncodingCompressed Completed

type STsAddEncodingCompressed SCompleted

func (c TsAddEncodingCompressed) ChunkSize(size int64) TsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsAddChunkSize)(c)
}

func (c STsAddEncodingCompressed) ChunkSize(size int64) STsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsAddChunkSize)(c)
}

func (c TsAddEncodingCompressed) OnDuplicateBlock() TsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (TsAddOnDuplicateBlock)(c)
}

func (c STsAddEncodingCompressed) OnDuplicateBlock() STsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (STsAddOnDuplicateBlock)(c)
}

func (c TsAddEncodingCompressed) OnDuplicateFirst() TsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (TsAddOnDuplicateFirst)(c)
}

func (c STsAddEncodingCompressed) OnDuplicateFirst() STsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (STsAddOnDuplicateFirst)(c)
}

func (c TsAddEncodingCompressed) OnDuplicateLast() TsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (TsAddOnDuplicateLast)(c)
}

func (c STsAddEncodingCompressed) OnDuplicateLast() STsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (STsAddOnDuplicateLast)(c)
}

func (c TsAddEncodingCompressed) OnDuplicateMin() TsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (TsAddOnDuplicateMin)(c)
}

func (c STsAddEncodingCompressed) OnDuplicateMin() STsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (STsAddOnDuplicateMin)(c)
}

func (c TsAddEncodingCompressed) OnDuplicateMax() TsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (TsAddOnDuplicateMax)(c)
}

func (c STsAddEncodingCompressed) OnDuplicateMax() STsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (STsAddOnDuplicateMax)(c)
}

func (c TsAddEncodingCompressed) OnDuplicateSum() TsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (TsAddOnDuplicateSum)(c)
}

func (c STsAddEncodingCompressed) OnDuplicateSum() STsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (STsAddOnDuplicateSum)(c)
}

func (c TsAddEncodingCompressed) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddEncodingCompressed) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddEncodingCompressed) Build() Completed {
	return Completed(c)
}

func (c STsAddEncodingCompressed) Build() SCompleted {
	return SCompleted(c)
}

type TsAddEncodingUncompressed Completed

type STsAddEncodingUncompressed SCompleted

func (c TsAddEncodingUncompressed) ChunkSize(size int64) TsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsAddChunkSize)(c)
}

func (c STsAddEncodingUncompressed) ChunkSize(size int64) STsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsAddChunkSize)(c)
}

func (c TsAddEncodingUncompressed) OnDuplicateBlock() TsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (TsAddOnDuplicateBlock)(c)
}

func (c STsAddEncodingUncompressed) OnDuplicateBlock() STsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (STsAddOnDuplicateBlock)(c)
}

func (c TsAddEncodingUncompressed) OnDuplicateFirst() TsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (TsAddOnDuplicateFirst)(c)
}

func (c STsAddEncodingUncompressed) OnDuplicateFirst() STsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (STsAddOnDuplicateFirst)(c)
}

func (c TsAddEncodingUncompressed) OnDuplicateLast() TsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (TsAddOnDuplicateLast)(c)
}

func (c STsAddEncodingUncompressed) OnDuplicateLast() STsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (STsAddOnDuplicateLast)(c)
}

func (c TsAddEncodingUncompressed) OnDuplicateMin() TsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (TsAddOnDuplicateMin)(c)
}

func (c STsAddEncodingUncompressed) OnDuplicateMin() STsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (STsAddOnDuplicateMin)(c)
}

func (c TsAddEncodingUncompressed) OnDuplicateMax() TsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (TsAddOnDuplicateMax)(c)
}

func (c STsAddEncodingUncompressed) OnDuplicateMax() STsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (STsAddOnDuplicateMax)(c)
}

func (c TsAddEncodingUncompressed) OnDuplicateSum() TsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (TsAddOnDuplicateSum)(c)
}

func (c STsAddEncodingUncompressed) OnDuplicateSum() STsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (STsAddOnDuplicateSum)(c)
}

func (c TsAddEncodingUncompressed) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddEncodingUncompressed) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddEncodingUncompressed) Build() Completed {
	return Completed(c)
}

func (c STsAddEncodingUncompressed) Build() SCompleted {
	return SCompleted(c)
}

type TsAddKey Completed

type STsAddKey SCompleted

func (c TsAddKey) Timestamp(timestamp int64) TsAddTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (TsAddTimestamp)(c)
}

func (c STsAddKey) Timestamp(timestamp int64) STsAddTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (STsAddTimestamp)(c)
}

type TsAddLabels Completed

type STsAddLabels SCompleted

func (c TsAddLabels) Labels(label string, value string) TsAddLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c STsAddLabels) Labels(label string, value string) STsAddLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c TsAddLabels) Build() Completed {
	return Completed(c)
}

func (c STsAddLabels) Build() SCompleted {
	return SCompleted(c)
}

type TsAddOnDuplicateBlock Completed

type STsAddOnDuplicateBlock SCompleted

func (c TsAddOnDuplicateBlock) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddOnDuplicateBlock) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddOnDuplicateBlock) Build() Completed {
	return Completed(c)
}

func (c STsAddOnDuplicateBlock) Build() SCompleted {
	return SCompleted(c)
}

type TsAddOnDuplicateFirst Completed

type STsAddOnDuplicateFirst SCompleted

func (c TsAddOnDuplicateFirst) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddOnDuplicateFirst) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddOnDuplicateFirst) Build() Completed {
	return Completed(c)
}

func (c STsAddOnDuplicateFirst) Build() SCompleted {
	return SCompleted(c)
}

type TsAddOnDuplicateLast Completed

type STsAddOnDuplicateLast SCompleted

func (c TsAddOnDuplicateLast) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddOnDuplicateLast) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddOnDuplicateLast) Build() Completed {
	return Completed(c)
}

func (c STsAddOnDuplicateLast) Build() SCompleted {
	return SCompleted(c)
}

type TsAddOnDuplicateMax Completed

type STsAddOnDuplicateMax SCompleted

func (c TsAddOnDuplicateMax) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddOnDuplicateMax) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddOnDuplicateMax) Build() Completed {
	return Completed(c)
}

func (c STsAddOnDuplicateMax) Build() SCompleted {
	return SCompleted(c)
}

type TsAddOnDuplicateMin Completed

type STsAddOnDuplicateMin SCompleted

func (c TsAddOnDuplicateMin) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddOnDuplicateMin) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddOnDuplicateMin) Build() Completed {
	return Completed(c)
}

func (c STsAddOnDuplicateMin) Build() SCompleted {
	return SCompleted(c)
}

type TsAddOnDuplicateSum Completed

type STsAddOnDuplicateSum SCompleted

func (c TsAddOnDuplicateSum) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddOnDuplicateSum) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddOnDuplicateSum) Build() Completed {
	return Completed(c)
}

func (c STsAddOnDuplicateSum) Build() SCompleted {
	return SCompleted(c)
}

type TsAddRetention Completed

type STsAddRetention SCompleted

func (c TsAddRetention) EncodingUncompressed() TsAddEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (TsAddEncodingUncompressed)(c)
}

func (c STsAddRetention) EncodingUncompressed() STsAddEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (STsAddEncodingUncompressed)(c)
}

func (c TsAddRetention) EncodingCompressed() TsAddEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (TsAddEncodingCompressed)(c)
}

func (c STsAddRetention) EncodingCompressed() STsAddEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (STsAddEncodingCompressed)(c)
}

func (c TsAddRetention) ChunkSize(size int64) TsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsAddChunkSize)(c)
}

func (c STsAddRetention) ChunkSize(size int64) STsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsAddChunkSize)(c)
}

func (c TsAddRetention) OnDuplicateBlock() TsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (TsAddOnDuplicateBlock)(c)
}

func (c STsAddRetention) OnDuplicateBlock() STsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (STsAddOnDuplicateBlock)(c)
}

func (c TsAddRetention) OnDuplicateFirst() TsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (TsAddOnDuplicateFirst)(c)
}

func (c STsAddRetention) OnDuplicateFirst() STsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (STsAddOnDuplicateFirst)(c)
}

func (c TsAddRetention) OnDuplicateLast() TsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (TsAddOnDuplicateLast)(c)
}

func (c STsAddRetention) OnDuplicateLast() STsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (STsAddOnDuplicateLast)(c)
}

func (c TsAddRetention) OnDuplicateMin() TsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (TsAddOnDuplicateMin)(c)
}

func (c STsAddRetention) OnDuplicateMin() STsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (STsAddOnDuplicateMin)(c)
}

func (c TsAddRetention) OnDuplicateMax() TsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (TsAddOnDuplicateMax)(c)
}

func (c STsAddRetention) OnDuplicateMax() STsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (STsAddOnDuplicateMax)(c)
}

func (c TsAddRetention) OnDuplicateSum() TsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (TsAddOnDuplicateSum)(c)
}

func (c STsAddRetention) OnDuplicateSum() STsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (STsAddOnDuplicateSum)(c)
}

func (c TsAddRetention) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddRetention) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddRetention) Build() Completed {
	return Completed(c)
}

func (c STsAddRetention) Build() SCompleted {
	return SCompleted(c)
}

type TsAddTimestamp Completed

type STsAddTimestamp SCompleted

func (c TsAddTimestamp) Value(value float64) TsAddValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (TsAddValue)(c)
}

func (c STsAddTimestamp) Value(value float64) STsAddValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (STsAddValue)(c)
}

type TsAddValue Completed

type STsAddValue SCompleted

func (c TsAddValue) Retention(retentiontime int64) TsAddRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsAddRetention)(c)
}

func (c STsAddValue) Retention(retentiontime int64) STsAddRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsAddRetention)(c)
}

func (c TsAddValue) EncodingUncompressed() TsAddEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (TsAddEncodingUncompressed)(c)
}

func (c STsAddValue) EncodingUncompressed() STsAddEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (STsAddEncodingUncompressed)(c)
}

func (c TsAddValue) EncodingCompressed() TsAddEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (TsAddEncodingCompressed)(c)
}

func (c STsAddValue) EncodingCompressed() STsAddEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (STsAddEncodingCompressed)(c)
}

func (c TsAddValue) ChunkSize(size int64) TsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsAddChunkSize)(c)
}

func (c STsAddValue) ChunkSize(size int64) STsAddChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsAddChunkSize)(c)
}

func (c TsAddValue) OnDuplicateBlock() TsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (TsAddOnDuplicateBlock)(c)
}

func (c STsAddValue) OnDuplicateBlock() STsAddOnDuplicateBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "BLOCK")
	return (STsAddOnDuplicateBlock)(c)
}

func (c TsAddValue) OnDuplicateFirst() TsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (TsAddOnDuplicateFirst)(c)
}

func (c STsAddValue) OnDuplicateFirst() STsAddOnDuplicateFirst {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "FIRST")
	return (STsAddOnDuplicateFirst)(c)
}

func (c TsAddValue) OnDuplicateLast() TsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (TsAddOnDuplicateLast)(c)
}

func (c STsAddValue) OnDuplicateLast() STsAddOnDuplicateLast {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "LAST")
	return (STsAddOnDuplicateLast)(c)
}

func (c TsAddValue) OnDuplicateMin() TsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (TsAddOnDuplicateMin)(c)
}

func (c STsAddValue) OnDuplicateMin() STsAddOnDuplicateMin {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MIN")
	return (STsAddOnDuplicateMin)(c)
}

func (c TsAddValue) OnDuplicateMax() TsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (TsAddOnDuplicateMax)(c)
}

func (c STsAddValue) OnDuplicateMax() STsAddOnDuplicateMax {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "MAX")
	return (STsAddOnDuplicateMax)(c)
}

func (c TsAddValue) OnDuplicateSum() TsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (TsAddOnDuplicateSum)(c)
}

func (c STsAddValue) OnDuplicateSum() STsAddOnDuplicateSum {
	c.cs.s = append(c.cs.s, "ON_DUPLICATE", "SUM")
	return (STsAddOnDuplicateSum)(c)
}

func (c TsAddValue) Labels() TsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAddLabels)(c)
}

func (c STsAddValue) Labels() STsAddLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAddLabels)(c)
}

func (c TsAddValue) Build() Completed {
	return Completed(c)
}

func (c STsAddValue) Build() SCompleted {
	return SCompleted(c)
}

type TsAlter Completed

type STsAlter SCompleted

func (b *Builder) TsAlter() (c TsAlter) {
	c = TsAlter{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.ALTER")
	return c
}

func (b *SBuilder) TsAlter() (c STsAlter) {
	c = STsAlter{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.ALTER")
	return c
}

func (c TsAlter) Key(key string) TsAlterKey {
	c.cs.s = append(c.cs.s, key)
	return (TsAlterKey)(c)
}

func (c STsAlter) Key(key string) STsAlterKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsAlterKey)(c)
}

type TsAlterKey Completed

type STsAlterKey SCompleted

func (c TsAlterKey) Retention(retentiontime int64) TsAlterRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsAlterRetention)(c)
}

func (c STsAlterKey) Retention(retentiontime int64) STsAlterRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsAlterRetention)(c)
}

func (c TsAlterKey) Labels() TsAlterLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAlterLabels)(c)
}

func (c STsAlterKey) Labels() STsAlterLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAlterLabels)(c)
}

func (c TsAlterKey) Build() Completed {
	return Completed(c)
}

func (c STsAlterKey) Build() SCompleted {
	return SCompleted(c)
}

type TsAlterLabels Completed

type STsAlterLabels SCompleted

func (c TsAlterLabels) Labels(label string, value string) TsAlterLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c STsAlterLabels) Labels(label string, value string) STsAlterLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c TsAlterLabels) Build() Completed {
	return Completed(c)
}

func (c STsAlterLabels) Build() SCompleted {
	return SCompleted(c)
}

type TsAlterRetention Completed

type STsAlterRetention SCompleted

func (c TsAlterRetention) Labels() TsAlterLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsAlterLabels)(c)
}

func (c STsAlterRetention) Labels() STsAlterLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsAlterLabels)(c)
}

func (c TsAlterRetention) Build() Completed {
	return Completed(c)
}

func (c STsAlterRetention) Build() SCompleted {
	return SCompleted(c)
}

type TsCreate Completed

type STsCreate SCompleted

func (b *Builder) TsCreate() (c TsCreate) {
	c = TsCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.CREATE")
	return c
}

func (b *SBuilder) TsCreate() (c STsCreate) {
	c = STsCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.CREATE")
	return c
}

func (c TsCreate) Key(key string) TsCreateKey {
	c.cs.s = append(c.cs.s, key)
	return (TsCreateKey)(c)
}

func (c STsCreate) Key(key string) STsCreateKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsCreateKey)(c)
}

type TsCreateChunkSize Completed

type STsCreateChunkSize SCompleted

func (c TsCreateChunkSize) DuplicatePolicyBlock() TsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (TsCreateDuplicatePolicyBlock)(c)
}

func (c STsCreateChunkSize) DuplicatePolicyBlock() STsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (STsCreateDuplicatePolicyBlock)(c)
}

func (c TsCreateChunkSize) DuplicatePolicyFirst() TsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (TsCreateDuplicatePolicyFirst)(c)
}

func (c STsCreateChunkSize) DuplicatePolicyFirst() STsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (STsCreateDuplicatePolicyFirst)(c)
}

func (c TsCreateChunkSize) DuplicatePolicyLast() TsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (TsCreateDuplicatePolicyLast)(c)
}

func (c STsCreateChunkSize) DuplicatePolicyLast() STsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (STsCreateDuplicatePolicyLast)(c)
}

func (c TsCreateChunkSize) DuplicatePolicyMin() TsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (TsCreateDuplicatePolicyMin)(c)
}

func (c STsCreateChunkSize) DuplicatePolicyMin() STsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (STsCreateDuplicatePolicyMin)(c)
}

func (c TsCreateChunkSize) DuplicatePolicyMax() TsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (TsCreateDuplicatePolicyMax)(c)
}

func (c STsCreateChunkSize) DuplicatePolicyMax() STsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (STsCreateDuplicatePolicyMax)(c)
}

func (c TsCreateChunkSize) DuplicatePolicySum() TsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (TsCreateDuplicatePolicySum)(c)
}

func (c STsCreateChunkSize) DuplicatePolicySum() STsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (STsCreateDuplicatePolicySum)(c)
}

func (c TsCreateChunkSize) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateChunkSize) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateChunkSize) Build() Completed {
	return Completed(c)
}

func (c STsCreateChunkSize) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateDuplicatePolicyBlock Completed

type STsCreateDuplicatePolicyBlock SCompleted

func (c TsCreateDuplicatePolicyBlock) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateDuplicatePolicyBlock) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateDuplicatePolicyBlock) Build() Completed {
	return Completed(c)
}

func (c STsCreateDuplicatePolicyBlock) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateDuplicatePolicyFirst Completed

type STsCreateDuplicatePolicyFirst SCompleted

func (c TsCreateDuplicatePolicyFirst) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateDuplicatePolicyFirst) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateDuplicatePolicyFirst) Build() Completed {
	return Completed(c)
}

func (c STsCreateDuplicatePolicyFirst) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateDuplicatePolicyLast Completed

type STsCreateDuplicatePolicyLast SCompleted

func (c TsCreateDuplicatePolicyLast) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateDuplicatePolicyLast) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateDuplicatePolicyLast) Build() Completed {
	return Completed(c)
}

func (c STsCreateDuplicatePolicyLast) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateDuplicatePolicyMax Completed

type STsCreateDuplicatePolicyMax SCompleted

func (c TsCreateDuplicatePolicyMax) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateDuplicatePolicyMax) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateDuplicatePolicyMax) Build() Completed {
	return Completed(c)
}

func (c STsCreateDuplicatePolicyMax) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateDuplicatePolicyMin Completed

type STsCreateDuplicatePolicyMin SCompleted

func (c TsCreateDuplicatePolicyMin) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateDuplicatePolicyMin) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateDuplicatePolicyMin) Build() Completed {
	return Completed(c)
}

func (c STsCreateDuplicatePolicyMin) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateDuplicatePolicySum Completed

type STsCreateDuplicatePolicySum SCompleted

func (c TsCreateDuplicatePolicySum) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateDuplicatePolicySum) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateDuplicatePolicySum) Build() Completed {
	return Completed(c)
}

func (c STsCreateDuplicatePolicySum) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateEncodingCompressed Completed

type STsCreateEncodingCompressed SCompleted

func (c TsCreateEncodingCompressed) ChunkSize(size int64) TsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsCreateChunkSize)(c)
}

func (c STsCreateEncodingCompressed) ChunkSize(size int64) STsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsCreateChunkSize)(c)
}

func (c TsCreateEncodingCompressed) DuplicatePolicyBlock() TsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (TsCreateDuplicatePolicyBlock)(c)
}

func (c STsCreateEncodingCompressed) DuplicatePolicyBlock() STsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (STsCreateDuplicatePolicyBlock)(c)
}

func (c TsCreateEncodingCompressed) DuplicatePolicyFirst() TsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (TsCreateDuplicatePolicyFirst)(c)
}

func (c STsCreateEncodingCompressed) DuplicatePolicyFirst() STsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (STsCreateDuplicatePolicyFirst)(c)
}

func (c TsCreateEncodingCompressed) DuplicatePolicyLast() TsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (TsCreateDuplicatePolicyLast)(c)
}

func (c STsCreateEncodingCompressed) DuplicatePolicyLast() STsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (STsCreateDuplicatePolicyLast)(c)
}

func (c TsCreateEncodingCompressed) DuplicatePolicyMin() TsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (TsCreateDuplicatePolicyMin)(c)
}

func (c STsCreateEncodingCompressed) DuplicatePolicyMin() STsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (STsCreateDuplicatePolicyMin)(c)
}

func (c TsCreateEncodingCompressed) DuplicatePolicyMax() TsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (TsCreateDuplicatePolicyMax)(c)
}

func (c STsCreateEncodingCompressed) DuplicatePolicyMax() STsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (STsCreateDuplicatePolicyMax)(c)
}

func (c TsCreateEncodingCompressed) DuplicatePolicySum() TsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (TsCreateDuplicatePolicySum)(c)
}

func (c STsCreateEncodingCompressed) DuplicatePolicySum() STsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (STsCreateDuplicatePolicySum)(c)
}

func (c TsCreateEncodingCompressed) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateEncodingCompressed) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateEncodingCompressed) Build() Completed {
	return Completed(c)
}

func (c STsCreateEncodingCompressed) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateEncodingUncompressed Completed

type STsCreateEncodingUncompressed SCompleted

func (c TsCreateEncodingUncompressed) ChunkSize(size int64) TsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsCreateChunkSize)(c)
}

func (c STsCreateEncodingUncompressed) ChunkSize(size int64) STsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsCreateChunkSize)(c)
}

func (c TsCreateEncodingUncompressed) DuplicatePolicyBlock() TsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (TsCreateDuplicatePolicyBlock)(c)
}

func (c STsCreateEncodingUncompressed) DuplicatePolicyBlock() STsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (STsCreateDuplicatePolicyBlock)(c)
}

func (c TsCreateEncodingUncompressed) DuplicatePolicyFirst() TsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (TsCreateDuplicatePolicyFirst)(c)
}

func (c STsCreateEncodingUncompressed) DuplicatePolicyFirst() STsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (STsCreateDuplicatePolicyFirst)(c)
}

func (c TsCreateEncodingUncompressed) DuplicatePolicyLast() TsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (TsCreateDuplicatePolicyLast)(c)
}

func (c STsCreateEncodingUncompressed) DuplicatePolicyLast() STsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (STsCreateDuplicatePolicyLast)(c)
}

func (c TsCreateEncodingUncompressed) DuplicatePolicyMin() TsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (TsCreateDuplicatePolicyMin)(c)
}

func (c STsCreateEncodingUncompressed) DuplicatePolicyMin() STsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (STsCreateDuplicatePolicyMin)(c)
}

func (c TsCreateEncodingUncompressed) DuplicatePolicyMax() TsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (TsCreateDuplicatePolicyMax)(c)
}

func (c STsCreateEncodingUncompressed) DuplicatePolicyMax() STsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (STsCreateDuplicatePolicyMax)(c)
}

func (c TsCreateEncodingUncompressed) DuplicatePolicySum() TsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (TsCreateDuplicatePolicySum)(c)
}

func (c STsCreateEncodingUncompressed) DuplicatePolicySum() STsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (STsCreateDuplicatePolicySum)(c)
}

func (c TsCreateEncodingUncompressed) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateEncodingUncompressed) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateEncodingUncompressed) Build() Completed {
	return Completed(c)
}

func (c STsCreateEncodingUncompressed) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateKey Completed

type STsCreateKey SCompleted

func (c TsCreateKey) Retention(retentiontime int64) TsCreateRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsCreateRetention)(c)
}

func (c STsCreateKey) Retention(retentiontime int64) STsCreateRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsCreateRetention)(c)
}

func (c TsCreateKey) EncodingUncompressed() TsCreateEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (TsCreateEncodingUncompressed)(c)
}

func (c STsCreateKey) EncodingUncompressed() STsCreateEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (STsCreateEncodingUncompressed)(c)
}

func (c TsCreateKey) EncodingCompressed() TsCreateEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (TsCreateEncodingCompressed)(c)
}

func (c STsCreateKey) EncodingCompressed() STsCreateEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (STsCreateEncodingCompressed)(c)
}

func (c TsCreateKey) ChunkSize(size int64) TsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsCreateChunkSize)(c)
}

func (c STsCreateKey) ChunkSize(size int64) STsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsCreateChunkSize)(c)
}

func (c TsCreateKey) DuplicatePolicyBlock() TsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (TsCreateDuplicatePolicyBlock)(c)
}

func (c STsCreateKey) DuplicatePolicyBlock() STsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (STsCreateDuplicatePolicyBlock)(c)
}

func (c TsCreateKey) DuplicatePolicyFirst() TsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (TsCreateDuplicatePolicyFirst)(c)
}

func (c STsCreateKey) DuplicatePolicyFirst() STsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (STsCreateDuplicatePolicyFirst)(c)
}

func (c TsCreateKey) DuplicatePolicyLast() TsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (TsCreateDuplicatePolicyLast)(c)
}

func (c STsCreateKey) DuplicatePolicyLast() STsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (STsCreateDuplicatePolicyLast)(c)
}

func (c TsCreateKey) DuplicatePolicyMin() TsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (TsCreateDuplicatePolicyMin)(c)
}

func (c STsCreateKey) DuplicatePolicyMin() STsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (STsCreateDuplicatePolicyMin)(c)
}

func (c TsCreateKey) DuplicatePolicyMax() TsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (TsCreateDuplicatePolicyMax)(c)
}

func (c STsCreateKey) DuplicatePolicyMax() STsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (STsCreateDuplicatePolicyMax)(c)
}

func (c TsCreateKey) DuplicatePolicySum() TsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (TsCreateDuplicatePolicySum)(c)
}

func (c STsCreateKey) DuplicatePolicySum() STsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (STsCreateDuplicatePolicySum)(c)
}

func (c TsCreateKey) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateKey) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateKey) Build() Completed {
	return Completed(c)
}

func (c STsCreateKey) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateLabels Completed

type STsCreateLabels SCompleted

func (c TsCreateLabels) Labels(label string, value string) TsCreateLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c STsCreateLabels) Labels(label string, value string) STsCreateLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c TsCreateLabels) Build() Completed {
	return Completed(c)
}

func (c STsCreateLabels) Build() SCompleted {
	return SCompleted(c)
}

type TsCreateRetention Completed

type STsCreateRetention SCompleted

func (c TsCreateRetention) EncodingUncompressed() TsCreateEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (TsCreateEncodingUncompressed)(c)
}

func (c STsCreateRetention) EncodingUncompressed() STsCreateEncodingUncompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "UNCOMPRESSED")
	return (STsCreateEncodingUncompressed)(c)
}

func (c TsCreateRetention) EncodingCompressed() TsCreateEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (TsCreateEncodingCompressed)(c)
}

func (c STsCreateRetention) EncodingCompressed() STsCreateEncodingCompressed {
	c.cs.s = append(c.cs.s, "ENCODING", "COMPRESSED")
	return (STsCreateEncodingCompressed)(c)
}

func (c TsCreateRetention) ChunkSize(size int64) TsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsCreateChunkSize)(c)
}

func (c STsCreateRetention) ChunkSize(size int64) STsCreateChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsCreateChunkSize)(c)
}

func (c TsCreateRetention) DuplicatePolicyBlock() TsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (TsCreateDuplicatePolicyBlock)(c)
}

func (c STsCreateRetention) DuplicatePolicyBlock() STsCreateDuplicatePolicyBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "BLOCK")
	return (STsCreateDuplicatePolicyBlock)(c)
}

func (c TsCreateRetention) DuplicatePolicyFirst() TsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (TsCreateDuplicatePolicyFirst)(c)
}

func (c STsCreateRetention) DuplicatePolicyFirst() STsCreateDuplicatePolicyFirst {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "FIRST")
	return (STsCreateDuplicatePolicyFirst)(c)
}

func (c TsCreateRetention) DuplicatePolicyLast() TsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (TsCreateDuplicatePolicyLast)(c)
}

func (c STsCreateRetention) DuplicatePolicyLast() STsCreateDuplicatePolicyLast {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "LAST")
	return (STsCreateDuplicatePolicyLast)(c)
}

func (c TsCreateRetention) DuplicatePolicyMin() TsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (TsCreateDuplicatePolicyMin)(c)
}

func (c STsCreateRetention) DuplicatePolicyMin() STsCreateDuplicatePolicyMin {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MIN")
	return (STsCreateDuplicatePolicyMin)(c)
}

func (c TsCreateRetention) DuplicatePolicyMax() TsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (TsCreateDuplicatePolicyMax)(c)
}

func (c STsCreateRetention) DuplicatePolicyMax() STsCreateDuplicatePolicyMax {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "MAX")
	return (STsCreateDuplicatePolicyMax)(c)
}

func (c TsCreateRetention) DuplicatePolicySum() TsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (TsCreateDuplicatePolicySum)(c)
}

func (c STsCreateRetention) DuplicatePolicySum() STsCreateDuplicatePolicySum {
	c.cs.s = append(c.cs.s, "DUPLICATE_POLICY", "SUM")
	return (STsCreateDuplicatePolicySum)(c)
}

func (c TsCreateRetention) Labels() TsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsCreateLabels)(c)
}

func (c STsCreateRetention) Labels() STsCreateLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsCreateLabels)(c)
}

func (c TsCreateRetention) Build() Completed {
	return Completed(c)
}

func (c STsCreateRetention) Build() SCompleted {
	return SCompleted(c)
}

type TsCreaterule Completed

type STsCreaterule SCompleted

func (b *Builder) TsCreaterule() (c TsCreaterule) {
	c = TsCreaterule{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.CREATERULE")
	return c
}

func (b *SBuilder) TsCreaterule() (c STsCreaterule) {
	c = STsCreaterule{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.CREATERULE")
	return c
}

func (c TsCreaterule) Sourcekey(sourcekey string) TsCreateruleSourcekey {
	c.cs.s = append(c.cs.s, sourcekey)
	return (TsCreateruleSourcekey)(c)
}

func (c STsCreaterule) Sourcekey(sourcekey string) STsCreateruleSourcekey {
	c.ks = checkSlot(c.ks, slot(sourcekey))
	c.cs.s = append(c.cs.s, sourcekey)
	return (STsCreateruleSourcekey)(c)
}

type TsCreateruleAggregationAvg Completed

type STsCreateruleAggregationAvg SCompleted

func (c TsCreateruleAggregationAvg) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationAvg) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationCount Completed

type STsCreateruleAggregationCount SCompleted

func (c TsCreateruleAggregationCount) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationCount) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationFirst Completed

type STsCreateruleAggregationFirst SCompleted

func (c TsCreateruleAggregationFirst) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationFirst) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationLast Completed

type STsCreateruleAggregationLast SCompleted

func (c TsCreateruleAggregationLast) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationLast) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationMax Completed

type STsCreateruleAggregationMax SCompleted

func (c TsCreateruleAggregationMax) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationMax) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationMin Completed

type STsCreateruleAggregationMin SCompleted

func (c TsCreateruleAggregationMin) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationMin) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationRange Completed

type STsCreateruleAggregationRange SCompleted

func (c TsCreateruleAggregationRange) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationRange) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationStdP Completed

type STsCreateruleAggregationStdP SCompleted

func (c TsCreateruleAggregationStdP) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationStdP) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationStdS Completed

type STsCreateruleAggregationStdS SCompleted

func (c TsCreateruleAggregationStdS) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationStdS) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationSum Completed

type STsCreateruleAggregationSum SCompleted

func (c TsCreateruleAggregationSum) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationSum) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationVarP Completed

type STsCreateruleAggregationVarP SCompleted

func (c TsCreateruleAggregationVarP) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationVarP) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleAggregationVarS Completed

type STsCreateruleAggregationVarS SCompleted

func (c TsCreateruleAggregationVarS) Timebucket(timebucket int64) TsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsCreateruleTimebucket)(c)
}

func (c STsCreateruleAggregationVarS) Timebucket(timebucket int64) STsCreateruleTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsCreateruleTimebucket)(c)
}

type TsCreateruleDestkey Completed

type STsCreateruleDestkey SCompleted

func (c TsCreateruleDestkey) AggregationAvg() TsCreateruleAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsCreateruleAggregationAvg)(c)
}

func (c STsCreateruleDestkey) AggregationAvg() STsCreateruleAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsCreateruleAggregationAvg)(c)
}

func (c TsCreateruleDestkey) AggregationSum() TsCreateruleAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsCreateruleAggregationSum)(c)
}

func (c STsCreateruleDestkey) AggregationSum() STsCreateruleAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsCreateruleAggregationSum)(c)
}

func (c TsCreateruleDestkey) AggregationMin() TsCreateruleAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsCreateruleAggregationMin)(c)
}

func (c STsCreateruleDestkey) AggregationMin() STsCreateruleAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsCreateruleAggregationMin)(c)
}

func (c TsCreateruleDestkey) AggregationMax() TsCreateruleAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsCreateruleAggregationMax)(c)
}

func (c STsCreateruleDestkey) AggregationMax() STsCreateruleAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsCreateruleAggregationMax)(c)
}

func (c TsCreateruleDestkey) AggregationRange() TsCreateruleAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsCreateruleAggregationRange)(c)
}

func (c STsCreateruleDestkey) AggregationRange() STsCreateruleAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsCreateruleAggregationRange)(c)
}

func (c TsCreateruleDestkey) AggregationCount() TsCreateruleAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsCreateruleAggregationCount)(c)
}

func (c STsCreateruleDestkey) AggregationCount() STsCreateruleAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsCreateruleAggregationCount)(c)
}

func (c TsCreateruleDestkey) AggregationFirst() TsCreateruleAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsCreateruleAggregationFirst)(c)
}

func (c STsCreateruleDestkey) AggregationFirst() STsCreateruleAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsCreateruleAggregationFirst)(c)
}

func (c TsCreateruleDestkey) AggregationLast() TsCreateruleAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsCreateruleAggregationLast)(c)
}

func (c STsCreateruleDestkey) AggregationLast() STsCreateruleAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsCreateruleAggregationLast)(c)
}

func (c TsCreateruleDestkey) AggregationStdP() TsCreateruleAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsCreateruleAggregationStdP)(c)
}

func (c STsCreateruleDestkey) AggregationStdP() STsCreateruleAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsCreateruleAggregationStdP)(c)
}

func (c TsCreateruleDestkey) AggregationStdS() TsCreateruleAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsCreateruleAggregationStdS)(c)
}

func (c STsCreateruleDestkey) AggregationStdS() STsCreateruleAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsCreateruleAggregationStdS)(c)
}

func (c TsCreateruleDestkey) AggregationVarP() TsCreateruleAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsCreateruleAggregationVarP)(c)
}

func (c STsCreateruleDestkey) AggregationVarP() STsCreateruleAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsCreateruleAggregationVarP)(c)
}

func (c TsCreateruleDestkey) AggregationVarS() TsCreateruleAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsCreateruleAggregationVarS)(c)
}

func (c STsCreateruleDestkey) AggregationVarS() STsCreateruleAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsCreateruleAggregationVarS)(c)
}

type TsCreateruleSourcekey Completed

type STsCreateruleSourcekey SCompleted

func (c TsCreateruleSourcekey) Destkey(destkey string) TsCreateruleDestkey {
	c.cs.s = append(c.cs.s, destkey)
	return (TsCreateruleDestkey)(c)
}

func (c STsCreateruleSourcekey) Destkey(destkey string) STsCreateruleDestkey {
	c.ks = checkSlot(c.ks, slot(destkey))
	c.cs.s = append(c.cs.s, destkey)
	return (STsCreateruleDestkey)(c)
}

type TsCreateruleTimebucket Completed

type STsCreateruleTimebucket SCompleted

func (c TsCreateruleTimebucket) Build() Completed {
	return Completed(c)
}

func (c STsCreateruleTimebucket) Build() SCompleted {
	return SCompleted(c)
}

type TsDecrby Completed

type STsDecrby SCompleted

func (b *Builder) TsDecrby() (c TsDecrby) {
	c = TsDecrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.DECRBY")
	return c
}

func (b *SBuilder) TsDecrby() (c STsDecrby) {
	c = STsDecrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.DECRBY")
	return c
}

func (c TsDecrby) Key(key string) TsDecrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (TsDecrbyKey)(c)
}

func (c STsDecrby) Key(key string) STsDecrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsDecrbyKey)(c)
}

type TsDecrbyChunkSize Completed

type STsDecrbyChunkSize SCompleted

func (c TsDecrbyChunkSize) Labels() TsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsDecrbyLabels)(c)
}

func (c STsDecrbyChunkSize) Labels() STsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsDecrbyLabels)(c)
}

func (c TsDecrbyChunkSize) Build() Completed {
	return Completed(c)
}

func (c STsDecrbyChunkSize) Build() SCompleted {
	return SCompleted(c)
}

type TsDecrbyKey Completed

type STsDecrbyKey SCompleted

func (c TsDecrbyKey) Value(value float64) TsDecrbyValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (TsDecrbyValue)(c)
}

func (c STsDecrbyKey) Value(value float64) STsDecrbyValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (STsDecrbyValue)(c)
}

type TsDecrbyLabels Completed

type STsDecrbyLabels SCompleted

func (c TsDecrbyLabels) Labels(label string, value string) TsDecrbyLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c STsDecrbyLabels) Labels(label string, value string) STsDecrbyLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c TsDecrbyLabels) Build() Completed {
	return Completed(c)
}

func (c STsDecrbyLabels) Build() SCompleted {
	return SCompleted(c)
}

type TsDecrbyRetention Completed

type STsDecrbyRetention SCompleted

func (c TsDecrbyRetention) Uncompressed() TsDecrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (TsDecrbyUncompressed)(c)
}

func (c STsDecrbyRetention) Uncompressed() STsDecrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (STsDecrbyUncompressed)(c)
}

func (c TsDecrbyRetention) ChunkSize(size int64) TsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsDecrbyChunkSize)(c)
}

func (c STsDecrbyRetention) ChunkSize(size int64) STsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsDecrbyChunkSize)(c)
}

func (c TsDecrbyRetention) Labels() TsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsDecrbyLabels)(c)
}

func (c STsDecrbyRetention) Labels() STsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsDecrbyLabels)(c)
}

func (c TsDecrbyRetention) Build() Completed {
	return Completed(c)
}

func (c STsDecrbyRetention) Build() SCompleted {
	return SCompleted(c)
}

type TsDecrbyTimestamp Completed

type STsDecrbyTimestamp SCompleted

func (c TsDecrbyTimestamp) Retention(retentiontime int64) TsDecrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsDecrbyRetention)(c)
}

func (c STsDecrbyTimestamp) Retention(retentiontime int64) STsDecrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsDecrbyRetention)(c)
}

func (c TsDecrbyTimestamp) Uncompressed() TsDecrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (TsDecrbyUncompressed)(c)
}

func (c STsDecrbyTimestamp) Uncompressed() STsDecrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (STsDecrbyUncompressed)(c)
}

func (c TsDecrbyTimestamp) ChunkSize(size int64) TsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsDecrbyChunkSize)(c)
}

func (c STsDecrbyTimestamp) ChunkSize(size int64) STsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsDecrbyChunkSize)(c)
}

func (c TsDecrbyTimestamp) Labels() TsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsDecrbyLabels)(c)
}

func (c STsDecrbyTimestamp) Labels() STsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsDecrbyLabels)(c)
}

func (c TsDecrbyTimestamp) Build() Completed {
	return Completed(c)
}

func (c STsDecrbyTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type TsDecrbyUncompressed Completed

type STsDecrbyUncompressed SCompleted

func (c TsDecrbyUncompressed) ChunkSize(size int64) TsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsDecrbyChunkSize)(c)
}

func (c STsDecrbyUncompressed) ChunkSize(size int64) STsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsDecrbyChunkSize)(c)
}

func (c TsDecrbyUncompressed) Labels() TsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsDecrbyLabels)(c)
}

func (c STsDecrbyUncompressed) Labels() STsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsDecrbyLabels)(c)
}

func (c TsDecrbyUncompressed) Build() Completed {
	return Completed(c)
}

func (c STsDecrbyUncompressed) Build() SCompleted {
	return SCompleted(c)
}

type TsDecrbyValue Completed

type STsDecrbyValue SCompleted

func (c TsDecrbyValue) Timestamp(timestamp int64) TsDecrbyTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (TsDecrbyTimestamp)(c)
}

func (c STsDecrbyValue) Timestamp(timestamp int64) STsDecrbyTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (STsDecrbyTimestamp)(c)
}

func (c TsDecrbyValue) Retention(retentiontime int64) TsDecrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsDecrbyRetention)(c)
}

func (c STsDecrbyValue) Retention(retentiontime int64) STsDecrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsDecrbyRetention)(c)
}

func (c TsDecrbyValue) Uncompressed() TsDecrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (TsDecrbyUncompressed)(c)
}

func (c STsDecrbyValue) Uncompressed() STsDecrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (STsDecrbyUncompressed)(c)
}

func (c TsDecrbyValue) ChunkSize(size int64) TsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsDecrbyChunkSize)(c)
}

func (c STsDecrbyValue) ChunkSize(size int64) STsDecrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsDecrbyChunkSize)(c)
}

func (c TsDecrbyValue) Labels() TsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsDecrbyLabels)(c)
}

func (c STsDecrbyValue) Labels() STsDecrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsDecrbyLabels)(c)
}

func (c TsDecrbyValue) Build() Completed {
	return Completed(c)
}

func (c STsDecrbyValue) Build() SCompleted {
	return SCompleted(c)
}

type TsDel Completed

type STsDel SCompleted

func (b *Builder) TsDel() (c TsDel) {
	c = TsDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.DEL")
	return c
}

func (b *SBuilder) TsDel() (c STsDel) {
	c = STsDel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.DEL")
	return c
}

func (c TsDel) Key(key string) TsDelKey {
	c.cs.s = append(c.cs.s, key)
	return (TsDelKey)(c)
}

func (c STsDel) Key(key string) STsDelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsDelKey)(c)
}

type TsDelFromTimestamp Completed

type STsDelFromTimestamp SCompleted

func (c TsDelFromTimestamp) ToTimestamp(toTimestamp int64) TsDelToTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(toTimestamp, 10))
	return (TsDelToTimestamp)(c)
}

func (c STsDelFromTimestamp) ToTimestamp(toTimestamp int64) STsDelToTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(toTimestamp, 10))
	return (STsDelToTimestamp)(c)
}

type TsDelKey Completed

type STsDelKey SCompleted

func (c TsDelKey) FromTimestamp(fromTimestamp int64) TsDelFromTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromTimestamp, 10))
	return (TsDelFromTimestamp)(c)
}

func (c STsDelKey) FromTimestamp(fromTimestamp int64) STsDelFromTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromTimestamp, 10))
	return (STsDelFromTimestamp)(c)
}

type TsDelToTimestamp Completed

type STsDelToTimestamp SCompleted

func (c TsDelToTimestamp) Build() Completed {
	return Completed(c)
}

func (c STsDelToTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type TsDeleterule Completed

type STsDeleterule SCompleted

func (b *Builder) TsDeleterule() (c TsDeleterule) {
	c = TsDeleterule{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.DELETERULE")
	return c
}

func (b *SBuilder) TsDeleterule() (c STsDeleterule) {
	c = STsDeleterule{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.DELETERULE")
	return c
}

func (c TsDeleterule) Sourcekey(sourcekey string) TsDeleteruleSourcekey {
	c.cs.s = append(c.cs.s, sourcekey)
	return (TsDeleteruleSourcekey)(c)
}

func (c STsDeleterule) Sourcekey(sourcekey string) STsDeleteruleSourcekey {
	c.ks = checkSlot(c.ks, slot(sourcekey))
	c.cs.s = append(c.cs.s, sourcekey)
	return (STsDeleteruleSourcekey)(c)
}

type TsDeleteruleDestkey Completed

type STsDeleteruleDestkey SCompleted

func (c TsDeleteruleDestkey) Build() Completed {
	return Completed(c)
}

func (c STsDeleteruleDestkey) Build() SCompleted {
	return SCompleted(c)
}

type TsDeleteruleSourcekey Completed

type STsDeleteruleSourcekey SCompleted

func (c TsDeleteruleSourcekey) Destkey(destkey string) TsDeleteruleDestkey {
	c.cs.s = append(c.cs.s, destkey)
	return (TsDeleteruleDestkey)(c)
}

func (c STsDeleteruleSourcekey) Destkey(destkey string) STsDeleteruleDestkey {
	c.ks = checkSlot(c.ks, slot(destkey))
	c.cs.s = append(c.cs.s, destkey)
	return (STsDeleteruleDestkey)(c)
}

type TsGet Completed

type STsGet SCompleted

func (b *Builder) TsGet() (c TsGet) {
	c = TsGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.GET")
	return c
}

func (b *SBuilder) TsGet() (c STsGet) {
	c = STsGet{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.GET")
	return c
}

func (c TsGet) Key(key string) TsGetKey {
	c.cs.s = append(c.cs.s, key)
	return (TsGetKey)(c)
}

func (c STsGet) Key(key string) STsGetKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsGetKey)(c)
}

type TsGetKey Completed

type STsGetKey SCompleted

func (c TsGetKey) Build() Completed {
	return Completed(c)
}

func (c STsGetKey) Build() SCompleted {
	return SCompleted(c)
}

type TsIncrby Completed

type STsIncrby SCompleted

func (b *Builder) TsIncrby() (c TsIncrby) {
	c = TsIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.INCRBY")
	return c
}

func (b *SBuilder) TsIncrby() (c STsIncrby) {
	c = STsIncrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.INCRBY")
	return c
}

func (c TsIncrby) Key(key string) TsIncrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (TsIncrbyKey)(c)
}

func (c STsIncrby) Key(key string) STsIncrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsIncrbyKey)(c)
}

type TsIncrbyChunkSize Completed

type STsIncrbyChunkSize SCompleted

func (c TsIncrbyChunkSize) Labels() TsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsIncrbyLabels)(c)
}

func (c STsIncrbyChunkSize) Labels() STsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsIncrbyLabels)(c)
}

func (c TsIncrbyChunkSize) Build() Completed {
	return Completed(c)
}

func (c STsIncrbyChunkSize) Build() SCompleted {
	return SCompleted(c)
}

type TsIncrbyKey Completed

type STsIncrbyKey SCompleted

func (c TsIncrbyKey) Value(value float64) TsIncrbyValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (TsIncrbyValue)(c)
}

func (c STsIncrbyKey) Value(value float64) STsIncrbyValue {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(value, 'f', -1, 64))
	return (STsIncrbyValue)(c)
}

type TsIncrbyLabels Completed

type STsIncrbyLabels SCompleted

func (c TsIncrbyLabels) Labels(label string, value string) TsIncrbyLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c STsIncrbyLabels) Labels(label string, value string) STsIncrbyLabels {
	c.cs.s = append(c.cs.s, label, value)
	return c
}

func (c TsIncrbyLabels) Build() Completed {
	return Completed(c)
}

func (c STsIncrbyLabels) Build() SCompleted {
	return SCompleted(c)
}

type TsIncrbyRetention Completed

type STsIncrbyRetention SCompleted

func (c TsIncrbyRetention) Uncompressed() TsIncrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (TsIncrbyUncompressed)(c)
}

func (c STsIncrbyRetention) Uncompressed() STsIncrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (STsIncrbyUncompressed)(c)
}

func (c TsIncrbyRetention) ChunkSize(size int64) TsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsIncrbyChunkSize)(c)
}

func (c STsIncrbyRetention) ChunkSize(size int64) STsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsIncrbyChunkSize)(c)
}

func (c TsIncrbyRetention) Labels() TsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsIncrbyLabels)(c)
}

func (c STsIncrbyRetention) Labels() STsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsIncrbyLabels)(c)
}

func (c TsIncrbyRetention) Build() Completed {
	return Completed(c)
}

func (c STsIncrbyRetention) Build() SCompleted {
	return SCompleted(c)
}

type TsIncrbyTimestamp Completed

type STsIncrbyTimestamp SCompleted

func (c TsIncrbyTimestamp) Retention(retentiontime int64) TsIncrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsIncrbyRetention)(c)
}

func (c STsIncrbyTimestamp) Retention(retentiontime int64) STsIncrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsIncrbyRetention)(c)
}

func (c TsIncrbyTimestamp) Uncompressed() TsIncrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (TsIncrbyUncompressed)(c)
}

func (c STsIncrbyTimestamp) Uncompressed() STsIncrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (STsIncrbyUncompressed)(c)
}

func (c TsIncrbyTimestamp) ChunkSize(size int64) TsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsIncrbyChunkSize)(c)
}

func (c STsIncrbyTimestamp) ChunkSize(size int64) STsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsIncrbyChunkSize)(c)
}

func (c TsIncrbyTimestamp) Labels() TsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsIncrbyLabels)(c)
}

func (c STsIncrbyTimestamp) Labels() STsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsIncrbyLabels)(c)
}

func (c TsIncrbyTimestamp) Build() Completed {
	return Completed(c)
}

func (c STsIncrbyTimestamp) Build() SCompleted {
	return SCompleted(c)
}

type TsIncrbyUncompressed Completed

type STsIncrbyUncompressed SCompleted

func (c TsIncrbyUncompressed) ChunkSize(size int64) TsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsIncrbyChunkSize)(c)
}

func (c STsIncrbyUncompressed) ChunkSize(size int64) STsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsIncrbyChunkSize)(c)
}

func (c TsIncrbyUncompressed) Labels() TsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsIncrbyLabels)(c)
}

func (c STsIncrbyUncompressed) Labels() STsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsIncrbyLabels)(c)
}

func (c TsIncrbyUncompressed) Build() Completed {
	return Completed(c)
}

func (c STsIncrbyUncompressed) Build() SCompleted {
	return SCompleted(c)
}

type TsIncrbyValue Completed

type STsIncrbyValue SCompleted

func (c TsIncrbyValue) Timestamp(timestamp int64) TsIncrbyTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (TsIncrbyTimestamp)(c)
}

func (c STsIncrbyValue) Timestamp(timestamp int64) STsIncrbyTimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timestamp, 10))
	return (STsIncrbyTimestamp)(c)
}

func (c TsIncrbyValue) Retention(retentiontime int64) TsIncrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (TsIncrbyRetention)(c)
}

func (c STsIncrbyValue) Retention(retentiontime int64) STsIncrbyRetention {
	c.cs.s = append(c.cs.s, "RETENTION", strconv.FormatInt(retentiontime, 10))
	return (STsIncrbyRetention)(c)
}

func (c TsIncrbyValue) Uncompressed() TsIncrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (TsIncrbyUncompressed)(c)
}

func (c STsIncrbyValue) Uncompressed() STsIncrbyUncompressed {
	c.cs.s = append(c.cs.s, "UNCOMPRESSED")
	return (STsIncrbyUncompressed)(c)
}

func (c TsIncrbyValue) ChunkSize(size int64) TsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (TsIncrbyChunkSize)(c)
}

func (c STsIncrbyValue) ChunkSize(size int64) STsIncrbyChunkSize {
	c.cs.s = append(c.cs.s, "CHUNK_SIZE", strconv.FormatInt(size, 10))
	return (STsIncrbyChunkSize)(c)
}

func (c TsIncrbyValue) Labels() TsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (TsIncrbyLabels)(c)
}

func (c STsIncrbyValue) Labels() STsIncrbyLabels {
	c.cs.s = append(c.cs.s, "LABELS")
	return (STsIncrbyLabels)(c)
}

func (c TsIncrbyValue) Build() Completed {
	return Completed(c)
}

func (c STsIncrbyValue) Build() SCompleted {
	return SCompleted(c)
}

type TsInfo Completed

type STsInfo SCompleted

func (b *Builder) TsInfo() (c TsInfo) {
	c = TsInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.INFO")
	return c
}

func (b *SBuilder) TsInfo() (c STsInfo) {
	c = STsInfo{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.INFO")
	return c
}

func (c TsInfo) Key(key string) TsInfoKey {
	c.cs.s = append(c.cs.s, key)
	return (TsInfoKey)(c)
}

func (c STsInfo) Key(key string) STsInfoKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsInfoKey)(c)
}

type TsInfoDebug Completed

type STsInfoDebug SCompleted

func (c TsInfoDebug) Build() Completed {
	return Completed(c)
}

func (c STsInfoDebug) Build() SCompleted {
	return SCompleted(c)
}

type TsInfoKey Completed

type STsInfoKey SCompleted

func (c TsInfoKey) Debug(debug string) TsInfoDebug {
	c.cs.s = append(c.cs.s, debug)
	return (TsInfoDebug)(c)
}

func (c STsInfoKey) Debug(debug string) STsInfoDebug {
	c.cs.s = append(c.cs.s, debug)
	return (STsInfoDebug)(c)
}

func (c TsInfoKey) Build() Completed {
	return Completed(c)
}

func (c STsInfoKey) Build() SCompleted {
	return SCompleted(c)
}

type TsMadd Completed

type STsMadd SCompleted

func (b *Builder) TsMadd() (c TsMadd) {
	c = TsMadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MADD")
	return c
}

func (b *SBuilder) TsMadd() (c STsMadd) {
	c = STsMadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MADD")
	return c
}

func (c TsMadd) KeyTimestampValue() TsMaddKeyTimestampValue {
	return (TsMaddKeyTimestampValue)(c)
}

func (c STsMadd) KeyTimestampValue() STsMaddKeyTimestampValue {
	return (STsMaddKeyTimestampValue)(c)
}

type TsMaddKeyTimestampValue Completed

type STsMaddKeyTimestampValue SCompleted

func (c TsMaddKeyTimestampValue) KeyTimestampValue(key string, timestamp int64, value float64) TsMaddKeyTimestampValue {
	c.cs.s = append(c.cs.s, key, strconv.FormatInt(timestamp, 10), strconv.FormatFloat(value, 'f', -1, 64))
	return c
}

func (c STsMaddKeyTimestampValue) KeyTimestampValue(key string, timestamp int64, value float64) STsMaddKeyTimestampValue {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key, strconv.FormatInt(timestamp, 10), strconv.FormatFloat(value, 'f', -1, 64))
	return c
}

func (c TsMaddKeyTimestampValue) Build() Completed {
	return Completed(c)
}

func (c STsMaddKeyTimestampValue) Build() SCompleted {
	return SCompleted(c)
}

type TsMget Completed

type STsMget SCompleted

func (b *Builder) TsMget() (c TsMget) {
	c = TsMget{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MGET")
	return c
}

func (b *SBuilder) TsMget() (c STsMget) {
	c = STsMget{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MGET")
	return c
}

func (c TsMget) Withlabels() TsMgetWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMgetWithlabels)(c)
}

func (c STsMget) Withlabels() STsMgetWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMgetWithlabels)(c)
}

func (c TsMget) SelectedLabels(labels []string) TsMgetSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMgetSelectedLabels)(c)
}

func (c STsMget) SelectedLabels(labels []string) STsMgetSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMgetSelectedLabels)(c)
}

func (c TsMget) Filter(filter ...string) TsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMgetFilter)(c)
}

func (c STsMget) Filter(filter ...string) STsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMgetFilter)(c)
}

type TsMgetFilter Completed

type STsMgetFilter SCompleted

func (c TsMgetFilter) Filter(filter ...string) TsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c STsMgetFilter) Filter(filter ...string) STsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c TsMgetFilter) Build() Completed {
	return Completed(c)
}

func (c STsMgetFilter) Build() SCompleted {
	return SCompleted(c)
}

type TsMgetSelectedLabels Completed

type STsMgetSelectedLabels SCompleted

func (c TsMgetSelectedLabels) Filter(filter ...string) TsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMgetFilter)(c)
}

func (c STsMgetSelectedLabels) Filter(filter ...string) STsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMgetFilter)(c)
}

type TsMgetWithlabels Completed

type STsMgetWithlabels SCompleted

func (c TsMgetWithlabels) Filter(filter ...string) TsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMgetFilter)(c)
}

func (c STsMgetWithlabels) Filter(filter ...string) STsMgetFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMgetFilter)(c)
}

type TsMrange Completed

type STsMrange SCompleted

func (b *Builder) TsMrange() (c TsMrange) {
	c = TsMrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MRANGE")
	return c
}

func (b *SBuilder) TsMrange() (c STsMrange) {
	c = STsMrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MRANGE")
	return c
}

func (c TsMrange) Key(key string) TsMrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (TsMrangeKey)(c)
}

func (c STsMrange) Key(key string) STsMrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsMrangeKey)(c)
}

type TsMrangeAggregationAggregationAvg Completed

type STsMrangeAggregationAggregationAvg SCompleted

func (c TsMrangeAggregationAggregationAvg) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationAvg) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationCount Completed

type STsMrangeAggregationAggregationCount SCompleted

func (c TsMrangeAggregationAggregationCount) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationCount) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationFirst Completed

type STsMrangeAggregationAggregationFirst SCompleted

func (c TsMrangeAggregationAggregationFirst) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationFirst) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationLast Completed

type STsMrangeAggregationAggregationLast SCompleted

func (c TsMrangeAggregationAggregationLast) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationLast) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationMax Completed

type STsMrangeAggregationAggregationMax SCompleted

func (c TsMrangeAggregationAggregationMax) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationMax) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationMin Completed

type STsMrangeAggregationAggregationMin SCompleted

func (c TsMrangeAggregationAggregationMin) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationMin) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationRange Completed

type STsMrangeAggregationAggregationRange SCompleted

func (c TsMrangeAggregationAggregationRange) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationRange) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationStdP Completed

type STsMrangeAggregationAggregationStdP SCompleted

func (c TsMrangeAggregationAggregationStdP) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationStdP) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationStdS Completed

type STsMrangeAggregationAggregationStdS SCompleted

func (c TsMrangeAggregationAggregationStdS) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationStdS) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationSum Completed

type STsMrangeAggregationAggregationSum SCompleted

func (c TsMrangeAggregationAggregationSum) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationSum) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationVarP Completed

type STsMrangeAggregationAggregationVarP SCompleted

func (c TsMrangeAggregationAggregationVarP) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationVarP) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationAggregationVarS Completed

type STsMrangeAggregationAggregationVarS SCompleted

func (c TsMrangeAggregationAggregationVarS) Timebucket(timebucket int64) TsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrangeAggregationTimebucket)(c)
}

func (c STsMrangeAggregationAggregationVarS) Timebucket(timebucket int64) STsMrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrangeAggregationTimebucket)(c)
}

type TsMrangeAggregationTimebucket Completed

type STsMrangeAggregationTimebucket SCompleted

func (c TsMrangeAggregationTimebucket) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeAggregationTimebucket) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeAlign Completed

type STsMrangeAlign SCompleted

func (c TsMrangeAlign) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeAlign) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeAlign) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeAlign) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeAlign) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeAlign) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeAlign) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeAlign) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeAlign) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeAlign) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeAlign) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeAlign) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeAlign) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeAlign) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeAlign) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeAlign) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeAlign) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeAlign) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeAlign) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeAlign) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeAlign) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeAlign) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeAlign) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeAlign) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeAlign) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeAlign) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeCount Completed

type STsMrangeCount SCompleted

func (c TsMrangeCount) Align(value int64) TsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrangeAlign)(c)
}

func (c STsMrangeCount) Align(value int64) STsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrangeAlign)(c)
}

func (c TsMrangeCount) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeCount) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeCount) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeCount) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeCount) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeCount) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeCount) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeCount) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeCount) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeCount) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeCount) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeCount) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeCount) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeCount) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeCount) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeCount) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeCount) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeCount) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeCount) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeCount) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeCount) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeCount) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeCount) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeCount) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeCount) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeCount) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeFilter Completed

type STsMrangeFilter SCompleted

func (c TsMrangeFilter) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c STsMrangeFilter) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c TsMrangeFilter) Groupby(label string, reduce string, reducer string) TsMrangeGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", label, reduce, reducer)
	return (TsMrangeGroupby)(c)
}

func (c STsMrangeFilter) Groupby(label string, reduce string, reducer string) STsMrangeGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", label, reduce, reducer)
	return (STsMrangeGroupby)(c)
}

func (c TsMrangeFilter) Build() Completed {
	return Completed(c)
}

func (c STsMrangeFilter) Build() SCompleted {
	return SCompleted(c)
}

type TsMrangeFilterByTs Completed

type STsMrangeFilterByTs SCompleted

func (c TsMrangeFilterByTs) FilterByTs(timestamp ...int64) TsMrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c STsMrangeFilterByTs) FilterByTs(timestamp ...int64) STsMrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c TsMrangeFilterByTs) FilterByValue(min float64, max float64) TsMrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsMrangeFilterByValue)(c)
}

func (c STsMrangeFilterByTs) FilterByValue(min float64, max float64) STsMrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsMrangeFilterByValue)(c)
}

func (c TsMrangeFilterByTs) Withlabels() TsMrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMrangeWithlabels)(c)
}

func (c STsMrangeFilterByTs) Withlabels() STsMrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMrangeWithlabels)(c)
}

func (c TsMrangeFilterByTs) SelectedLabels(labels []string) TsMrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMrangeSelectedLabels)(c)
}

func (c STsMrangeFilterByTs) SelectedLabels(labels []string) STsMrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMrangeSelectedLabels)(c)
}

func (c TsMrangeFilterByTs) Count(count int64) TsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrangeCount)(c)
}

func (c STsMrangeFilterByTs) Count(count int64) STsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrangeCount)(c)
}

func (c TsMrangeFilterByTs) Align(value int64) TsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrangeAlign)(c)
}

func (c STsMrangeFilterByTs) Align(value int64) STsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrangeAlign)(c)
}

func (c TsMrangeFilterByTs) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeFilterByTs) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeFilterByTs) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeFilterByTs) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeFilterByTs) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeFilterByTs) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeFilterByTs) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeFilterByTs) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeFilterByTs) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeFilterByTs) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeFilterByTs) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeFilterByTs) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeFilterByTs) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeFilterByTs) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeFilterByTs) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeFilterByTs) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeFilterByTs) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeFilterByTs) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeFilterByTs) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeFilterByTs) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeFilterByTs) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeFilterByTs) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeFilterByTs) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeFilterByTs) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeFilterByTs) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeFilterByTs) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeFilterByValue Completed

type STsMrangeFilterByValue SCompleted

func (c TsMrangeFilterByValue) Withlabels() TsMrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMrangeWithlabels)(c)
}

func (c STsMrangeFilterByValue) Withlabels() STsMrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMrangeWithlabels)(c)
}

func (c TsMrangeFilterByValue) SelectedLabels(labels []string) TsMrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMrangeSelectedLabels)(c)
}

func (c STsMrangeFilterByValue) SelectedLabels(labels []string) STsMrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMrangeSelectedLabels)(c)
}

func (c TsMrangeFilterByValue) Count(count int64) TsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrangeCount)(c)
}

func (c STsMrangeFilterByValue) Count(count int64) STsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrangeCount)(c)
}

func (c TsMrangeFilterByValue) Align(value int64) TsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrangeAlign)(c)
}

func (c STsMrangeFilterByValue) Align(value int64) STsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrangeAlign)(c)
}

func (c TsMrangeFilterByValue) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeFilterByValue) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeFilterByValue) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeFilterByValue) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeFilterByValue) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeFilterByValue) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeFilterByValue) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeFilterByValue) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeFilterByValue) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeFilterByValue) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeFilterByValue) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeFilterByValue) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeFilterByValue) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeFilterByValue) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeFilterByValue) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeFilterByValue) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeFilterByValue) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeFilterByValue) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeFilterByValue) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeFilterByValue) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeFilterByValue) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeFilterByValue) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeFilterByValue) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeFilterByValue) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeFilterByValue) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeFilterByValue) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeFromtimestamp Completed

type STsMrangeFromtimestamp SCompleted

func (c TsMrangeFromtimestamp) Totimestamp(totimestamp int64) TsMrangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (TsMrangeTotimestamp)(c)
}

func (c STsMrangeFromtimestamp) Totimestamp(totimestamp int64) STsMrangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (STsMrangeTotimestamp)(c)
}

type TsMrangeGroupby Completed

type STsMrangeGroupby SCompleted

func (c TsMrangeGroupby) Build() Completed {
	return Completed(c)
}

func (c STsMrangeGroupby) Build() SCompleted {
	return SCompleted(c)
}

type TsMrangeKey Completed

type STsMrangeKey SCompleted

func (c TsMrangeKey) Fromtimestamp(fromtimestamp int64) TsMrangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (TsMrangeFromtimestamp)(c)
}

func (c STsMrangeKey) Fromtimestamp(fromtimestamp int64) STsMrangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (STsMrangeFromtimestamp)(c)
}

type TsMrangeSelectedLabels Completed

type STsMrangeSelectedLabels SCompleted

func (c TsMrangeSelectedLabels) Count(count int64) TsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrangeCount)(c)
}

func (c STsMrangeSelectedLabels) Count(count int64) STsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrangeCount)(c)
}

func (c TsMrangeSelectedLabels) Align(value int64) TsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrangeAlign)(c)
}

func (c STsMrangeSelectedLabels) Align(value int64) STsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrangeAlign)(c)
}

func (c TsMrangeSelectedLabels) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeSelectedLabels) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeSelectedLabels) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeSelectedLabels) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeSelectedLabels) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeSelectedLabels) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeSelectedLabels) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeSelectedLabels) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeSelectedLabels) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeSelectedLabels) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeSelectedLabels) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeSelectedLabels) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeSelectedLabels) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeSelectedLabels) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeSelectedLabels) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeSelectedLabels) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeSelectedLabels) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeSelectedLabels) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeSelectedLabels) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeSelectedLabels) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeSelectedLabels) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeSelectedLabels) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeSelectedLabels) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeSelectedLabels) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeSelectedLabels) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeSelectedLabels) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeTotimestamp Completed

type STsMrangeTotimestamp SCompleted

func (c TsMrangeTotimestamp) FilterByTs(timestamp ...int64) TsMrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (TsMrangeFilterByTs)(c)
}

func (c STsMrangeTotimestamp) FilterByTs(timestamp ...int64) STsMrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (STsMrangeFilterByTs)(c)
}

func (c TsMrangeTotimestamp) FilterByValue(min float64, max float64) TsMrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsMrangeFilterByValue)(c)
}

func (c STsMrangeTotimestamp) FilterByValue(min float64, max float64) STsMrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsMrangeFilterByValue)(c)
}

func (c TsMrangeTotimestamp) Withlabels() TsMrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMrangeWithlabels)(c)
}

func (c STsMrangeTotimestamp) Withlabels() STsMrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMrangeWithlabels)(c)
}

func (c TsMrangeTotimestamp) SelectedLabels(labels []string) TsMrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMrangeSelectedLabels)(c)
}

func (c STsMrangeTotimestamp) SelectedLabels(labels []string) STsMrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMrangeSelectedLabels)(c)
}

func (c TsMrangeTotimestamp) Count(count int64) TsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrangeCount)(c)
}

func (c STsMrangeTotimestamp) Count(count int64) STsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrangeCount)(c)
}

func (c TsMrangeTotimestamp) Align(value int64) TsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrangeAlign)(c)
}

func (c STsMrangeTotimestamp) Align(value int64) STsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrangeAlign)(c)
}

func (c TsMrangeTotimestamp) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeTotimestamp) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeTotimestamp) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeTotimestamp) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeTotimestamp) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeTotimestamp) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeTotimestamp) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeTotimestamp) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeTotimestamp) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeTotimestamp) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeTotimestamp) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeTotimestamp) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeTotimestamp) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeTotimestamp) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeTotimestamp) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeTotimestamp) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeTotimestamp) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeTotimestamp) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeTotimestamp) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeTotimestamp) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeTotimestamp) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeTotimestamp) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeTotimestamp) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeTotimestamp) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeTotimestamp) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeTotimestamp) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrangeWithlabels Completed

type STsMrangeWithlabels SCompleted

func (c TsMrangeWithlabels) Count(count int64) TsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrangeCount)(c)
}

func (c STsMrangeWithlabels) Count(count int64) STsMrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrangeCount)(c)
}

func (c TsMrangeWithlabels) Align(value int64) TsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrangeAlign)(c)
}

func (c STsMrangeWithlabels) Align(value int64) STsMrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrangeAlign)(c)
}

func (c TsMrangeWithlabels) AggregationAvg() TsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrangeAggregationAggregationAvg)(c)
}

func (c STsMrangeWithlabels) AggregationAvg() STsMrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrangeAggregationAggregationAvg)(c)
}

func (c TsMrangeWithlabels) AggregationSum() TsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrangeAggregationAggregationSum)(c)
}

func (c STsMrangeWithlabels) AggregationSum() STsMrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrangeAggregationAggregationSum)(c)
}

func (c TsMrangeWithlabels) AggregationMin() TsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrangeAggregationAggregationMin)(c)
}

func (c STsMrangeWithlabels) AggregationMin() STsMrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrangeAggregationAggregationMin)(c)
}

func (c TsMrangeWithlabels) AggregationMax() TsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrangeAggregationAggregationMax)(c)
}

func (c STsMrangeWithlabels) AggregationMax() STsMrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrangeAggregationAggregationMax)(c)
}

func (c TsMrangeWithlabels) AggregationRange() TsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrangeAggregationAggregationRange)(c)
}

func (c STsMrangeWithlabels) AggregationRange() STsMrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrangeAggregationAggregationRange)(c)
}

func (c TsMrangeWithlabels) AggregationCount() TsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrangeAggregationAggregationCount)(c)
}

func (c STsMrangeWithlabels) AggregationCount() STsMrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrangeAggregationAggregationCount)(c)
}

func (c TsMrangeWithlabels) AggregationFirst() TsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrangeAggregationAggregationFirst)(c)
}

func (c STsMrangeWithlabels) AggregationFirst() STsMrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrangeAggregationAggregationFirst)(c)
}

func (c TsMrangeWithlabels) AggregationLast() TsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrangeAggregationAggregationLast)(c)
}

func (c STsMrangeWithlabels) AggregationLast() STsMrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrangeAggregationAggregationLast)(c)
}

func (c TsMrangeWithlabels) AggregationStdP() TsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrangeAggregationAggregationStdP)(c)
}

func (c STsMrangeWithlabels) AggregationStdP() STsMrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrangeAggregationAggregationStdP)(c)
}

func (c TsMrangeWithlabels) AggregationStdS() TsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrangeAggregationAggregationStdS)(c)
}

func (c STsMrangeWithlabels) AggregationStdS() STsMrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrangeAggregationAggregationStdS)(c)
}

func (c TsMrangeWithlabels) AggregationVarP() TsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrangeAggregationAggregationVarP)(c)
}

func (c STsMrangeWithlabels) AggregationVarP() STsMrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrangeAggregationAggregationVarP)(c)
}

func (c TsMrangeWithlabels) AggregationVarS() TsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrangeAggregationAggregationVarS)(c)
}

func (c STsMrangeWithlabels) AggregationVarS() STsMrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrangeAggregationAggregationVarS)(c)
}

func (c TsMrangeWithlabels) Filter(filter ...string) TsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrangeFilter)(c)
}

func (c STsMrangeWithlabels) Filter(filter ...string) STsMrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrangeFilter)(c)
}

type TsMrevrange Completed

type STsMrevrange SCompleted

func (b *Builder) TsMrevrange() (c TsMrevrange) {
	c = TsMrevrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MREVRANGE")
	return c
}

func (b *SBuilder) TsMrevrange() (c STsMrevrange) {
	c = STsMrevrange{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "TS.MREVRANGE")
	return c
}

func (c TsMrevrange) Key(key string) TsMrevrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (TsMrevrangeKey)(c)
}

func (c STsMrevrange) Key(key string) STsMrevrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsMrevrangeKey)(c)
}

type TsMrevrangeAggregationAggregationAvg Completed

type STsMrevrangeAggregationAggregationAvg SCompleted

func (c TsMrevrangeAggregationAggregationAvg) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationAvg) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationCount Completed

type STsMrevrangeAggregationAggregationCount SCompleted

func (c TsMrevrangeAggregationAggregationCount) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationCount) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationFirst Completed

type STsMrevrangeAggregationAggregationFirst SCompleted

func (c TsMrevrangeAggregationAggregationFirst) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationFirst) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationLast Completed

type STsMrevrangeAggregationAggregationLast SCompleted

func (c TsMrevrangeAggregationAggregationLast) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationLast) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationMax Completed

type STsMrevrangeAggregationAggregationMax SCompleted

func (c TsMrevrangeAggregationAggregationMax) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationMax) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationMin Completed

type STsMrevrangeAggregationAggregationMin SCompleted

func (c TsMrevrangeAggregationAggregationMin) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationMin) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationRange Completed

type STsMrevrangeAggregationAggregationRange SCompleted

func (c TsMrevrangeAggregationAggregationRange) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationRange) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationStdP Completed

type STsMrevrangeAggregationAggregationStdP SCompleted

func (c TsMrevrangeAggregationAggregationStdP) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationStdP) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationStdS Completed

type STsMrevrangeAggregationAggregationStdS SCompleted

func (c TsMrevrangeAggregationAggregationStdS) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationStdS) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationSum Completed

type STsMrevrangeAggregationAggregationSum SCompleted

func (c TsMrevrangeAggregationAggregationSum) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationSum) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationVarP Completed

type STsMrevrangeAggregationAggregationVarP SCompleted

func (c TsMrevrangeAggregationAggregationVarP) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationVarP) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationAggregationVarS Completed

type STsMrevrangeAggregationAggregationVarS SCompleted

func (c TsMrevrangeAggregationAggregationVarS) Timebucket(timebucket int64) TsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsMrevrangeAggregationTimebucket)(c)
}

func (c STsMrevrangeAggregationAggregationVarS) Timebucket(timebucket int64) STsMrevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsMrevrangeAggregationTimebucket)(c)
}

type TsMrevrangeAggregationTimebucket Completed

type STsMrevrangeAggregationTimebucket SCompleted

func (c TsMrevrangeAggregationTimebucket) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeAggregationTimebucket) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeAlign Completed

type STsMrevrangeAlign SCompleted

func (c TsMrevrangeAlign) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeAlign) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeAlign) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeAlign) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeAlign) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeAlign) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeAlign) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeAlign) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeAlign) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeAlign) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeAlign) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeAlign) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeAlign) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeAlign) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeAlign) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeAlign) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeAlign) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeAlign) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeAlign) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeAlign) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeAlign) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeAlign) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeAlign) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeAlign) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeAlign) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeAlign) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeCount Completed

type STsMrevrangeCount SCompleted

func (c TsMrevrangeCount) Align(value int64) TsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrevrangeAlign)(c)
}

func (c STsMrevrangeCount) Align(value int64) STsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrevrangeAlign)(c)
}

func (c TsMrevrangeCount) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeCount) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeCount) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeCount) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeCount) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeCount) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeCount) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeCount) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeCount) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeCount) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeCount) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeCount) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeCount) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeCount) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeCount) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeCount) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeCount) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeCount) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeCount) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeCount) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeCount) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeCount) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeCount) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeCount) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeCount) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeCount) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeFilter Completed

type STsMrevrangeFilter SCompleted

func (c TsMrevrangeFilter) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c STsMrevrangeFilter) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c TsMrevrangeFilter) Groupby(label string, reduce string, reducer string) TsMrevrangeGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", label, reduce, reducer)
	return (TsMrevrangeGroupby)(c)
}

func (c STsMrevrangeFilter) Groupby(label string, reduce string, reducer string) STsMrevrangeGroupby {
	c.cs.s = append(c.cs.s, "GROUPBY", label, reduce, reducer)
	return (STsMrevrangeGroupby)(c)
}

func (c TsMrevrangeFilter) Build() Completed {
	return Completed(c)
}

func (c STsMrevrangeFilter) Build() SCompleted {
	return SCompleted(c)
}

type TsMrevrangeFilterByTs Completed

type STsMrevrangeFilterByTs SCompleted

func (c TsMrevrangeFilterByTs) FilterByTs(timestamp ...int64) TsMrevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c STsMrevrangeFilterByTs) FilterByTs(timestamp ...int64) STsMrevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c TsMrevrangeFilterByTs) FilterByValue(min float64, max float64) TsMrevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsMrevrangeFilterByValue)(c)
}

func (c STsMrevrangeFilterByTs) FilterByValue(min float64, max float64) STsMrevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsMrevrangeFilterByValue)(c)
}

func (c TsMrevrangeFilterByTs) Withlabels() TsMrevrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMrevrangeWithlabels)(c)
}

func (c STsMrevrangeFilterByTs) Withlabels() STsMrevrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMrevrangeWithlabels)(c)
}

func (c TsMrevrangeFilterByTs) SelectedLabels(labels []string) TsMrevrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMrevrangeSelectedLabels)(c)
}

func (c STsMrevrangeFilterByTs) SelectedLabels(labels []string) STsMrevrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMrevrangeSelectedLabels)(c)
}

func (c TsMrevrangeFilterByTs) Count(count int64) TsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrevrangeCount)(c)
}

func (c STsMrevrangeFilterByTs) Count(count int64) STsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrevrangeCount)(c)
}

func (c TsMrevrangeFilterByTs) Align(value int64) TsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrevrangeAlign)(c)
}

func (c STsMrevrangeFilterByTs) Align(value int64) STsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrevrangeAlign)(c)
}

func (c TsMrevrangeFilterByTs) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeFilterByTs) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeFilterByTs) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeFilterByTs) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeFilterByTs) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeFilterByTs) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeFilterByTs) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeFilterByTs) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeFilterByTs) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeFilterByTs) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeFilterByTs) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeFilterByTs) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeFilterByTs) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeFilterByTs) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeFilterByTs) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeFilterByTs) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeFilterByTs) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeFilterByTs) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeFilterByTs) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeFilterByTs) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeFilterByTs) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeFilterByTs) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeFilterByTs) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeFilterByTs) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeFilterByTs) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeFilterByTs) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeFilterByValue Completed

type STsMrevrangeFilterByValue SCompleted

func (c TsMrevrangeFilterByValue) Withlabels() TsMrevrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMrevrangeWithlabels)(c)
}

func (c STsMrevrangeFilterByValue) Withlabels() STsMrevrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMrevrangeWithlabels)(c)
}

func (c TsMrevrangeFilterByValue) SelectedLabels(labels []string) TsMrevrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMrevrangeSelectedLabels)(c)
}

func (c STsMrevrangeFilterByValue) SelectedLabels(labels []string) STsMrevrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMrevrangeSelectedLabels)(c)
}

func (c TsMrevrangeFilterByValue) Count(count int64) TsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrevrangeCount)(c)
}

func (c STsMrevrangeFilterByValue) Count(count int64) STsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrevrangeCount)(c)
}

func (c TsMrevrangeFilterByValue) Align(value int64) TsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrevrangeAlign)(c)
}

func (c STsMrevrangeFilterByValue) Align(value int64) STsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrevrangeAlign)(c)
}

func (c TsMrevrangeFilterByValue) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeFilterByValue) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeFilterByValue) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeFilterByValue) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeFilterByValue) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeFilterByValue) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeFilterByValue) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeFilterByValue) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeFilterByValue) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeFilterByValue) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeFilterByValue) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeFilterByValue) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeFilterByValue) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeFilterByValue) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeFilterByValue) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeFilterByValue) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeFilterByValue) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeFilterByValue) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeFilterByValue) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeFilterByValue) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeFilterByValue) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeFilterByValue) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeFilterByValue) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeFilterByValue) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeFilterByValue) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeFilterByValue) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeFromtimestamp Completed

type STsMrevrangeFromtimestamp SCompleted

func (c TsMrevrangeFromtimestamp) Totimestamp(totimestamp int64) TsMrevrangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (TsMrevrangeTotimestamp)(c)
}

func (c STsMrevrangeFromtimestamp) Totimestamp(totimestamp int64) STsMrevrangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (STsMrevrangeTotimestamp)(c)
}

type TsMrevrangeGroupby Completed

type STsMrevrangeGroupby SCompleted

func (c TsMrevrangeGroupby) Build() Completed {
	return Completed(c)
}

func (c STsMrevrangeGroupby) Build() SCompleted {
	return SCompleted(c)
}

type TsMrevrangeKey Completed

type STsMrevrangeKey SCompleted

func (c TsMrevrangeKey) Fromtimestamp(fromtimestamp int64) TsMrevrangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (TsMrevrangeFromtimestamp)(c)
}

func (c STsMrevrangeKey) Fromtimestamp(fromtimestamp int64) STsMrevrangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (STsMrevrangeFromtimestamp)(c)
}

type TsMrevrangeSelectedLabels Completed

type STsMrevrangeSelectedLabels SCompleted

func (c TsMrevrangeSelectedLabels) Count(count int64) TsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrevrangeCount)(c)
}

func (c STsMrevrangeSelectedLabels) Count(count int64) STsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrevrangeCount)(c)
}

func (c TsMrevrangeSelectedLabels) Align(value int64) TsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrevrangeAlign)(c)
}

func (c STsMrevrangeSelectedLabels) Align(value int64) STsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrevrangeAlign)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeSelectedLabels) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeSelectedLabels) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeSelectedLabels) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeSelectedLabels) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeTotimestamp Completed

type STsMrevrangeTotimestamp SCompleted

func (c TsMrevrangeTotimestamp) FilterByTs(timestamp ...int64) TsMrevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (TsMrevrangeFilterByTs)(c)
}

func (c STsMrevrangeTotimestamp) FilterByTs(timestamp ...int64) STsMrevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (STsMrevrangeFilterByTs)(c)
}

func (c TsMrevrangeTotimestamp) FilterByValue(min float64, max float64) TsMrevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsMrevrangeFilterByValue)(c)
}

func (c STsMrevrangeTotimestamp) FilterByValue(min float64, max float64) STsMrevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsMrevrangeFilterByValue)(c)
}

func (c TsMrevrangeTotimestamp) Withlabels() TsMrevrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (TsMrevrangeWithlabels)(c)
}

func (c STsMrevrangeTotimestamp) Withlabels() STsMrevrangeWithlabels {
	c.cs.s = append(c.cs.s, "WITHLABELS")
	return (STsMrevrangeWithlabels)(c)
}

func (c TsMrevrangeTotimestamp) SelectedLabels(labels []string) TsMrevrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (TsMrevrangeSelectedLabels)(c)
}

func (c STsMrevrangeTotimestamp) SelectedLabels(labels []string) STsMrevrangeSelectedLabels {
	c.cs.s = append(c.cs.s, "SELECTED_LABELS")
	c.cs.s = append(c.cs.s, labels...)
	return (STsMrevrangeSelectedLabels)(c)
}

func (c TsMrevrangeTotimestamp) Count(count int64) TsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrevrangeCount)(c)
}

func (c STsMrevrangeTotimestamp) Count(count int64) STsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrevrangeCount)(c)
}

func (c TsMrevrangeTotimestamp) Align(value int64) TsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrevrangeAlign)(c)
}

func (c STsMrevrangeTotimestamp) Align(value int64) STsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrevrangeAlign)(c)
}

func (c TsMrevrangeTotimestamp) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeTotimestamp) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeTotimestamp) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeTotimestamp) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeTotimestamp) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeTotimestamp) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeTotimestamp) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeTotimestamp) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeTotimestamp) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeTotimestamp) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeTotimestamp) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeTotimestamp) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeTotimestamp) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeTotimestamp) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeTotimestamp) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeTotimestamp) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeTotimestamp) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeTotimestamp) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeTotimestamp) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeTotimestamp) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeTotimestamp) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeTotimestamp) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeTotimestamp) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeTotimestamp) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeTotimestamp) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeTotimestamp) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsMrevrangeWithlabels Completed

type STsMrevrangeWithlabels SCompleted

func (c TsMrevrangeWithlabels) Count(count int64) TsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsMrevrangeCount)(c)
}

func (c STsMrevrangeWithlabels) Count(count int64) STsMrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsMrevrangeCount)(c)
}

func (c TsMrevrangeWithlabels) Align(value int64) TsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsMrevrangeAlign)(c)
}

func (c STsMrevrangeWithlabels) Align(value int64) STsMrevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsMrevrangeAlign)(c)
}

func (c TsMrevrangeWithlabels) AggregationAvg() TsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsMrevrangeAggregationAggregationAvg)(c)
}

func (c STsMrevrangeWithlabels) AggregationAvg() STsMrevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsMrevrangeAggregationAggregationAvg)(c)
}

func (c TsMrevrangeWithlabels) AggregationSum() TsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsMrevrangeAggregationAggregationSum)(c)
}

func (c STsMrevrangeWithlabels) AggregationSum() STsMrevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsMrevrangeAggregationAggregationSum)(c)
}

func (c TsMrevrangeWithlabels) AggregationMin() TsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsMrevrangeAggregationAggregationMin)(c)
}

func (c STsMrevrangeWithlabels) AggregationMin() STsMrevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsMrevrangeAggregationAggregationMin)(c)
}

func (c TsMrevrangeWithlabels) AggregationMax() TsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsMrevrangeAggregationAggregationMax)(c)
}

func (c STsMrevrangeWithlabels) AggregationMax() STsMrevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsMrevrangeAggregationAggregationMax)(c)
}

func (c TsMrevrangeWithlabels) AggregationRange() TsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsMrevrangeAggregationAggregationRange)(c)
}

func (c STsMrevrangeWithlabels) AggregationRange() STsMrevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsMrevrangeAggregationAggregationRange)(c)
}

func (c TsMrevrangeWithlabels) AggregationCount() TsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsMrevrangeAggregationAggregationCount)(c)
}

func (c STsMrevrangeWithlabels) AggregationCount() STsMrevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsMrevrangeAggregationAggregationCount)(c)
}

func (c TsMrevrangeWithlabels) AggregationFirst() TsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsMrevrangeAggregationAggregationFirst)(c)
}

func (c STsMrevrangeWithlabels) AggregationFirst() STsMrevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsMrevrangeAggregationAggregationFirst)(c)
}

func (c TsMrevrangeWithlabels) AggregationLast() TsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsMrevrangeAggregationAggregationLast)(c)
}

func (c STsMrevrangeWithlabels) AggregationLast() STsMrevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsMrevrangeAggregationAggregationLast)(c)
}

func (c TsMrevrangeWithlabels) AggregationStdP() TsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsMrevrangeAggregationAggregationStdP)(c)
}

func (c STsMrevrangeWithlabels) AggregationStdP() STsMrevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsMrevrangeAggregationAggregationStdP)(c)
}

func (c TsMrevrangeWithlabels) AggregationStdS() TsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsMrevrangeAggregationAggregationStdS)(c)
}

func (c STsMrevrangeWithlabels) AggregationStdS() STsMrevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsMrevrangeAggregationAggregationStdS)(c)
}

func (c TsMrevrangeWithlabels) AggregationVarP() TsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsMrevrangeAggregationAggregationVarP)(c)
}

func (c STsMrevrangeWithlabels) AggregationVarP() STsMrevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsMrevrangeAggregationAggregationVarP)(c)
}

func (c TsMrevrangeWithlabels) AggregationVarS() TsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsMrevrangeAggregationAggregationVarS)(c)
}

func (c STsMrevrangeWithlabels) AggregationVarS() STsMrevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsMrevrangeAggregationAggregationVarS)(c)
}

func (c TsMrevrangeWithlabels) Filter(filter ...string) TsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (TsMrevrangeFilter)(c)
}

func (c STsMrevrangeWithlabels) Filter(filter ...string) STsMrevrangeFilter {
	c.cs.s = append(c.cs.s, "FILTER")
	c.cs.s = append(c.cs.s, filter...)
	return (STsMrevrangeFilter)(c)
}

type TsQueryindex Completed

type STsQueryindex SCompleted

func (b *Builder) TsQueryindex() (c TsQueryindex) {
	c = TsQueryindex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.QUERYINDEX")
	return c
}

func (b *SBuilder) TsQueryindex() (c STsQueryindex) {
	c = STsQueryindex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.QUERYINDEX")
	return c
}

func (c TsQueryindex) Filter(filter ...string) TsQueryindexFilter {
	c.cs.s = append(c.cs.s, filter...)
	return (TsQueryindexFilter)(c)
}

func (c STsQueryindex) Filter(filter ...string) STsQueryindexFilter {
	c.cs.s = append(c.cs.s, filter...)
	return (STsQueryindexFilter)(c)
}

type TsQueryindexFilter Completed

type STsQueryindexFilter SCompleted

func (c TsQueryindexFilter) Filter(filter ...string) TsQueryindexFilter {
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c STsQueryindexFilter) Filter(filter ...string) STsQueryindexFilter {
	c.cs.s = append(c.cs.s, filter...)
	return c
}

func (c TsQueryindexFilter) Build() Completed {
	return Completed(c)
}

func (c STsQueryindexFilter) Build() SCompleted {
	return SCompleted(c)
}

type TsRange Completed

type STsRange SCompleted

func (b *Builder) TsRange() (c TsRange) {
	c = TsRange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.RANGE")
	return c
}

func (b *SBuilder) TsRange() (c STsRange) {
	c = STsRange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.RANGE")
	return c
}

func (c TsRange) Key(key string) TsRangeKey {
	c.cs.s = append(c.cs.s, key)
	return (TsRangeKey)(c)
}

func (c STsRange) Key(key string) STsRangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsRangeKey)(c)
}

type TsRangeAggregationAggregationAvg Completed

type STsRangeAggregationAggregationAvg SCompleted

func (c TsRangeAggregationAggregationAvg) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationAvg) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationCount Completed

type STsRangeAggregationAggregationCount SCompleted

func (c TsRangeAggregationAggregationCount) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationCount) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationFirst Completed

type STsRangeAggregationAggregationFirst SCompleted

func (c TsRangeAggregationAggregationFirst) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationFirst) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationLast Completed

type STsRangeAggregationAggregationLast SCompleted

func (c TsRangeAggregationAggregationLast) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationLast) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationMax Completed

type STsRangeAggregationAggregationMax SCompleted

func (c TsRangeAggregationAggregationMax) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationMax) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationMin Completed

type STsRangeAggregationAggregationMin SCompleted

func (c TsRangeAggregationAggregationMin) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationMin) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationRange Completed

type STsRangeAggregationAggregationRange SCompleted

func (c TsRangeAggregationAggregationRange) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationRange) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationStdP Completed

type STsRangeAggregationAggregationStdP SCompleted

func (c TsRangeAggregationAggregationStdP) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationStdP) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationStdS Completed

type STsRangeAggregationAggregationStdS SCompleted

func (c TsRangeAggregationAggregationStdS) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationStdS) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationSum Completed

type STsRangeAggregationAggregationSum SCompleted

func (c TsRangeAggregationAggregationSum) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationSum) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationVarP Completed

type STsRangeAggregationAggregationVarP SCompleted

func (c TsRangeAggregationAggregationVarP) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationVarP) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationAggregationVarS Completed

type STsRangeAggregationAggregationVarS SCompleted

func (c TsRangeAggregationAggregationVarS) Timebucket(timebucket int64) TsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRangeAggregationTimebucket)(c)
}

func (c STsRangeAggregationAggregationVarS) Timebucket(timebucket int64) STsRangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRangeAggregationTimebucket)(c)
}

type TsRangeAggregationTimebucket Completed

type STsRangeAggregationTimebucket SCompleted

func (c TsRangeAggregationTimebucket) Build() Completed {
	return Completed(c)
}

func (c STsRangeAggregationTimebucket) Build() SCompleted {
	return SCompleted(c)
}

type TsRangeAlign Completed

type STsRangeAlign SCompleted

func (c TsRangeAlign) AggregationAvg() TsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRangeAggregationAggregationAvg)(c)
}

func (c STsRangeAlign) AggregationAvg() STsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRangeAggregationAggregationAvg)(c)
}

func (c TsRangeAlign) AggregationSum() TsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRangeAggregationAggregationSum)(c)
}

func (c STsRangeAlign) AggregationSum() STsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRangeAggregationAggregationSum)(c)
}

func (c TsRangeAlign) AggregationMin() TsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRangeAggregationAggregationMin)(c)
}

func (c STsRangeAlign) AggregationMin() STsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRangeAggregationAggregationMin)(c)
}

func (c TsRangeAlign) AggregationMax() TsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRangeAggregationAggregationMax)(c)
}

func (c STsRangeAlign) AggregationMax() STsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRangeAggregationAggregationMax)(c)
}

func (c TsRangeAlign) AggregationRange() TsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRangeAggregationAggregationRange)(c)
}

func (c STsRangeAlign) AggregationRange() STsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRangeAggregationAggregationRange)(c)
}

func (c TsRangeAlign) AggregationCount() TsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRangeAggregationAggregationCount)(c)
}

func (c STsRangeAlign) AggregationCount() STsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRangeAggregationAggregationCount)(c)
}

func (c TsRangeAlign) AggregationFirst() TsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRangeAggregationAggregationFirst)(c)
}

func (c STsRangeAlign) AggregationFirst() STsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRangeAggregationAggregationFirst)(c)
}

func (c TsRangeAlign) AggregationLast() TsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRangeAggregationAggregationLast)(c)
}

func (c STsRangeAlign) AggregationLast() STsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRangeAggregationAggregationLast)(c)
}

func (c TsRangeAlign) AggregationStdP() TsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRangeAggregationAggregationStdP)(c)
}

func (c STsRangeAlign) AggregationStdP() STsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRangeAggregationAggregationStdP)(c)
}

func (c TsRangeAlign) AggregationStdS() TsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRangeAggregationAggregationStdS)(c)
}

func (c STsRangeAlign) AggregationStdS() STsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRangeAggregationAggregationStdS)(c)
}

func (c TsRangeAlign) AggregationVarP() TsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRangeAggregationAggregationVarP)(c)
}

func (c STsRangeAlign) AggregationVarP() STsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRangeAggregationAggregationVarP)(c)
}

func (c TsRangeAlign) AggregationVarS() TsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRangeAggregationAggregationVarS)(c)
}

func (c STsRangeAlign) AggregationVarS() STsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRangeAggregationAggregationVarS)(c)
}

func (c TsRangeAlign) Build() Completed {
	return Completed(c)
}

func (c STsRangeAlign) Build() SCompleted {
	return SCompleted(c)
}

type TsRangeCount Completed

type STsRangeCount SCompleted

func (c TsRangeCount) Align(value int64) TsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRangeAlign)(c)
}

func (c STsRangeCount) Align(value int64) STsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRangeAlign)(c)
}

func (c TsRangeCount) AggregationAvg() TsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRangeAggregationAggregationAvg)(c)
}

func (c STsRangeCount) AggregationAvg() STsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRangeAggregationAggregationAvg)(c)
}

func (c TsRangeCount) AggregationSum() TsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRangeAggregationAggregationSum)(c)
}

func (c STsRangeCount) AggregationSum() STsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRangeAggregationAggregationSum)(c)
}

func (c TsRangeCount) AggregationMin() TsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRangeAggregationAggregationMin)(c)
}

func (c STsRangeCount) AggregationMin() STsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRangeAggregationAggregationMin)(c)
}

func (c TsRangeCount) AggregationMax() TsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRangeAggregationAggregationMax)(c)
}

func (c STsRangeCount) AggregationMax() STsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRangeAggregationAggregationMax)(c)
}

func (c TsRangeCount) AggregationRange() TsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRangeAggregationAggregationRange)(c)
}

func (c STsRangeCount) AggregationRange() STsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRangeAggregationAggregationRange)(c)
}

func (c TsRangeCount) AggregationCount() TsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRangeAggregationAggregationCount)(c)
}

func (c STsRangeCount) AggregationCount() STsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRangeAggregationAggregationCount)(c)
}

func (c TsRangeCount) AggregationFirst() TsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRangeAggregationAggregationFirst)(c)
}

func (c STsRangeCount) AggregationFirst() STsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRangeAggregationAggregationFirst)(c)
}

func (c TsRangeCount) AggregationLast() TsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRangeAggregationAggregationLast)(c)
}

func (c STsRangeCount) AggregationLast() STsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRangeAggregationAggregationLast)(c)
}

func (c TsRangeCount) AggregationStdP() TsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRangeAggregationAggregationStdP)(c)
}

func (c STsRangeCount) AggregationStdP() STsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRangeAggregationAggregationStdP)(c)
}

func (c TsRangeCount) AggregationStdS() TsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRangeAggregationAggregationStdS)(c)
}

func (c STsRangeCount) AggregationStdS() STsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRangeAggregationAggregationStdS)(c)
}

func (c TsRangeCount) AggregationVarP() TsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRangeAggregationAggregationVarP)(c)
}

func (c STsRangeCount) AggregationVarP() STsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRangeAggregationAggregationVarP)(c)
}

func (c TsRangeCount) AggregationVarS() TsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRangeAggregationAggregationVarS)(c)
}

func (c STsRangeCount) AggregationVarS() STsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRangeAggregationAggregationVarS)(c)
}

func (c TsRangeCount) Build() Completed {
	return Completed(c)
}

func (c STsRangeCount) Build() SCompleted {
	return SCompleted(c)
}

type TsRangeFilterByTs Completed

type STsRangeFilterByTs SCompleted

func (c TsRangeFilterByTs) FilterByTs(timestamp ...int64) TsRangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c STsRangeFilterByTs) FilterByTs(timestamp ...int64) STsRangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c TsRangeFilterByTs) FilterByValue(min float64, max float64) TsRangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsRangeFilterByValue)(c)
}

func (c STsRangeFilterByTs) FilterByValue(min float64, max float64) STsRangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsRangeFilterByValue)(c)
}

func (c TsRangeFilterByTs) Count(count int64) TsRangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsRangeCount)(c)
}

func (c STsRangeFilterByTs) Count(count int64) STsRangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsRangeCount)(c)
}

func (c TsRangeFilterByTs) Align(value int64) TsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRangeAlign)(c)
}

func (c STsRangeFilterByTs) Align(value int64) STsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRangeAlign)(c)
}

func (c TsRangeFilterByTs) AggregationAvg() TsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRangeAggregationAggregationAvg)(c)
}

func (c STsRangeFilterByTs) AggregationAvg() STsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRangeAggregationAggregationAvg)(c)
}

func (c TsRangeFilterByTs) AggregationSum() TsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRangeAggregationAggregationSum)(c)
}

func (c STsRangeFilterByTs) AggregationSum() STsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRangeAggregationAggregationSum)(c)
}

func (c TsRangeFilterByTs) AggregationMin() TsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRangeAggregationAggregationMin)(c)
}

func (c STsRangeFilterByTs) AggregationMin() STsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRangeAggregationAggregationMin)(c)
}

func (c TsRangeFilterByTs) AggregationMax() TsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRangeAggregationAggregationMax)(c)
}

func (c STsRangeFilterByTs) AggregationMax() STsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRangeAggregationAggregationMax)(c)
}

func (c TsRangeFilterByTs) AggregationRange() TsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRangeAggregationAggregationRange)(c)
}

func (c STsRangeFilterByTs) AggregationRange() STsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRangeAggregationAggregationRange)(c)
}

func (c TsRangeFilterByTs) AggregationCount() TsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRangeAggregationAggregationCount)(c)
}

func (c STsRangeFilterByTs) AggregationCount() STsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRangeAggregationAggregationCount)(c)
}

func (c TsRangeFilterByTs) AggregationFirst() TsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRangeAggregationAggregationFirst)(c)
}

func (c STsRangeFilterByTs) AggregationFirst() STsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRangeAggregationAggregationFirst)(c)
}

func (c TsRangeFilterByTs) AggregationLast() TsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRangeAggregationAggregationLast)(c)
}

func (c STsRangeFilterByTs) AggregationLast() STsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRangeAggregationAggregationLast)(c)
}

func (c TsRangeFilterByTs) AggregationStdP() TsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRangeAggregationAggregationStdP)(c)
}

func (c STsRangeFilterByTs) AggregationStdP() STsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRangeAggregationAggregationStdP)(c)
}

func (c TsRangeFilterByTs) AggregationStdS() TsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRangeAggregationAggregationStdS)(c)
}

func (c STsRangeFilterByTs) AggregationStdS() STsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRangeAggregationAggregationStdS)(c)
}

func (c TsRangeFilterByTs) AggregationVarP() TsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRangeAggregationAggregationVarP)(c)
}

func (c STsRangeFilterByTs) AggregationVarP() STsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRangeAggregationAggregationVarP)(c)
}

func (c TsRangeFilterByTs) AggregationVarS() TsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRangeAggregationAggregationVarS)(c)
}

func (c STsRangeFilterByTs) AggregationVarS() STsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRangeAggregationAggregationVarS)(c)
}

func (c TsRangeFilterByTs) Build() Completed {
	return Completed(c)
}

func (c STsRangeFilterByTs) Build() SCompleted {
	return SCompleted(c)
}

type TsRangeFilterByValue Completed

type STsRangeFilterByValue SCompleted

func (c TsRangeFilterByValue) Count(count int64) TsRangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsRangeCount)(c)
}

func (c STsRangeFilterByValue) Count(count int64) STsRangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsRangeCount)(c)
}

func (c TsRangeFilterByValue) Align(value int64) TsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRangeAlign)(c)
}

func (c STsRangeFilterByValue) Align(value int64) STsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRangeAlign)(c)
}

func (c TsRangeFilterByValue) AggregationAvg() TsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRangeAggregationAggregationAvg)(c)
}

func (c STsRangeFilterByValue) AggregationAvg() STsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRangeAggregationAggregationAvg)(c)
}

func (c TsRangeFilterByValue) AggregationSum() TsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRangeAggregationAggregationSum)(c)
}

func (c STsRangeFilterByValue) AggregationSum() STsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRangeAggregationAggregationSum)(c)
}

func (c TsRangeFilterByValue) AggregationMin() TsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRangeAggregationAggregationMin)(c)
}

func (c STsRangeFilterByValue) AggregationMin() STsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRangeAggregationAggregationMin)(c)
}

func (c TsRangeFilterByValue) AggregationMax() TsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRangeAggregationAggregationMax)(c)
}

func (c STsRangeFilterByValue) AggregationMax() STsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRangeAggregationAggregationMax)(c)
}

func (c TsRangeFilterByValue) AggregationRange() TsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRangeAggregationAggregationRange)(c)
}

func (c STsRangeFilterByValue) AggregationRange() STsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRangeAggregationAggregationRange)(c)
}

func (c TsRangeFilterByValue) AggregationCount() TsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRangeAggregationAggregationCount)(c)
}

func (c STsRangeFilterByValue) AggregationCount() STsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRangeAggregationAggregationCount)(c)
}

func (c TsRangeFilterByValue) AggregationFirst() TsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRangeAggregationAggregationFirst)(c)
}

func (c STsRangeFilterByValue) AggregationFirst() STsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRangeAggregationAggregationFirst)(c)
}

func (c TsRangeFilterByValue) AggregationLast() TsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRangeAggregationAggregationLast)(c)
}

func (c STsRangeFilterByValue) AggregationLast() STsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRangeAggregationAggregationLast)(c)
}

func (c TsRangeFilterByValue) AggregationStdP() TsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRangeAggregationAggregationStdP)(c)
}

func (c STsRangeFilterByValue) AggregationStdP() STsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRangeAggregationAggregationStdP)(c)
}

func (c TsRangeFilterByValue) AggregationStdS() TsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRangeAggregationAggregationStdS)(c)
}

func (c STsRangeFilterByValue) AggregationStdS() STsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRangeAggregationAggregationStdS)(c)
}

func (c TsRangeFilterByValue) AggregationVarP() TsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRangeAggregationAggregationVarP)(c)
}

func (c STsRangeFilterByValue) AggregationVarP() STsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRangeAggregationAggregationVarP)(c)
}

func (c TsRangeFilterByValue) AggregationVarS() TsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRangeAggregationAggregationVarS)(c)
}

func (c STsRangeFilterByValue) AggregationVarS() STsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRangeAggregationAggregationVarS)(c)
}

func (c TsRangeFilterByValue) Build() Completed {
	return Completed(c)
}

func (c STsRangeFilterByValue) Build() SCompleted {
	return SCompleted(c)
}

type TsRangeFromtimestamp Completed

type STsRangeFromtimestamp SCompleted

func (c TsRangeFromtimestamp) Totimestamp(totimestamp int64) TsRangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (TsRangeTotimestamp)(c)
}

func (c STsRangeFromtimestamp) Totimestamp(totimestamp int64) STsRangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (STsRangeTotimestamp)(c)
}

type TsRangeKey Completed

type STsRangeKey SCompleted

func (c TsRangeKey) Fromtimestamp(fromtimestamp int64) TsRangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (TsRangeFromtimestamp)(c)
}

func (c STsRangeKey) Fromtimestamp(fromtimestamp int64) STsRangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (STsRangeFromtimestamp)(c)
}

type TsRangeTotimestamp Completed

type STsRangeTotimestamp SCompleted

func (c TsRangeTotimestamp) FilterByTs(timestamp ...int64) TsRangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (TsRangeFilterByTs)(c)
}

func (c STsRangeTotimestamp) FilterByTs(timestamp ...int64) STsRangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (STsRangeFilterByTs)(c)
}

func (c TsRangeTotimestamp) FilterByValue(min float64, max float64) TsRangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsRangeFilterByValue)(c)
}

func (c STsRangeTotimestamp) FilterByValue(min float64, max float64) STsRangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsRangeFilterByValue)(c)
}

func (c TsRangeTotimestamp) Count(count int64) TsRangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsRangeCount)(c)
}

func (c STsRangeTotimestamp) Count(count int64) STsRangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsRangeCount)(c)
}

func (c TsRangeTotimestamp) Align(value int64) TsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRangeAlign)(c)
}

func (c STsRangeTotimestamp) Align(value int64) STsRangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRangeAlign)(c)
}

func (c TsRangeTotimestamp) AggregationAvg() TsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRangeAggregationAggregationAvg)(c)
}

func (c STsRangeTotimestamp) AggregationAvg() STsRangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRangeAggregationAggregationAvg)(c)
}

func (c TsRangeTotimestamp) AggregationSum() TsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRangeAggregationAggregationSum)(c)
}

func (c STsRangeTotimestamp) AggregationSum() STsRangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRangeAggregationAggregationSum)(c)
}

func (c TsRangeTotimestamp) AggregationMin() TsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRangeAggregationAggregationMin)(c)
}

func (c STsRangeTotimestamp) AggregationMin() STsRangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRangeAggregationAggregationMin)(c)
}

func (c TsRangeTotimestamp) AggregationMax() TsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRangeAggregationAggregationMax)(c)
}

func (c STsRangeTotimestamp) AggregationMax() STsRangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRangeAggregationAggregationMax)(c)
}

func (c TsRangeTotimestamp) AggregationRange() TsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRangeAggregationAggregationRange)(c)
}

func (c STsRangeTotimestamp) AggregationRange() STsRangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRangeAggregationAggregationRange)(c)
}

func (c TsRangeTotimestamp) AggregationCount() TsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRangeAggregationAggregationCount)(c)
}

func (c STsRangeTotimestamp) AggregationCount() STsRangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRangeAggregationAggregationCount)(c)
}

func (c TsRangeTotimestamp) AggregationFirst() TsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRangeAggregationAggregationFirst)(c)
}

func (c STsRangeTotimestamp) AggregationFirst() STsRangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRangeAggregationAggregationFirst)(c)
}

func (c TsRangeTotimestamp) AggregationLast() TsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRangeAggregationAggregationLast)(c)
}

func (c STsRangeTotimestamp) AggregationLast() STsRangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRangeAggregationAggregationLast)(c)
}

func (c TsRangeTotimestamp) AggregationStdP() TsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRangeAggregationAggregationStdP)(c)
}

func (c STsRangeTotimestamp) AggregationStdP() STsRangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRangeAggregationAggregationStdP)(c)
}

func (c TsRangeTotimestamp) AggregationStdS() TsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRangeAggregationAggregationStdS)(c)
}

func (c STsRangeTotimestamp) AggregationStdS() STsRangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRangeAggregationAggregationStdS)(c)
}

func (c TsRangeTotimestamp) AggregationVarP() TsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRangeAggregationAggregationVarP)(c)
}

func (c STsRangeTotimestamp) AggregationVarP() STsRangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRangeAggregationAggregationVarP)(c)
}

func (c TsRangeTotimestamp) AggregationVarS() TsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRangeAggregationAggregationVarS)(c)
}

func (c STsRangeTotimestamp) AggregationVarS() STsRangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRangeAggregationAggregationVarS)(c)
}

func (c TsRangeTotimestamp) Build() Completed {
	return Completed(c)
}

func (c STsRangeTotimestamp) Build() SCompleted {
	return SCompleted(c)
}

type TsRevrange Completed

type STsRevrange SCompleted

func (b *Builder) TsRevrange() (c TsRevrange) {
	c = TsRevrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.REVRANGE")
	return c
}

func (b *SBuilder) TsRevrange() (c STsRevrange) {
	c = STsRevrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TS.REVRANGE")
	return c
}

func (c TsRevrange) Key(key string) TsRevrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (TsRevrangeKey)(c)
}

func (c STsRevrange) Key(key string) STsRevrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STsRevrangeKey)(c)
}

type TsRevrangeAggregationAggregationAvg Completed

type STsRevrangeAggregationAggregationAvg SCompleted

func (c TsRevrangeAggregationAggregationAvg) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationAvg) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationCount Completed

type STsRevrangeAggregationAggregationCount SCompleted

func (c TsRevrangeAggregationAggregationCount) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationCount) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationFirst Completed

type STsRevrangeAggregationAggregationFirst SCompleted

func (c TsRevrangeAggregationAggregationFirst) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationFirst) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationLast Completed

type STsRevrangeAggregationAggregationLast SCompleted

func (c TsRevrangeAggregationAggregationLast) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationLast) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationMax Completed

type STsRevrangeAggregationAggregationMax SCompleted

func (c TsRevrangeAggregationAggregationMax) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationMax) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationMin Completed

type STsRevrangeAggregationAggregationMin SCompleted

func (c TsRevrangeAggregationAggregationMin) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationMin) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationRange Completed

type STsRevrangeAggregationAggregationRange SCompleted

func (c TsRevrangeAggregationAggregationRange) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationRange) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationStdP Completed

type STsRevrangeAggregationAggregationStdP SCompleted

func (c TsRevrangeAggregationAggregationStdP) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationStdP) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationStdS Completed

type STsRevrangeAggregationAggregationStdS SCompleted

func (c TsRevrangeAggregationAggregationStdS) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationStdS) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationSum Completed

type STsRevrangeAggregationAggregationSum SCompleted

func (c TsRevrangeAggregationAggregationSum) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationSum) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationVarP Completed

type STsRevrangeAggregationAggregationVarP SCompleted

func (c TsRevrangeAggregationAggregationVarP) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationVarP) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationAggregationVarS Completed

type STsRevrangeAggregationAggregationVarS SCompleted

func (c TsRevrangeAggregationAggregationVarS) Timebucket(timebucket int64) TsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (TsRevrangeAggregationTimebucket)(c)
}

func (c STsRevrangeAggregationAggregationVarS) Timebucket(timebucket int64) STsRevrangeAggregationTimebucket {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timebucket, 10))
	return (STsRevrangeAggregationTimebucket)(c)
}

type TsRevrangeAggregationTimebucket Completed

type STsRevrangeAggregationTimebucket SCompleted

func (c TsRevrangeAggregationTimebucket) Build() Completed {
	return Completed(c)
}

func (c STsRevrangeAggregationTimebucket) Build() SCompleted {
	return SCompleted(c)
}

type TsRevrangeAlign Completed

type STsRevrangeAlign SCompleted

func (c TsRevrangeAlign) AggregationAvg() TsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRevrangeAggregationAggregationAvg)(c)
}

func (c STsRevrangeAlign) AggregationAvg() STsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRevrangeAggregationAggregationAvg)(c)
}

func (c TsRevrangeAlign) AggregationSum() TsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRevrangeAggregationAggregationSum)(c)
}

func (c STsRevrangeAlign) AggregationSum() STsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRevrangeAggregationAggregationSum)(c)
}

func (c TsRevrangeAlign) AggregationMin() TsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRevrangeAggregationAggregationMin)(c)
}

func (c STsRevrangeAlign) AggregationMin() STsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRevrangeAggregationAggregationMin)(c)
}

func (c TsRevrangeAlign) AggregationMax() TsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRevrangeAggregationAggregationMax)(c)
}

func (c STsRevrangeAlign) AggregationMax() STsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRevrangeAggregationAggregationMax)(c)
}

func (c TsRevrangeAlign) AggregationRange() TsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRevrangeAggregationAggregationRange)(c)
}

func (c STsRevrangeAlign) AggregationRange() STsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRevrangeAggregationAggregationRange)(c)
}

func (c TsRevrangeAlign) AggregationCount() TsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRevrangeAggregationAggregationCount)(c)
}

func (c STsRevrangeAlign) AggregationCount() STsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRevrangeAggregationAggregationCount)(c)
}

func (c TsRevrangeAlign) AggregationFirst() TsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRevrangeAggregationAggregationFirst)(c)
}

func (c STsRevrangeAlign) AggregationFirst() STsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRevrangeAggregationAggregationFirst)(c)
}

func (c TsRevrangeAlign) AggregationLast() TsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRevrangeAggregationAggregationLast)(c)
}

func (c STsRevrangeAlign) AggregationLast() STsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRevrangeAggregationAggregationLast)(c)
}

func (c TsRevrangeAlign) AggregationStdP() TsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRevrangeAggregationAggregationStdP)(c)
}

func (c STsRevrangeAlign) AggregationStdP() STsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRevrangeAggregationAggregationStdP)(c)
}

func (c TsRevrangeAlign) AggregationStdS() TsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRevrangeAggregationAggregationStdS)(c)
}

func (c STsRevrangeAlign) AggregationStdS() STsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRevrangeAggregationAggregationStdS)(c)
}

func (c TsRevrangeAlign) AggregationVarP() TsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRevrangeAggregationAggregationVarP)(c)
}

func (c STsRevrangeAlign) AggregationVarP() STsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRevrangeAggregationAggregationVarP)(c)
}

func (c TsRevrangeAlign) AggregationVarS() TsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRevrangeAggregationAggregationVarS)(c)
}

func (c STsRevrangeAlign) AggregationVarS() STsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRevrangeAggregationAggregationVarS)(c)
}

func (c TsRevrangeAlign) Build() Completed {
	return Completed(c)
}

func (c STsRevrangeAlign) Build() SCompleted {
	return SCompleted(c)
}

type TsRevrangeCount Completed

type STsRevrangeCount SCompleted

func (c TsRevrangeCount) Align(value int64) TsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRevrangeAlign)(c)
}

func (c STsRevrangeCount) Align(value int64) STsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRevrangeAlign)(c)
}

func (c TsRevrangeCount) AggregationAvg() TsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRevrangeAggregationAggregationAvg)(c)
}

func (c STsRevrangeCount) AggregationAvg() STsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRevrangeAggregationAggregationAvg)(c)
}

func (c TsRevrangeCount) AggregationSum() TsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRevrangeAggregationAggregationSum)(c)
}

func (c STsRevrangeCount) AggregationSum() STsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRevrangeAggregationAggregationSum)(c)
}

func (c TsRevrangeCount) AggregationMin() TsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRevrangeAggregationAggregationMin)(c)
}

func (c STsRevrangeCount) AggregationMin() STsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRevrangeAggregationAggregationMin)(c)
}

func (c TsRevrangeCount) AggregationMax() TsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRevrangeAggregationAggregationMax)(c)
}

func (c STsRevrangeCount) AggregationMax() STsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRevrangeAggregationAggregationMax)(c)
}

func (c TsRevrangeCount) AggregationRange() TsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRevrangeAggregationAggregationRange)(c)
}

func (c STsRevrangeCount) AggregationRange() STsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRevrangeAggregationAggregationRange)(c)
}

func (c TsRevrangeCount) AggregationCount() TsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRevrangeAggregationAggregationCount)(c)
}

func (c STsRevrangeCount) AggregationCount() STsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRevrangeAggregationAggregationCount)(c)
}

func (c TsRevrangeCount) AggregationFirst() TsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRevrangeAggregationAggregationFirst)(c)
}

func (c STsRevrangeCount) AggregationFirst() STsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRevrangeAggregationAggregationFirst)(c)
}

func (c TsRevrangeCount) AggregationLast() TsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRevrangeAggregationAggregationLast)(c)
}

func (c STsRevrangeCount) AggregationLast() STsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRevrangeAggregationAggregationLast)(c)
}

func (c TsRevrangeCount) AggregationStdP() TsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRevrangeAggregationAggregationStdP)(c)
}

func (c STsRevrangeCount) AggregationStdP() STsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRevrangeAggregationAggregationStdP)(c)
}

func (c TsRevrangeCount) AggregationStdS() TsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRevrangeAggregationAggregationStdS)(c)
}

func (c STsRevrangeCount) AggregationStdS() STsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRevrangeAggregationAggregationStdS)(c)
}

func (c TsRevrangeCount) AggregationVarP() TsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRevrangeAggregationAggregationVarP)(c)
}

func (c STsRevrangeCount) AggregationVarP() STsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRevrangeAggregationAggregationVarP)(c)
}

func (c TsRevrangeCount) AggregationVarS() TsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRevrangeAggregationAggregationVarS)(c)
}

func (c STsRevrangeCount) AggregationVarS() STsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRevrangeAggregationAggregationVarS)(c)
}

func (c TsRevrangeCount) Build() Completed {
	return Completed(c)
}

func (c STsRevrangeCount) Build() SCompleted {
	return SCompleted(c)
}

type TsRevrangeFilterByTs Completed

type STsRevrangeFilterByTs SCompleted

func (c TsRevrangeFilterByTs) FilterByTs(timestamp ...int64) TsRevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c STsRevrangeFilterByTs) FilterByTs(timestamp ...int64) STsRevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c TsRevrangeFilterByTs) FilterByValue(min float64, max float64) TsRevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsRevrangeFilterByValue)(c)
}

func (c STsRevrangeFilterByTs) FilterByValue(min float64, max float64) STsRevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsRevrangeFilterByValue)(c)
}

func (c TsRevrangeFilterByTs) Count(count int64) TsRevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsRevrangeCount)(c)
}

func (c STsRevrangeFilterByTs) Count(count int64) STsRevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsRevrangeCount)(c)
}

func (c TsRevrangeFilterByTs) Align(value int64) TsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRevrangeAlign)(c)
}

func (c STsRevrangeFilterByTs) Align(value int64) STsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRevrangeAlign)(c)
}

func (c TsRevrangeFilterByTs) AggregationAvg() TsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRevrangeAggregationAggregationAvg)(c)
}

func (c STsRevrangeFilterByTs) AggregationAvg() STsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRevrangeAggregationAggregationAvg)(c)
}

func (c TsRevrangeFilterByTs) AggregationSum() TsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRevrangeAggregationAggregationSum)(c)
}

func (c STsRevrangeFilterByTs) AggregationSum() STsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRevrangeAggregationAggregationSum)(c)
}

func (c TsRevrangeFilterByTs) AggregationMin() TsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRevrangeAggregationAggregationMin)(c)
}

func (c STsRevrangeFilterByTs) AggregationMin() STsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRevrangeAggregationAggregationMin)(c)
}

func (c TsRevrangeFilterByTs) AggregationMax() TsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRevrangeAggregationAggregationMax)(c)
}

func (c STsRevrangeFilterByTs) AggregationMax() STsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRevrangeAggregationAggregationMax)(c)
}

func (c TsRevrangeFilterByTs) AggregationRange() TsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRevrangeAggregationAggregationRange)(c)
}

func (c STsRevrangeFilterByTs) AggregationRange() STsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRevrangeAggregationAggregationRange)(c)
}

func (c TsRevrangeFilterByTs) AggregationCount() TsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRevrangeAggregationAggregationCount)(c)
}

func (c STsRevrangeFilterByTs) AggregationCount() STsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRevrangeAggregationAggregationCount)(c)
}

func (c TsRevrangeFilterByTs) AggregationFirst() TsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRevrangeAggregationAggregationFirst)(c)
}

func (c STsRevrangeFilterByTs) AggregationFirst() STsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRevrangeAggregationAggregationFirst)(c)
}

func (c TsRevrangeFilterByTs) AggregationLast() TsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRevrangeAggregationAggregationLast)(c)
}

func (c STsRevrangeFilterByTs) AggregationLast() STsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRevrangeAggregationAggregationLast)(c)
}

func (c TsRevrangeFilterByTs) AggregationStdP() TsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRevrangeAggregationAggregationStdP)(c)
}

func (c STsRevrangeFilterByTs) AggregationStdP() STsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRevrangeAggregationAggregationStdP)(c)
}

func (c TsRevrangeFilterByTs) AggregationStdS() TsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRevrangeAggregationAggregationStdS)(c)
}

func (c STsRevrangeFilterByTs) AggregationStdS() STsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRevrangeAggregationAggregationStdS)(c)
}

func (c TsRevrangeFilterByTs) AggregationVarP() TsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRevrangeAggregationAggregationVarP)(c)
}

func (c STsRevrangeFilterByTs) AggregationVarP() STsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRevrangeAggregationAggregationVarP)(c)
}

func (c TsRevrangeFilterByTs) AggregationVarS() TsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRevrangeAggregationAggregationVarS)(c)
}

func (c STsRevrangeFilterByTs) AggregationVarS() STsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRevrangeAggregationAggregationVarS)(c)
}

func (c TsRevrangeFilterByTs) Build() Completed {
	return Completed(c)
}

func (c STsRevrangeFilterByTs) Build() SCompleted {
	return SCompleted(c)
}

type TsRevrangeFilterByValue Completed

type STsRevrangeFilterByValue SCompleted

func (c TsRevrangeFilterByValue) Count(count int64) TsRevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsRevrangeCount)(c)
}

func (c STsRevrangeFilterByValue) Count(count int64) STsRevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsRevrangeCount)(c)
}

func (c TsRevrangeFilterByValue) Align(value int64) TsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRevrangeAlign)(c)
}

func (c STsRevrangeFilterByValue) Align(value int64) STsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRevrangeAlign)(c)
}

func (c TsRevrangeFilterByValue) AggregationAvg() TsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRevrangeAggregationAggregationAvg)(c)
}

func (c STsRevrangeFilterByValue) AggregationAvg() STsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRevrangeAggregationAggregationAvg)(c)
}

func (c TsRevrangeFilterByValue) AggregationSum() TsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRevrangeAggregationAggregationSum)(c)
}

func (c STsRevrangeFilterByValue) AggregationSum() STsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRevrangeAggregationAggregationSum)(c)
}

func (c TsRevrangeFilterByValue) AggregationMin() TsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRevrangeAggregationAggregationMin)(c)
}

func (c STsRevrangeFilterByValue) AggregationMin() STsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRevrangeAggregationAggregationMin)(c)
}

func (c TsRevrangeFilterByValue) AggregationMax() TsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRevrangeAggregationAggregationMax)(c)
}

func (c STsRevrangeFilterByValue) AggregationMax() STsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRevrangeAggregationAggregationMax)(c)
}

func (c TsRevrangeFilterByValue) AggregationRange() TsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRevrangeAggregationAggregationRange)(c)
}

func (c STsRevrangeFilterByValue) AggregationRange() STsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRevrangeAggregationAggregationRange)(c)
}

func (c TsRevrangeFilterByValue) AggregationCount() TsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRevrangeAggregationAggregationCount)(c)
}

func (c STsRevrangeFilterByValue) AggregationCount() STsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRevrangeAggregationAggregationCount)(c)
}

func (c TsRevrangeFilterByValue) AggregationFirst() TsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRevrangeAggregationAggregationFirst)(c)
}

func (c STsRevrangeFilterByValue) AggregationFirst() STsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRevrangeAggregationAggregationFirst)(c)
}

func (c TsRevrangeFilterByValue) AggregationLast() TsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRevrangeAggregationAggregationLast)(c)
}

func (c STsRevrangeFilterByValue) AggregationLast() STsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRevrangeAggregationAggregationLast)(c)
}

func (c TsRevrangeFilterByValue) AggregationStdP() TsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRevrangeAggregationAggregationStdP)(c)
}

func (c STsRevrangeFilterByValue) AggregationStdP() STsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRevrangeAggregationAggregationStdP)(c)
}

func (c TsRevrangeFilterByValue) AggregationStdS() TsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRevrangeAggregationAggregationStdS)(c)
}

func (c STsRevrangeFilterByValue) AggregationStdS() STsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRevrangeAggregationAggregationStdS)(c)
}

func (c TsRevrangeFilterByValue) AggregationVarP() TsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRevrangeAggregationAggregationVarP)(c)
}

func (c STsRevrangeFilterByValue) AggregationVarP() STsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRevrangeAggregationAggregationVarP)(c)
}

func (c TsRevrangeFilterByValue) AggregationVarS() TsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRevrangeAggregationAggregationVarS)(c)
}

func (c STsRevrangeFilterByValue) AggregationVarS() STsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRevrangeAggregationAggregationVarS)(c)
}

func (c TsRevrangeFilterByValue) Build() Completed {
	return Completed(c)
}

func (c STsRevrangeFilterByValue) Build() SCompleted {
	return SCompleted(c)
}

type TsRevrangeFromtimestamp Completed

type STsRevrangeFromtimestamp SCompleted

func (c TsRevrangeFromtimestamp) Totimestamp(totimestamp int64) TsRevrangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (TsRevrangeTotimestamp)(c)
}

func (c STsRevrangeFromtimestamp) Totimestamp(totimestamp int64) STsRevrangeTotimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(totimestamp, 10))
	return (STsRevrangeTotimestamp)(c)
}

type TsRevrangeKey Completed

type STsRevrangeKey SCompleted

func (c TsRevrangeKey) Fromtimestamp(fromtimestamp int64) TsRevrangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (TsRevrangeFromtimestamp)(c)
}

func (c STsRevrangeKey) Fromtimestamp(fromtimestamp int64) STsRevrangeFromtimestamp {
	c.cs.s = append(c.cs.s, strconv.FormatInt(fromtimestamp, 10))
	return (STsRevrangeFromtimestamp)(c)
}

type TsRevrangeTotimestamp Completed

type STsRevrangeTotimestamp SCompleted

func (c TsRevrangeTotimestamp) FilterByTs(timestamp ...int64) TsRevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (TsRevrangeFilterByTs)(c)
}

func (c STsRevrangeTotimestamp) FilterByTs(timestamp ...int64) STsRevrangeFilterByTs {
	c.cs.s = append(c.cs.s, "FILTER_BY_TS")
	for _, n := range timestamp {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (STsRevrangeFilterByTs)(c)
}

func (c TsRevrangeTotimestamp) FilterByValue(min float64, max float64) TsRevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (TsRevrangeFilterByValue)(c)
}

func (c STsRevrangeTotimestamp) FilterByValue(min float64, max float64) STsRevrangeFilterByValue {
	c.cs.s = append(c.cs.s, "FILTER_BY_VALUE", strconv.FormatFloat(min, 'f', -1, 64), strconv.FormatFloat(max, 'f', -1, 64))
	return (STsRevrangeFilterByValue)(c)
}

func (c TsRevrangeTotimestamp) Count(count int64) TsRevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (TsRevrangeCount)(c)
}

func (c STsRevrangeTotimestamp) Count(count int64) STsRevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (STsRevrangeCount)(c)
}

func (c TsRevrangeTotimestamp) Align(value int64) TsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (TsRevrangeAlign)(c)
}

func (c STsRevrangeTotimestamp) Align(value int64) STsRevrangeAlign {
	c.cs.s = append(c.cs.s, "ALIGN", strconv.FormatInt(value, 10))
	return (STsRevrangeAlign)(c)
}

func (c TsRevrangeTotimestamp) AggregationAvg() TsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (TsRevrangeAggregationAggregationAvg)(c)
}

func (c STsRevrangeTotimestamp) AggregationAvg() STsRevrangeAggregationAggregationAvg {
	c.cs.s = append(c.cs.s, "AGGREGATION", "avg")
	return (STsRevrangeAggregationAggregationAvg)(c)
}

func (c TsRevrangeTotimestamp) AggregationSum() TsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (TsRevrangeAggregationAggregationSum)(c)
}

func (c STsRevrangeTotimestamp) AggregationSum() STsRevrangeAggregationAggregationSum {
	c.cs.s = append(c.cs.s, "AGGREGATION", "sum")
	return (STsRevrangeAggregationAggregationSum)(c)
}

func (c TsRevrangeTotimestamp) AggregationMin() TsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (TsRevrangeAggregationAggregationMin)(c)
}

func (c STsRevrangeTotimestamp) AggregationMin() STsRevrangeAggregationAggregationMin {
	c.cs.s = append(c.cs.s, "AGGREGATION", "min")
	return (STsRevrangeAggregationAggregationMin)(c)
}

func (c TsRevrangeTotimestamp) AggregationMax() TsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (TsRevrangeAggregationAggregationMax)(c)
}

func (c STsRevrangeTotimestamp) AggregationMax() STsRevrangeAggregationAggregationMax {
	c.cs.s = append(c.cs.s, "AGGREGATION", "max")
	return (STsRevrangeAggregationAggregationMax)(c)
}

func (c TsRevrangeTotimestamp) AggregationRange() TsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (TsRevrangeAggregationAggregationRange)(c)
}

func (c STsRevrangeTotimestamp) AggregationRange() STsRevrangeAggregationAggregationRange {
	c.cs.s = append(c.cs.s, "AGGREGATION", "range")
	return (STsRevrangeAggregationAggregationRange)(c)
}

func (c TsRevrangeTotimestamp) AggregationCount() TsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (TsRevrangeAggregationAggregationCount)(c)
}

func (c STsRevrangeTotimestamp) AggregationCount() STsRevrangeAggregationAggregationCount {
	c.cs.s = append(c.cs.s, "AGGREGATION", "count")
	return (STsRevrangeAggregationAggregationCount)(c)
}

func (c TsRevrangeTotimestamp) AggregationFirst() TsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (TsRevrangeAggregationAggregationFirst)(c)
}

func (c STsRevrangeTotimestamp) AggregationFirst() STsRevrangeAggregationAggregationFirst {
	c.cs.s = append(c.cs.s, "AGGREGATION", "first")
	return (STsRevrangeAggregationAggregationFirst)(c)
}

func (c TsRevrangeTotimestamp) AggregationLast() TsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (TsRevrangeAggregationAggregationLast)(c)
}

func (c STsRevrangeTotimestamp) AggregationLast() STsRevrangeAggregationAggregationLast {
	c.cs.s = append(c.cs.s, "AGGREGATION", "last")
	return (STsRevrangeAggregationAggregationLast)(c)
}

func (c TsRevrangeTotimestamp) AggregationStdP() TsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (TsRevrangeAggregationAggregationStdP)(c)
}

func (c STsRevrangeTotimestamp) AggregationStdP() STsRevrangeAggregationAggregationStdP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.p")
	return (STsRevrangeAggregationAggregationStdP)(c)
}

func (c TsRevrangeTotimestamp) AggregationStdS() TsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (TsRevrangeAggregationAggregationStdS)(c)
}

func (c STsRevrangeTotimestamp) AggregationStdS() STsRevrangeAggregationAggregationStdS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "std.s")
	return (STsRevrangeAggregationAggregationStdS)(c)
}

func (c TsRevrangeTotimestamp) AggregationVarP() TsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (TsRevrangeAggregationAggregationVarP)(c)
}

func (c STsRevrangeTotimestamp) AggregationVarP() STsRevrangeAggregationAggregationVarP {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.p")
	return (STsRevrangeAggregationAggregationVarP)(c)
}

func (c TsRevrangeTotimestamp) AggregationVarS() TsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (TsRevrangeAggregationAggregationVarS)(c)
}

func (c STsRevrangeTotimestamp) AggregationVarS() STsRevrangeAggregationAggregationVarS {
	c.cs.s = append(c.cs.s, "AGGREGATION", "var.s")
	return (STsRevrangeAggregationAggregationVarS)(c)
}

func (c TsRevrangeTotimestamp) Build() Completed {
	return Completed(c)
}

func (c STsRevrangeTotimestamp) Build() SCompleted {
	return SCompleted(c)
}

type Ttl Completed

type STtl SCompleted

func (b *Builder) Ttl() (c Ttl) {
	c = Ttl{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TTL")
	return c
}

func (b *SBuilder) Ttl() (c STtl) {
	c = STtl{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TTL")
	return c
}

func (c Ttl) Key(key string) TtlKey {
	c.cs.s = append(c.cs.s, key)
	return (TtlKey)(c)
}

func (c STtl) Key(key string) STtlKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STtlKey)(c)
}

type TtlKey Completed

type STtlKey SCompleted

func (c TtlKey) Build() Completed {
	return Completed(c)
}

func (c STtlKey) Build() SCompleted {
	return SCompleted(c)
}

func (c TtlKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c STtlKey) Cache() SCacheable {
	return SCacheable(c)
}

type Type Completed

type SType SCompleted

func (b *Builder) Type() (c Type) {
	c = Type{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TYPE")
	return c
}

func (b *SBuilder) Type() (c SType) {
	c = SType{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "TYPE")
	return c
}

func (c Type) Key(key string) TypeKey {
	c.cs.s = append(c.cs.s, key)
	return (TypeKey)(c)
}

func (c SType) Key(key string) STypeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (STypeKey)(c)
}

type TypeKey Completed

type STypeKey SCompleted

func (c TypeKey) Build() Completed {
	return Completed(c)
}

func (c STypeKey) Build() SCompleted {
	return SCompleted(c)
}

func (c TypeKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c STypeKey) Cache() SCacheable {
	return SCacheable(c)
}

type Unlink Completed

type SUnlink SCompleted

func (b *Builder) Unlink() (c Unlink) {
	c = Unlink{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "UNLINK")
	return c
}

func (b *SBuilder) Unlink() (c SUnlink) {
	c = SUnlink{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "UNLINK")
	return c
}

func (c Unlink) Key(key ...string) UnlinkKey {
	c.cs.s = append(c.cs.s, key...)
	return (UnlinkKey)(c)
}

func (c SUnlink) Key(key ...string) SUnlinkKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SUnlinkKey)(c)
}

type UnlinkKey Completed

type SUnlinkKey SCompleted

func (c UnlinkKey) Key(key ...string) UnlinkKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SUnlinkKey) Key(key ...string) SUnlinkKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c UnlinkKey) Build() Completed {
	return Completed(c)
}

func (c SUnlinkKey) Build() SCompleted {
	return SCompleted(c)
}

type Unsubscribe Completed

type SUnsubscribe SCompleted

func (b *Builder) Unsubscribe() (c Unsubscribe) {
	c = Unsubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "UNSUBSCRIBE")
	return c
}

func (b *SBuilder) Unsubscribe() (c SUnsubscribe) {
	c = SUnsubscribe{cs: b.get(), ks: InitSlot, cf: noRetTag}
	c.cs.s = append(c.cs.s, "UNSUBSCRIBE")
	return c
}

func (c Unsubscribe) Channel(channel ...string) UnsubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return (UnsubscribeChannel)(c)
}

func (c SUnsubscribe) Channel(channel ...string) SUnsubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return (SUnsubscribeChannel)(c)
}

func (c Unsubscribe) Build() Completed {
	return Completed(c)
}

func (c SUnsubscribe) Build() SCompleted {
	return SCompleted(c)
}

type UnsubscribeChannel Completed

type SUnsubscribeChannel SCompleted

func (c UnsubscribeChannel) Channel(channel ...string) UnsubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return c
}

func (c SUnsubscribeChannel) Channel(channel ...string) SUnsubscribeChannel {
	c.cs.s = append(c.cs.s, channel...)
	return c
}

func (c UnsubscribeChannel) Build() Completed {
	return Completed(c)
}

func (c SUnsubscribeChannel) Build() SCompleted {
	return SCompleted(c)
}

type Unwatch Completed

type SUnwatch SCompleted

func (b *Builder) Unwatch() (c Unwatch) {
	c = Unwatch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "UNWATCH")
	return c
}

func (b *SBuilder) Unwatch() (c SUnwatch) {
	c = SUnwatch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "UNWATCH")
	return c
}

func (c Unwatch) Build() Completed {
	return Completed(c)
}

func (c SUnwatch) Build() SCompleted {
	return SCompleted(c)
}

type Wait Completed

type SWait SCompleted

func (b *Builder) Wait() (c Wait) {
	c = Wait{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "WAIT")
	return c
}

func (b *SBuilder) Wait() (c SWait) {
	c = SWait{cs: b.get(), ks: InitSlot, cf: blockTag}
	c.cs.s = append(c.cs.s, "WAIT")
	return c
}

func (c Wait) Numreplicas(numreplicas int64) WaitNumreplicas {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numreplicas, 10))
	return (WaitNumreplicas)(c)
}

func (c SWait) Numreplicas(numreplicas int64) SWaitNumreplicas {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numreplicas, 10))
	return (SWaitNumreplicas)(c)
}

type WaitNumreplicas Completed

type SWaitNumreplicas SCompleted

func (c WaitNumreplicas) Timeout(timeout int64) WaitTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timeout, 10))
	return (WaitTimeout)(c)
}

func (c SWaitNumreplicas) Timeout(timeout int64) SWaitTimeout {
	c.cs.s = append(c.cs.s, strconv.FormatInt(timeout, 10))
	return (SWaitTimeout)(c)
}

type WaitTimeout Completed

type SWaitTimeout SCompleted

func (c WaitTimeout) Build() Completed {
	return Completed(c)
}

func (c SWaitTimeout) Build() SCompleted {
	return SCompleted(c)
}

type Watch Completed

type SWatch SCompleted

func (b *Builder) Watch() (c Watch) {
	c = Watch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "WATCH")
	return c
}

func (b *SBuilder) Watch() (c SWatch) {
	c = SWatch{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "WATCH")
	return c
}

func (c Watch) Key(key ...string) WatchKey {
	c.cs.s = append(c.cs.s, key...)
	return (WatchKey)(c)
}

func (c SWatch) Key(key ...string) SWatchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SWatchKey)(c)
}

type WatchKey Completed

type SWatchKey SCompleted

func (c WatchKey) Key(key ...string) WatchKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SWatchKey) Key(key ...string) SWatchKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c WatchKey) Build() Completed {
	return Completed(c)
}

func (c SWatchKey) Build() SCompleted {
	return SCompleted(c)
}

type Xack Completed

type SXack SCompleted

func (b *Builder) Xack() (c Xack) {
	c = Xack{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XACK")
	return c
}

func (b *SBuilder) Xack() (c SXack) {
	c = SXack{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XACK")
	return c
}

func (c Xack) Key(key string) XackKey {
	c.cs.s = append(c.cs.s, key)
	return (XackKey)(c)
}

func (c SXack) Key(key string) SXackKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXackKey)(c)
}

type XackGroup Completed

type SXackGroup SCompleted

func (c XackGroup) Id(id ...string) XackId {
	c.cs.s = append(c.cs.s, id...)
	return (XackId)(c)
}

func (c SXackGroup) Id(id ...string) SXackId {
	c.cs.s = append(c.cs.s, id...)
	return (SXackId)(c)
}

type XackId Completed

type SXackId SCompleted

func (c XackId) Id(id ...string) XackId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c SXackId) Id(id ...string) SXackId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c XackId) Build() Completed {
	return Completed(c)
}

func (c SXackId) Build() SCompleted {
	return SCompleted(c)
}

type XackKey Completed

type SXackKey SCompleted

func (c XackKey) Group(group string) XackGroup {
	c.cs.s = append(c.cs.s, group)
	return (XackGroup)(c)
}

func (c SXackKey) Group(group string) SXackGroup {
	c.cs.s = append(c.cs.s, group)
	return (SXackGroup)(c)
}

type Xadd Completed

type SXadd SCompleted

func (b *Builder) Xadd() (c Xadd) {
	c = Xadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XADD")
	return c
}

func (b *SBuilder) Xadd() (c SXadd) {
	c = SXadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XADD")
	return c
}

func (c Xadd) Key(key string) XaddKey {
	c.cs.s = append(c.cs.s, key)
	return (XaddKey)(c)
}

func (c SXadd) Key(key string) SXaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXaddKey)(c)
}

type XaddFieldValue Completed

type SXaddFieldValue SCompleted

func (c XaddFieldValue) FieldValue(field string, value string) XaddFieldValue {
	c.cs.s = append(c.cs.s, field, value)
	return c
}

func (c SXaddFieldValue) FieldValue(field string, value string) SXaddFieldValue {
	c.cs.s = append(c.cs.s, field, value)
	return c
}

func (c XaddFieldValue) Build() Completed {
	return Completed(c)
}

func (c SXaddFieldValue) Build() SCompleted {
	return SCompleted(c)
}

type XaddId Completed

type SXaddId SCompleted

func (c XaddId) FieldValue() XaddFieldValue {
	return (XaddFieldValue)(c)
}

func (c SXaddId) FieldValue() SXaddFieldValue {
	return (SXaddFieldValue)(c)
}

type XaddKey Completed

type SXaddKey SCompleted

func (c XaddKey) Nomkstream() XaddNomkstream {
	c.cs.s = append(c.cs.s, "NOMKSTREAM")
	return (XaddNomkstream)(c)
}

func (c SXaddKey) Nomkstream() SXaddNomkstream {
	c.cs.s = append(c.cs.s, "NOMKSTREAM")
	return (SXaddNomkstream)(c)
}

func (c XaddKey) Maxlen() XaddTrimStrategyMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN")
	return (XaddTrimStrategyMaxlen)(c)
}

func (c SXaddKey) Maxlen() SXaddTrimStrategyMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN")
	return (SXaddTrimStrategyMaxlen)(c)
}

func (c XaddKey) Minid() XaddTrimStrategyMinid {
	c.cs.s = append(c.cs.s, "MINID")
	return (XaddTrimStrategyMinid)(c)
}

func (c SXaddKey) Minid() SXaddTrimStrategyMinid {
	c.cs.s = append(c.cs.s, "MINID")
	return (SXaddTrimStrategyMinid)(c)
}

func (c XaddKey) Id(id string) XaddId {
	c.cs.s = append(c.cs.s, id)
	return (XaddId)(c)
}

func (c SXaddKey) Id(id string) SXaddId {
	c.cs.s = append(c.cs.s, id)
	return (SXaddId)(c)
}

type XaddNomkstream Completed

type SXaddNomkstream SCompleted

func (c XaddNomkstream) Maxlen() XaddTrimStrategyMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN")
	return (XaddTrimStrategyMaxlen)(c)
}

func (c SXaddNomkstream) Maxlen() SXaddTrimStrategyMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN")
	return (SXaddTrimStrategyMaxlen)(c)
}

func (c XaddNomkstream) Minid() XaddTrimStrategyMinid {
	c.cs.s = append(c.cs.s, "MINID")
	return (XaddTrimStrategyMinid)(c)
}

func (c SXaddNomkstream) Minid() SXaddTrimStrategyMinid {
	c.cs.s = append(c.cs.s, "MINID")
	return (SXaddTrimStrategyMinid)(c)
}

func (c XaddNomkstream) Id(id string) XaddId {
	c.cs.s = append(c.cs.s, id)
	return (XaddId)(c)
}

func (c SXaddNomkstream) Id(id string) SXaddId {
	c.cs.s = append(c.cs.s, id)
	return (SXaddId)(c)
}

type XaddTrimLimit Completed

type SXaddTrimLimit SCompleted

func (c XaddTrimLimit) Id(id string) XaddId {
	c.cs.s = append(c.cs.s, id)
	return (XaddId)(c)
}

func (c SXaddTrimLimit) Id(id string) SXaddId {
	c.cs.s = append(c.cs.s, id)
	return (SXaddId)(c)
}

type XaddTrimOperatorAlmost Completed

type SXaddTrimOperatorAlmost SCompleted

func (c XaddTrimOperatorAlmost) Threshold(threshold string) XaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimOperatorAlmost) Threshold(threshold string) SXaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimOperatorExact Completed

type SXaddTrimOperatorExact SCompleted

func (c XaddTrimOperatorExact) Threshold(threshold string) XaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimOperatorExact) Threshold(threshold string) SXaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimStrategyMaxlen Completed

type SXaddTrimStrategyMaxlen SCompleted

func (c XaddTrimStrategyMaxlen) Exact() XaddTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (XaddTrimOperatorExact)(c)
}

func (c SXaddTrimStrategyMaxlen) Exact() SXaddTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (SXaddTrimOperatorExact)(c)
}

func (c XaddTrimStrategyMaxlen) Almost() XaddTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (XaddTrimOperatorAlmost)(c)
}

func (c SXaddTrimStrategyMaxlen) Almost() SXaddTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (SXaddTrimOperatorAlmost)(c)
}

func (c XaddTrimStrategyMaxlen) Threshold(threshold string) XaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimStrategyMaxlen) Threshold(threshold string) SXaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimStrategyMinid Completed

type SXaddTrimStrategyMinid SCompleted

func (c XaddTrimStrategyMinid) Exact() XaddTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (XaddTrimOperatorExact)(c)
}

func (c SXaddTrimStrategyMinid) Exact() SXaddTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (SXaddTrimOperatorExact)(c)
}

func (c XaddTrimStrategyMinid) Almost() XaddTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (XaddTrimOperatorAlmost)(c)
}

func (c SXaddTrimStrategyMinid) Almost() SXaddTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (SXaddTrimOperatorAlmost)(c)
}

func (c XaddTrimStrategyMinid) Threshold(threshold string) XaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XaddTrimThreshold)(c)
}

func (c SXaddTrimStrategyMinid) Threshold(threshold string) SXaddTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXaddTrimThreshold)(c)
}

type XaddTrimThreshold Completed

type SXaddTrimThreshold SCompleted

func (c XaddTrimThreshold) Limit(count int64) XaddTrimLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(count, 10))
	return (XaddTrimLimit)(c)
}

func (c SXaddTrimThreshold) Limit(count int64) SXaddTrimLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(count, 10))
	return (SXaddTrimLimit)(c)
}

func (c XaddTrimThreshold) Id(id string) XaddId {
	c.cs.s = append(c.cs.s, id)
	return (XaddId)(c)
}

func (c SXaddTrimThreshold) Id(id string) SXaddId {
	c.cs.s = append(c.cs.s, id)
	return (SXaddId)(c)
}

type Xautoclaim Completed

type SXautoclaim SCompleted

func (b *Builder) Xautoclaim() (c Xautoclaim) {
	c = Xautoclaim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XAUTOCLAIM")
	return c
}

func (b *SBuilder) Xautoclaim() (c SXautoclaim) {
	c = SXautoclaim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XAUTOCLAIM")
	return c
}

func (c Xautoclaim) Key(key string) XautoclaimKey {
	c.cs.s = append(c.cs.s, key)
	return (XautoclaimKey)(c)
}

func (c SXautoclaim) Key(key string) SXautoclaimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXautoclaimKey)(c)
}

type XautoclaimConsumer Completed

type SXautoclaimConsumer SCompleted

func (c XautoclaimConsumer) MinIdleTime(minIdleTime string) XautoclaimMinIdleTime {
	c.cs.s = append(c.cs.s, minIdleTime)
	return (XautoclaimMinIdleTime)(c)
}

func (c SXautoclaimConsumer) MinIdleTime(minIdleTime string) SXautoclaimMinIdleTime {
	c.cs.s = append(c.cs.s, minIdleTime)
	return (SXautoclaimMinIdleTime)(c)
}

type XautoclaimCount Completed

type SXautoclaimCount SCompleted

func (c XautoclaimCount) Justid() XautoclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XautoclaimJustid)(c)
}

func (c SXautoclaimCount) Justid() SXautoclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXautoclaimJustid)(c)
}

func (c XautoclaimCount) Build() Completed {
	return Completed(c)
}

func (c SXautoclaimCount) Build() SCompleted {
	return SCompleted(c)
}

type XautoclaimGroup Completed

type SXautoclaimGroup SCompleted

func (c XautoclaimGroup) Consumer(consumer string) XautoclaimConsumer {
	c.cs.s = append(c.cs.s, consumer)
	return (XautoclaimConsumer)(c)
}

func (c SXautoclaimGroup) Consumer(consumer string) SXautoclaimConsumer {
	c.cs.s = append(c.cs.s, consumer)
	return (SXautoclaimConsumer)(c)
}

type XautoclaimJustid Completed

type SXautoclaimJustid SCompleted

func (c XautoclaimJustid) Build() Completed {
	return Completed(c)
}

func (c SXautoclaimJustid) Build() SCompleted {
	return SCompleted(c)
}

type XautoclaimKey Completed

type SXautoclaimKey SCompleted

func (c XautoclaimKey) Group(group string) XautoclaimGroup {
	c.cs.s = append(c.cs.s, group)
	return (XautoclaimGroup)(c)
}

func (c SXautoclaimKey) Group(group string) SXautoclaimGroup {
	c.cs.s = append(c.cs.s, group)
	return (SXautoclaimGroup)(c)
}

type XautoclaimMinIdleTime Completed

type SXautoclaimMinIdleTime SCompleted

func (c XautoclaimMinIdleTime) Start(start string) XautoclaimStart {
	c.cs.s = append(c.cs.s, start)
	return (XautoclaimStart)(c)
}

func (c SXautoclaimMinIdleTime) Start(start string) SXautoclaimStart {
	c.cs.s = append(c.cs.s, start)
	return (SXautoclaimStart)(c)
}

type XautoclaimStart Completed

type SXautoclaimStart SCompleted

func (c XautoclaimStart) Count(count int64) XautoclaimCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (XautoclaimCount)(c)
}

func (c SXautoclaimStart) Count(count int64) SXautoclaimCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SXautoclaimCount)(c)
}

func (c XautoclaimStart) Justid() XautoclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XautoclaimJustid)(c)
}

func (c SXautoclaimStart) Justid() SXautoclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXautoclaimJustid)(c)
}

func (c XautoclaimStart) Build() Completed {
	return Completed(c)
}

func (c SXautoclaimStart) Build() SCompleted {
	return SCompleted(c)
}

type Xclaim Completed

type SXclaim SCompleted

func (b *Builder) Xclaim() (c Xclaim) {
	c = Xclaim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XCLAIM")
	return c
}

func (b *SBuilder) Xclaim() (c SXclaim) {
	c = SXclaim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XCLAIM")
	return c
}

func (c Xclaim) Key(key string) XclaimKey {
	c.cs.s = append(c.cs.s, key)
	return (XclaimKey)(c)
}

func (c SXclaim) Key(key string) SXclaimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXclaimKey)(c)
}

type XclaimConsumer Completed

type SXclaimConsumer SCompleted

func (c XclaimConsumer) MinIdleTime(minIdleTime string) XclaimMinIdleTime {
	c.cs.s = append(c.cs.s, minIdleTime)
	return (XclaimMinIdleTime)(c)
}

func (c SXclaimConsumer) MinIdleTime(minIdleTime string) SXclaimMinIdleTime {
	c.cs.s = append(c.cs.s, minIdleTime)
	return (SXclaimMinIdleTime)(c)
}

type XclaimForce Completed

type SXclaimForce SCompleted

func (c XclaimForce) Justid() XclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimForce) Justid() SXclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimForce) Build() Completed {
	return Completed(c)
}

func (c SXclaimForce) Build() SCompleted {
	return SCompleted(c)
}

type XclaimGroup Completed

type SXclaimGroup SCompleted

func (c XclaimGroup) Consumer(consumer string) XclaimConsumer {
	c.cs.s = append(c.cs.s, consumer)
	return (XclaimConsumer)(c)
}

func (c SXclaimGroup) Consumer(consumer string) SXclaimConsumer {
	c.cs.s = append(c.cs.s, consumer)
	return (SXclaimConsumer)(c)
}

type XclaimId Completed

type SXclaimId SCompleted

func (c XclaimId) Id(id ...string) XclaimId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c SXclaimId) Id(id ...string) SXclaimId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c XclaimId) Idle(ms int64) XclaimIdle {
	c.cs.s = append(c.cs.s, "IDLE", strconv.FormatInt(ms, 10))
	return (XclaimIdle)(c)
}

func (c SXclaimId) Idle(ms int64) SXclaimIdle {
	c.cs.s = append(c.cs.s, "IDLE", strconv.FormatInt(ms, 10))
	return (SXclaimIdle)(c)
}

func (c XclaimId) Time(msUnixTime int64) XclaimTime {
	c.cs.s = append(c.cs.s, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (XclaimTime)(c)
}

func (c SXclaimId) Time(msUnixTime int64) SXclaimTime {
	c.cs.s = append(c.cs.s, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (SXclaimTime)(c)
}

func (c XclaimId) Retrycount(count int64) XclaimRetrycount {
	c.cs.s = append(c.cs.s, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (XclaimRetrycount)(c)
}

func (c SXclaimId) Retrycount(count int64) SXclaimRetrycount {
	c.cs.s = append(c.cs.s, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (SXclaimRetrycount)(c)
}

func (c XclaimId) Force() XclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimId) Force() SXclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimId) Justid() XclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimId) Justid() SXclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimId) Build() Completed {
	return Completed(c)
}

func (c SXclaimId) Build() SCompleted {
	return SCompleted(c)
}

type XclaimIdle Completed

type SXclaimIdle SCompleted

func (c XclaimIdle) Time(msUnixTime int64) XclaimTime {
	c.cs.s = append(c.cs.s, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (XclaimTime)(c)
}

func (c SXclaimIdle) Time(msUnixTime int64) SXclaimTime {
	c.cs.s = append(c.cs.s, "TIME", strconv.FormatInt(msUnixTime, 10))
	return (SXclaimTime)(c)
}

func (c XclaimIdle) Retrycount(count int64) XclaimRetrycount {
	c.cs.s = append(c.cs.s, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (XclaimRetrycount)(c)
}

func (c SXclaimIdle) Retrycount(count int64) SXclaimRetrycount {
	c.cs.s = append(c.cs.s, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (SXclaimRetrycount)(c)
}

func (c XclaimIdle) Force() XclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimIdle) Force() SXclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimIdle) Justid() XclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimIdle) Justid() SXclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimIdle) Build() Completed {
	return Completed(c)
}

func (c SXclaimIdle) Build() SCompleted {
	return SCompleted(c)
}

type XclaimJustid Completed

type SXclaimJustid SCompleted

func (c XclaimJustid) Build() Completed {
	return Completed(c)
}

func (c SXclaimJustid) Build() SCompleted {
	return SCompleted(c)
}

type XclaimKey Completed

type SXclaimKey SCompleted

func (c XclaimKey) Group(group string) XclaimGroup {
	c.cs.s = append(c.cs.s, group)
	return (XclaimGroup)(c)
}

func (c SXclaimKey) Group(group string) SXclaimGroup {
	c.cs.s = append(c.cs.s, group)
	return (SXclaimGroup)(c)
}

type XclaimMinIdleTime Completed

type SXclaimMinIdleTime SCompleted

func (c XclaimMinIdleTime) Id(id ...string) XclaimId {
	c.cs.s = append(c.cs.s, id...)
	return (XclaimId)(c)
}

func (c SXclaimMinIdleTime) Id(id ...string) SXclaimId {
	c.cs.s = append(c.cs.s, id...)
	return (SXclaimId)(c)
}

type XclaimRetrycount Completed

type SXclaimRetrycount SCompleted

func (c XclaimRetrycount) Force() XclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimRetrycount) Force() SXclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimRetrycount) Justid() XclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimRetrycount) Justid() SXclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimRetrycount) Build() Completed {
	return Completed(c)
}

func (c SXclaimRetrycount) Build() SCompleted {
	return SCompleted(c)
}

type XclaimTime Completed

type SXclaimTime SCompleted

func (c XclaimTime) Retrycount(count int64) XclaimRetrycount {
	c.cs.s = append(c.cs.s, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (XclaimRetrycount)(c)
}

func (c SXclaimTime) Retrycount(count int64) SXclaimRetrycount {
	c.cs.s = append(c.cs.s, "RETRYCOUNT", strconv.FormatInt(count, 10))
	return (SXclaimRetrycount)(c)
}

func (c XclaimTime) Force() XclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (XclaimForce)(c)
}

func (c SXclaimTime) Force() SXclaimForce {
	c.cs.s = append(c.cs.s, "FORCE")
	return (SXclaimForce)(c)
}

func (c XclaimTime) Justid() XclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (XclaimJustid)(c)
}

func (c SXclaimTime) Justid() SXclaimJustid {
	c.cs.s = append(c.cs.s, "JUSTID")
	return (SXclaimJustid)(c)
}

func (c XclaimTime) Build() Completed {
	return Completed(c)
}

func (c SXclaimTime) Build() SCompleted {
	return SCompleted(c)
}

type Xdel Completed

type SXdel SCompleted

func (b *Builder) Xdel() (c Xdel) {
	c = Xdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XDEL")
	return c
}

func (b *SBuilder) Xdel() (c SXdel) {
	c = SXdel{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XDEL")
	return c
}

func (c Xdel) Key(key string) XdelKey {
	c.cs.s = append(c.cs.s, key)
	return (XdelKey)(c)
}

func (c SXdel) Key(key string) SXdelKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXdelKey)(c)
}

type XdelId Completed

type SXdelId SCompleted

func (c XdelId) Id(id ...string) XdelId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c SXdelId) Id(id ...string) SXdelId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c XdelId) Build() Completed {
	return Completed(c)
}

func (c SXdelId) Build() SCompleted {
	return SCompleted(c)
}

type XdelKey Completed

type SXdelKey SCompleted

func (c XdelKey) Id(id ...string) XdelId {
	c.cs.s = append(c.cs.s, id...)
	return (XdelId)(c)
}

func (c SXdelKey) Id(id ...string) SXdelId {
	c.cs.s = append(c.cs.s, id...)
	return (SXdelId)(c)
}

type XgroupCreate Completed

type SXgroupCreate SCompleted

func (b *Builder) XgroupCreate() (c XgroupCreate) {
	c = XgroupCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "CREATE")
	return c
}

func (b *SBuilder) XgroupCreate() (c SXgroupCreate) {
	c = SXgroupCreate{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "CREATE")
	return c
}

func (c XgroupCreate) Key(key string) XgroupCreateKey {
	c.cs.s = append(c.cs.s, key)
	return (XgroupCreateKey)(c)
}

func (c SXgroupCreate) Key(key string) SXgroupCreateKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXgroupCreateKey)(c)
}

type XgroupCreateGroupname Completed

type SXgroupCreateGroupname SCompleted

func (c XgroupCreateGroupname) Id(id string) XgroupCreateId {
	c.cs.s = append(c.cs.s, id)
	return (XgroupCreateId)(c)
}

func (c SXgroupCreateGroupname) Id(id string) SXgroupCreateId {
	c.cs.s = append(c.cs.s, id)
	return (SXgroupCreateId)(c)
}

type XgroupCreateId Completed

type SXgroupCreateId SCompleted

func (c XgroupCreateId) Mkstream() XgroupCreateMkstream {
	c.cs.s = append(c.cs.s, "MKSTREAM")
	return (XgroupCreateMkstream)(c)
}

func (c SXgroupCreateId) Mkstream() SXgroupCreateMkstream {
	c.cs.s = append(c.cs.s, "MKSTREAM")
	return (SXgroupCreateMkstream)(c)
}

func (c XgroupCreateId) Build() Completed {
	return Completed(c)
}

func (c SXgroupCreateId) Build() SCompleted {
	return SCompleted(c)
}

type XgroupCreateKey Completed

type SXgroupCreateKey SCompleted

func (c XgroupCreateKey) Groupname(groupname string) XgroupCreateGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (XgroupCreateGroupname)(c)
}

func (c SXgroupCreateKey) Groupname(groupname string) SXgroupCreateGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (SXgroupCreateGroupname)(c)
}

type XgroupCreateMkstream Completed

type SXgroupCreateMkstream SCompleted

func (c XgroupCreateMkstream) Build() Completed {
	return Completed(c)
}

func (c SXgroupCreateMkstream) Build() SCompleted {
	return SCompleted(c)
}

type XgroupCreateconsumer Completed

type SXgroupCreateconsumer SCompleted

func (b *Builder) XgroupCreateconsumer() (c XgroupCreateconsumer) {
	c = XgroupCreateconsumer{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "CREATECONSUMER")
	return c
}

func (b *SBuilder) XgroupCreateconsumer() (c SXgroupCreateconsumer) {
	c = SXgroupCreateconsumer{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "CREATECONSUMER")
	return c
}

func (c XgroupCreateconsumer) Key(key string) XgroupCreateconsumerKey {
	c.cs.s = append(c.cs.s, key)
	return (XgroupCreateconsumerKey)(c)
}

func (c SXgroupCreateconsumer) Key(key string) SXgroupCreateconsumerKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXgroupCreateconsumerKey)(c)
}

type XgroupCreateconsumerConsumername Completed

type SXgroupCreateconsumerConsumername SCompleted

func (c XgroupCreateconsumerConsumername) Build() Completed {
	return Completed(c)
}

func (c SXgroupCreateconsumerConsumername) Build() SCompleted {
	return SCompleted(c)
}

type XgroupCreateconsumerGroupname Completed

type SXgroupCreateconsumerGroupname SCompleted

func (c XgroupCreateconsumerGroupname) Consumername(consumername string) XgroupCreateconsumerConsumername {
	c.cs.s = append(c.cs.s, consumername)
	return (XgroupCreateconsumerConsumername)(c)
}

func (c SXgroupCreateconsumerGroupname) Consumername(consumername string) SXgroupCreateconsumerConsumername {
	c.cs.s = append(c.cs.s, consumername)
	return (SXgroupCreateconsumerConsumername)(c)
}

type XgroupCreateconsumerKey Completed

type SXgroupCreateconsumerKey SCompleted

func (c XgroupCreateconsumerKey) Groupname(groupname string) XgroupCreateconsumerGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (XgroupCreateconsumerGroupname)(c)
}

func (c SXgroupCreateconsumerKey) Groupname(groupname string) SXgroupCreateconsumerGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (SXgroupCreateconsumerGroupname)(c)
}

type XgroupDelconsumer Completed

type SXgroupDelconsumer SCompleted

func (b *Builder) XgroupDelconsumer() (c XgroupDelconsumer) {
	c = XgroupDelconsumer{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "DELCONSUMER")
	return c
}

func (b *SBuilder) XgroupDelconsumer() (c SXgroupDelconsumer) {
	c = SXgroupDelconsumer{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "DELCONSUMER")
	return c
}

func (c XgroupDelconsumer) Key(key string) XgroupDelconsumerKey {
	c.cs.s = append(c.cs.s, key)
	return (XgroupDelconsumerKey)(c)
}

func (c SXgroupDelconsumer) Key(key string) SXgroupDelconsumerKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXgroupDelconsumerKey)(c)
}

type XgroupDelconsumerConsumername Completed

type SXgroupDelconsumerConsumername SCompleted

func (c XgroupDelconsumerConsumername) Build() Completed {
	return Completed(c)
}

func (c SXgroupDelconsumerConsumername) Build() SCompleted {
	return SCompleted(c)
}

type XgroupDelconsumerGroupname Completed

type SXgroupDelconsumerGroupname SCompleted

func (c XgroupDelconsumerGroupname) Consumername(consumername string) XgroupDelconsumerConsumername {
	c.cs.s = append(c.cs.s, consumername)
	return (XgroupDelconsumerConsumername)(c)
}

func (c SXgroupDelconsumerGroupname) Consumername(consumername string) SXgroupDelconsumerConsumername {
	c.cs.s = append(c.cs.s, consumername)
	return (SXgroupDelconsumerConsumername)(c)
}

type XgroupDelconsumerKey Completed

type SXgroupDelconsumerKey SCompleted

func (c XgroupDelconsumerKey) Groupname(groupname string) XgroupDelconsumerGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (XgroupDelconsumerGroupname)(c)
}

func (c SXgroupDelconsumerKey) Groupname(groupname string) SXgroupDelconsumerGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (SXgroupDelconsumerGroupname)(c)
}

type XgroupDestroy Completed

type SXgroupDestroy SCompleted

func (b *Builder) XgroupDestroy() (c XgroupDestroy) {
	c = XgroupDestroy{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "DESTROY")
	return c
}

func (b *SBuilder) XgroupDestroy() (c SXgroupDestroy) {
	c = SXgroupDestroy{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "DESTROY")
	return c
}

func (c XgroupDestroy) Key(key string) XgroupDestroyKey {
	c.cs.s = append(c.cs.s, key)
	return (XgroupDestroyKey)(c)
}

func (c SXgroupDestroy) Key(key string) SXgroupDestroyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXgroupDestroyKey)(c)
}

type XgroupDestroyGroupname Completed

type SXgroupDestroyGroupname SCompleted

func (c XgroupDestroyGroupname) Build() Completed {
	return Completed(c)
}

func (c SXgroupDestroyGroupname) Build() SCompleted {
	return SCompleted(c)
}

type XgroupDestroyKey Completed

type SXgroupDestroyKey SCompleted

func (c XgroupDestroyKey) Groupname(groupname string) XgroupDestroyGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (XgroupDestroyGroupname)(c)
}

func (c SXgroupDestroyKey) Groupname(groupname string) SXgroupDestroyGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (SXgroupDestroyGroupname)(c)
}

type XgroupHelp Completed

type SXgroupHelp SCompleted

func (b *Builder) XgroupHelp() (c XgroupHelp) {
	c = XgroupHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "HELP")
	return c
}

func (b *SBuilder) XgroupHelp() (c SXgroupHelp) {
	c = SXgroupHelp{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "HELP")
	return c
}

func (c XgroupHelp) Build() Completed {
	return Completed(c)
}

func (c SXgroupHelp) Build() SCompleted {
	return SCompleted(c)
}

type XgroupSetid Completed

type SXgroupSetid SCompleted

func (b *Builder) XgroupSetid() (c XgroupSetid) {
	c = XgroupSetid{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "SETID")
	return c
}

func (b *SBuilder) XgroupSetid() (c SXgroupSetid) {
	c = SXgroupSetid{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XGROUP", "SETID")
	return c
}

func (c XgroupSetid) Key(key string) XgroupSetidKey {
	c.cs.s = append(c.cs.s, key)
	return (XgroupSetidKey)(c)
}

func (c SXgroupSetid) Key(key string) SXgroupSetidKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXgroupSetidKey)(c)
}

type XgroupSetidGroupname Completed

type SXgroupSetidGroupname SCompleted

func (c XgroupSetidGroupname) Id(id string) XgroupSetidId {
	c.cs.s = append(c.cs.s, id)
	return (XgroupSetidId)(c)
}

func (c SXgroupSetidGroupname) Id(id string) SXgroupSetidId {
	c.cs.s = append(c.cs.s, id)
	return (SXgroupSetidId)(c)
}

type XgroupSetidId Completed

type SXgroupSetidId SCompleted

func (c XgroupSetidId) Build() Completed {
	return Completed(c)
}

func (c SXgroupSetidId) Build() SCompleted {
	return SCompleted(c)
}

type XgroupSetidKey Completed

type SXgroupSetidKey SCompleted

func (c XgroupSetidKey) Groupname(groupname string) XgroupSetidGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (XgroupSetidGroupname)(c)
}

func (c SXgroupSetidKey) Groupname(groupname string) SXgroupSetidGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (SXgroupSetidGroupname)(c)
}

type XinfoConsumers Completed

type SXinfoConsumers SCompleted

func (b *Builder) XinfoConsumers() (c XinfoConsumers) {
	c = XinfoConsumers{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "CONSUMERS")
	return c
}

func (b *SBuilder) XinfoConsumers() (c SXinfoConsumers) {
	c = SXinfoConsumers{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "CONSUMERS")
	return c
}

func (c XinfoConsumers) Key(key string) XinfoConsumersKey {
	c.cs.s = append(c.cs.s, key)
	return (XinfoConsumersKey)(c)
}

func (c SXinfoConsumers) Key(key string) SXinfoConsumersKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXinfoConsumersKey)(c)
}

type XinfoConsumersGroupname Completed

type SXinfoConsumersGroupname SCompleted

func (c XinfoConsumersGroupname) Build() Completed {
	return Completed(c)
}

func (c SXinfoConsumersGroupname) Build() SCompleted {
	return SCompleted(c)
}

type XinfoConsumersKey Completed

type SXinfoConsumersKey SCompleted

func (c XinfoConsumersKey) Groupname(groupname string) XinfoConsumersGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (XinfoConsumersGroupname)(c)
}

func (c SXinfoConsumersKey) Groupname(groupname string) SXinfoConsumersGroupname {
	c.cs.s = append(c.cs.s, groupname)
	return (SXinfoConsumersGroupname)(c)
}

type XinfoGroups Completed

type SXinfoGroups SCompleted

func (b *Builder) XinfoGroups() (c XinfoGroups) {
	c = XinfoGroups{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "GROUPS")
	return c
}

func (b *SBuilder) XinfoGroups() (c SXinfoGroups) {
	c = SXinfoGroups{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "GROUPS")
	return c
}

func (c XinfoGroups) Key(key string) XinfoGroupsKey {
	c.cs.s = append(c.cs.s, key)
	return (XinfoGroupsKey)(c)
}

func (c SXinfoGroups) Key(key string) SXinfoGroupsKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXinfoGroupsKey)(c)
}

type XinfoGroupsKey Completed

type SXinfoGroupsKey SCompleted

func (c XinfoGroupsKey) Build() Completed {
	return Completed(c)
}

func (c SXinfoGroupsKey) Build() SCompleted {
	return SCompleted(c)
}

type XinfoHelp Completed

type SXinfoHelp SCompleted

func (b *Builder) XinfoHelp() (c XinfoHelp) {
	c = XinfoHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "HELP")
	return c
}

func (b *SBuilder) XinfoHelp() (c SXinfoHelp) {
	c = SXinfoHelp{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "HELP")
	return c
}

func (c XinfoHelp) Build() Completed {
	return Completed(c)
}

func (c SXinfoHelp) Build() SCompleted {
	return SCompleted(c)
}

type XinfoStream Completed

type SXinfoStream SCompleted

func (b *Builder) XinfoStream() (c XinfoStream) {
	c = XinfoStream{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "STREAM")
	return c
}

func (b *SBuilder) XinfoStream() (c SXinfoStream) {
	c = SXinfoStream{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XINFO", "STREAM")
	return c
}

func (c XinfoStream) Key(key string) XinfoStreamKey {
	c.cs.s = append(c.cs.s, key)
	return (XinfoStreamKey)(c)
}

func (c SXinfoStream) Key(key string) SXinfoStreamKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXinfoStreamKey)(c)
}

type XinfoStreamFullCount Completed

type SXinfoStreamFullCount SCompleted

func (c XinfoStreamFullCount) Build() Completed {
	return Completed(c)
}

func (c SXinfoStreamFullCount) Build() SCompleted {
	return SCompleted(c)
}

type XinfoStreamFullFull Completed

type SXinfoStreamFullFull SCompleted

func (c XinfoStreamFullFull) Count(count int64) XinfoStreamFullCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (XinfoStreamFullCount)(c)
}

func (c SXinfoStreamFullFull) Count(count int64) SXinfoStreamFullCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SXinfoStreamFullCount)(c)
}

func (c XinfoStreamFullFull) Build() Completed {
	return Completed(c)
}

func (c SXinfoStreamFullFull) Build() SCompleted {
	return SCompleted(c)
}

type XinfoStreamKey Completed

type SXinfoStreamKey SCompleted

func (c XinfoStreamKey) Full() XinfoStreamFullFull {
	c.cs.s = append(c.cs.s, "FULL")
	return (XinfoStreamFullFull)(c)
}

func (c SXinfoStreamKey) Full() SXinfoStreamFullFull {
	c.cs.s = append(c.cs.s, "FULL")
	return (SXinfoStreamFullFull)(c)
}

func (c XinfoStreamKey) Build() Completed {
	return Completed(c)
}

func (c SXinfoStreamKey) Build() SCompleted {
	return SCompleted(c)
}

type Xlen Completed

type SXlen SCompleted

func (b *Builder) Xlen() (c Xlen) {
	c = Xlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XLEN")
	return c
}

func (b *SBuilder) Xlen() (c SXlen) {
	c = SXlen{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XLEN")
	return c
}

func (c Xlen) Key(key string) XlenKey {
	c.cs.s = append(c.cs.s, key)
	return (XlenKey)(c)
}

func (c SXlen) Key(key string) SXlenKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXlenKey)(c)
}

type XlenKey Completed

type SXlenKey SCompleted

func (c XlenKey) Build() Completed {
	return Completed(c)
}

func (c SXlenKey) Build() SCompleted {
	return SCompleted(c)
}

type Xpending Completed

type SXpending SCompleted

func (b *Builder) Xpending() (c Xpending) {
	c = Xpending{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XPENDING")
	return c
}

func (b *SBuilder) Xpending() (c SXpending) {
	c = SXpending{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XPENDING")
	return c
}

func (c Xpending) Key(key string) XpendingKey {
	c.cs.s = append(c.cs.s, key)
	return (XpendingKey)(c)
}

func (c SXpending) Key(key string) SXpendingKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXpendingKey)(c)
}

type XpendingFiltersConsumer Completed

type SXpendingFiltersConsumer SCompleted

func (c XpendingFiltersConsumer) Build() Completed {
	return Completed(c)
}

func (c SXpendingFiltersConsumer) Build() SCompleted {
	return SCompleted(c)
}

type XpendingFiltersCount Completed

type SXpendingFiltersCount SCompleted

func (c XpendingFiltersCount) Consumer(consumer string) XpendingFiltersConsumer {
	c.cs.s = append(c.cs.s, consumer)
	return (XpendingFiltersConsumer)(c)
}

func (c SXpendingFiltersCount) Consumer(consumer string) SXpendingFiltersConsumer {
	c.cs.s = append(c.cs.s, consumer)
	return (SXpendingFiltersConsumer)(c)
}

func (c XpendingFiltersCount) Build() Completed {
	return Completed(c)
}

func (c SXpendingFiltersCount) Build() SCompleted {
	return SCompleted(c)
}

type XpendingFiltersEnd Completed

type SXpendingFiltersEnd SCompleted

func (c XpendingFiltersEnd) Count(count int64) XpendingFiltersCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (XpendingFiltersCount)(c)
}

func (c SXpendingFiltersEnd) Count(count int64) SXpendingFiltersCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SXpendingFiltersCount)(c)
}

type XpendingFiltersIdle Completed

type SXpendingFiltersIdle SCompleted

func (c XpendingFiltersIdle) Start(start string) XpendingFiltersStart {
	c.cs.s = append(c.cs.s, start)
	return (XpendingFiltersStart)(c)
}

func (c SXpendingFiltersIdle) Start(start string) SXpendingFiltersStart {
	c.cs.s = append(c.cs.s, start)
	return (SXpendingFiltersStart)(c)
}

type XpendingFiltersStart Completed

type SXpendingFiltersStart SCompleted

func (c XpendingFiltersStart) End(end string) XpendingFiltersEnd {
	c.cs.s = append(c.cs.s, end)
	return (XpendingFiltersEnd)(c)
}

func (c SXpendingFiltersStart) End(end string) SXpendingFiltersEnd {
	c.cs.s = append(c.cs.s, end)
	return (SXpendingFiltersEnd)(c)
}

type XpendingGroup Completed

type SXpendingGroup SCompleted

func (c XpendingGroup) Idle(minIdleTime int64) XpendingFiltersIdle {
	c.cs.s = append(c.cs.s, "IDLE", strconv.FormatInt(minIdleTime, 10))
	return (XpendingFiltersIdle)(c)
}

func (c SXpendingGroup) Idle(minIdleTime int64) SXpendingFiltersIdle {
	c.cs.s = append(c.cs.s, "IDLE", strconv.FormatInt(minIdleTime, 10))
	return (SXpendingFiltersIdle)(c)
}

func (c XpendingGroup) Build() Completed {
	return Completed(c)
}

func (c SXpendingGroup) Build() SCompleted {
	return SCompleted(c)
}

type XpendingKey Completed

type SXpendingKey SCompleted

func (c XpendingKey) Group(group string) XpendingGroup {
	c.cs.s = append(c.cs.s, group)
	return (XpendingGroup)(c)
}

func (c SXpendingKey) Group(group string) SXpendingGroup {
	c.cs.s = append(c.cs.s, group)
	return (SXpendingGroup)(c)
}

type Xrange Completed

type SXrange SCompleted

func (b *Builder) Xrange() (c Xrange) {
	c = Xrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XRANGE")
	return c
}

func (b *SBuilder) Xrange() (c SXrange) {
	c = SXrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XRANGE")
	return c
}

func (c Xrange) Key(key string) XrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (XrangeKey)(c)
}

func (c SXrange) Key(key string) SXrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXrangeKey)(c)
}

type XrangeCount Completed

type SXrangeCount SCompleted

func (c XrangeCount) Build() Completed {
	return Completed(c)
}

func (c SXrangeCount) Build() SCompleted {
	return SCompleted(c)
}

type XrangeEnd Completed

type SXrangeEnd SCompleted

func (c XrangeEnd) Count(count int64) XrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (XrangeCount)(c)
}

func (c SXrangeEnd) Count(count int64) SXrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SXrangeCount)(c)
}

func (c XrangeEnd) Build() Completed {
	return Completed(c)
}

func (c SXrangeEnd) Build() SCompleted {
	return SCompleted(c)
}

type XrangeKey Completed

type SXrangeKey SCompleted

func (c XrangeKey) Start(start string) XrangeStart {
	c.cs.s = append(c.cs.s, start)
	return (XrangeStart)(c)
}

func (c SXrangeKey) Start(start string) SXrangeStart {
	c.cs.s = append(c.cs.s, start)
	return (SXrangeStart)(c)
}

type XrangeStart Completed

type SXrangeStart SCompleted

func (c XrangeStart) End(end string) XrangeEnd {
	c.cs.s = append(c.cs.s, end)
	return (XrangeEnd)(c)
}

func (c SXrangeStart) End(end string) SXrangeEnd {
	c.cs.s = append(c.cs.s, end)
	return (SXrangeEnd)(c)
}

type Xread Completed

type SXread SCompleted

func (b *Builder) Xread() (c Xread) {
	c = Xread{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XREAD")
	return c
}

func (b *SBuilder) Xread() (c SXread) {
	c = SXread{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XREAD")
	return c
}

func (c Xread) Count(count int64) XreadCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (XreadCount)(c)
}

func (c SXread) Count(count int64) SXreadCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SXreadCount)(c)
}

func (c Xread) Block(milliseconds int64) XreadBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadBlock)(c)
}

func (c SXread) Block(milliseconds int64) SXreadBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadBlock)(c)
}

func (c Xread) Streams() XreadStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadStreams)(c)
}

func (c SXread) Streams() SXreadStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadStreams)(c)
}

type XreadBlock Completed

type SXreadBlock SCompleted

func (c XreadBlock) Streams() XreadStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadStreams)(c)
}

func (c SXreadBlock) Streams() SXreadStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadStreams)(c)
}

type XreadCount Completed

type SXreadCount SCompleted

func (c XreadCount) Block(milliseconds int64) XreadBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadBlock)(c)
}

func (c SXreadCount) Block(milliseconds int64) SXreadBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadBlock)(c)
}

func (c XreadCount) Streams() XreadStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadStreams)(c)
}

func (c SXreadCount) Streams() SXreadStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadStreams)(c)
}

type XreadId Completed

type SXreadId SCompleted

func (c XreadId) Id(id ...string) XreadId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c SXreadId) Id(id ...string) SXreadId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c XreadId) Build() Completed {
	return Completed(c)
}

func (c SXreadId) Build() SCompleted {
	return SCompleted(c)
}

type XreadKey Completed

type SXreadKey SCompleted

func (c XreadKey) Key(key ...string) XreadKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SXreadKey) Key(key ...string) SXreadKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c XreadKey) Id(id ...string) XreadId {
	c.cs.s = append(c.cs.s, id...)
	return (XreadId)(c)
}

func (c SXreadKey) Id(id ...string) SXreadId {
	c.cs.s = append(c.cs.s, id...)
	return (SXreadId)(c)
}

type XreadStreams Completed

type SXreadStreams SCompleted

func (c XreadStreams) Key(key ...string) XreadKey {
	c.cs.s = append(c.cs.s, key...)
	return (XreadKey)(c)
}

func (c SXreadStreams) Key(key ...string) SXreadKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SXreadKey)(c)
}

type Xreadgroup Completed

type SXreadgroup SCompleted

func (b *Builder) Xreadgroup() (c Xreadgroup) {
	c = Xreadgroup{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XREADGROUP")
	return c
}

func (b *SBuilder) Xreadgroup() (c SXreadgroup) {
	c = SXreadgroup{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XREADGROUP")
	return c
}

func (c Xreadgroup) Group(group string, consumer string) XreadgroupGroup {
	c.cs.s = append(c.cs.s, "GROUP", group, consumer)
	return (XreadgroupGroup)(c)
}

func (c SXreadgroup) Group(group string, consumer string) SXreadgroupGroup {
	c.cs.s = append(c.cs.s, "GROUP", group, consumer)
	return (SXreadgroupGroup)(c)
}

type XreadgroupBlock Completed

type SXreadgroupBlock SCompleted

func (c XreadgroupBlock) Noack() XreadgroupNoack {
	c.cs.s = append(c.cs.s, "NOACK")
	return (XreadgroupNoack)(c)
}

func (c SXreadgroupBlock) Noack() SXreadgroupNoack {
	c.cs.s = append(c.cs.s, "NOACK")
	return (SXreadgroupNoack)(c)
}

func (c XreadgroupBlock) Streams() XreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupBlock) Streams() SXreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupCount Completed

type SXreadgroupCount SCompleted

func (c XreadgroupCount) Block(milliseconds int64) XreadgroupBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadgroupBlock)(c)
}

func (c SXreadgroupCount) Block(milliseconds int64) SXreadgroupBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadgroupBlock)(c)
}

func (c XreadgroupCount) Noack() XreadgroupNoack {
	c.cs.s = append(c.cs.s, "NOACK")
	return (XreadgroupNoack)(c)
}

func (c SXreadgroupCount) Noack() SXreadgroupNoack {
	c.cs.s = append(c.cs.s, "NOACK")
	return (SXreadgroupNoack)(c)
}

func (c XreadgroupCount) Streams() XreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupCount) Streams() SXreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupGroup Completed

type SXreadgroupGroup SCompleted

func (c XreadgroupGroup) Count(count int64) XreadgroupCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (XreadgroupCount)(c)
}

func (c SXreadgroupGroup) Count(count int64) SXreadgroupCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SXreadgroupCount)(c)
}

func (c XreadgroupGroup) Block(milliseconds int64) XreadgroupBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (XreadgroupBlock)(c)
}

func (c SXreadgroupGroup) Block(milliseconds int64) SXreadgroupBlock {
	c.cf = blockTag
	c.cs.s = append(c.cs.s, "BLOCK", strconv.FormatInt(milliseconds, 10))
	return (SXreadgroupBlock)(c)
}

func (c XreadgroupGroup) Noack() XreadgroupNoack {
	c.cs.s = append(c.cs.s, "NOACK")
	return (XreadgroupNoack)(c)
}

func (c SXreadgroupGroup) Noack() SXreadgroupNoack {
	c.cs.s = append(c.cs.s, "NOACK")
	return (SXreadgroupNoack)(c)
}

func (c XreadgroupGroup) Streams() XreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupGroup) Streams() SXreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupId Completed

type SXreadgroupId SCompleted

func (c XreadgroupId) Id(id ...string) XreadgroupId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c SXreadgroupId) Id(id ...string) SXreadgroupId {
	c.cs.s = append(c.cs.s, id...)
	return c
}

func (c XreadgroupId) Build() Completed {
	return Completed(c)
}

func (c SXreadgroupId) Build() SCompleted {
	return SCompleted(c)
}

type XreadgroupKey Completed

type SXreadgroupKey SCompleted

func (c XreadgroupKey) Key(key ...string) XreadgroupKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SXreadgroupKey) Key(key ...string) SXreadgroupKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c XreadgroupKey) Id(id ...string) XreadgroupId {
	c.cs.s = append(c.cs.s, id...)
	return (XreadgroupId)(c)
}

func (c SXreadgroupKey) Id(id ...string) SXreadgroupId {
	c.cs.s = append(c.cs.s, id...)
	return (SXreadgroupId)(c)
}

type XreadgroupNoack Completed

type SXreadgroupNoack SCompleted

func (c XreadgroupNoack) Streams() XreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (XreadgroupStreams)(c)
}

func (c SXreadgroupNoack) Streams() SXreadgroupStreams {
	c.cs.s = append(c.cs.s, "STREAMS")
	return (SXreadgroupStreams)(c)
}

type XreadgroupStreams Completed

type SXreadgroupStreams SCompleted

func (c XreadgroupStreams) Key(key ...string) XreadgroupKey {
	c.cs.s = append(c.cs.s, key...)
	return (XreadgroupKey)(c)
}

func (c SXreadgroupStreams) Key(key ...string) SXreadgroupKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SXreadgroupKey)(c)
}

type Xrevrange Completed

type SXrevrange SCompleted

func (b *Builder) Xrevrange() (c Xrevrange) {
	c = Xrevrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XREVRANGE")
	return c
}

func (b *SBuilder) Xrevrange() (c SXrevrange) {
	c = SXrevrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "XREVRANGE")
	return c
}

func (c Xrevrange) Key(key string) XrevrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (XrevrangeKey)(c)
}

func (c SXrevrange) Key(key string) SXrevrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXrevrangeKey)(c)
}

type XrevrangeCount Completed

type SXrevrangeCount SCompleted

func (c XrevrangeCount) Build() Completed {
	return Completed(c)
}

func (c SXrevrangeCount) Build() SCompleted {
	return SCompleted(c)
}

type XrevrangeEnd Completed

type SXrevrangeEnd SCompleted

func (c XrevrangeEnd) Start(start string) XrevrangeStart {
	c.cs.s = append(c.cs.s, start)
	return (XrevrangeStart)(c)
}

func (c SXrevrangeEnd) Start(start string) SXrevrangeStart {
	c.cs.s = append(c.cs.s, start)
	return (SXrevrangeStart)(c)
}

type XrevrangeKey Completed

type SXrevrangeKey SCompleted

func (c XrevrangeKey) End(end string) XrevrangeEnd {
	c.cs.s = append(c.cs.s, end)
	return (XrevrangeEnd)(c)
}

func (c SXrevrangeKey) End(end string) SXrevrangeEnd {
	c.cs.s = append(c.cs.s, end)
	return (SXrevrangeEnd)(c)
}

type XrevrangeStart Completed

type SXrevrangeStart SCompleted

func (c XrevrangeStart) Count(count int64) XrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (XrevrangeCount)(c)
}

func (c SXrevrangeStart) Count(count int64) SXrevrangeCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SXrevrangeCount)(c)
}

func (c XrevrangeStart) Build() Completed {
	return Completed(c)
}

func (c SXrevrangeStart) Build() SCompleted {
	return SCompleted(c)
}

type Xtrim Completed

type SXtrim SCompleted

func (b *Builder) Xtrim() (c Xtrim) {
	c = Xtrim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XTRIM")
	return c
}

func (b *SBuilder) Xtrim() (c SXtrim) {
	c = SXtrim{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "XTRIM")
	return c
}

func (c Xtrim) Key(key string) XtrimKey {
	c.cs.s = append(c.cs.s, key)
	return (XtrimKey)(c)
}

func (c SXtrim) Key(key string) SXtrimKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SXtrimKey)(c)
}

type XtrimKey Completed

type SXtrimKey SCompleted

func (c XtrimKey) Maxlen() XtrimTrimStrategyMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN")
	return (XtrimTrimStrategyMaxlen)(c)
}

func (c SXtrimKey) Maxlen() SXtrimTrimStrategyMaxlen {
	c.cs.s = append(c.cs.s, "MAXLEN")
	return (SXtrimTrimStrategyMaxlen)(c)
}

func (c XtrimKey) Minid() XtrimTrimStrategyMinid {
	c.cs.s = append(c.cs.s, "MINID")
	return (XtrimTrimStrategyMinid)(c)
}

func (c SXtrimKey) Minid() SXtrimTrimStrategyMinid {
	c.cs.s = append(c.cs.s, "MINID")
	return (SXtrimTrimStrategyMinid)(c)
}

type XtrimTrimLimit Completed

type SXtrimTrimLimit SCompleted

func (c XtrimTrimLimit) Build() Completed {
	return Completed(c)
}

func (c SXtrimTrimLimit) Build() SCompleted {
	return SCompleted(c)
}

type XtrimTrimOperatorAlmost Completed

type SXtrimTrimOperatorAlmost SCompleted

func (c XtrimTrimOperatorAlmost) Threshold(threshold string) XtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimOperatorAlmost) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimOperatorExact Completed

type SXtrimTrimOperatorExact SCompleted

func (c XtrimTrimOperatorExact) Threshold(threshold string) XtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimOperatorExact) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimStrategyMaxlen Completed

type SXtrimTrimStrategyMaxlen SCompleted

func (c XtrimTrimStrategyMaxlen) Exact() XtrimTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (XtrimTrimOperatorExact)(c)
}

func (c SXtrimTrimStrategyMaxlen) Exact() SXtrimTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (SXtrimTrimOperatorExact)(c)
}

func (c XtrimTrimStrategyMaxlen) Almost() XtrimTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (XtrimTrimOperatorAlmost)(c)
}

func (c SXtrimTrimStrategyMaxlen) Almost() SXtrimTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (SXtrimTrimOperatorAlmost)(c)
}

func (c XtrimTrimStrategyMaxlen) Threshold(threshold string) XtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimStrategyMaxlen) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimStrategyMinid Completed

type SXtrimTrimStrategyMinid SCompleted

func (c XtrimTrimStrategyMinid) Exact() XtrimTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (XtrimTrimOperatorExact)(c)
}

func (c SXtrimTrimStrategyMinid) Exact() SXtrimTrimOperatorExact {
	c.cs.s = append(c.cs.s, "=")
	return (SXtrimTrimOperatorExact)(c)
}

func (c XtrimTrimStrategyMinid) Almost() XtrimTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (XtrimTrimOperatorAlmost)(c)
}

func (c SXtrimTrimStrategyMinid) Almost() SXtrimTrimOperatorAlmost {
	c.cs.s = append(c.cs.s, "~")
	return (SXtrimTrimOperatorAlmost)(c)
}

func (c XtrimTrimStrategyMinid) Threshold(threshold string) XtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (XtrimTrimThreshold)(c)
}

func (c SXtrimTrimStrategyMinid) Threshold(threshold string) SXtrimTrimThreshold {
	c.cs.s = append(c.cs.s, threshold)
	return (SXtrimTrimThreshold)(c)
}

type XtrimTrimThreshold Completed

type SXtrimTrimThreshold SCompleted

func (c XtrimTrimThreshold) Limit(count int64) XtrimTrimLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(count, 10))
	return (XtrimTrimLimit)(c)
}

func (c SXtrimTrimThreshold) Limit(count int64) SXtrimTrimLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(count, 10))
	return (SXtrimTrimLimit)(c)
}

func (c XtrimTrimThreshold) Build() Completed {
	return Completed(c)
}

func (c SXtrimTrimThreshold) Build() SCompleted {
	return SCompleted(c)
}

type Zadd Completed

type SZadd SCompleted

func (b *Builder) Zadd() (c Zadd) {
	c = Zadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZADD")
	return c
}

func (b *SBuilder) Zadd() (c SZadd) {
	c = SZadd{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZADD")
	return c
}

func (c Zadd) Key(key string) ZaddKey {
	c.cs.s = append(c.cs.s, key)
	return (ZaddKey)(c)
}

func (c SZadd) Key(key string) SZaddKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZaddKey)(c)
}

type ZaddChangeCh Completed

type SZaddChangeCh SCompleted

func (c ZaddChangeCh) Incr() ZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddChangeCh) Incr() SZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddChangeCh) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddChangeCh) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddComparisonGt Completed

type SZaddComparisonGt SCompleted

func (c ZaddComparisonGt) Ch() ZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddComparisonGt) Ch() SZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddComparisonGt) Incr() ZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddComparisonGt) Incr() SZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddComparisonGt) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddComparisonGt) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddComparisonLt Completed

type SZaddComparisonLt SCompleted

func (c ZaddComparisonLt) Ch() ZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddComparisonLt) Ch() SZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddComparisonLt) Incr() ZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddComparisonLt) Incr() SZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddComparisonLt) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddComparisonLt) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddConditionNx Completed

type SZaddConditionNx SCompleted

func (c ZaddConditionNx) Gt() ZaddComparisonGt {
	c.cs.s = append(c.cs.s, "GT")
	return (ZaddComparisonGt)(c)
}

func (c SZaddConditionNx) Gt() SZaddComparisonGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SZaddComparisonGt)(c)
}

func (c ZaddConditionNx) Lt() ZaddComparisonLt {
	c.cs.s = append(c.cs.s, "LT")
	return (ZaddComparisonLt)(c)
}

func (c SZaddConditionNx) Lt() SZaddComparisonLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SZaddComparisonLt)(c)
}

func (c ZaddConditionNx) Ch() ZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddConditionNx) Ch() SZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddConditionNx) Incr() ZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddConditionNx) Incr() SZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddConditionNx) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddConditionNx) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddConditionXx Completed

type SZaddConditionXx SCompleted

func (c ZaddConditionXx) Gt() ZaddComparisonGt {
	c.cs.s = append(c.cs.s, "GT")
	return (ZaddComparisonGt)(c)
}

func (c SZaddConditionXx) Gt() SZaddComparisonGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SZaddComparisonGt)(c)
}

func (c ZaddConditionXx) Lt() ZaddComparisonLt {
	c.cs.s = append(c.cs.s, "LT")
	return (ZaddComparisonLt)(c)
}

func (c SZaddConditionXx) Lt() SZaddComparisonLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SZaddComparisonLt)(c)
}

func (c ZaddConditionXx) Ch() ZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddConditionXx) Ch() SZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddConditionXx) Incr() ZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddConditionXx) Incr() SZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddConditionXx) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddConditionXx) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddIncrementIncr Completed

type SZaddIncrementIncr SCompleted

func (c ZaddIncrementIncr) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddIncrementIncr) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddKey Completed

type SZaddKey SCompleted

func (c ZaddKey) Nx() ZaddConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (ZaddConditionNx)(c)
}

func (c SZaddKey) Nx() SZaddConditionNx {
	c.cs.s = append(c.cs.s, "NX")
	return (SZaddConditionNx)(c)
}

func (c ZaddKey) Xx() ZaddConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (ZaddConditionXx)(c)
}

func (c SZaddKey) Xx() SZaddConditionXx {
	c.cs.s = append(c.cs.s, "XX")
	return (SZaddConditionXx)(c)
}

func (c ZaddKey) Gt() ZaddComparisonGt {
	c.cs.s = append(c.cs.s, "GT")
	return (ZaddComparisonGt)(c)
}

func (c SZaddKey) Gt() SZaddComparisonGt {
	c.cs.s = append(c.cs.s, "GT")
	return (SZaddComparisonGt)(c)
}

func (c ZaddKey) Lt() ZaddComparisonLt {
	c.cs.s = append(c.cs.s, "LT")
	return (ZaddComparisonLt)(c)
}

func (c SZaddKey) Lt() SZaddComparisonLt {
	c.cs.s = append(c.cs.s, "LT")
	return (SZaddComparisonLt)(c)
}

func (c ZaddKey) Ch() ZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (ZaddChangeCh)(c)
}

func (c SZaddKey) Ch() SZaddChangeCh {
	c.cs.s = append(c.cs.s, "CH")
	return (SZaddChangeCh)(c)
}

func (c ZaddKey) Incr() ZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (ZaddIncrementIncr)(c)
}

func (c SZaddKey) Incr() SZaddIncrementIncr {
	c.cs.s = append(c.cs.s, "INCR")
	return (SZaddIncrementIncr)(c)
}

func (c ZaddKey) ScoreMember() ZaddScoreMember {
	return (ZaddScoreMember)(c)
}

func (c SZaddKey) ScoreMember() SZaddScoreMember {
	return (SZaddScoreMember)(c)
}

type ZaddScoreMember Completed

type SZaddScoreMember SCompleted

func (c ZaddScoreMember) ScoreMember(score float64, member string) ZaddScoreMember {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(score, 'f', -1, 64), member)
	return c
}

func (c SZaddScoreMember) ScoreMember(score float64, member string) SZaddScoreMember {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(score, 'f', -1, 64), member)
	return c
}

func (c ZaddScoreMember) Build() Completed {
	return Completed(c)
}

func (c SZaddScoreMember) Build() SCompleted {
	return SCompleted(c)
}

type Zcard Completed

type SZcard SCompleted

func (b *Builder) Zcard() (c Zcard) {
	c = Zcard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZCARD")
	return c
}

func (b *SBuilder) Zcard() (c SZcard) {
	c = SZcard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZCARD")
	return c
}

func (c Zcard) Key(key string) ZcardKey {
	c.cs.s = append(c.cs.s, key)
	return (ZcardKey)(c)
}

func (c SZcard) Key(key string) SZcardKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZcardKey)(c)
}

type ZcardKey Completed

type SZcardKey SCompleted

func (c ZcardKey) Build() Completed {
	return Completed(c)
}

func (c SZcardKey) Build() SCompleted {
	return SCompleted(c)
}

func (c ZcardKey) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZcardKey) Cache() SCacheable {
	return SCacheable(c)
}

type Zcount Completed

type SZcount SCompleted

func (b *Builder) Zcount() (c Zcount) {
	c = Zcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZCOUNT")
	return c
}

func (b *SBuilder) Zcount() (c SZcount) {
	c = SZcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZCOUNT")
	return c
}

func (c Zcount) Key(key string) ZcountKey {
	c.cs.s = append(c.cs.s, key)
	return (ZcountKey)(c)
}

func (c SZcount) Key(key string) SZcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZcountKey)(c)
}

type ZcountKey Completed

type SZcountKey SCompleted

func (c ZcountKey) Min(min float64) ZcountMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZcountMin)(c)
}

func (c SZcountKey) Min(min float64) SZcountMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZcountMin)(c)
}

type ZcountMax Completed

type SZcountMax SCompleted

func (c ZcountMax) Build() Completed {
	return Completed(c)
}

func (c SZcountMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZcountMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZcountMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZcountMin Completed

type SZcountMin SCompleted

func (c ZcountMin) Max(max float64) ZcountMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZcountMax)(c)
}

func (c SZcountMin) Max(max float64) SZcountMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZcountMax)(c)
}

type Zdiff Completed

type SZdiff SCompleted

func (b *Builder) Zdiff() (c Zdiff) {
	c = Zdiff{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZDIFF")
	return c
}

func (b *SBuilder) Zdiff() (c SZdiff) {
	c = SZdiff{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZDIFF")
	return c
}

func (c Zdiff) Numkeys(numkeys int64) ZdiffNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZdiffNumkeys)(c)
}

func (c SZdiff) Numkeys(numkeys int64) SZdiffNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZdiffNumkeys)(c)
}

type ZdiffKey Completed

type SZdiffKey SCompleted

func (c ZdiffKey) Key(key ...string) ZdiffKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZdiffKey) Key(key ...string) SZdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZdiffKey) Withscores() ZdiffWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZdiffWithscores)(c)
}

func (c SZdiffKey) Withscores() SZdiffWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZdiffWithscores)(c)
}

func (c ZdiffKey) Build() Completed {
	return Completed(c)
}

func (c SZdiffKey) Build() SCompleted {
	return SCompleted(c)
}

type ZdiffNumkeys Completed

type SZdiffNumkeys SCompleted

func (c ZdiffNumkeys) Key(key ...string) ZdiffKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZdiffKey)(c)
}

func (c SZdiffNumkeys) Key(key ...string) SZdiffKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZdiffKey)(c)
}

type ZdiffWithscores Completed

type SZdiffWithscores SCompleted

func (c ZdiffWithscores) Build() Completed {
	return Completed(c)
}

func (c SZdiffWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zdiffstore Completed

type SZdiffstore SCompleted

func (b *Builder) Zdiffstore() (c Zdiffstore) {
	c = Zdiffstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZDIFFSTORE")
	return c
}

func (b *SBuilder) Zdiffstore() (c SZdiffstore) {
	c = SZdiffstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZDIFFSTORE")
	return c
}

func (c Zdiffstore) Destination(destination string) ZdiffstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (ZdiffstoreDestination)(c)
}

func (c SZdiffstore) Destination(destination string) SZdiffstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SZdiffstoreDestination)(c)
}

type ZdiffstoreDestination Completed

type SZdiffstoreDestination SCompleted

func (c ZdiffstoreDestination) Numkeys(numkeys int64) ZdiffstoreNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZdiffstoreNumkeys)(c)
}

func (c SZdiffstoreDestination) Numkeys(numkeys int64) SZdiffstoreNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZdiffstoreNumkeys)(c)
}

type ZdiffstoreKey Completed

type SZdiffstoreKey SCompleted

func (c ZdiffstoreKey) Key(key ...string) ZdiffstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZdiffstoreKey) Key(key ...string) SZdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZdiffstoreKey) Build() Completed {
	return Completed(c)
}

func (c SZdiffstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type ZdiffstoreNumkeys Completed

type SZdiffstoreNumkeys SCompleted

func (c ZdiffstoreNumkeys) Key(key ...string) ZdiffstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZdiffstoreKey)(c)
}

func (c SZdiffstoreNumkeys) Key(key ...string) SZdiffstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZdiffstoreKey)(c)
}

type Zincrby Completed

type SZincrby SCompleted

func (b *Builder) Zincrby() (c Zincrby) {
	c = Zincrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZINCRBY")
	return c
}

func (b *SBuilder) Zincrby() (c SZincrby) {
	c = SZincrby{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZINCRBY")
	return c
}

func (c Zincrby) Key(key string) ZincrbyKey {
	c.cs.s = append(c.cs.s, key)
	return (ZincrbyKey)(c)
}

func (c SZincrby) Key(key string) SZincrbyKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZincrbyKey)(c)
}

type ZincrbyIncrement Completed

type SZincrbyIncrement SCompleted

func (c ZincrbyIncrement) Member(member string) ZincrbyMember {
	c.cs.s = append(c.cs.s, member)
	return (ZincrbyMember)(c)
}

func (c SZincrbyIncrement) Member(member string) SZincrbyMember {
	c.cs.s = append(c.cs.s, member)
	return (SZincrbyMember)(c)
}

type ZincrbyKey Completed

type SZincrbyKey SCompleted

func (c ZincrbyKey) Increment(increment int64) ZincrbyIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (ZincrbyIncrement)(c)
}

func (c SZincrbyKey) Increment(increment int64) SZincrbyIncrement {
	c.cs.s = append(c.cs.s, strconv.FormatInt(increment, 10))
	return (SZincrbyIncrement)(c)
}

type ZincrbyMember Completed

type SZincrbyMember SCompleted

func (c ZincrbyMember) Build() Completed {
	return Completed(c)
}

func (c SZincrbyMember) Build() SCompleted {
	return SCompleted(c)
}

type Zinter Completed

type SZinter SCompleted

func (b *Builder) Zinter() (c Zinter) {
	c = Zinter{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZINTER")
	return c
}

func (b *SBuilder) Zinter() (c SZinter) {
	c = SZinter{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZINTER")
	return c
}

func (c Zinter) Numkeys(numkeys int64) ZinterNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZinterNumkeys)(c)
}

func (c SZinter) Numkeys(numkeys int64) SZinterNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZinterNumkeys)(c)
}

type ZinterAggregateMax Completed

type SZinterAggregateMax SCompleted

func (c ZinterAggregateMax) Withscores() ZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterAggregateMax) Withscores() SZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZinterAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZinterAggregateMin Completed

type SZinterAggregateMin SCompleted

func (c ZinterAggregateMin) Withscores() ZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterAggregateMin) Withscores() SZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZinterAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZinterAggregateSum Completed

type SZinterAggregateSum SCompleted

func (c ZinterAggregateSum) Withscores() ZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterAggregateSum) Withscores() SZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZinterAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZinterKey Completed

type SZinterKey SCompleted

func (c ZinterKey) Key(key ...string) ZinterKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZinterKey) Key(key ...string) SZinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZinterKey) Weights(weight ...int64) ZinterWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ZinterWeights)(c)
}

func (c SZinterKey) Weights(weight ...int64) SZinterWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SZinterWeights)(c)
}

func (c ZinterKey) AggregateSum() ZinterAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZinterAggregateSum)(c)
}

func (c SZinterKey) AggregateSum() SZinterAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZinterAggregateSum)(c)
}

func (c ZinterKey) AggregateMin() ZinterAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZinterAggregateMin)(c)
}

func (c SZinterKey) AggregateMin() SZinterAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZinterAggregateMin)(c)
}

func (c ZinterKey) AggregateMax() ZinterAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZinterAggregateMax)(c)
}

func (c SZinterKey) AggregateMax() SZinterAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZinterAggregateMax)(c)
}

func (c ZinterKey) Withscores() ZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterKey) Withscores() SZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterKey) Build() Completed {
	return Completed(c)
}

func (c SZinterKey) Build() SCompleted {
	return SCompleted(c)
}

type ZinterNumkeys Completed

type SZinterNumkeys SCompleted

func (c ZinterNumkeys) Key(key ...string) ZinterKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZinterKey)(c)
}

func (c SZinterNumkeys) Key(key ...string) SZinterKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZinterKey)(c)
}

type ZinterWeights Completed

type SZinterWeights SCompleted

func (c ZinterWeights) Weights(weight ...int64) ZinterWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZinterWeights) Weights(weight ...int64) SZinterWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZinterWeights) AggregateSum() ZinterAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZinterAggregateSum)(c)
}

func (c SZinterWeights) AggregateSum() SZinterAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZinterAggregateSum)(c)
}

func (c ZinterWeights) AggregateMin() ZinterAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZinterAggregateMin)(c)
}

func (c SZinterWeights) AggregateMin() SZinterAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZinterAggregateMin)(c)
}

func (c ZinterWeights) AggregateMax() ZinterAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZinterAggregateMax)(c)
}

func (c SZinterWeights) AggregateMax() SZinterAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZinterAggregateMax)(c)
}

func (c ZinterWeights) Withscores() ZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZinterWithscores)(c)
}

func (c SZinterWeights) Withscores() SZinterWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZinterWithscores)(c)
}

func (c ZinterWeights) Build() Completed {
	return Completed(c)
}

func (c SZinterWeights) Build() SCompleted {
	return SCompleted(c)
}

type ZinterWithscores Completed

type SZinterWithscores SCompleted

func (c ZinterWithscores) Build() Completed {
	return Completed(c)
}

func (c SZinterWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zintercard Completed

type SZintercard SCompleted

func (b *Builder) Zintercard() (c Zintercard) {
	c = Zintercard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZINTERCARD")
	return c
}

func (b *SBuilder) Zintercard() (c SZintercard) {
	c = SZintercard{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZINTERCARD")
	return c
}

func (c Zintercard) Numkeys(numkeys int64) ZintercardNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZintercardNumkeys)(c)
}

func (c SZintercard) Numkeys(numkeys int64) SZintercardNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZintercardNumkeys)(c)
}

type ZintercardKey Completed

type SZintercardKey SCompleted

func (c ZintercardKey) Key(key ...string) ZintercardKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZintercardKey) Key(key ...string) SZintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZintercardKey) Limit(limit int64) ZintercardLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(limit, 10))
	return (ZintercardLimit)(c)
}

func (c SZintercardKey) Limit(limit int64) SZintercardLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(limit, 10))
	return (SZintercardLimit)(c)
}

func (c ZintercardKey) Build() Completed {
	return Completed(c)
}

func (c SZintercardKey) Build() SCompleted {
	return SCompleted(c)
}

type ZintercardLimit Completed

type SZintercardLimit SCompleted

func (c ZintercardLimit) Build() Completed {
	return Completed(c)
}

func (c SZintercardLimit) Build() SCompleted {
	return SCompleted(c)
}

type ZintercardNumkeys Completed

type SZintercardNumkeys SCompleted

func (c ZintercardNumkeys) Key(key ...string) ZintercardKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZintercardKey)(c)
}

func (c SZintercardNumkeys) Key(key ...string) SZintercardKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZintercardKey)(c)
}

type Zinterstore Completed

type SZinterstore SCompleted

func (b *Builder) Zinterstore() (c Zinterstore) {
	c = Zinterstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZINTERSTORE")
	return c
}

func (b *SBuilder) Zinterstore() (c SZinterstore) {
	c = SZinterstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZINTERSTORE")
	return c
}

func (c Zinterstore) Destination(destination string) ZinterstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (ZinterstoreDestination)(c)
}

func (c SZinterstore) Destination(destination string) SZinterstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SZinterstoreDestination)(c)
}

type ZinterstoreAggregateMax Completed

type SZinterstoreAggregateMax SCompleted

func (c ZinterstoreAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreAggregateMin Completed

type SZinterstoreAggregateMin SCompleted

func (c ZinterstoreAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreAggregateSum Completed

type SZinterstoreAggregateSum SCompleted

func (c ZinterstoreAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreDestination Completed

type SZinterstoreDestination SCompleted

func (c ZinterstoreDestination) Numkeys(numkeys int64) ZinterstoreNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZinterstoreNumkeys)(c)
}

func (c SZinterstoreDestination) Numkeys(numkeys int64) SZinterstoreNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZinterstoreNumkeys)(c)
}

type ZinterstoreKey Completed

type SZinterstoreKey SCompleted

func (c ZinterstoreKey) Key(key ...string) ZinterstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZinterstoreKey) Key(key ...string) SZinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZinterstoreKey) Weights(weight ...int64) ZinterstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ZinterstoreWeights)(c)
}

func (c SZinterstoreKey) Weights(weight ...int64) SZinterstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SZinterstoreWeights)(c)
}

func (c ZinterstoreKey) AggregateSum() ZinterstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZinterstoreAggregateSum)(c)
}

func (c SZinterstoreKey) AggregateSum() SZinterstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZinterstoreAggregateSum)(c)
}

func (c ZinterstoreKey) AggregateMin() ZinterstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZinterstoreAggregateMin)(c)
}

func (c SZinterstoreKey) AggregateMin() SZinterstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZinterstoreAggregateMin)(c)
}

func (c ZinterstoreKey) AggregateMax() ZinterstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZinterstoreAggregateMax)(c)
}

func (c SZinterstoreKey) AggregateMax() SZinterstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZinterstoreAggregateMax)(c)
}

func (c ZinterstoreKey) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type ZinterstoreNumkeys Completed

type SZinterstoreNumkeys SCompleted

func (c ZinterstoreNumkeys) Key(key ...string) ZinterstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZinterstoreKey)(c)
}

func (c SZinterstoreNumkeys) Key(key ...string) SZinterstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZinterstoreKey)(c)
}

type ZinterstoreWeights Completed

type SZinterstoreWeights SCompleted

func (c ZinterstoreWeights) Weights(weight ...int64) ZinterstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZinterstoreWeights) Weights(weight ...int64) SZinterstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZinterstoreWeights) AggregateSum() ZinterstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZinterstoreAggregateSum)(c)
}

func (c SZinterstoreWeights) AggregateSum() SZinterstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZinterstoreAggregateSum)(c)
}

func (c ZinterstoreWeights) AggregateMin() ZinterstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZinterstoreAggregateMin)(c)
}

func (c SZinterstoreWeights) AggregateMin() SZinterstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZinterstoreAggregateMin)(c)
}

func (c ZinterstoreWeights) AggregateMax() ZinterstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZinterstoreAggregateMax)(c)
}

func (c SZinterstoreWeights) AggregateMax() SZinterstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZinterstoreAggregateMax)(c)
}

func (c ZinterstoreWeights) Build() Completed {
	return Completed(c)
}

func (c SZinterstoreWeights) Build() SCompleted {
	return SCompleted(c)
}

type Zlexcount Completed

type SZlexcount SCompleted

func (b *Builder) Zlexcount() (c Zlexcount) {
	c = Zlexcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZLEXCOUNT")
	return c
}

func (b *SBuilder) Zlexcount() (c SZlexcount) {
	c = SZlexcount{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZLEXCOUNT")
	return c
}

func (c Zlexcount) Key(key string) ZlexcountKey {
	c.cs.s = append(c.cs.s, key)
	return (ZlexcountKey)(c)
}

func (c SZlexcount) Key(key string) SZlexcountKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZlexcountKey)(c)
}

type ZlexcountKey Completed

type SZlexcountKey SCompleted

func (c ZlexcountKey) Min(min string) ZlexcountMin {
	c.cs.s = append(c.cs.s, min)
	return (ZlexcountMin)(c)
}

func (c SZlexcountKey) Min(min string) SZlexcountMin {
	c.cs.s = append(c.cs.s, min)
	return (SZlexcountMin)(c)
}

type ZlexcountMax Completed

type SZlexcountMax SCompleted

func (c ZlexcountMax) Build() Completed {
	return Completed(c)
}

func (c SZlexcountMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZlexcountMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZlexcountMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZlexcountMin Completed

type SZlexcountMin SCompleted

func (c ZlexcountMin) Max(max string) ZlexcountMax {
	c.cs.s = append(c.cs.s, max)
	return (ZlexcountMax)(c)
}

func (c SZlexcountMin) Max(max string) SZlexcountMax {
	c.cs.s = append(c.cs.s, max)
	return (SZlexcountMax)(c)
}

type Zmpop Completed

type SZmpop SCompleted

func (b *Builder) Zmpop() (c Zmpop) {
	c = Zmpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZMPOP")
	return c
}

func (b *SBuilder) Zmpop() (c SZmpop) {
	c = SZmpop{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZMPOP")
	return c
}

func (c Zmpop) Numkeys(numkeys int64) ZmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZmpopNumkeys)(c)
}

func (c SZmpop) Numkeys(numkeys int64) SZmpopNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZmpopNumkeys)(c)
}

type ZmpopCount Completed

type SZmpopCount SCompleted

func (c ZmpopCount) Build() Completed {
	return Completed(c)
}

func (c SZmpopCount) Build() SCompleted {
	return SCompleted(c)
}

type ZmpopKey Completed

type SZmpopKey SCompleted

func (c ZmpopKey) Key(key ...string) ZmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZmpopKey) Key(key ...string) SZmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZmpopKey) Min() ZmpopWhereMin {
	c.cs.s = append(c.cs.s, "MIN")
	return (ZmpopWhereMin)(c)
}

func (c SZmpopKey) Min() SZmpopWhereMin {
	c.cs.s = append(c.cs.s, "MIN")
	return (SZmpopWhereMin)(c)
}

func (c ZmpopKey) Max() ZmpopWhereMax {
	c.cs.s = append(c.cs.s, "MAX")
	return (ZmpopWhereMax)(c)
}

func (c SZmpopKey) Max() SZmpopWhereMax {
	c.cs.s = append(c.cs.s, "MAX")
	return (SZmpopWhereMax)(c)
}

type ZmpopNumkeys Completed

type SZmpopNumkeys SCompleted

func (c ZmpopNumkeys) Key(key ...string) ZmpopKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZmpopKey)(c)
}

func (c SZmpopNumkeys) Key(key ...string) SZmpopKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZmpopKey)(c)
}

type ZmpopWhereMax Completed

type SZmpopWhereMax SCompleted

func (c ZmpopWhereMax) Count(count int64) ZmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (ZmpopCount)(c)
}

func (c SZmpopWhereMax) Count(count int64) SZmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SZmpopCount)(c)
}

func (c ZmpopWhereMax) Build() Completed {
	return Completed(c)
}

func (c SZmpopWhereMax) Build() SCompleted {
	return SCompleted(c)
}

type ZmpopWhereMin Completed

type SZmpopWhereMin SCompleted

func (c ZmpopWhereMin) Count(count int64) ZmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (ZmpopCount)(c)
}

func (c SZmpopWhereMin) Count(count int64) SZmpopCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SZmpopCount)(c)
}

func (c ZmpopWhereMin) Build() Completed {
	return Completed(c)
}

func (c SZmpopWhereMin) Build() SCompleted {
	return SCompleted(c)
}

type Zmscore Completed

type SZmscore SCompleted

func (b *Builder) Zmscore() (c Zmscore) {
	c = Zmscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZMSCORE")
	return c
}

func (b *SBuilder) Zmscore() (c SZmscore) {
	c = SZmscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZMSCORE")
	return c
}

func (c Zmscore) Key(key string) ZmscoreKey {
	c.cs.s = append(c.cs.s, key)
	return (ZmscoreKey)(c)
}

func (c SZmscore) Key(key string) SZmscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZmscoreKey)(c)
}

type ZmscoreKey Completed

type SZmscoreKey SCompleted

func (c ZmscoreKey) Member(member ...string) ZmscoreMember {
	c.cs.s = append(c.cs.s, member...)
	return (ZmscoreMember)(c)
}

func (c SZmscoreKey) Member(member ...string) SZmscoreMember {
	c.cs.s = append(c.cs.s, member...)
	return (SZmscoreMember)(c)
}

type ZmscoreMember Completed

type SZmscoreMember SCompleted

func (c ZmscoreMember) Member(member ...string) ZmscoreMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SZmscoreMember) Member(member ...string) SZmscoreMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c ZmscoreMember) Build() Completed {
	return Completed(c)
}

func (c SZmscoreMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZmscoreMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZmscoreMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zpopmax Completed

type SZpopmax SCompleted

func (b *Builder) Zpopmax() (c Zpopmax) {
	c = Zpopmax{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZPOPMAX")
	return c
}

func (b *SBuilder) Zpopmax() (c SZpopmax) {
	c = SZpopmax{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZPOPMAX")
	return c
}

func (c Zpopmax) Key(key string) ZpopmaxKey {
	c.cs.s = append(c.cs.s, key)
	return (ZpopmaxKey)(c)
}

func (c SZpopmax) Key(key string) SZpopmaxKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZpopmaxKey)(c)
}

type ZpopmaxCount Completed

type SZpopmaxCount SCompleted

func (c ZpopmaxCount) Build() Completed {
	return Completed(c)
}

func (c SZpopmaxCount) Build() SCompleted {
	return SCompleted(c)
}

type ZpopmaxKey Completed

type SZpopmaxKey SCompleted

func (c ZpopmaxKey) Count(count int64) ZpopmaxCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (ZpopmaxCount)(c)
}

func (c SZpopmaxKey) Count(count int64) SZpopmaxCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SZpopmaxCount)(c)
}

func (c ZpopmaxKey) Build() Completed {
	return Completed(c)
}

func (c SZpopmaxKey) Build() SCompleted {
	return SCompleted(c)
}

type Zpopmin Completed

type SZpopmin SCompleted

func (b *Builder) Zpopmin() (c Zpopmin) {
	c = Zpopmin{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZPOPMIN")
	return c
}

func (b *SBuilder) Zpopmin() (c SZpopmin) {
	c = SZpopmin{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZPOPMIN")
	return c
}

func (c Zpopmin) Key(key string) ZpopminKey {
	c.cs.s = append(c.cs.s, key)
	return (ZpopminKey)(c)
}

func (c SZpopmin) Key(key string) SZpopminKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZpopminKey)(c)
}

type ZpopminCount Completed

type SZpopminCount SCompleted

func (c ZpopminCount) Build() Completed {
	return Completed(c)
}

func (c SZpopminCount) Build() SCompleted {
	return SCompleted(c)
}

type ZpopminKey Completed

type SZpopminKey SCompleted

func (c ZpopminKey) Count(count int64) ZpopminCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (ZpopminCount)(c)
}

func (c SZpopminKey) Count(count int64) SZpopminCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SZpopminCount)(c)
}

func (c ZpopminKey) Build() Completed {
	return Completed(c)
}

func (c SZpopminKey) Build() SCompleted {
	return SCompleted(c)
}

type Zrandmember Completed

type SZrandmember SCompleted

func (b *Builder) Zrandmember() (c Zrandmember) {
	c = Zrandmember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANDMEMBER")
	return c
}

func (b *SBuilder) Zrandmember() (c SZrandmember) {
	c = SZrandmember{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANDMEMBER")
	return c
}

func (c Zrandmember) Key(key string) ZrandmemberKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrandmemberKey)(c)
}

func (c SZrandmember) Key(key string) SZrandmemberKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrandmemberKey)(c)
}

type ZrandmemberKey Completed

type SZrandmemberKey SCompleted

func (c ZrandmemberKey) Count(count int64) ZrandmemberOptionsCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (ZrandmemberOptionsCount)(c)
}

func (c SZrandmemberKey) Count(count int64) SZrandmemberOptionsCount {
	c.cs.s = append(c.cs.s, strconv.FormatInt(count, 10))
	return (SZrandmemberOptionsCount)(c)
}

func (c ZrandmemberKey) Build() Completed {
	return Completed(c)
}

func (c SZrandmemberKey) Build() SCompleted {
	return SCompleted(c)
}

type ZrandmemberOptionsCount Completed

type SZrandmemberOptionsCount SCompleted

func (c ZrandmemberOptionsCount) Withscores() ZrandmemberOptionsWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrandmemberOptionsWithscores)(c)
}

func (c SZrandmemberOptionsCount) Withscores() SZrandmemberOptionsWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrandmemberOptionsWithscores)(c)
}

func (c ZrandmemberOptionsCount) Build() Completed {
	return Completed(c)
}

func (c SZrandmemberOptionsCount) Build() SCompleted {
	return SCompleted(c)
}

type ZrandmemberOptionsWithscores Completed

type SZrandmemberOptionsWithscores SCompleted

func (c ZrandmemberOptionsWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrandmemberOptionsWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zrange Completed

type SZrange SCompleted

func (b *Builder) Zrange() (c Zrange) {
	c = Zrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANGE")
	return c
}

func (b *SBuilder) Zrange() (c SZrange) {
	c = SZrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANGE")
	return c
}

func (c Zrange) Key(key string) ZrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrangeKey)(c)
}

func (c SZrange) Key(key string) SZrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrangeKey)(c)
}

type ZrangeKey Completed

type SZrangeKey SCompleted

func (c ZrangeKey) Min(min string) ZrangeMin {
	c.cs.s = append(c.cs.s, min)
	return (ZrangeMin)(c)
}

func (c SZrangeKey) Min(min string) SZrangeMin {
	c.cs.s = append(c.cs.s, min)
	return (SZrangeMin)(c)
}

type ZrangeLimit Completed

type SZrangeLimit SCompleted

func (c ZrangeLimit) Withscores() ZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeLimit) Withscores() SZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangeLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeMax Completed

type SZrangeMax SCompleted

func (c ZrangeMax) Byscore() ZrangeSortbyByscore {
	c.cs.s = append(c.cs.s, "BYSCORE")
	return (ZrangeSortbyByscore)(c)
}

func (c SZrangeMax) Byscore() SZrangeSortbyByscore {
	c.cs.s = append(c.cs.s, "BYSCORE")
	return (SZrangeSortbyByscore)(c)
}

func (c ZrangeMax) Bylex() ZrangeSortbyBylex {
	c.cs.s = append(c.cs.s, "BYLEX")
	return (ZrangeSortbyBylex)(c)
}

func (c SZrangeMax) Bylex() SZrangeSortbyBylex {
	c.cs.s = append(c.cs.s, "BYLEX")
	return (SZrangeSortbyBylex)(c)
}

func (c ZrangeMax) Rev() ZrangeRev {
	c.cs.s = append(c.cs.s, "REV")
	return (ZrangeRev)(c)
}

func (c SZrangeMax) Rev() SZrangeRev {
	c.cs.s = append(c.cs.s, "REV")
	return (SZrangeRev)(c)
}

func (c ZrangeMax) Limit(offset int64, count int64) ZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeMax) Limit(offset int64, count int64) SZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeMax) Withscores() ZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeMax) Withscores() SZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeMax) Build() Completed {
	return Completed(c)
}

func (c SZrangeMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeMin Completed

type SZrangeMin SCompleted

func (c ZrangeMin) Max(max string) ZrangeMax {
	c.cs.s = append(c.cs.s, max)
	return (ZrangeMax)(c)
}

func (c SZrangeMin) Max(max string) SZrangeMax {
	c.cs.s = append(c.cs.s, max)
	return (SZrangeMax)(c)
}

type ZrangeRev Completed

type SZrangeRev SCompleted

func (c ZrangeRev) Limit(offset int64, count int64) ZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeRev) Limit(offset int64, count int64) SZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeRev) Withscores() ZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeRev) Withscores() SZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeRev) Build() Completed {
	return Completed(c)
}

func (c SZrangeRev) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeRev) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeRev) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeSortbyBylex Completed

type SZrangeSortbyBylex SCompleted

func (c ZrangeSortbyBylex) Rev() ZrangeRev {
	c.cs.s = append(c.cs.s, "REV")
	return (ZrangeRev)(c)
}

func (c SZrangeSortbyBylex) Rev() SZrangeRev {
	c.cs.s = append(c.cs.s, "REV")
	return (SZrangeRev)(c)
}

func (c ZrangeSortbyBylex) Limit(offset int64, count int64) ZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeSortbyBylex) Limit(offset int64, count int64) SZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeSortbyBylex) Withscores() ZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeSortbyBylex) Withscores() SZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeSortbyBylex) Build() Completed {
	return Completed(c)
}

func (c SZrangeSortbyBylex) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeSortbyBylex) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeSortbyBylex) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeSortbyByscore Completed

type SZrangeSortbyByscore SCompleted

func (c ZrangeSortbyByscore) Rev() ZrangeRev {
	c.cs.s = append(c.cs.s, "REV")
	return (ZrangeRev)(c)
}

func (c SZrangeSortbyByscore) Rev() SZrangeRev {
	c.cs.s = append(c.cs.s, "REV")
	return (SZrangeRev)(c)
}

func (c ZrangeSortbyByscore) Limit(offset int64, count int64) ZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangeLimit)(c)
}

func (c SZrangeSortbyByscore) Limit(offset int64, count int64) SZrangeLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangeLimit)(c)
}

func (c ZrangeSortbyByscore) Withscores() ZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrangeWithscores)(c)
}

func (c SZrangeSortbyByscore) Withscores() SZrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrangeWithscores)(c)
}

func (c ZrangeSortbyByscore) Build() Completed {
	return Completed(c)
}

func (c SZrangeSortbyByscore) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeSortbyByscore) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeSortbyByscore) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangeWithscores Completed

type SZrangeWithscores SCompleted

func (c ZrangeWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrangeWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangeWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangeWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrangebylex Completed

type SZrangebylex SCompleted

func (b *Builder) Zrangebylex() (c Zrangebylex) {
	c = Zrangebylex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANGEBYLEX")
	return c
}

func (b *SBuilder) Zrangebylex() (c SZrangebylex) {
	c = SZrangebylex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANGEBYLEX")
	return c
}

func (c Zrangebylex) Key(key string) ZrangebylexKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrangebylexKey)(c)
}

func (c SZrangebylex) Key(key string) SZrangebylexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrangebylexKey)(c)
}

type ZrangebylexKey Completed

type SZrangebylexKey SCompleted

func (c ZrangebylexKey) Min(min string) ZrangebylexMin {
	c.cs.s = append(c.cs.s, min)
	return (ZrangebylexMin)(c)
}

func (c SZrangebylexKey) Min(min string) SZrangebylexMin {
	c.cs.s = append(c.cs.s, min)
	return (SZrangebylexMin)(c)
}

type ZrangebylexLimit Completed

type SZrangebylexLimit SCompleted

func (c ZrangebylexLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangebylexLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebylexLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebylexLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebylexMax Completed

type SZrangebylexMax SCompleted

func (c ZrangebylexMax) Limit(offset int64, count int64) ZrangebylexLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangebylexLimit)(c)
}

func (c SZrangebylexMax) Limit(offset int64, count int64) SZrangebylexLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangebylexLimit)(c)
}

func (c ZrangebylexMax) Build() Completed {
	return Completed(c)
}

func (c SZrangebylexMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebylexMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebylexMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebylexMin Completed

type SZrangebylexMin SCompleted

func (c ZrangebylexMin) Max(max string) ZrangebylexMax {
	c.cs.s = append(c.cs.s, max)
	return (ZrangebylexMax)(c)
}

func (c SZrangebylexMin) Max(max string) SZrangebylexMax {
	c.cs.s = append(c.cs.s, max)
	return (SZrangebylexMax)(c)
}

type Zrangebyscore Completed

type SZrangebyscore SCompleted

func (b *Builder) Zrangebyscore() (c Zrangebyscore) {
	c = Zrangebyscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANGEBYSCORE")
	return c
}

func (b *SBuilder) Zrangebyscore() (c SZrangebyscore) {
	c = SZrangebyscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANGEBYSCORE")
	return c
}

func (c Zrangebyscore) Key(key string) ZrangebyscoreKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrangebyscoreKey)(c)
}

func (c SZrangebyscore) Key(key string) SZrangebyscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrangebyscoreKey)(c)
}

type ZrangebyscoreKey Completed

type SZrangebyscoreKey SCompleted

func (c ZrangebyscoreKey) Min(min float64) ZrangebyscoreMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZrangebyscoreMin)(c)
}

func (c SZrangebyscoreKey) Min(min float64) SZrangebyscoreMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZrangebyscoreMin)(c)
}

type ZrangebyscoreLimit Completed

type SZrangebyscoreLimit SCompleted

func (c ZrangebyscoreLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangebyscoreLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebyscoreLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebyscoreLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebyscoreMax Completed

type SZrangebyscoreMax SCompleted

func (c ZrangebyscoreMax) Withscores() ZrangebyscoreWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrangebyscoreWithscores)(c)
}

func (c SZrangebyscoreMax) Withscores() SZrangebyscoreWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrangebyscoreWithscores)(c)
}

func (c ZrangebyscoreMax) Limit(offset int64, count int64) ZrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangebyscoreLimit)(c)
}

func (c SZrangebyscoreMax) Limit(offset int64, count int64) SZrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangebyscoreLimit)(c)
}

func (c ZrangebyscoreMax) Build() Completed {
	return Completed(c)
}

func (c SZrangebyscoreMax) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebyscoreMax) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebyscoreMax) Cache() SCacheable {
	return SCacheable(c)
}

type ZrangebyscoreMin Completed

type SZrangebyscoreMin SCompleted

func (c ZrangebyscoreMin) Max(max float64) ZrangebyscoreMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZrangebyscoreMax)(c)
}

func (c SZrangebyscoreMin) Max(max float64) SZrangebyscoreMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZrangebyscoreMax)(c)
}

type ZrangebyscoreWithscores Completed

type SZrangebyscoreWithscores SCompleted

func (c ZrangebyscoreWithscores) Limit(offset int64, count int64) ZrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangebyscoreLimit)(c)
}

func (c SZrangebyscoreWithscores) Limit(offset int64, count int64) SZrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangebyscoreLimit)(c)
}

func (c ZrangebyscoreWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrangebyscoreWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrangebyscoreWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrangebyscoreWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrangestore Completed

type SZrangestore SCompleted

func (b *Builder) Zrangestore() (c Zrangestore) {
	c = Zrangestore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZRANGESTORE")
	return c
}

func (b *SBuilder) Zrangestore() (c SZrangestore) {
	c = SZrangestore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZRANGESTORE")
	return c
}

func (c Zrangestore) Dst(dst string) ZrangestoreDst {
	c.cs.s = append(c.cs.s, dst)
	return (ZrangestoreDst)(c)
}

func (c SZrangestore) Dst(dst string) SZrangestoreDst {
	c.ks = checkSlot(c.ks, slot(dst))
	c.cs.s = append(c.cs.s, dst)
	return (SZrangestoreDst)(c)
}

type ZrangestoreDst Completed

type SZrangestoreDst SCompleted

func (c ZrangestoreDst) Src(src string) ZrangestoreSrc {
	c.cs.s = append(c.cs.s, src)
	return (ZrangestoreSrc)(c)
}

func (c SZrangestoreDst) Src(src string) SZrangestoreSrc {
	c.ks = checkSlot(c.ks, slot(src))
	c.cs.s = append(c.cs.s, src)
	return (SZrangestoreSrc)(c)
}

type ZrangestoreLimit Completed

type SZrangestoreLimit SCompleted

func (c ZrangestoreLimit) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreLimit) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreMax Completed

type SZrangestoreMax SCompleted

func (c ZrangestoreMax) Byscore() ZrangestoreSortbyByscore {
	c.cs.s = append(c.cs.s, "BYSCORE")
	return (ZrangestoreSortbyByscore)(c)
}

func (c SZrangestoreMax) Byscore() SZrangestoreSortbyByscore {
	c.cs.s = append(c.cs.s, "BYSCORE")
	return (SZrangestoreSortbyByscore)(c)
}

func (c ZrangestoreMax) Bylex() ZrangestoreSortbyBylex {
	c.cs.s = append(c.cs.s, "BYLEX")
	return (ZrangestoreSortbyBylex)(c)
}

func (c SZrangestoreMax) Bylex() SZrangestoreSortbyBylex {
	c.cs.s = append(c.cs.s, "BYLEX")
	return (SZrangestoreSortbyBylex)(c)
}

func (c ZrangestoreMax) Rev() ZrangestoreRev {
	c.cs.s = append(c.cs.s, "REV")
	return (ZrangestoreRev)(c)
}

func (c SZrangestoreMax) Rev() SZrangestoreRev {
	c.cs.s = append(c.cs.s, "REV")
	return (SZrangestoreRev)(c)
}

func (c ZrangestoreMax) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreMax) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreMax) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreMax) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreMin Completed

type SZrangestoreMin SCompleted

func (c ZrangestoreMin) Max(max string) ZrangestoreMax {
	c.cs.s = append(c.cs.s, max)
	return (ZrangestoreMax)(c)
}

func (c SZrangestoreMin) Max(max string) SZrangestoreMax {
	c.cs.s = append(c.cs.s, max)
	return (SZrangestoreMax)(c)
}

type ZrangestoreRev Completed

type SZrangestoreRev SCompleted

func (c ZrangestoreRev) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreRev) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreRev) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreRev) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreSortbyBylex Completed

type SZrangestoreSortbyBylex SCompleted

func (c ZrangestoreSortbyBylex) Rev() ZrangestoreRev {
	c.cs.s = append(c.cs.s, "REV")
	return (ZrangestoreRev)(c)
}

func (c SZrangestoreSortbyBylex) Rev() SZrangestoreRev {
	c.cs.s = append(c.cs.s, "REV")
	return (SZrangestoreRev)(c)
}

func (c ZrangestoreSortbyBylex) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreSortbyBylex) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreSortbyBylex) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreSortbyBylex) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreSortbyByscore Completed

type SZrangestoreSortbyByscore SCompleted

func (c ZrangestoreSortbyByscore) Rev() ZrangestoreRev {
	c.cs.s = append(c.cs.s, "REV")
	return (ZrangestoreRev)(c)
}

func (c SZrangestoreSortbyByscore) Rev() SZrangestoreRev {
	c.cs.s = append(c.cs.s, "REV")
	return (SZrangestoreRev)(c)
}

func (c ZrangestoreSortbyByscore) Limit(offset int64, count int64) ZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrangestoreLimit)(c)
}

func (c SZrangestoreSortbyByscore) Limit(offset int64, count int64) SZrangestoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrangestoreLimit)(c)
}

func (c ZrangestoreSortbyByscore) Build() Completed {
	return Completed(c)
}

func (c SZrangestoreSortbyByscore) Build() SCompleted {
	return SCompleted(c)
}

type ZrangestoreSrc Completed

type SZrangestoreSrc SCompleted

func (c ZrangestoreSrc) Min(min string) ZrangestoreMin {
	c.cs.s = append(c.cs.s, min)
	return (ZrangestoreMin)(c)
}

func (c SZrangestoreSrc) Min(min string) SZrangestoreMin {
	c.cs.s = append(c.cs.s, min)
	return (SZrangestoreMin)(c)
}

type Zrank Completed

type SZrank SCompleted

func (b *Builder) Zrank() (c Zrank) {
	c = Zrank{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANK")
	return c
}

func (b *SBuilder) Zrank() (c SZrank) {
	c = SZrank{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZRANK")
	return c
}

func (c Zrank) Key(key string) ZrankKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrankKey)(c)
}

func (c SZrank) Key(key string) SZrankKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrankKey)(c)
}

type ZrankKey Completed

type SZrankKey SCompleted

func (c ZrankKey) Member(member string) ZrankMember {
	c.cs.s = append(c.cs.s, member)
	return (ZrankMember)(c)
}

func (c SZrankKey) Member(member string) SZrankMember {
	c.cs.s = append(c.cs.s, member)
	return (SZrankMember)(c)
}

type ZrankMember Completed

type SZrankMember SCompleted

func (c ZrankMember) Build() Completed {
	return Completed(c)
}

func (c SZrankMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrankMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrankMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zrem Completed

type SZrem SCompleted

func (b *Builder) Zrem() (c Zrem) {
	c = Zrem{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREM")
	return c
}

func (b *SBuilder) Zrem() (c SZrem) {
	c = SZrem{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREM")
	return c
}

func (c Zrem) Key(key string) ZremKey {
	c.cs.s = append(c.cs.s, key)
	return (ZremKey)(c)
}

func (c SZrem) Key(key string) SZremKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZremKey)(c)
}

type ZremKey Completed

type SZremKey SCompleted

func (c ZremKey) Member(member ...string) ZremMember {
	c.cs.s = append(c.cs.s, member...)
	return (ZremMember)(c)
}

func (c SZremKey) Member(member ...string) SZremMember {
	c.cs.s = append(c.cs.s, member...)
	return (SZremMember)(c)
}

type ZremMember Completed

type SZremMember SCompleted

func (c ZremMember) Member(member ...string) ZremMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c SZremMember) Member(member ...string) SZremMember {
	c.cs.s = append(c.cs.s, member...)
	return c
}

func (c ZremMember) Build() Completed {
	return Completed(c)
}

func (c SZremMember) Build() SCompleted {
	return SCompleted(c)
}

type Zremrangebylex Completed

type SZremrangebylex SCompleted

func (b *Builder) Zremrangebylex() (c Zremrangebylex) {
	c = Zremrangebylex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREMRANGEBYLEX")
	return c
}

func (b *SBuilder) Zremrangebylex() (c SZremrangebylex) {
	c = SZremrangebylex{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREMRANGEBYLEX")
	return c
}

func (c Zremrangebylex) Key(key string) ZremrangebylexKey {
	c.cs.s = append(c.cs.s, key)
	return (ZremrangebylexKey)(c)
}

func (c SZremrangebylex) Key(key string) SZremrangebylexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZremrangebylexKey)(c)
}

type ZremrangebylexKey Completed

type SZremrangebylexKey SCompleted

func (c ZremrangebylexKey) Min(min string) ZremrangebylexMin {
	c.cs.s = append(c.cs.s, min)
	return (ZremrangebylexMin)(c)
}

func (c SZremrangebylexKey) Min(min string) SZremrangebylexMin {
	c.cs.s = append(c.cs.s, min)
	return (SZremrangebylexMin)(c)
}

type ZremrangebylexMax Completed

type SZremrangebylexMax SCompleted

func (c ZremrangebylexMax) Build() Completed {
	return Completed(c)
}

func (c SZremrangebylexMax) Build() SCompleted {
	return SCompleted(c)
}

type ZremrangebylexMin Completed

type SZremrangebylexMin SCompleted

func (c ZremrangebylexMin) Max(max string) ZremrangebylexMax {
	c.cs.s = append(c.cs.s, max)
	return (ZremrangebylexMax)(c)
}

func (c SZremrangebylexMin) Max(max string) SZremrangebylexMax {
	c.cs.s = append(c.cs.s, max)
	return (SZremrangebylexMax)(c)
}

type Zremrangebyrank Completed

type SZremrangebyrank SCompleted

func (b *Builder) Zremrangebyrank() (c Zremrangebyrank) {
	c = Zremrangebyrank{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREMRANGEBYRANK")
	return c
}

func (b *SBuilder) Zremrangebyrank() (c SZremrangebyrank) {
	c = SZremrangebyrank{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREMRANGEBYRANK")
	return c
}

func (c Zremrangebyrank) Key(key string) ZremrangebyrankKey {
	c.cs.s = append(c.cs.s, key)
	return (ZremrangebyrankKey)(c)
}

func (c SZremrangebyrank) Key(key string) SZremrangebyrankKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZremrangebyrankKey)(c)
}

type ZremrangebyrankKey Completed

type SZremrangebyrankKey SCompleted

func (c ZremrangebyrankKey) Start(start int64) ZremrangebyrankStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (ZremrangebyrankStart)(c)
}

func (c SZremrangebyrankKey) Start(start int64) SZremrangebyrankStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SZremrangebyrankStart)(c)
}

type ZremrangebyrankStart Completed

type SZremrangebyrankStart SCompleted

func (c ZremrangebyrankStart) Stop(stop int64) ZremrangebyrankStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (ZremrangebyrankStop)(c)
}

func (c SZremrangebyrankStart) Stop(stop int64) SZremrangebyrankStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (SZremrangebyrankStop)(c)
}

type ZremrangebyrankStop Completed

type SZremrangebyrankStop SCompleted

func (c ZremrangebyrankStop) Build() Completed {
	return Completed(c)
}

func (c SZremrangebyrankStop) Build() SCompleted {
	return SCompleted(c)
}

type Zremrangebyscore Completed

type SZremrangebyscore SCompleted

func (b *Builder) Zremrangebyscore() (c Zremrangebyscore) {
	c = Zremrangebyscore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREMRANGEBYSCORE")
	return c
}

func (b *SBuilder) Zremrangebyscore() (c SZremrangebyscore) {
	c = SZremrangebyscore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZREMRANGEBYSCORE")
	return c
}

func (c Zremrangebyscore) Key(key string) ZremrangebyscoreKey {
	c.cs.s = append(c.cs.s, key)
	return (ZremrangebyscoreKey)(c)
}

func (c SZremrangebyscore) Key(key string) SZremrangebyscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZremrangebyscoreKey)(c)
}

type ZremrangebyscoreKey Completed

type SZremrangebyscoreKey SCompleted

func (c ZremrangebyscoreKey) Min(min float64) ZremrangebyscoreMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZremrangebyscoreMin)(c)
}

func (c SZremrangebyscoreKey) Min(min float64) SZremrangebyscoreMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZremrangebyscoreMin)(c)
}

type ZremrangebyscoreMax Completed

type SZremrangebyscoreMax SCompleted

func (c ZremrangebyscoreMax) Build() Completed {
	return Completed(c)
}

func (c SZremrangebyscoreMax) Build() SCompleted {
	return SCompleted(c)
}

type ZremrangebyscoreMin Completed

type SZremrangebyscoreMin SCompleted

func (c ZremrangebyscoreMin) Max(max float64) ZremrangebyscoreMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZremrangebyscoreMax)(c)
}

func (c SZremrangebyscoreMin) Max(max float64) SZremrangebyscoreMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZremrangebyscoreMax)(c)
}

type Zrevrange Completed

type SZrevrange SCompleted

func (b *Builder) Zrevrange() (c Zrevrange) {
	c = Zrevrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANGE")
	return c
}

func (b *SBuilder) Zrevrange() (c SZrevrange) {
	c = SZrevrange{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANGE")
	return c
}

func (c Zrevrange) Key(key string) ZrevrangeKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrevrangeKey)(c)
}

func (c SZrevrange) Key(key string) SZrevrangeKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrevrangeKey)(c)
}

type ZrevrangeKey Completed

type SZrevrangeKey SCompleted

func (c ZrevrangeKey) Start(start int64) ZrevrangeStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (ZrevrangeStart)(c)
}

func (c SZrevrangeKey) Start(start int64) SZrevrangeStart {
	c.cs.s = append(c.cs.s, strconv.FormatInt(start, 10))
	return (SZrevrangeStart)(c)
}

type ZrevrangeStart Completed

type SZrevrangeStart SCompleted

func (c ZrevrangeStart) Stop(stop int64) ZrevrangeStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (ZrevrangeStop)(c)
}

func (c SZrevrangeStart) Stop(stop int64) SZrevrangeStop {
	c.cs.s = append(c.cs.s, strconv.FormatInt(stop, 10))
	return (SZrevrangeStop)(c)
}

type ZrevrangeStop Completed

type SZrevrangeStop SCompleted

func (c ZrevrangeStop) Withscores() ZrevrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrevrangeWithscores)(c)
}

func (c SZrevrangeStop) Withscores() SZrevrangeWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrevrangeWithscores)(c)
}

func (c ZrevrangeStop) Build() Completed {
	return Completed(c)
}

func (c SZrevrangeStop) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangeStop) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangeStop) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangeWithscores Completed

type SZrevrangeWithscores SCompleted

func (c ZrevrangeWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrevrangeWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangeWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangeWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrevrangebylex Completed

type SZrevrangebylex SCompleted

func (b *Builder) Zrevrangebylex() (c Zrevrangebylex) {
	c = Zrevrangebylex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANGEBYLEX")
	return c
}

func (b *SBuilder) Zrevrangebylex() (c SZrevrangebylex) {
	c = SZrevrangebylex{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANGEBYLEX")
	return c
}

func (c Zrevrangebylex) Key(key string) ZrevrangebylexKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrevrangebylexKey)(c)
}

func (c SZrevrangebylex) Key(key string) SZrevrangebylexKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrevrangebylexKey)(c)
}

type ZrevrangebylexKey Completed

type SZrevrangebylexKey SCompleted

func (c ZrevrangebylexKey) Max(max string) ZrevrangebylexMax {
	c.cs.s = append(c.cs.s, max)
	return (ZrevrangebylexMax)(c)
}

func (c SZrevrangebylexKey) Max(max string) SZrevrangebylexMax {
	c.cs.s = append(c.cs.s, max)
	return (SZrevrangebylexMax)(c)
}

type ZrevrangebylexLimit Completed

type SZrevrangebylexLimit SCompleted

func (c ZrevrangebylexLimit) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebylexLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebylexLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebylexLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangebylexMax Completed

type SZrevrangebylexMax SCompleted

func (c ZrevrangebylexMax) Min(min string) ZrevrangebylexMin {
	c.cs.s = append(c.cs.s, min)
	return (ZrevrangebylexMin)(c)
}

func (c SZrevrangebylexMax) Min(min string) SZrevrangebylexMin {
	c.cs.s = append(c.cs.s, min)
	return (SZrevrangebylexMin)(c)
}

type ZrevrangebylexMin Completed

type SZrevrangebylexMin SCompleted

func (c ZrevrangebylexMin) Limit(offset int64, count int64) ZrevrangebylexLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrevrangebylexLimit)(c)
}

func (c SZrevrangebylexMin) Limit(offset int64, count int64) SZrevrangebylexLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrevrangebylexLimit)(c)
}

func (c ZrevrangebylexMin) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebylexMin) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebylexMin) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebylexMin) Cache() SCacheable {
	return SCacheable(c)
}

type Zrevrangebyscore Completed

type SZrevrangebyscore SCompleted

func (b *Builder) Zrevrangebyscore() (c Zrevrangebyscore) {
	c = Zrevrangebyscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANGEBYSCORE")
	return c
}

func (b *SBuilder) Zrevrangebyscore() (c SZrevrangebyscore) {
	c = SZrevrangebyscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANGEBYSCORE")
	return c
}

func (c Zrevrangebyscore) Key(key string) ZrevrangebyscoreKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrevrangebyscoreKey)(c)
}

func (c SZrevrangebyscore) Key(key string) SZrevrangebyscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrevrangebyscoreKey)(c)
}

type ZrevrangebyscoreKey Completed

type SZrevrangebyscoreKey SCompleted

func (c ZrevrangebyscoreKey) Max(max float64) ZrevrangebyscoreMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (ZrevrangebyscoreMax)(c)
}

func (c SZrevrangebyscoreKey) Max(max float64) SZrevrangebyscoreMax {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(max, 'f', -1, 64))
	return (SZrevrangebyscoreMax)(c)
}

type ZrevrangebyscoreLimit Completed

type SZrevrangebyscoreLimit SCompleted

func (c ZrevrangebyscoreLimit) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebyscoreLimit) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebyscoreLimit) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebyscoreLimit) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangebyscoreMax Completed

type SZrevrangebyscoreMax SCompleted

func (c ZrevrangebyscoreMax) Min(min float64) ZrevrangebyscoreMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (ZrevrangebyscoreMin)(c)
}

func (c SZrevrangebyscoreMax) Min(min float64) SZrevrangebyscoreMin {
	c.cs.s = append(c.cs.s, strconv.FormatFloat(min, 'f', -1, 64))
	return (SZrevrangebyscoreMin)(c)
}

type ZrevrangebyscoreMin Completed

type SZrevrangebyscoreMin SCompleted

func (c ZrevrangebyscoreMin) Withscores() ZrevrangebyscoreWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZrevrangebyscoreWithscores)(c)
}

func (c SZrevrangebyscoreMin) Withscores() SZrevrangebyscoreWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZrevrangebyscoreWithscores)(c)
}

func (c ZrevrangebyscoreMin) Limit(offset int64, count int64) ZrevrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrevrangebyscoreLimit)(c)
}

func (c SZrevrangebyscoreMin) Limit(offset int64, count int64) SZrevrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrevrangebyscoreLimit)(c)
}

func (c ZrevrangebyscoreMin) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebyscoreMin) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebyscoreMin) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebyscoreMin) Cache() SCacheable {
	return SCacheable(c)
}

type ZrevrangebyscoreWithscores Completed

type SZrevrangebyscoreWithscores SCompleted

func (c ZrevrangebyscoreWithscores) Limit(offset int64, count int64) ZrevrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (ZrevrangebyscoreLimit)(c)
}

func (c SZrevrangebyscoreWithscores) Limit(offset int64, count int64) SZrevrangebyscoreLimit {
	c.cs.s = append(c.cs.s, "LIMIT", strconv.FormatInt(offset, 10), strconv.FormatInt(count, 10))
	return (SZrevrangebyscoreLimit)(c)
}

func (c ZrevrangebyscoreWithscores) Build() Completed {
	return Completed(c)
}

func (c SZrevrangebyscoreWithscores) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrangebyscoreWithscores) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrangebyscoreWithscores) Cache() SCacheable {
	return SCacheable(c)
}

type Zrevrank Completed

type SZrevrank SCompleted

func (b *Builder) Zrevrank() (c Zrevrank) {
	c = Zrevrank{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANK")
	return c
}

func (b *SBuilder) Zrevrank() (c SZrevrank) {
	c = SZrevrank{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZREVRANK")
	return c
}

func (c Zrevrank) Key(key string) ZrevrankKey {
	c.cs.s = append(c.cs.s, key)
	return (ZrevrankKey)(c)
}

func (c SZrevrank) Key(key string) SZrevrankKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZrevrankKey)(c)
}

type ZrevrankKey Completed

type SZrevrankKey SCompleted

func (c ZrevrankKey) Member(member string) ZrevrankMember {
	c.cs.s = append(c.cs.s, member)
	return (ZrevrankMember)(c)
}

func (c SZrevrankKey) Member(member string) SZrevrankMember {
	c.cs.s = append(c.cs.s, member)
	return (SZrevrankMember)(c)
}

type ZrevrankMember Completed

type SZrevrankMember SCompleted

func (c ZrevrankMember) Build() Completed {
	return Completed(c)
}

func (c SZrevrankMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZrevrankMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZrevrankMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zscan Completed

type SZscan SCompleted

func (b *Builder) Zscan() (c Zscan) {
	c = Zscan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZSCAN")
	return c
}

func (b *SBuilder) Zscan() (c SZscan) {
	c = SZscan{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZSCAN")
	return c
}

func (c Zscan) Key(key string) ZscanKey {
	c.cs.s = append(c.cs.s, key)
	return (ZscanKey)(c)
}

func (c SZscan) Key(key string) SZscanKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZscanKey)(c)
}

type ZscanCount Completed

type SZscanCount SCompleted

func (c ZscanCount) Build() Completed {
	return Completed(c)
}

func (c SZscanCount) Build() SCompleted {
	return SCompleted(c)
}

type ZscanCursor Completed

type SZscanCursor SCompleted

func (c ZscanCursor) Match(pattern string) ZscanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (ZscanMatch)(c)
}

func (c SZscanCursor) Match(pattern string) SZscanMatch {
	c.cs.s = append(c.cs.s, "MATCH", pattern)
	return (SZscanMatch)(c)
}

func (c ZscanCursor) Count(count int64) ZscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (ZscanCount)(c)
}

func (c SZscanCursor) Count(count int64) SZscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SZscanCount)(c)
}

func (c ZscanCursor) Build() Completed {
	return Completed(c)
}

func (c SZscanCursor) Build() SCompleted {
	return SCompleted(c)
}

type ZscanKey Completed

type SZscanKey SCompleted

func (c ZscanKey) Cursor(cursor int64) ZscanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (ZscanCursor)(c)
}

func (c SZscanKey) Cursor(cursor int64) SZscanCursor {
	c.cs.s = append(c.cs.s, strconv.FormatInt(cursor, 10))
	return (SZscanCursor)(c)
}

type ZscanMatch Completed

type SZscanMatch SCompleted

func (c ZscanMatch) Count(count int64) ZscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (ZscanCount)(c)
}

func (c SZscanMatch) Count(count int64) SZscanCount {
	c.cs.s = append(c.cs.s, "COUNT", strconv.FormatInt(count, 10))
	return (SZscanCount)(c)
}

func (c ZscanMatch) Build() Completed {
	return Completed(c)
}

func (c SZscanMatch) Build() SCompleted {
	return SCompleted(c)
}

type Zscore Completed

type SZscore SCompleted

func (b *Builder) Zscore() (c Zscore) {
	c = Zscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZSCORE")
	return c
}

func (b *SBuilder) Zscore() (c SZscore) {
	c = SZscore{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZSCORE")
	return c
}

func (c Zscore) Key(key string) ZscoreKey {
	c.cs.s = append(c.cs.s, key)
	return (ZscoreKey)(c)
}

func (c SZscore) Key(key string) SZscoreKey {
	c.ks = checkSlot(c.ks, slot(key))
	c.cs.s = append(c.cs.s, key)
	return (SZscoreKey)(c)
}

type ZscoreKey Completed

type SZscoreKey SCompleted

func (c ZscoreKey) Member(member string) ZscoreMember {
	c.cs.s = append(c.cs.s, member)
	return (ZscoreMember)(c)
}

func (c SZscoreKey) Member(member string) SZscoreMember {
	c.cs.s = append(c.cs.s, member)
	return (SZscoreMember)(c)
}

type ZscoreMember Completed

type SZscoreMember SCompleted

func (c ZscoreMember) Build() Completed {
	return Completed(c)
}

func (c SZscoreMember) Build() SCompleted {
	return SCompleted(c)
}

func (c ZscoreMember) Cache() Cacheable {
	return Cacheable(c)
}

func (c SZscoreMember) Cache() SCacheable {
	return SCacheable(c)
}

type Zunion Completed

type SZunion SCompleted

func (b *Builder) Zunion() (c Zunion) {
	c = Zunion{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZUNION")
	return c
}

func (b *SBuilder) Zunion() (c SZunion) {
	c = SZunion{cs: b.get(), ks: InitSlot, cf: readonly}
	c.cs.s = append(c.cs.s, "ZUNION")
	return c
}

func (c Zunion) Numkeys(numkeys int64) ZunionNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZunionNumkeys)(c)
}

func (c SZunion) Numkeys(numkeys int64) SZunionNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZunionNumkeys)(c)
}

type ZunionAggregateMax Completed

type SZunionAggregateMax SCompleted

func (c ZunionAggregateMax) Withscores() ZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionAggregateMax) Withscores() SZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZunionAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZunionAggregateMin Completed

type SZunionAggregateMin SCompleted

func (c ZunionAggregateMin) Withscores() ZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionAggregateMin) Withscores() SZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZunionAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZunionAggregateSum Completed

type SZunionAggregateSum SCompleted

func (c ZunionAggregateSum) Withscores() ZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionAggregateSum) Withscores() SZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZunionAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZunionKey Completed

type SZunionKey SCompleted

func (c ZunionKey) Key(key ...string) ZunionKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZunionKey) Key(key ...string) SZunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZunionKey) Weights(weight ...int64) ZunionWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ZunionWeights)(c)
}

func (c SZunionKey) Weights(weight ...int64) SZunionWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SZunionWeights)(c)
}

func (c ZunionKey) AggregateSum() ZunionAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZunionAggregateSum)(c)
}

func (c SZunionKey) AggregateSum() SZunionAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZunionAggregateSum)(c)
}

func (c ZunionKey) AggregateMin() ZunionAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZunionAggregateMin)(c)
}

func (c SZunionKey) AggregateMin() SZunionAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZunionAggregateMin)(c)
}

func (c ZunionKey) AggregateMax() ZunionAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZunionAggregateMax)(c)
}

func (c SZunionKey) AggregateMax() SZunionAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZunionAggregateMax)(c)
}

func (c ZunionKey) Withscores() ZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionKey) Withscores() SZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionKey) Build() Completed {
	return Completed(c)
}

func (c SZunionKey) Build() SCompleted {
	return SCompleted(c)
}

type ZunionNumkeys Completed

type SZunionNumkeys SCompleted

func (c ZunionNumkeys) Key(key ...string) ZunionKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZunionKey)(c)
}

func (c SZunionNumkeys) Key(key ...string) SZunionKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZunionKey)(c)
}

type ZunionWeights Completed

type SZunionWeights SCompleted

func (c ZunionWeights) Weights(weight ...int64) ZunionWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZunionWeights) Weights(weight ...int64) SZunionWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZunionWeights) AggregateSum() ZunionAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZunionAggregateSum)(c)
}

func (c SZunionWeights) AggregateSum() SZunionAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZunionAggregateSum)(c)
}

func (c ZunionWeights) AggregateMin() ZunionAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZunionAggregateMin)(c)
}

func (c SZunionWeights) AggregateMin() SZunionAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZunionAggregateMin)(c)
}

func (c ZunionWeights) AggregateMax() ZunionAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZunionAggregateMax)(c)
}

func (c SZunionWeights) AggregateMax() SZunionAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZunionAggregateMax)(c)
}

func (c ZunionWeights) Withscores() ZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (ZunionWithscores)(c)
}

func (c SZunionWeights) Withscores() SZunionWithscores {
	c.cs.s = append(c.cs.s, "WITHSCORES")
	return (SZunionWithscores)(c)
}

func (c ZunionWeights) Build() Completed {
	return Completed(c)
}

func (c SZunionWeights) Build() SCompleted {
	return SCompleted(c)
}

type ZunionWithscores Completed

type SZunionWithscores SCompleted

func (c ZunionWithscores) Build() Completed {
	return Completed(c)
}

func (c SZunionWithscores) Build() SCompleted {
	return SCompleted(c)
}

type Zunionstore Completed

type SZunionstore SCompleted

func (b *Builder) Zunionstore() (c Zunionstore) {
	c = Zunionstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZUNIONSTORE")
	return c
}

func (b *SBuilder) Zunionstore() (c SZunionstore) {
	c = SZunionstore{cs: b.get(), ks: InitSlot}
	c.cs.s = append(c.cs.s, "ZUNIONSTORE")
	return c
}

func (c Zunionstore) Destination(destination string) ZunionstoreDestination {
	c.cs.s = append(c.cs.s, destination)
	return (ZunionstoreDestination)(c)
}

func (c SZunionstore) Destination(destination string) SZunionstoreDestination {
	c.ks = checkSlot(c.ks, slot(destination))
	c.cs.s = append(c.cs.s, destination)
	return (SZunionstoreDestination)(c)
}

type ZunionstoreAggregateMax Completed

type SZunionstoreAggregateMax SCompleted

func (c ZunionstoreAggregateMax) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreAggregateMax) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreAggregateMin Completed

type SZunionstoreAggregateMin SCompleted

func (c ZunionstoreAggregateMin) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreAggregateMin) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreAggregateSum Completed

type SZunionstoreAggregateSum SCompleted

func (c ZunionstoreAggregateSum) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreAggregateSum) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreDestination Completed

type SZunionstoreDestination SCompleted

func (c ZunionstoreDestination) Numkeys(numkeys int64) ZunionstoreNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (ZunionstoreNumkeys)(c)
}

func (c SZunionstoreDestination) Numkeys(numkeys int64) SZunionstoreNumkeys {
	c.cs.s = append(c.cs.s, strconv.FormatInt(numkeys, 10))
	return (SZunionstoreNumkeys)(c)
}

type ZunionstoreKey Completed

type SZunionstoreKey SCompleted

func (c ZunionstoreKey) Key(key ...string) ZunionstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c SZunionstoreKey) Key(key ...string) SZunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return c
}

func (c ZunionstoreKey) Weights(weight ...int64) ZunionstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (ZunionstoreWeights)(c)
}

func (c SZunionstoreKey) Weights(weight ...int64) SZunionstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return (SZunionstoreWeights)(c)
}

func (c ZunionstoreKey) AggregateSum() ZunionstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZunionstoreAggregateSum)(c)
}

func (c SZunionstoreKey) AggregateSum() SZunionstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZunionstoreAggregateSum)(c)
}

func (c ZunionstoreKey) AggregateMin() ZunionstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZunionstoreAggregateMin)(c)
}

func (c SZunionstoreKey) AggregateMin() SZunionstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZunionstoreAggregateMin)(c)
}

func (c ZunionstoreKey) AggregateMax() ZunionstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZunionstoreAggregateMax)(c)
}

func (c SZunionstoreKey) AggregateMax() SZunionstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZunionstoreAggregateMax)(c)
}

func (c ZunionstoreKey) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreKey) Build() SCompleted {
	return SCompleted(c)
}

type ZunionstoreNumkeys Completed

type SZunionstoreNumkeys SCompleted

func (c ZunionstoreNumkeys) Key(key ...string) ZunionstoreKey {
	c.cs.s = append(c.cs.s, key...)
	return (ZunionstoreKey)(c)
}

func (c SZunionstoreNumkeys) Key(key ...string) SZunionstoreKey {
	for _, k := range key {
		c.ks = checkSlot(c.ks, slot(k))
	}
	c.cs.s = append(c.cs.s, key...)
	return (SZunionstoreKey)(c)
}

type ZunionstoreWeights Completed

type SZunionstoreWeights SCompleted

func (c ZunionstoreWeights) Weights(weight ...int64) ZunionstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c SZunionstoreWeights) Weights(weight ...int64) SZunionstoreWeights {
	c.cs.s = append(c.cs.s, "WEIGHTS")
	for _, n := range weight {
		c.cs.s = append(c.cs.s, strconv.FormatInt(n, 10))
	}
	return c
}

func (c ZunionstoreWeights) AggregateSum() ZunionstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (ZunionstoreAggregateSum)(c)
}

func (c SZunionstoreWeights) AggregateSum() SZunionstoreAggregateSum {
	c.cs.s = append(c.cs.s, "AGGREGATE", "SUM")
	return (SZunionstoreAggregateSum)(c)
}

func (c ZunionstoreWeights) AggregateMin() ZunionstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (ZunionstoreAggregateMin)(c)
}

func (c SZunionstoreWeights) AggregateMin() SZunionstoreAggregateMin {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MIN")
	return (SZunionstoreAggregateMin)(c)
}

func (c ZunionstoreWeights) AggregateMax() ZunionstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (ZunionstoreAggregateMax)(c)
}

func (c SZunionstoreWeights) AggregateMax() SZunionstoreAggregateMax {
	c.cs.s = append(c.cs.s, "AGGREGATE", "MAX")
	return (SZunionstoreAggregateMax)(c)
}

func (c ZunionstoreWeights) Build() Completed {
	return Completed(c)
}

func (c SZunionstoreWeights) Build() SCompleted {
	return SCompleted(c)
}

